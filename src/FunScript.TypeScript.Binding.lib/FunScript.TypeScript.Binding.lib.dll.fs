
namespace FunScript.TypeScript
type Globals = interface end

namespace FunScript.TypeScript
type AesGcmEncryptResult = interface end

namespace FunScript.TypeScript
type Algorithm = interface end

namespace FunScript.TypeScript
type AlgorithmParameters = interface end

namespace FunScript.TypeScript
type AnonymousType1 = interface end

namespace FunScript.TypeScript
type AnonymousType10 = interface end

namespace FunScript.TypeScript
type AnonymousType100 = interface end

namespace FunScript.TypeScript
type AnonymousType101 = interface end

namespace FunScript.TypeScript
type AnonymousType102 = interface end

namespace FunScript.TypeScript
type AnonymousType103 = interface end

namespace FunScript.TypeScript
type AnonymousType104 = interface end

namespace FunScript.TypeScript
type AnonymousType105 = interface end

namespace FunScript.TypeScript
type AnonymousType106 = interface end

namespace FunScript.TypeScript
type AnonymousType107 = interface end

namespace FunScript.TypeScript
type AnonymousType108 = interface end

namespace FunScript.TypeScript
type AnonymousType109 = interface end

namespace FunScript.TypeScript
type AnonymousType11 = interface end

namespace FunScript.TypeScript
type AnonymousType110 = interface end

namespace FunScript.TypeScript
type AnonymousType111 = interface end

namespace FunScript.TypeScript
type AnonymousType112 = interface end

namespace FunScript.TypeScript
type AnonymousType113 = interface end

namespace FunScript.TypeScript
type AnonymousType114 = interface end

namespace FunScript.TypeScript
type AnonymousType115 = interface end

namespace FunScript.TypeScript
type AnonymousType116 = interface end

namespace FunScript.TypeScript
type AnonymousType117 = interface end

namespace FunScript.TypeScript
type AnonymousType118 = interface end

namespace FunScript.TypeScript
type AnonymousType119 = interface end

namespace FunScript.TypeScript
type AnonymousType12 = interface end

namespace FunScript.TypeScript
type AnonymousType120 = interface end

namespace FunScript.TypeScript
type AnonymousType121 = interface end

namespace FunScript.TypeScript
type AnonymousType122 = interface end

namespace FunScript.TypeScript
type AnonymousType123 = interface end

namespace FunScript.TypeScript
type AnonymousType124 = interface end

namespace FunScript.TypeScript
type AnonymousType125 = interface end

namespace FunScript.TypeScript
type AnonymousType126 = interface end

namespace FunScript.TypeScript
type AnonymousType127 = interface end

namespace FunScript.TypeScript
type AnonymousType128 = interface end

namespace FunScript.TypeScript
type AnonymousType129 = interface end

namespace FunScript.TypeScript
type AnonymousType13 = interface end

namespace FunScript.TypeScript
type AnonymousType130 = interface end

namespace FunScript.TypeScript
type AnonymousType131 = interface end

namespace FunScript.TypeScript
type AnonymousType132 = interface end

namespace FunScript.TypeScript
type AnonymousType133 = interface end

namespace FunScript.TypeScript
type AnonymousType134 = interface end

namespace FunScript.TypeScript
type AnonymousType135 = interface end

namespace FunScript.TypeScript
type AnonymousType136 = interface end

namespace FunScript.TypeScript
type AnonymousType137 = interface end

namespace FunScript.TypeScript
type AnonymousType138 = interface end

namespace FunScript.TypeScript
type AnonymousType139 = interface end

namespace FunScript.TypeScript
type AnonymousType14 = interface end

namespace FunScript.TypeScript
type AnonymousType140 = interface end

namespace FunScript.TypeScript
type AnonymousType141 = interface end

namespace FunScript.TypeScript
type AnonymousType142 = interface end

namespace FunScript.TypeScript
type AnonymousType143 = interface end

namespace FunScript.TypeScript
type AnonymousType144 = interface end

namespace FunScript.TypeScript
type AnonymousType145 = interface end

namespace FunScript.TypeScript
type AnonymousType146 = interface end

namespace FunScript.TypeScript
type AnonymousType147 = interface end

namespace FunScript.TypeScript
type AnonymousType148 = interface end

namespace FunScript.TypeScript
type AnonymousType149 = interface end

namespace FunScript.TypeScript
type AnonymousType15 = interface end

namespace FunScript.TypeScript
type AnonymousType150 = interface end

namespace FunScript.TypeScript
type AnonymousType151 = interface end

namespace FunScript.TypeScript
type AnonymousType152 = interface end

namespace FunScript.TypeScript
type AnonymousType153 = interface end

namespace FunScript.TypeScript
type AnonymousType154 = interface end

namespace FunScript.TypeScript
type AnonymousType155 = interface end

namespace FunScript.TypeScript
type AnonymousType156 = interface end

namespace FunScript.TypeScript
type AnonymousType157 = interface end

namespace FunScript.TypeScript
type AnonymousType158 = interface end

namespace FunScript.TypeScript
type AnonymousType159 = interface end

namespace FunScript.TypeScript
type AnonymousType16 = interface end

namespace FunScript.TypeScript
type AnonymousType160 = interface end

namespace FunScript.TypeScript
type AnonymousType161 = interface end

namespace FunScript.TypeScript
type AnonymousType162 = interface end

namespace FunScript.TypeScript
type AnonymousType163 = interface end

namespace FunScript.TypeScript
type AnonymousType164 = interface end

namespace FunScript.TypeScript
type AnonymousType165 = interface end

namespace FunScript.TypeScript
type AnonymousType166 = interface end

namespace FunScript.TypeScript
type AnonymousType167 = interface end

namespace FunScript.TypeScript
type AnonymousType168 = interface end

namespace FunScript.TypeScript
type AnonymousType169 = interface end

namespace FunScript.TypeScript
type AnonymousType17 = interface end

namespace FunScript.TypeScript
type AnonymousType170 = interface end

namespace FunScript.TypeScript
type AnonymousType171 = interface end

namespace FunScript.TypeScript
type AnonymousType172 = interface end

namespace FunScript.TypeScript
type AnonymousType173 = interface end

namespace FunScript.TypeScript
type AnonymousType174 = interface end

namespace FunScript.TypeScript
type AnonymousType175 = interface end

namespace FunScript.TypeScript
type AnonymousType176 = interface end

namespace FunScript.TypeScript
type AnonymousType177 = interface end

namespace FunScript.TypeScript
type AnonymousType178 = interface end

namespace FunScript.TypeScript
type AnonymousType179 = interface end

namespace FunScript.TypeScript
type AnonymousType18 = interface end

namespace FunScript.TypeScript
type AnonymousType180 = interface end

namespace FunScript.TypeScript
type AnonymousType181 = interface end

namespace FunScript.TypeScript
type AnonymousType182 = interface end

namespace FunScript.TypeScript
type AnonymousType183 = interface end

namespace FunScript.TypeScript
type AnonymousType184 = interface end

namespace FunScript.TypeScript
type AnonymousType185 = interface end

namespace FunScript.TypeScript
type AnonymousType186 = interface end

namespace FunScript.TypeScript
type AnonymousType187 = interface end

namespace FunScript.TypeScript
type AnonymousType188 = interface end

namespace FunScript.TypeScript
type AnonymousType189 = interface end

namespace FunScript.TypeScript
type AnonymousType19 = interface end

namespace FunScript.TypeScript
type AnonymousType190 = interface end

namespace FunScript.TypeScript
type AnonymousType191 = interface end

namespace FunScript.TypeScript
type AnonymousType192 = interface end

namespace FunScript.TypeScript
type AnonymousType193 = interface end

namespace FunScript.TypeScript
type AnonymousType194 = interface end

namespace FunScript.TypeScript
type AnonymousType195 = interface end

namespace FunScript.TypeScript
type AnonymousType196 = interface end

namespace FunScript.TypeScript
type AnonymousType197 = interface end

namespace FunScript.TypeScript
type AnonymousType198 = interface end

namespace FunScript.TypeScript
type AnonymousType199 = interface end

namespace FunScript.TypeScript
type AnonymousType2 = interface end

namespace FunScript.TypeScript
type AnonymousType20 = interface end

namespace FunScript.TypeScript
type AnonymousType200 = interface end

namespace FunScript.TypeScript
type AnonymousType201 = interface end

namespace FunScript.TypeScript
type AnonymousType202 = interface end

namespace FunScript.TypeScript
type AnonymousType203 = interface end

namespace FunScript.TypeScript
type AnonymousType204 = interface end

namespace FunScript.TypeScript
type AnonymousType205 = interface end

namespace FunScript.TypeScript
type AnonymousType206 = interface end

namespace FunScript.TypeScript
type AnonymousType207 = interface end

namespace FunScript.TypeScript
type AnonymousType208 = interface end

namespace FunScript.TypeScript
type AnonymousType209 = interface end

namespace FunScript.TypeScript
type AnonymousType21 = interface end

namespace FunScript.TypeScript
type AnonymousType210 = interface end

namespace FunScript.TypeScript
type AnonymousType211 = interface end

namespace FunScript.TypeScript
type AnonymousType212 = interface end

namespace FunScript.TypeScript
type AnonymousType213 = interface end

namespace FunScript.TypeScript
type AnonymousType214 = interface end

namespace FunScript.TypeScript
type AnonymousType215 = interface end

namespace FunScript.TypeScript
type AnonymousType216 = interface end

namespace FunScript.TypeScript
type AnonymousType217 = interface end

namespace FunScript.TypeScript
type AnonymousType218 = interface end

namespace FunScript.TypeScript
type AnonymousType219 = interface end

namespace FunScript.TypeScript
type AnonymousType22 = interface end

namespace FunScript.TypeScript
type AnonymousType220 = interface end

namespace FunScript.TypeScript
type AnonymousType221 = interface end

namespace FunScript.TypeScript
type AnonymousType222 = interface end

namespace FunScript.TypeScript
type AnonymousType223 = interface end

namespace FunScript.TypeScript
type AnonymousType224 = interface end

namespace FunScript.TypeScript
type AnonymousType225 = interface end

namespace FunScript.TypeScript
type AnonymousType226 = interface end

namespace FunScript.TypeScript
type AnonymousType227 = interface end

namespace FunScript.TypeScript
type AnonymousType228 = interface end

namespace FunScript.TypeScript
type AnonymousType229 = interface end

namespace FunScript.TypeScript
type AnonymousType23 = interface end

namespace FunScript.TypeScript
type AnonymousType230 = interface end

namespace FunScript.TypeScript
type AnonymousType231 = interface end

namespace FunScript.TypeScript
type AnonymousType232 = interface end

namespace FunScript.TypeScript
type AnonymousType233 = interface end

namespace FunScript.TypeScript
type AnonymousType234 = interface end

namespace FunScript.TypeScript
type AnonymousType235 = interface end

namespace FunScript.TypeScript
type AnonymousType236 = interface end

namespace FunScript.TypeScript
type AnonymousType237 = interface end

namespace FunScript.TypeScript
type AnonymousType238 = interface end

namespace FunScript.TypeScript
type AnonymousType239 = interface end

namespace FunScript.TypeScript
type AnonymousType24 = interface end

namespace FunScript.TypeScript
type AnonymousType240 = interface end

namespace FunScript.TypeScript
type AnonymousType241 = interface end

namespace FunScript.TypeScript
type AnonymousType242 = interface end

namespace FunScript.TypeScript
type AnonymousType243 = interface end

namespace FunScript.TypeScript
type AnonymousType244 = interface end

namespace FunScript.TypeScript
type AnonymousType245 = interface end

namespace FunScript.TypeScript
type AnonymousType246 = interface end

namespace FunScript.TypeScript
type AnonymousType247 = interface end

namespace FunScript.TypeScript
type AnonymousType248 = interface end

namespace FunScript.TypeScript
type AnonymousType249 = interface end

namespace FunScript.TypeScript
type AnonymousType25 = interface end

namespace FunScript.TypeScript
type AnonymousType250 = interface end

namespace FunScript.TypeScript
type AnonymousType251 = interface end

namespace FunScript.TypeScript
type AnonymousType252 = interface end

namespace FunScript.TypeScript
type AnonymousType253 = interface end

namespace FunScript.TypeScript
type AnonymousType254 = interface end

namespace FunScript.TypeScript
type AnonymousType255 = interface end

namespace FunScript.TypeScript
type AnonymousType256 = interface end

namespace FunScript.TypeScript
type AnonymousType257 = interface end

namespace FunScript.TypeScript
type AnonymousType258 = interface end

namespace FunScript.TypeScript
type AnonymousType259 = interface end

namespace FunScript.TypeScript
type AnonymousType26 = interface end

namespace FunScript.TypeScript
type AnonymousType260 = interface end

namespace FunScript.TypeScript
type AnonymousType261 = interface end

namespace FunScript.TypeScript
type AnonymousType262 = interface end

namespace FunScript.TypeScript
type AnonymousType263 = interface end

namespace FunScript.TypeScript
type AnonymousType264 = interface end

namespace FunScript.TypeScript
type AnonymousType265 = interface end

namespace FunScript.TypeScript
type AnonymousType266 = interface end

namespace FunScript.TypeScript
type AnonymousType267 = interface end

namespace FunScript.TypeScript
type AnonymousType268 = interface end

namespace FunScript.TypeScript
type AnonymousType269 = interface end

namespace FunScript.TypeScript
type AnonymousType27 = interface end

namespace FunScript.TypeScript
type AnonymousType270 = interface end

namespace FunScript.TypeScript
type AnonymousType271 = interface end

namespace FunScript.TypeScript
type AnonymousType272 = interface end

namespace FunScript.TypeScript
type AnonymousType273 = interface end

namespace FunScript.TypeScript
type AnonymousType274 = interface end

namespace FunScript.TypeScript
type AnonymousType275 = interface end

namespace FunScript.TypeScript
type AnonymousType276 = interface end

namespace FunScript.TypeScript
type AnonymousType277 = interface end

namespace FunScript.TypeScript
type AnonymousType278 = interface end

namespace FunScript.TypeScript
type AnonymousType279 = interface end

namespace FunScript.TypeScript
type AnonymousType28 = interface end

namespace FunScript.TypeScript
type AnonymousType280 = interface end

namespace FunScript.TypeScript
type AnonymousType281 = interface end

namespace FunScript.TypeScript
type AnonymousType282 = interface end

namespace FunScript.TypeScript
type AnonymousType283 = interface end

namespace FunScript.TypeScript
type AnonymousType284 = interface end

namespace FunScript.TypeScript
type AnonymousType285 = interface end

namespace FunScript.TypeScript
type AnonymousType286 = interface end

namespace FunScript.TypeScript
type AnonymousType287 = interface end

namespace FunScript.TypeScript
type AnonymousType288 = interface end

namespace FunScript.TypeScript
type AnonymousType289 = interface end

namespace FunScript.TypeScript.Intl
type AnonymousType29 = interface end

namespace FunScript.TypeScript
type AnonymousType290 = interface end

namespace FunScript.TypeScript
type AnonymousType291 = interface end

namespace FunScript.TypeScript
type AnonymousType292 = interface end

namespace FunScript.TypeScript
type AnonymousType293 = interface end

namespace FunScript.TypeScript
type AnonymousType294 = interface end

namespace FunScript.TypeScript
type AnonymousType295 = interface end

namespace FunScript.TypeScript
type AnonymousType296 = interface end

namespace FunScript.TypeScript
type AnonymousType297 = interface end

namespace FunScript.TypeScript
type AnonymousType298 = interface end

namespace FunScript.TypeScript
type AnonymousType299 = interface end

namespace FunScript.TypeScript
type AnonymousType3 = interface end

namespace FunScript.TypeScript.Intl
type AnonymousType30 = interface end

namespace FunScript.TypeScript
type AnonymousType300 = interface end

namespace FunScript.TypeScript
type AnonymousType301 = interface end

namespace FunScript.TypeScript
type AnonymousType302 = interface end

namespace FunScript.TypeScript
type AnonymousType303 = interface end

namespace FunScript.TypeScript
type AnonymousType304 = interface end

namespace FunScript.TypeScript
type AnonymousType305 = interface end

namespace FunScript.TypeScript
type AnonymousType306 = interface end

namespace FunScript.TypeScript
type AnonymousType307 = interface end

namespace FunScript.TypeScript
type AnonymousType308 = interface end

namespace FunScript.TypeScript
type AnonymousType309 = interface end

namespace FunScript.TypeScript.Intl
type AnonymousType31 = interface end

namespace FunScript.TypeScript
type AnonymousType310 = interface end

namespace FunScript.TypeScript
type AnonymousType311 = interface end

namespace FunScript.TypeScript
type AnonymousType312 = interface end

namespace FunScript.TypeScript
type AnonymousType313 = interface end

namespace FunScript.TypeScript
type AnonymousType314 = interface end

namespace FunScript.TypeScript
type AnonymousType315 = interface end

namespace FunScript.TypeScript
type AnonymousType316 = interface end

namespace FunScript.TypeScript
type AnonymousType317 = interface end

namespace FunScript.TypeScript
type AnonymousType318 = interface end

namespace FunScript.TypeScript
type AnonymousType319 = interface end

namespace FunScript.TypeScript
type AnonymousType32 = interface end

namespace FunScript.TypeScript
type AnonymousType320 = interface end

namespace FunScript.TypeScript
type AnonymousType321 = interface end

namespace FunScript.TypeScript
type AnonymousType322 = interface end

namespace FunScript.TypeScript
type AnonymousType323 = interface end

namespace FunScript.TypeScript
type AnonymousType324 = interface end

namespace FunScript.TypeScript
type AnonymousType325 = interface end

namespace FunScript.TypeScript
type AnonymousType326 = interface end

namespace FunScript.TypeScript
type AnonymousType327 = interface end

namespace FunScript.TypeScript
type AnonymousType328 = interface end

namespace FunScript.TypeScript
type AnonymousType329 = interface end

namespace FunScript.TypeScript
type AnonymousType33 = interface end

namespace FunScript.TypeScript
type AnonymousType330 = interface end

namespace FunScript.TypeScript
type AnonymousType331 = interface end

namespace FunScript.TypeScript
type AnonymousType332 = interface end

namespace FunScript.TypeScript
type AnonymousType333 = interface end

namespace FunScript.TypeScript
type AnonymousType334 = interface end

namespace FunScript.TypeScript
type AnonymousType335 = interface end

namespace FunScript.TypeScript
type AnonymousType336 = interface end

namespace FunScript.TypeScript
type AnonymousType337 = interface end

namespace FunScript.TypeScript
type AnonymousType338 = interface end

namespace FunScript.TypeScript
type AnonymousType339 = interface end

namespace FunScript.TypeScript
type AnonymousType34 = interface end

namespace FunScript.TypeScript
type AnonymousType340 = interface end

namespace FunScript.TypeScript
type AnonymousType341 = interface end

namespace FunScript.TypeScript
type AnonymousType342 = interface end

namespace FunScript.TypeScript
type AnonymousType343 = interface end

namespace FunScript.TypeScript
type AnonymousType344 = interface end

namespace FunScript.TypeScript
type AnonymousType345 = interface end

namespace FunScript.TypeScript
type AnonymousType346 = interface end

namespace FunScript.TypeScript
type AnonymousType347 = interface end

namespace FunScript.TypeScript
type AnonymousType348 = interface end

namespace FunScript.TypeScript
type AnonymousType349 = interface end

namespace FunScript.TypeScript
type AnonymousType35 = interface end

namespace FunScript.TypeScript
type AnonymousType350 = interface end

namespace FunScript.TypeScript
type AnonymousType351 = interface end

namespace FunScript.TypeScript
type AnonymousType352 = interface end

namespace FunScript.TypeScript
type AnonymousType353 = interface end

namespace FunScript.TypeScript
type AnonymousType354 = interface end

namespace FunScript.TypeScript
type AnonymousType355 = interface end

namespace FunScript.TypeScript
type AnonymousType356 = interface end

namespace FunScript.TypeScript
type AnonymousType357 = interface end

namespace FunScript.TypeScript
type AnonymousType358 = interface end

namespace FunScript.TypeScript
type AnonymousType359 = interface end

namespace FunScript.TypeScript
type AnonymousType36 = interface end

namespace FunScript.TypeScript
type AnonymousType360 = interface end

namespace FunScript.TypeScript
type AnonymousType361 = interface end

namespace FunScript.TypeScript
type AnonymousType362 = interface end

namespace FunScript.TypeScript
type AnonymousType363 = interface end

namespace FunScript.TypeScript
type AnonymousType364 = interface end

namespace FunScript.TypeScript
type AnonymousType365 = interface end

namespace FunScript.TypeScript
type AnonymousType366 = interface end

namespace FunScript.TypeScript
type AnonymousType367 = interface end

namespace FunScript.TypeScript
type AnonymousType368 = interface end

namespace FunScript.TypeScript
type AnonymousType369 = interface end

namespace FunScript.TypeScript
type AnonymousType37 = interface end

namespace FunScript.TypeScript
type AnonymousType370 = interface end

namespace FunScript.TypeScript
type AnonymousType371 = interface end

namespace FunScript.TypeScript
type AnonymousType372 = interface end

namespace FunScript.TypeScript
type AnonymousType373 = interface end

namespace FunScript.TypeScript
type AnonymousType374 = interface end

namespace FunScript.TypeScript
type AnonymousType375 = interface end

namespace FunScript.TypeScript
type AnonymousType376 = interface end

namespace FunScript.TypeScript
type AnonymousType377 = interface end

namespace FunScript.TypeScript
type AnonymousType378 = interface end

namespace FunScript.TypeScript
type AnonymousType379 = interface end

namespace FunScript.TypeScript
type AnonymousType38 = interface end

namespace FunScript.TypeScript
type AnonymousType380 = interface end

namespace FunScript.TypeScript
type AnonymousType381 = interface end

namespace FunScript.TypeScript
type AnonymousType382 = interface end

namespace FunScript.TypeScript
type AnonymousType383 = interface end

namespace FunScript.TypeScript
type AnonymousType384 = interface end

namespace FunScript.TypeScript
type AnonymousType385 = interface end

namespace FunScript.TypeScript
type AnonymousType386 = interface end

namespace FunScript.TypeScript
type AnonymousType387 = interface end

namespace FunScript.TypeScript
type AnonymousType388 = interface end

namespace FunScript.TypeScript
type AnonymousType389 = interface end

namespace FunScript.TypeScript
type AnonymousType39 = interface end

namespace FunScript.TypeScript
type AnonymousType390 = interface end

namespace FunScript.TypeScript
type AnonymousType391 = interface end

namespace FunScript.TypeScript
type AnonymousType392 = interface end

namespace FunScript.TypeScript
type AnonymousType393 = interface end

namespace FunScript.TypeScript
type AnonymousType394 = interface end

namespace FunScript.TypeScript
type AnonymousType395 = interface end

namespace FunScript.TypeScript
type AnonymousType396 = interface end

namespace FunScript.TypeScript
type AnonymousType397 = interface end

namespace FunScript.TypeScript
type AnonymousType398 = interface end

namespace FunScript.TypeScript
type AnonymousType399 = interface end

namespace FunScript.TypeScript
type AnonymousType4 = interface end

namespace FunScript.TypeScript
type AnonymousType40 = interface end

namespace FunScript.TypeScript
type AnonymousType400 = interface end

namespace FunScript.TypeScript
type AnonymousType401 = interface end

namespace FunScript.TypeScript
type AnonymousType402 = interface end

namespace FunScript.TypeScript
type AnonymousType403 = interface end

namespace FunScript.TypeScript
type AnonymousType404 = interface end

namespace FunScript.TypeScript
type AnonymousType405 = interface end

namespace FunScript.TypeScript
type AnonymousType406 = interface end

namespace FunScript.TypeScript
type AnonymousType407 = interface end

namespace FunScript.TypeScript
type AnonymousType408 = interface end

namespace FunScript.TypeScript
type AnonymousType409 = interface end

namespace FunScript.TypeScript
type AnonymousType41 = interface end

namespace FunScript.TypeScript
type AnonymousType410 = interface end

namespace FunScript.TypeScript
type AnonymousType411 = interface end

namespace FunScript.TypeScript
type AnonymousType412 = interface end

namespace FunScript.TypeScript
type AnonymousType413 = interface end

namespace FunScript.TypeScript
type AnonymousType414 = interface end

namespace FunScript.TypeScript
type AnonymousType415 = interface end

namespace FunScript.TypeScript
type AnonymousType416 = interface end

namespace FunScript.TypeScript
type AnonymousType417 = interface end

namespace FunScript.TypeScript
type AnonymousType418 = interface end

namespace FunScript.TypeScript
type AnonymousType419 = interface end

namespace FunScript.TypeScript
type AnonymousType42 = interface end

namespace FunScript.TypeScript
type AnonymousType420 = interface end

namespace FunScript.TypeScript
type AnonymousType421 = interface end

namespace FunScript.TypeScript
type AnonymousType422 = interface end

namespace FunScript.TypeScript
type AnonymousType423 = interface end

namespace FunScript.TypeScript
type AnonymousType424 = interface end

namespace FunScript.TypeScript
type AnonymousType425 = interface end

namespace FunScript.TypeScript
type AnonymousType426 = interface end

namespace FunScript.TypeScript
type AnonymousType427 = interface end

namespace FunScript.TypeScript
type AnonymousType428 = interface end

namespace FunScript.TypeScript
type AnonymousType429 = interface end

namespace FunScript.TypeScript
type AnonymousType43 = interface end

namespace FunScript.TypeScript
type AnonymousType430 = interface end

namespace FunScript.TypeScript
type AnonymousType431 = interface end

namespace FunScript.TypeScript
type AnonymousType432 = interface end

namespace FunScript.TypeScript
type AnonymousType433 = interface end

namespace FunScript.TypeScript
type AnonymousType434 = interface end

namespace FunScript.TypeScript
type AnonymousType435 = interface end

namespace FunScript.TypeScript
type AnonymousType436 = interface end

namespace FunScript.TypeScript
type AnonymousType437 = interface end

namespace FunScript.TypeScript
type AnonymousType438 = interface end

namespace FunScript.TypeScript
type AnonymousType439 = interface end

namespace FunScript.TypeScript
type AnonymousType44 = interface end

namespace FunScript.TypeScript
type AnonymousType440 = interface end

namespace FunScript.TypeScript
type AnonymousType45 = interface end

namespace FunScript.TypeScript
type AnonymousType46 = interface end

namespace FunScript.TypeScript
type AnonymousType47 = interface end

namespace FunScript.TypeScript
type AnonymousType48 = interface end

namespace FunScript.TypeScript
type AnonymousType49 = interface end

namespace FunScript.TypeScript
type AnonymousType5 = interface end

namespace FunScript.TypeScript
type AnonymousType50 = interface end

namespace FunScript.TypeScript
type AnonymousType51 = interface end

namespace FunScript.TypeScript
type AnonymousType52 = interface end

namespace FunScript.TypeScript
type AnonymousType53 = interface end

namespace FunScript.TypeScript
type AnonymousType54 = interface end

namespace FunScript.TypeScript
type AnonymousType55 = interface end

namespace FunScript.TypeScript
type AnonymousType56 = interface end

namespace FunScript.TypeScript
type AnonymousType57 = interface end

namespace FunScript.TypeScript
type AnonymousType58 = interface end

namespace FunScript.TypeScript
type AnonymousType59 = interface end

namespace FunScript.TypeScript
type AnonymousType6 = interface end

namespace FunScript.TypeScript
type AnonymousType60 = interface end

namespace FunScript.TypeScript
type AnonymousType61 = interface end

namespace FunScript.TypeScript
type AnonymousType62 = interface end

namespace FunScript.TypeScript
type AnonymousType63 = interface end

namespace FunScript.TypeScript
type AnonymousType64 = interface end

namespace FunScript.TypeScript
type AnonymousType65 = interface end

namespace FunScript.TypeScript
type AnonymousType66 = interface end

namespace FunScript.TypeScript
type AnonymousType67 = interface end

namespace FunScript.TypeScript
type AnonymousType68 = interface end

namespace FunScript.TypeScript
type AnonymousType69 = interface end

namespace FunScript.TypeScript
type AnonymousType7 = interface end

namespace FunScript.TypeScript
type AnonymousType70 = interface end

namespace FunScript.TypeScript
type AnonymousType71 = interface end

namespace FunScript.TypeScript
type AnonymousType72 = interface end

namespace FunScript.TypeScript
type AnonymousType73 = interface end

namespace FunScript.TypeScript
type AnonymousType74 = interface end

namespace FunScript.TypeScript
type AnonymousType75 = interface end

namespace FunScript.TypeScript
type AnonymousType76 = interface end

namespace FunScript.TypeScript
type AnonymousType77 = interface end

namespace FunScript.TypeScript
type AnonymousType78 = interface end

namespace FunScript.TypeScript
type AnonymousType79 = interface end

namespace FunScript.TypeScript
type AnonymousType8 = interface end

namespace FunScript.TypeScript
type AnonymousType80 = interface end

namespace FunScript.TypeScript
type AnonymousType81 = interface end

namespace FunScript.TypeScript
type AnonymousType82 = interface end

namespace FunScript.TypeScript
type AnonymousType83 = interface end

namespace FunScript.TypeScript
type AnonymousType84 = interface end

namespace FunScript.TypeScript
type AnonymousType85 = interface end

namespace FunScript.TypeScript
type AnonymousType86 = interface end

namespace FunScript.TypeScript
type AnonymousType87 = interface end

namespace FunScript.TypeScript
type AnonymousType88 = interface end

namespace FunScript.TypeScript
type AnonymousType89 = interface end

namespace FunScript.TypeScript
type AnonymousType9 = interface end

namespace FunScript.TypeScript
type AnonymousType90 = interface end

namespace FunScript.TypeScript
type AnonymousType91 = interface end

namespace FunScript.TypeScript
type AnonymousType92 = interface end

namespace FunScript.TypeScript
type AnonymousType93 = interface end

namespace FunScript.TypeScript
type AnonymousType94 = interface end

namespace FunScript.TypeScript
type AnonymousType95 = interface end

namespace FunScript.TypeScript
type AnonymousType96 = interface end

namespace FunScript.TypeScript
type AnonymousType97 = interface end

namespace FunScript.TypeScript
type AnonymousType98 = interface end

namespace FunScript.TypeScript
type AnonymousType99 = interface end

namespace FunScript.TypeScript
type ArrayBuffer = interface end

namespace FunScript.TypeScript
type ArrayBufferView = interface end

namespace FunScript.TypeScript
type AudioTrack = interface end

namespace FunScript.TypeScript
type Blob = interface end

namespace FunScript.TypeScript
type BlobPropertyBag = interface end

namespace FunScript.TypeScript
type BookmarkCollection = interface end

namespace FunScript.TypeScript
type Boolean = interface end

namespace FunScript.TypeScript
type CSSRule = interface end

namespace FunScript.TypeScript
type CSSRuleList = interface end

namespace FunScript.TypeScript
type CSSStyleDeclaration = interface end

namespace FunScript.TypeScript
type CanvasGradient = interface end

namespace FunScript.TypeScript
type CanvasPattern = interface end

namespace FunScript.TypeScript
type CanvasRenderingContext2D = interface end

namespace FunScript.TypeScript
type ClientRect = interface end

namespace FunScript.TypeScript
type ClientRectList = interface end

namespace FunScript.TypeScript.Intl
type Collator = interface end

namespace FunScript.TypeScript.Intl
type CollatorOptions = interface end

namespace FunScript.TypeScript
type Console = interface end

namespace FunScript.TypeScript
type ControlRangeCollection = interface end

namespace FunScript.TypeScript
type Coordinates = interface end

namespace FunScript.TypeScript
type DOMError = interface end

namespace FunScript.TypeScript
type DOMException = interface end

namespace FunScript.TypeScript
type DOMImplementation = interface end

namespace FunScript.TypeScript
type DOML2DeprecatedAlignmentStyle = interface end

namespace FunScript.TypeScript
type DOML2DeprecatedBackgroundColorStyle = interface end

namespace FunScript.TypeScript
type DOML2DeprecatedBackgroundStyle = interface end

namespace FunScript.TypeScript
type DOML2DeprecatedBorderStyle = interface end

namespace FunScript.TypeScript
type DOML2DeprecatedColorProperty = interface end

namespace FunScript.TypeScript
type DOML2DeprecatedListNumberingAndBulletStyle = interface end

namespace FunScript.TypeScript
type DOML2DeprecatedListSpaceReduction = interface end

namespace FunScript.TypeScript
type DOML2DeprecatedMarginStyle = interface end

namespace FunScript.TypeScript
type DOML2DeprecatedSizeProperty = interface end

namespace FunScript.TypeScript
type DOML2DeprecatedTextFlowControl = interface end

namespace FunScript.TypeScript
type DOMParser = interface end

namespace FunScript.TypeScript
type DOMStringList = interface end

namespace FunScript.TypeScript
type DOMStringMap = interface end

namespace FunScript.TypeScript
type DOMTokenList = interface end

namespace FunScript.TypeScript
type DataTransfer = interface end

namespace FunScript.TypeScript
type Date = interface end

namespace FunScript.TypeScript.Intl
type DateTimeFormat = interface end

namespace FunScript.TypeScript.Intl
type DateTimeFormatOptions = interface end

namespace FunScript.TypeScript
type DeviceAcceleration = interface end

namespace FunScript.TypeScript
type DeviceAccelerationDict = interface end

namespace FunScript.TypeScript
type DeviceRotationRate = interface end

namespace FunScript.TypeScript
type DeviceRotationRateDict = interface end

namespace FunScript.TypeScript
type DocumentEvent = interface end

namespace FunScript.TypeScript
type EXT_texture_filter_anisotropic = interface end

namespace FunScript.TypeScript
type ElementCSSInlineStyle = interface end

namespace FunScript.TypeScript
type ElementTraversal = interface end

namespace FunScript.TypeScript
type Error = interface end

namespace FunScript.TypeScript
type ErrorEventHandler = interface end

namespace FunScript.TypeScript
type Event = interface end

namespace FunScript.TypeScript
type EventException = interface end

namespace FunScript.TypeScript
type EventListener = interface end

namespace FunScript.TypeScript
type EventTarget = interface end

namespace FunScript.TypeScript
type ExceptionInformation = interface end

namespace FunScript.TypeScript
type External = interface end

namespace FunScript.TypeScript
type FileList = interface end

namespace FunScript.TypeScript
type FormData = interface end

namespace FunScript.TypeScript
type FrameRequestCallback = interface end

namespace FunScript.TypeScript
type FrameRequestCallbackDelegate = delegate of float -> unit

namespace FunScript.TypeScript
type Function = interface end

namespace FunScript.TypeScript
type Geolocation = interface end

namespace FunScript.TypeScript
type GetSVGDocument = interface end

namespace FunScript.TypeScript
type GlobalEventHandlers = interface end

namespace FunScript.TypeScript
type HTMLTableAlignment = interface end

namespace FunScript.TypeScript
type History = interface end

namespace FunScript.TypeScript
type IArguments = interface end

namespace FunScript.TypeScript
type IDBCursor = interface end

namespace FunScript.TypeScript
type IDBEnvironment = interface end

namespace FunScript.TypeScript
type IDBFactory = interface end

namespace FunScript.TypeScript
type IDBIndex = interface end

namespace FunScript.TypeScript
type IDBKeyRange = interface end

namespace FunScript.TypeScript
type IDBObjectStore = interface end

namespace FunScript.TypeScript
type ITextWriter = interface end

namespace FunScript.TypeScript
type ImageData = interface end

namespace FunScript.TypeScript.Intl
type Globals = interface end

namespace FunScript.TypeScript
type JSON = interface end

namespace FunScript.TypeScript
type Key = interface end

namespace FunScript.TypeScript
type KeyPair = interface end

namespace FunScript.TypeScript
type LinkStyle = interface end

namespace FunScript.TypeScript
type Location = interface end

namespace FunScript.TypeScript
type MSApp = interface end

namespace FunScript.TypeScript
type MSAppView = interface end

namespace FunScript.TypeScript
type MSBehaviorUrnsCollection = interface end

namespace FunScript.TypeScript
type MSBlobBuilder = interface end

namespace FunScript.TypeScript
type MSCSSMatrix = interface end

namespace FunScript.TypeScript
type MSCSSRuleList = interface end

namespace FunScript.TypeScript
type MSCompatibleInfo = interface end

namespace FunScript.TypeScript
type MSCompatibleInfoCollection = interface end

namespace FunScript.TypeScript
type MSDataBindingExtensions = interface end

namespace FunScript.TypeScript
type MSDataBindingRecordSetExtensions = interface end

namespace FunScript.TypeScript
type MSDataBindingRecordSetReadonlyExtensions = interface end

namespace FunScript.TypeScript
type MSDataBindingTableExtensions = interface end

namespace FunScript.TypeScript
type MSDocumentExtensions = interface end

namespace FunScript.TypeScript
type MSEventAttachmentTarget = interface end

namespace FunScript.TypeScript
type MSExecAtPriorityFunctionCallback = interface end

namespace FunScript.TypeScript
type MSFileSaver = interface end

namespace FunScript.TypeScript
type MSGesture = interface end

namespace FunScript.TypeScript
type MSGraphicsTrust = interface end

namespace FunScript.TypeScript
type MSHTMLCollectionExtensions = interface end

namespace FunScript.TypeScript
type MSImageResourceExtensions = interface end

namespace FunScript.TypeScript
type MSLaunchUriCallback = interface end

namespace FunScript.TypeScript
type MSLaunchUriCallbackDelegate = delegate of unit -> unit

namespace FunScript.TypeScript
type MSMediaKeyError = interface end

namespace FunScript.TypeScript
type MSMediaKeys = interface end

namespace FunScript.TypeScript
type MSMimeTypesCollection = interface end

namespace FunScript.TypeScript
type MSNamespaceInfoCollection = interface end

namespace FunScript.TypeScript
type MSNavigatorDoNotTrack = interface end

namespace FunScript.TypeScript
type MSNavigatorExtensions = interface end

namespace FunScript.TypeScript
type MSNodeExtensions = interface end

namespace FunScript.TypeScript
type MSPluginsCollection = interface end

namespace FunScript.TypeScript
type MSPopupWindow = interface end

namespace FunScript.TypeScript
type MSRangeCollection = interface end

namespace FunScript.TypeScript
type MSResourceMetadata = interface end

namespace FunScript.TypeScript
type MSScriptHost = interface end

namespace FunScript.TypeScript
type MSSelection = interface end

namespace FunScript.TypeScript
type MSStorageExtensions = interface end

namespace FunScript.TypeScript
type MSStream = interface end

namespace FunScript.TypeScript
type MSUnsafeFunctionCallback = interface end

namespace FunScript.TypeScript
type MSUnsafeFunctionCallbackDelegate = delegate of unit -> obj

namespace FunScript.TypeScript
type MSWindowExtensions = interface end

namespace FunScript.TypeScript
type MSWindowModeless = interface end

namespace FunScript.TypeScript
type Map<'K, 'V> = interface end

namespace FunScript.TypeScript
type Math = interface end

namespace FunScript.TypeScript
type MediaError = interface end

namespace FunScript.TypeScript
type MediaList = interface end

namespace FunScript.TypeScript
type MediaQueryList = interface end

namespace FunScript.TypeScript
type MediaQueryListListener = interface end

namespace FunScript.TypeScript
type MessageChannel = interface end

namespace FunScript.TypeScript
type MimeType = interface end

namespace FunScript.TypeScript
type MimeTypeArray = interface end

namespace FunScript.TypeScript
type MouseEventInit = interface end

namespace FunScript.TypeScript
type MsZoomToOptions = interface end

namespace FunScript.TypeScript
type MutationCallback = interface end

namespace FunScript.TypeScript
type MutationObserver = interface end

namespace FunScript.TypeScript
type MutationObserverInit = interface end

namespace FunScript.TypeScript
type MutationRecord = interface end

namespace FunScript.TypeScript
type NamedNodeMap = interface end

namespace FunScript.TypeScript
type NavigatorContentUtils = interface end

namespace FunScript.TypeScript
type NavigatorGeolocation = interface end

namespace FunScript.TypeScript
type NavigatorID = interface end

namespace FunScript.TypeScript
type NavigatorOnLine = interface end

namespace FunScript.TypeScript
type NavigatorStorageUtils = interface end

namespace FunScript.TypeScript
type NodeFilter = interface end

namespace FunScript.TypeScript
type NodeIterator = interface end

namespace FunScript.TypeScript
type NodeList = interface end

namespace FunScript.TypeScript
type NodeSelector = interface end

namespace FunScript.TypeScript
type Number = interface end

namespace FunScript.TypeScript.Intl
type NumberFormat = interface end

namespace FunScript.TypeScript.Intl
type NumberFormatOptions = interface end

namespace FunScript.TypeScript
type OES_standard_derivatives = interface end

namespace FunScript.TypeScript
type OES_texture_float = interface end

namespace FunScript.TypeScript
type OES_texture_float_linear = interface end

namespace FunScript.TypeScript
type Object = interface end

namespace FunScript.TypeScript
type ObjectURLOptions = interface end

namespace FunScript.TypeScript
type PerfWidgetExternal = interface end

namespace FunScript.TypeScript
type Performance = interface end

namespace FunScript.TypeScript
type PerformanceEntry = interface end

namespace FunScript.TypeScript
type PerformanceNavigation = interface end

namespace FunScript.TypeScript
type PerformanceTiming = interface end

namespace FunScript.TypeScript
type Plugin = interface end

namespace FunScript.TypeScript
type PluginArray = interface end

namespace FunScript.TypeScript
type Position = interface end

namespace FunScript.TypeScript
type PositionCallback = interface end

namespace FunScript.TypeScript
type PositionError = interface end

namespace FunScript.TypeScript
type PositionErrorCallback = interface end

namespace FunScript.TypeScript
type PositionOptions = interface end

namespace FunScript.TypeScript
type PropertyDescriptor = interface end

namespace FunScript.TypeScript
type PropertyDescriptorMap = interface end

namespace FunScript.TypeScript
type RandomSource = interface end

namespace FunScript.TypeScript
type Range = interface end

namespace FunScript.TypeScript
type RangeException = interface end

namespace FunScript.TypeScript
type RegExp = interface end

namespace FunScript.TypeScript
type RegExpExecArray =
        inherit System.Collections.Generic.IList<string>

namespace FunScript.TypeScript
type RegExpMatchArray =
        inherit System.Collections.Generic.IList<string>

namespace FunScript.TypeScript.Intl
type ResolvedCollatorOptions = interface end

namespace FunScript.TypeScript.Intl
type ResolvedDateTimeFormatOptions = interface end

namespace FunScript.TypeScript.Intl
type ResolvedNumberFormatOptions = interface end

namespace FunScript.TypeScript
type SVGAngle = interface end

namespace FunScript.TypeScript
type SVGAnimatedAngle = interface end

namespace FunScript.TypeScript
type SVGAnimatedBoolean = interface end

namespace FunScript.TypeScript
type SVGAnimatedEnumeration = interface end

namespace FunScript.TypeScript
type SVGAnimatedInteger = interface end

namespace FunScript.TypeScript
type SVGAnimatedLength = interface end

namespace FunScript.TypeScript
type SVGAnimatedLengthList = interface end

namespace FunScript.TypeScript
type SVGAnimatedNumber = interface end

namespace FunScript.TypeScript
type SVGAnimatedNumberList = interface end

namespace FunScript.TypeScript
type SVGAnimatedPathData = interface end

namespace FunScript.TypeScript
type SVGAnimatedPoints = interface end

namespace FunScript.TypeScript
type SVGAnimatedPreserveAspectRatio = interface end

namespace FunScript.TypeScript
type SVGAnimatedRect = interface end

namespace FunScript.TypeScript
type SVGAnimatedString = interface end

namespace FunScript.TypeScript
type SVGAnimatedTransformList = interface end

namespace FunScript.TypeScript
type SVGElementInstanceList = interface end

namespace FunScript.TypeScript
type SVGException = interface end

namespace FunScript.TypeScript
type SVGExternalResourcesRequired = interface end

namespace FunScript.TypeScript
type SVGFitToViewBox = interface end

namespace FunScript.TypeScript
type SVGLangSpace = interface end

namespace FunScript.TypeScript
type SVGLength = interface end

namespace FunScript.TypeScript
type SVGLengthList = interface end

namespace FunScript.TypeScript
type SVGLocatable = interface end

namespace FunScript.TypeScript
type SVGMatrix = interface end

namespace FunScript.TypeScript
type SVGNumber = interface end

namespace FunScript.TypeScript
type SVGNumberList = interface end

namespace FunScript.TypeScript
type SVGPathSeg = interface end

namespace FunScript.TypeScript
type SVGPathSegList = interface end

namespace FunScript.TypeScript
type SVGPoint = interface end

namespace FunScript.TypeScript
type SVGPointList = interface end

namespace FunScript.TypeScript
type SVGPreserveAspectRatio = interface end

namespace FunScript.TypeScript
type SVGRect = interface end

namespace FunScript.TypeScript
type SVGStringList = interface end

namespace FunScript.TypeScript
type SVGStylable = interface end

namespace FunScript.TypeScript
type SVGTests = interface end

namespace FunScript.TypeScript
type SVGTransform = interface end

namespace FunScript.TypeScript
type SVGTransformList = interface end

namespace FunScript.TypeScript
type SVGURIReference = interface end

namespace FunScript.TypeScript
type SVGUnitTypes = interface end

namespace FunScript.TypeScript
type SVGZoomAndPan = interface end

namespace FunScript.TypeScript
type Selection = interface end

namespace FunScript.TypeScript
type Set<'T> = interface end

namespace FunScript.TypeScript
type String = interface end

namespace FunScript.TypeScript
type StyleMedia = interface end

namespace FunScript.TypeScript
type StyleSheet = interface end

namespace FunScript.TypeScript
type StyleSheetList = interface end

namespace FunScript.TypeScript
type StyleSheetPageList = interface end

namespace FunScript.TypeScript
type SubtleCrypto = interface end

namespace FunScript.TypeScript
type TextMetrics = interface end

namespace FunScript.TypeScript
type TextRange = interface end

namespace FunScript.TypeScript
type TextRangeCollection = interface end

namespace FunScript.TypeScript
type TextTrackCueList = interface end

namespace FunScript.TypeScript
type TimeRanges = interface end

namespace FunScript.TypeScript
type TreeWalker = interface end

namespace FunScript.TypeScript
type URL = interface end

namespace FunScript.TypeScript
type ValidityState = interface end

namespace FunScript.TypeScript
type VideoPlaybackQuality = interface end

namespace FunScript.TypeScript
type WEBGL_compressed_texture_s3tc = interface end

namespace FunScript.TypeScript
type WeakMap<'K, 'V> = interface end

namespace FunScript.TypeScript
type WebGLActiveInfo = interface end

namespace FunScript.TypeScript
type WebGLContextAttributes = interface end

namespace FunScript.TypeScript
type WebGLObject = interface end

namespace FunScript.TypeScript
type WebGLRenderingContext = interface end

namespace FunScript.TypeScript
type WebGLShaderPrecisionFormat = interface end

namespace FunScript.TypeScript
type WebGLUniformLocation = interface end

namespace FunScript.TypeScript
type WindowBase64 = interface end

namespace FunScript.TypeScript
type WindowConsole = interface end

namespace FunScript.TypeScript
type WindowLocalStorage = interface end

namespace FunScript.TypeScript
type WindowModal = interface end

namespace FunScript.TypeScript
type WindowSessionStorage = interface end

namespace FunScript.TypeScript
type WindowTimersExtension = interface end

namespace FunScript.TypeScript
type XDomainRequest = interface end

namespace FunScript.TypeScript
type XMLSerializer = interface end

namespace FunScript.TypeScript
type AbstractWorker =
        inherit EventTarget

namespace FunScript.TypeScript
type AnimationEvent =
        inherit Event

namespace FunScript.TypeScript
type ApplicationCache =
        inherit EventTarget

namespace FunScript.TypeScript
type AudioTrackList =
        inherit EventTarget

namespace FunScript.TypeScript
type BeforeUnloadEvent =
        inherit Event

namespace FunScript.TypeScript
type CSSFontFaceRule =
        inherit CSSRule

namespace FunScript.TypeScript
type CSSImportRule =
        inherit CSSRule

namespace FunScript.TypeScript
type CSSKeyframeRule =
        inherit CSSRule

namespace FunScript.TypeScript
type CSSKeyframesRule =
        inherit CSSRule

namespace FunScript.TypeScript
type CSSMediaRule =
        inherit CSSRule

namespace FunScript.TypeScript
type CSSNamespaceRule =
        inherit CSSRule

namespace FunScript.TypeScript
type CSSPageRule =
        inherit CSSRule

namespace FunScript.TypeScript
type CSSStyleRule =
        inherit CSSRule

namespace FunScript.TypeScript
type CSSStyleSheet =
        inherit StyleSheet

namespace FunScript.TypeScript
type CloseEvent =
        inherit Event

namespace FunScript.TypeScript
type ConfirmSiteSpecificExceptionsInformation =
        inherit ExceptionInformation

namespace FunScript.TypeScript
type Crypto =
        inherit RandomSource

namespace FunScript.TypeScript
type CryptoOperation =
        inherit EventTarget

namespace FunScript.TypeScript
type CustomEvent =
        inherit Event

namespace FunScript.TypeScript
type DOMSettableTokenList =
        inherit DOMTokenList

namespace FunScript.TypeScript
type DataView =
        inherit ArrayBufferView

namespace FunScript.TypeScript
type DeviceMotionEvent =
        inherit Event

namespace FunScript.TypeScript
type DeviceOrientationEvent =
        inherit Event

namespace FunScript.TypeScript
type ErrorEvent =
        inherit Event

namespace FunScript.TypeScript
type ErrorEventHandlerDelegate = delegate of Event * string * float * float -> unit

namespace FunScript.TypeScript
type EvalError =
        inherit Error

namespace FunScript.TypeScript
type EventListenerDelegate = delegate of Event -> unit

namespace FunScript.TypeScript
type File =
        inherit Blob

namespace FunScript.TypeScript
type Float32Array =
        inherit ArrayBufferView

namespace FunScript.TypeScript
type Float64Array =
        inherit ArrayBufferView

namespace FunScript.TypeScript
type HTMLCollection =
        inherit MSHTMLCollectionExtensions

namespace FunScript.TypeScript
type IDBCursorWithValue =
        inherit IDBCursor

namespace FunScript.TypeScript
type IDBDatabase =
        inherit EventTarget

namespace FunScript.TypeScript
type IDBRequest =
        inherit EventTarget

namespace FunScript.TypeScript
type IDBTransaction =
        inherit EventTarget

namespace FunScript.TypeScript
type IDBVersionChangeEvent =
        inherit Event

namespace FunScript.TypeScript
type Int16Array =
        inherit ArrayBufferView

namespace FunScript.TypeScript
type Int32Array =
        inherit ArrayBufferView

namespace FunScript.TypeScript
type Int8Array =
        inherit ArrayBufferView

namespace FunScript.TypeScript
type KeyOperation =
        inherit EventTarget

namespace FunScript.TypeScript
type LongRunningScriptDetectedEvent =
        inherit Event

namespace FunScript.TypeScript
type MSBaseReader =
        inherit EventTarget

namespace FunScript.TypeScript
type MSCSSProperties =
        inherit CSSStyleDeclaration

namespace FunScript.TypeScript
type MSEventObj =
        inherit Event

namespace FunScript.TypeScript
type MSInputMethodContext =
        inherit EventTarget

namespace FunScript.TypeScript
type MSMediaKeyMessageEvent =
        inherit Event

namespace FunScript.TypeScript
type MSMediaKeyNeededEvent =
        inherit Event

namespace FunScript.TypeScript
type MSMediaKeySession =
        inherit EventTarget

namespace FunScript.TypeScript
type MSNamespaceInfo =
        inherit MSEventAttachmentTarget

namespace FunScript.TypeScript
type MSSiteModeEvent =
        inherit Event

namespace FunScript.TypeScript
type MSWebViewAsyncOperation =
        inherit EventTarget

namespace FunScript.TypeScript
type MediaQueryListListenerDelegate = delegate of MediaQueryList -> unit

namespace FunScript.TypeScript
type MediaSource =
        inherit EventTarget

namespace FunScript.TypeScript
type MessageEvent =
        inherit Event

namespace FunScript.TypeScript
type MessagePort =
        inherit EventTarget

namespace FunScript.TypeScript
type MutationCallbackDelegate = delegate of array<MutationRecord> * MutationObserver -> unit

namespace FunScript.TypeScript
type MutationEvent =
        inherit Event

namespace FunScript.TypeScript
type NavigationEvent =
        inherit Event

namespace FunScript.TypeScript
type Navigator =
        inherit NavigatorID
        inherit NavigatorOnLine
        inherit NavigatorContentUtils
        inherit MSNavigatorExtensions
        inherit NavigatorGeolocation
        inherit MSNavigatorDoNotTrack
        inherit NavigatorStorageUtils
        inherit MSFileSaver

namespace FunScript.TypeScript
type Node =
        inherit EventTarget

namespace FunScript.TypeScript
type PageTransitionEvent =
        inherit Event

namespace FunScript.TypeScript
type PerformanceMark =
        inherit PerformanceEntry

namespace FunScript.TypeScript
type PerformanceMeasure =
        inherit PerformanceEntry

namespace FunScript.TypeScript
type PerformanceNavigationTiming =
        inherit PerformanceEntry

namespace FunScript.TypeScript
type PerformanceResourceTiming =
        inherit PerformanceEntry

namespace FunScript.TypeScript
type PointerEventInit =
        inherit MouseEventInit

namespace FunScript.TypeScript
type PopStateEvent =
        inherit Event

namespace FunScript.TypeScript
type PositionCallbackDelegate = delegate of Position -> unit

namespace FunScript.TypeScript
type PositionErrorCallbackDelegate = delegate of PositionError -> unit

namespace FunScript.TypeScript
type ProgressEvent =
        inherit Event

namespace FunScript.TypeScript
type RangeError =
        inherit Error

namespace FunScript.TypeScript
type ReferenceError =
        inherit Error

namespace FunScript.TypeScript
type SVGElementInstance =
        inherit EventTarget

namespace FunScript.TypeScript
type SVGFilterPrimitiveStandardAttributes =
        inherit SVGStylable

namespace FunScript.TypeScript
type SVGPathSegArcAbs =
        inherit SVGPathSeg

namespace FunScript.TypeScript
type SVGPathSegArcRel =
        inherit SVGPathSeg

namespace FunScript.TypeScript
type SVGPathSegClosePath =
        inherit SVGPathSeg

namespace FunScript.TypeScript
type SVGPathSegCurvetoCubicAbs =
        inherit SVGPathSeg

namespace FunScript.TypeScript
type SVGPathSegCurvetoCubicRel =
        inherit SVGPathSeg

namespace FunScript.TypeScript
type SVGPathSegCurvetoCubicSmoothAbs =
        inherit SVGPathSeg

namespace FunScript.TypeScript
type SVGPathSegCurvetoCubicSmoothRel =
        inherit SVGPathSeg

namespace FunScript.TypeScript
type SVGPathSegCurvetoQuadraticAbs =
        inherit SVGPathSeg

namespace FunScript.TypeScript
type SVGPathSegCurvetoQuadraticRel =
        inherit SVGPathSeg

namespace FunScript.TypeScript
type SVGPathSegCurvetoQuadraticSmoothAbs =
        inherit SVGPathSeg

namespace FunScript.TypeScript
type SVGPathSegCurvetoQuadraticSmoothRel =
        inherit SVGPathSeg

namespace FunScript.TypeScript
type SVGPathSegLinetoAbs =
        inherit SVGPathSeg

namespace FunScript.TypeScript
type SVGPathSegLinetoHorizontalAbs =
        inherit SVGPathSeg

namespace FunScript.TypeScript
type SVGPathSegLinetoHorizontalRel =
        inherit SVGPathSeg

namespace FunScript.TypeScript
type SVGPathSegLinetoRel =
        inherit SVGPathSeg

namespace FunScript.TypeScript
type SVGPathSegLinetoVerticalAbs =
        inherit SVGPathSeg

namespace FunScript.TypeScript
type SVGPathSegLinetoVerticalRel =
        inherit SVGPathSeg

namespace FunScript.TypeScript
type SVGPathSegMovetoAbs =
        inherit SVGPathSeg

namespace FunScript.TypeScript
type SVGPathSegMovetoRel =
        inherit SVGPathSeg

namespace FunScript.TypeScript
type SVGTransformable =
        inherit SVGLocatable

namespace FunScript.TypeScript
type Screen =
        inherit EventTarget

namespace FunScript.TypeScript
type ScriptNotifyEvent =
        inherit Event

namespace FunScript.TypeScript
type SourceBuffer =
        inherit EventTarget

namespace FunScript.TypeScript
type SourceBufferList =
        inherit EventTarget

namespace FunScript.TypeScript
type Storage =
        inherit MSStorageExtensions

namespace FunScript.TypeScript
type StorageEvent =
        inherit Event

namespace FunScript.TypeScript
type StoreExceptionsInformation =
        inherit ExceptionInformation

namespace FunScript.TypeScript
type SyntaxError =
        inherit Error

namespace FunScript.TypeScript
type TextTrack =
        inherit EventTarget

namespace FunScript.TypeScript
type TextTrackCue =
        inherit EventTarget

namespace FunScript.TypeScript
type TextTrackList =
        inherit EventTarget

namespace FunScript.TypeScript
type TrackEvent =
        inherit Event

namespace FunScript.TypeScript
type TransitionEvent =
        inherit Event

namespace FunScript.TypeScript
type TypeError =
        inherit Error

namespace FunScript.TypeScript
type UIEvent =
        inherit Event

namespace FunScript.TypeScript
type URIError =
        inherit Error

namespace FunScript.TypeScript
type Uint16Array =
        inherit ArrayBufferView

namespace FunScript.TypeScript
type Uint32Array =
        inherit ArrayBufferView

namespace FunScript.TypeScript
type Uint8Array =
        inherit ArrayBufferView

namespace FunScript.TypeScript
type WebGLBuffer =
        inherit WebGLObject

namespace FunScript.TypeScript
type WebGLContextEvent =
        inherit Event

namespace FunScript.TypeScript
type WebGLFramebuffer =
        inherit WebGLObject

namespace FunScript.TypeScript
type WebGLProgram =
        inherit WebGLObject

namespace FunScript.TypeScript
type WebGLRenderbuffer =
        inherit WebGLObject

namespace FunScript.TypeScript
type WebGLShader =
        inherit WebGLObject

namespace FunScript.TypeScript
type WebGLTexture =
        inherit WebGLObject

namespace FunScript.TypeScript
type WebSocket =
        inherit EventTarget

namespace FunScript.TypeScript
type WindowTimers =
        inherit WindowTimersExtension

namespace FunScript.TypeScript
type XMLHttpRequest =
        inherit EventTarget

namespace FunScript.TypeScript
type XMLHttpRequestEventTarget =
        inherit EventTarget

namespace FunScript.TypeScript
type Attr =
        inherit Node

namespace FunScript.TypeScript
type CharacterData =
        inherit Node

namespace FunScript.TypeScript
type CompositionEvent =
        inherit UIEvent

namespace FunScript.TypeScript
type Document =
        inherit Node
        inherit NodeSelector
        inherit MSEventAttachmentTarget
        inherit DocumentEvent
        inherit MSResourceMetadata
        inherit MSNodeExtensions
        inherit MSDocumentExtensions
        inherit GlobalEventHandlers

namespace FunScript.TypeScript
type DocumentFragment =
        inherit Node
        inherit NodeSelector
        inherit MSEventAttachmentTarget
        inherit MSNodeExtensions

namespace FunScript.TypeScript
type DocumentType =
        inherit Node

namespace FunScript.TypeScript
type Element =
        inherit Node
        inherit NodeSelector
        inherit ElementTraversal
        inherit GlobalEventHandlers

namespace FunScript.TypeScript
type FileReader =
        inherit MSBaseReader

namespace FunScript.TypeScript
type FocusEvent =
        inherit UIEvent

namespace FunScript.TypeScript
type HTMLAllCollection =
        inherit HTMLCollection

namespace FunScript.TypeScript
type HTMLAreasCollection =
        inherit HTMLCollection

namespace FunScript.TypeScript
type IDBOpenDBRequest =
        inherit IDBRequest

namespace FunScript.TypeScript
type KeyboardEvent =
        inherit UIEvent

namespace FunScript.TypeScript
type MSCurrentStyleCSSProperties =
        inherit MSCSSProperties

namespace FunScript.TypeScript
type MSGestureEvent =
        inherit UIEvent

namespace FunScript.TypeScript
type MSManipulationEvent =
        inherit UIEvent

namespace FunScript.TypeScript
type MSStreamReader =
        inherit MSBaseReader

namespace FunScript.TypeScript
type MSStyleCSSProperties =
        inherit MSCSSProperties

namespace FunScript.TypeScript
type MouseEvent =
        inherit UIEvent

namespace FunScript.TypeScript
type NavigationCompletedEvent =
        inherit NavigationEvent

namespace FunScript.TypeScript
type NodeListOf<'TNode when 'TNode :> FunScript.TypeScript.Node> =
        inherit NodeList

namespace FunScript.TypeScript
type ProcessingInstruction =
        inherit Node

namespace FunScript.TypeScript
type SVGZoomEvent =
        inherit UIEvent

namespace FunScript.TypeScript
type StoreSiteSpecificExceptionsInformation =
        inherit StoreExceptionsInformation

namespace FunScript.TypeScript
type TextEvent =
        inherit UIEvent

namespace FunScript.TypeScript
type UnviewableContentIdentifiedEvent =
        inherit NavigationEvent

namespace FunScript.TypeScript
type Window =
        inherit EventTarget
        inherit MSEventAttachmentTarget
        inherit WindowLocalStorage
        inherit MSWindowExtensions
        inherit WindowSessionStorage
        inherit WindowTimers
        inherit WindowBase64
        inherit IDBEnvironment
        inherit WindowConsole
        inherit GlobalEventHandlers

namespace FunScript.TypeScript
type Worker =
        inherit AbstractWorker

namespace FunScript.TypeScript
type Comment =
        inherit CharacterData

namespace FunScript.TypeScript
type DragEvent =
        inherit MouseEvent

namespace FunScript.TypeScript
type HTMLDocument =
        inherit Document

namespace FunScript.TypeScript
type HTMLElement =
        inherit Element
        inherit ElementCSSInlineStyle
        inherit MSEventAttachmentTarget
        inherit MSNodeExtensions

namespace FunScript.TypeScript
type MSPointerEvent =
        inherit MouseEvent

namespace FunScript.TypeScript
type MouseWheelEvent =
        inherit MouseEvent

namespace FunScript.TypeScript
type PointerEvent =
        inherit MouseEvent

namespace FunScript.TypeScript
type SVGElement =
        inherit Element

namespace FunScript.TypeScript
type Text =
        inherit CharacterData
        inherit MSNodeExtensions

namespace FunScript.TypeScript
type WheelEvent =
        inherit MouseEvent

namespace FunScript.TypeScript
type XMLDocument =
        inherit Document

namespace FunScript.TypeScript
type CDATASection =
        inherit Text

namespace FunScript.TypeScript
type HTMLAnchorElement =
        inherit HTMLElement
        inherit MSDataBindingExtensions

namespace FunScript.TypeScript
type HTMLAppletElement =
        inherit HTMLElement
        inherit DOML2DeprecatedMarginStyle
        inherit DOML2DeprecatedBorderStyle
        inherit DOML2DeprecatedAlignmentStyle
        inherit MSDataBindingExtensions
        inherit MSDataBindingRecordSetExtensions

namespace FunScript.TypeScript
type HTMLAreaElement =
        inherit HTMLElement

namespace FunScript.TypeScript
type HTMLBGSoundElement =
        inherit HTMLElement

namespace FunScript.TypeScript
type HTMLBRElement =
        inherit HTMLElement

namespace FunScript.TypeScript
type HTMLBaseElement =
        inherit HTMLElement

namespace FunScript.TypeScript
type HTMLBaseFontElement =
        inherit HTMLElement
        inherit DOML2DeprecatedColorProperty

namespace FunScript.TypeScript
type HTMLBlockElement =
        inherit HTMLElement
        inherit DOML2DeprecatedTextFlowControl

namespace FunScript.TypeScript
type HTMLBodyElement =
        inherit HTMLElement
        inherit DOML2DeprecatedBackgroundStyle
        inherit DOML2DeprecatedBackgroundColorStyle

namespace FunScript.TypeScript
type HTMLButtonElement =
        inherit HTMLElement
        inherit MSDataBindingExtensions

namespace FunScript.TypeScript
type HTMLCanvasElement =
        inherit HTMLElement

namespace FunScript.TypeScript
type HTMLDDElement =
        inherit HTMLElement

namespace FunScript.TypeScript
type HTMLDListElement =
        inherit HTMLElement
        inherit DOML2DeprecatedListSpaceReduction

namespace FunScript.TypeScript
type HTMLDTElement =
        inherit HTMLElement

namespace FunScript.TypeScript
type HTMLDataListElement =
        inherit HTMLElement

namespace FunScript.TypeScript
type HTMLDirectoryElement =
        inherit HTMLElement
        inherit DOML2DeprecatedListSpaceReduction
        inherit DOML2DeprecatedListNumberingAndBulletStyle

namespace FunScript.TypeScript
type HTMLDivElement =
        inherit HTMLElement
        inherit MSDataBindingExtensions

namespace FunScript.TypeScript
type HTMLEmbedElement =
        inherit HTMLElement
        inherit GetSVGDocument

namespace FunScript.TypeScript
type HTMLFieldSetElement =
        inherit HTMLElement

namespace FunScript.TypeScript
type HTMLFontElement =
        inherit HTMLElement
        inherit DOML2DeprecatedColorProperty
        inherit DOML2DeprecatedSizeProperty

namespace FunScript.TypeScript
type HTMLFormElement =
        inherit HTMLElement
        inherit MSHTMLCollectionExtensions

namespace FunScript.TypeScript
type HTMLFrameElement =
        inherit HTMLElement
        inherit GetSVGDocument
        inherit MSDataBindingExtensions

namespace FunScript.TypeScript
type HTMLFrameSetElement =
        inherit HTMLElement

namespace FunScript.TypeScript
type HTMLHRElement =
        inherit HTMLElement
        inherit DOML2DeprecatedColorProperty
        inherit DOML2DeprecatedSizeProperty

namespace FunScript.TypeScript
type HTMLHeadElement =
        inherit HTMLElement

namespace FunScript.TypeScript
type HTMLHeadingElement =
        inherit HTMLElement
        inherit DOML2DeprecatedTextFlowControl

namespace FunScript.TypeScript
type HTMLHtmlElement =
        inherit HTMLElement

namespace FunScript.TypeScript
type HTMLIFrameElement =
        inherit HTMLElement
        inherit GetSVGDocument
        inherit MSDataBindingExtensions

namespace FunScript.TypeScript
type HTMLImageElement =
        inherit HTMLElement
        inherit MSImageResourceExtensions
        inherit MSDataBindingExtensions
        inherit MSResourceMetadata

namespace FunScript.TypeScript
type HTMLInputElement =
        inherit HTMLElement
        inherit MSDataBindingExtensions

namespace FunScript.TypeScript
type HTMLIsIndexElement =
        inherit HTMLElement

namespace FunScript.TypeScript
type HTMLLIElement =
        inherit HTMLElement
        inherit DOML2DeprecatedListNumberingAndBulletStyle

namespace FunScript.TypeScript
type HTMLLabelElement =
        inherit HTMLElement
        inherit MSDataBindingExtensions

namespace FunScript.TypeScript
type HTMLLegendElement =
        inherit HTMLElement
        inherit MSDataBindingExtensions

namespace FunScript.TypeScript
type HTMLLinkElement =
        inherit HTMLElement
        inherit LinkStyle

namespace FunScript.TypeScript
type HTMLMapElement =
        inherit HTMLElement

namespace FunScript.TypeScript
type HTMLMarqueeElement =
        inherit HTMLElement
        inherit MSDataBindingExtensions
        inherit DOML2DeprecatedBackgroundColorStyle

namespace FunScript.TypeScript
type HTMLMediaElement =
        inherit HTMLElement

namespace FunScript.TypeScript
type HTMLMenuElement =
        inherit HTMLElement
        inherit DOML2DeprecatedListSpaceReduction

namespace FunScript.TypeScript
type HTMLMetaElement =
        inherit HTMLElement

namespace FunScript.TypeScript
type HTMLModElement =
        inherit HTMLElement

namespace FunScript.TypeScript
type HTMLNextIdElement =
        inherit HTMLElement

namespace FunScript.TypeScript
type HTMLOListElement =
        inherit HTMLElement
        inherit DOML2DeprecatedListSpaceReduction
        inherit DOML2DeprecatedListNumberingAndBulletStyle

namespace FunScript.TypeScript
type HTMLObjectElement =
        inherit HTMLElement
        inherit GetSVGDocument
        inherit DOML2DeprecatedMarginStyle
        inherit DOML2DeprecatedBorderStyle
        inherit DOML2DeprecatedAlignmentStyle
        inherit MSDataBindingExtensions
        inherit MSDataBindingRecordSetExtensions

namespace FunScript.TypeScript
type HTMLOptGroupElement =
        inherit HTMLElement
        inherit MSDataBindingExtensions

namespace FunScript.TypeScript
type HTMLOptionElement =
        inherit HTMLElement
        inherit MSDataBindingExtensions

namespace FunScript.TypeScript
type HTMLParagraphElement =
        inherit HTMLElement
        inherit DOML2DeprecatedTextFlowControl

namespace FunScript.TypeScript
type HTMLParamElement =
        inherit HTMLElement

namespace FunScript.TypeScript
type HTMLPhraseElement =
        inherit HTMLElement

namespace FunScript.TypeScript
type HTMLPreElement =
        inherit HTMLElement
        inherit DOML2DeprecatedTextFlowControl

namespace FunScript.TypeScript
type HTMLProgressElement =
        inherit HTMLElement

namespace FunScript.TypeScript
type HTMLQuoteElement =
        inherit HTMLElement

namespace FunScript.TypeScript
type HTMLScriptElement =
        inherit HTMLElement

namespace FunScript.TypeScript
type HTMLSelectElement =
        inherit HTMLElement
        inherit MSHTMLCollectionExtensions
        inherit MSDataBindingExtensions

namespace FunScript.TypeScript
type HTMLSourceElement =
        inherit HTMLElement

namespace FunScript.TypeScript
type HTMLSpanElement =
        inherit HTMLElement
        inherit MSDataBindingExtensions

namespace FunScript.TypeScript
type HTMLStyleElement =
        inherit HTMLElement
        inherit LinkStyle

namespace FunScript.TypeScript
type HTMLTableCaptionElement =
        inherit HTMLElement

namespace FunScript.TypeScript
type HTMLTableCellElement =
        inherit HTMLElement
        inherit HTMLTableAlignment
        inherit DOML2DeprecatedBackgroundStyle
        inherit DOML2DeprecatedBackgroundColorStyle

namespace FunScript.TypeScript
type HTMLTableColElement =
        inherit HTMLElement
        inherit HTMLTableAlignment

namespace FunScript.TypeScript
type HTMLTableElement =
        inherit HTMLElement
        inherit MSDataBindingTableExtensions
        inherit MSDataBindingExtensions
        inherit DOML2DeprecatedBackgroundStyle
        inherit DOML2DeprecatedBackgroundColorStyle

namespace FunScript.TypeScript
type HTMLTableRowElement =
        inherit HTMLElement
        inherit HTMLTableAlignment
        inherit DOML2DeprecatedBackgroundColorStyle

namespace FunScript.TypeScript
type HTMLTableSectionElement =
        inherit HTMLElement
        inherit HTMLTableAlignment
        inherit DOML2DeprecatedBackgroundColorStyle

namespace FunScript.TypeScript
type HTMLTextAreaElement =
        inherit HTMLElement
        inherit MSDataBindingExtensions

namespace FunScript.TypeScript
type HTMLTitleElement =
        inherit HTMLElement

namespace FunScript.TypeScript
type HTMLTrackElement =
        inherit HTMLElement

namespace FunScript.TypeScript
type HTMLUListElement =
        inherit HTMLElement
        inherit DOML2DeprecatedListSpaceReduction
        inherit DOML2DeprecatedListNumberingAndBulletStyle

namespace FunScript.TypeScript
type HTMLUnknownElement =
        inherit HTMLElement
        inherit MSDataBindingRecordSetReadonlyExtensions

namespace FunScript.TypeScript
type MSHTMLWebViewElement =
        inherit HTMLElement

namespace FunScript.TypeScript
type SVGAElement =
        inherit SVGElement
        inherit SVGStylable
        inherit SVGTransformable
        inherit SVGLangSpace
        inherit SVGTests
        inherit SVGExternalResourcesRequired
        inherit SVGURIReference

namespace FunScript.TypeScript
type SVGCircleElement =
        inherit SVGElement
        inherit SVGStylable
        inherit SVGTransformable
        inherit SVGLangSpace
        inherit SVGTests
        inherit SVGExternalResourcesRequired

namespace FunScript.TypeScript
type SVGClipPathElement =
        inherit SVGElement
        inherit SVGUnitTypes
        inherit SVGStylable
        inherit SVGTransformable
        inherit SVGLangSpace
        inherit SVGTests
        inherit SVGExternalResourcesRequired

namespace FunScript.TypeScript
type SVGComponentTransferFunctionElement =
        inherit SVGElement

namespace FunScript.TypeScript
type SVGDefsElement =
        inherit SVGElement
        inherit SVGStylable
        inherit SVGTransformable
        inherit SVGLangSpace
        inherit SVGTests
        inherit SVGExternalResourcesRequired

namespace FunScript.TypeScript
type SVGDescElement =
        inherit SVGElement
        inherit SVGStylable
        inherit SVGLangSpace

namespace FunScript.TypeScript
type SVGEllipseElement =
        inherit SVGElement
        inherit SVGStylable
        inherit SVGTransformable
        inherit SVGLangSpace
        inherit SVGTests
        inherit SVGExternalResourcesRequired

namespace FunScript.TypeScript
type SVGFEBlendElement =
        inherit SVGElement
        inherit SVGFilterPrimitiveStandardAttributes

namespace FunScript.TypeScript
type SVGFEColorMatrixElement =
        inherit SVGElement
        inherit SVGFilterPrimitiveStandardAttributes

namespace FunScript.TypeScript
type SVGFEComponentTransferElement =
        inherit SVGElement
        inherit SVGFilterPrimitiveStandardAttributes

namespace FunScript.TypeScript
type SVGFECompositeElement =
        inherit SVGElement
        inherit SVGFilterPrimitiveStandardAttributes

namespace FunScript.TypeScript
type SVGFEConvolveMatrixElement =
        inherit SVGElement
        inherit SVGFilterPrimitiveStandardAttributes

namespace FunScript.TypeScript
type SVGFEDiffuseLightingElement =
        inherit SVGElement
        inherit SVGFilterPrimitiveStandardAttributes

namespace FunScript.TypeScript
type SVGFEDisplacementMapElement =
        inherit SVGElement
        inherit SVGFilterPrimitiveStandardAttributes

namespace FunScript.TypeScript
type SVGFEDistantLightElement =
        inherit SVGElement

namespace FunScript.TypeScript
type SVGFEFloodElement =
        inherit SVGElement
        inherit SVGFilterPrimitiveStandardAttributes

namespace FunScript.TypeScript
type SVGFEGaussianBlurElement =
        inherit SVGElement
        inherit SVGFilterPrimitiveStandardAttributes

namespace FunScript.TypeScript
type SVGFEImageElement =
        inherit SVGElement
        inherit SVGLangSpace
        inherit SVGFilterPrimitiveStandardAttributes
        inherit SVGURIReference
        inherit SVGExternalResourcesRequired

namespace FunScript.TypeScript
type SVGFEMergeElement =
        inherit SVGElement
        inherit SVGFilterPrimitiveStandardAttributes

namespace FunScript.TypeScript
type SVGFEMergeNodeElement =
        inherit SVGElement

namespace FunScript.TypeScript
type SVGFEMorphologyElement =
        inherit SVGElement
        inherit SVGFilterPrimitiveStandardAttributes

namespace FunScript.TypeScript
type SVGFEOffsetElement =
        inherit SVGElement
        inherit SVGFilterPrimitiveStandardAttributes

namespace FunScript.TypeScript
type SVGFEPointLightElement =
        inherit SVGElement

namespace FunScript.TypeScript
type SVGFESpecularLightingElement =
        inherit SVGElement
        inherit SVGFilterPrimitiveStandardAttributes

namespace FunScript.TypeScript
type SVGFESpotLightElement =
        inherit SVGElement

namespace FunScript.TypeScript
type SVGFETileElement =
        inherit SVGElement
        inherit SVGFilterPrimitiveStandardAttributes

namespace FunScript.TypeScript
type SVGFETurbulenceElement =
        inherit SVGElement
        inherit SVGFilterPrimitiveStandardAttributes

namespace FunScript.TypeScript
type SVGFilterElement =
        inherit SVGElement
        inherit SVGUnitTypes
        inherit SVGStylable
        inherit SVGLangSpace
        inherit SVGURIReference
        inherit SVGExternalResourcesRequired

namespace FunScript.TypeScript
type SVGGElement =
        inherit SVGElement
        inherit SVGStylable
        inherit SVGTransformable
        inherit SVGLangSpace
        inherit SVGTests
        inherit SVGExternalResourcesRequired

namespace FunScript.TypeScript
type SVGGradientElement =
        inherit SVGElement
        inherit SVGUnitTypes
        inherit SVGStylable
        inherit SVGExternalResourcesRequired
        inherit SVGURIReference

namespace FunScript.TypeScript
type SVGImageElement =
        inherit SVGElement
        inherit SVGStylable
        inherit SVGTransformable
        inherit SVGLangSpace
        inherit SVGTests
        inherit SVGExternalResourcesRequired
        inherit SVGURIReference

namespace FunScript.TypeScript
type SVGLineElement =
        inherit SVGElement
        inherit SVGStylable
        inherit SVGTransformable
        inherit SVGLangSpace
        inherit SVGTests
        inherit SVGExternalResourcesRequired

namespace FunScript.TypeScript
type SVGMarkerElement =
        inherit SVGElement
        inherit SVGStylable
        inherit SVGLangSpace
        inherit SVGFitToViewBox
        inherit SVGExternalResourcesRequired

namespace FunScript.TypeScript
type SVGMaskElement =
        inherit SVGElement
        inherit SVGUnitTypes
        inherit SVGStylable
        inherit SVGLangSpace
        inherit SVGTests
        inherit SVGExternalResourcesRequired

namespace FunScript.TypeScript
type SVGMetadataElement =
        inherit SVGElement

namespace FunScript.TypeScript
type SVGPathElement =
        inherit SVGElement
        inherit SVGStylable
        inherit SVGAnimatedPathData
        inherit SVGTransformable
        inherit SVGLangSpace
        inherit SVGTests
        inherit SVGExternalResourcesRequired

namespace FunScript.TypeScript
type SVGPatternElement =
        inherit SVGElement
        inherit SVGUnitTypes
        inherit SVGStylable
        inherit SVGLangSpace
        inherit SVGTests
        inherit SVGFitToViewBox
        inherit SVGExternalResourcesRequired
        inherit SVGURIReference

namespace FunScript.TypeScript
type SVGPolygonElement =
        inherit SVGElement
        inherit SVGStylable
        inherit SVGTransformable
        inherit SVGLangSpace
        inherit SVGAnimatedPoints
        inherit SVGTests
        inherit SVGExternalResourcesRequired

namespace FunScript.TypeScript
type SVGPolylineElement =
        inherit SVGElement
        inherit SVGStylable
        inherit SVGTransformable
        inherit SVGLangSpace
        inherit SVGAnimatedPoints
        inherit SVGTests
        inherit SVGExternalResourcesRequired

namespace FunScript.TypeScript
type SVGRectElement =
        inherit SVGElement
        inherit SVGStylable
        inherit SVGTransformable
        inherit SVGLangSpace
        inherit SVGTests
        inherit SVGExternalResourcesRequired

namespace FunScript.TypeScript
type SVGSVGElement =
        inherit SVGElement
        inherit SVGStylable
        inherit SVGZoomAndPan
        inherit DocumentEvent
        inherit SVGLangSpace
        inherit SVGLocatable
        inherit SVGTests
        inherit SVGFitToViewBox
        inherit SVGExternalResourcesRequired

namespace FunScript.TypeScript
type SVGScriptElement =
        inherit SVGElement
        inherit SVGExternalResourcesRequired
        inherit SVGURIReference

namespace FunScript.TypeScript
type SVGStopElement =
        inherit SVGElement
        inherit SVGStylable

namespace FunScript.TypeScript
type SVGStyleElement =
        inherit SVGElement
        inherit SVGLangSpace

namespace FunScript.TypeScript
type SVGSwitchElement =
        inherit SVGElement
        inherit SVGStylable
        inherit SVGTransformable
        inherit SVGLangSpace
        inherit SVGTests
        inherit SVGExternalResourcesRequired

namespace FunScript.TypeScript
type SVGSymbolElement =
        inherit SVGElement
        inherit SVGStylable
        inherit SVGLangSpace
        inherit SVGFitToViewBox
        inherit SVGExternalResourcesRequired

namespace FunScript.TypeScript
type SVGTextContentElement =
        inherit SVGElement
        inherit SVGStylable
        inherit SVGLangSpace
        inherit SVGTests
        inherit SVGExternalResourcesRequired

namespace FunScript.TypeScript
type SVGTitleElement =
        inherit SVGElement
        inherit SVGStylable
        inherit SVGLangSpace

namespace FunScript.TypeScript
type SVGUseElement =
        inherit SVGElement
        inherit SVGStylable
        inherit SVGTransformable
        inherit SVGLangSpace
        inherit SVGTests
        inherit SVGExternalResourcesRequired
        inherit SVGURIReference

namespace FunScript.TypeScript
type SVGViewElement =
        inherit SVGElement
        inherit SVGZoomAndPan
        inherit SVGFitToViewBox
        inherit SVGExternalResourcesRequired

namespace FunScript.TypeScript
type HTMLAudioElement =
        inherit HTMLMediaElement

namespace FunScript.TypeScript
type HTMLTableDataCellElement =
        inherit HTMLTableCellElement

namespace FunScript.TypeScript
type HTMLTableHeaderCellElement =
        inherit HTMLTableCellElement

namespace FunScript.TypeScript
type HTMLVideoElement =
        inherit HTMLMediaElement

namespace FunScript.TypeScript
type SVGFEFuncAElement =
        inherit SVGComponentTransferFunctionElement

namespace FunScript.TypeScript
type SVGFEFuncBElement =
        inherit SVGComponentTransferFunctionElement

namespace FunScript.TypeScript
type SVGFEFuncGElement =
        inherit SVGComponentTransferFunctionElement

namespace FunScript.TypeScript
type SVGFEFuncRElement =
        inherit SVGComponentTransferFunctionElement

namespace FunScript.TypeScript
type SVGLinearGradientElement =
        inherit SVGGradientElement

namespace FunScript.TypeScript
type SVGRadialGradientElement =
        inherit SVGGradientElement

namespace FunScript.TypeScript
type SVGTextPathElement =
        inherit SVGTextContentElement
        inherit SVGURIReference

namespace FunScript.TypeScript
type SVGTextPositioningElement =
        inherit SVGTextContentElement

namespace FunScript.TypeScript
type SVGTSpanElement =
        inherit SVGTextPositioningElement

namespace FunScript.TypeScript
type SVGTextElement =
        inherit SVGTextPositioningElement
        inherit SVGTransformable


namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_0 =


    type Globals with 

            [<FunScript.JSEmitInline("(NaN)"); CompiledName("NaN")>]
            static member NaN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Infinity)"); CompiledName("Infinity")>]
            static member Infinity with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("(eval({0}))"); CompiledName("eval")>]
            static member eval(x : string) : obj = failwith "never"
            [<FunScript.JSEmitInline("(eval = {0})"); CompiledName("evalAux")>]
            static member ``eval <-``(func : System.Func<string, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(parseInt({0}, {?1}))"); CompiledName("parseInt")>]
            static member parseInt(s : string, ?radix : float) : float = failwith "never"
            [<FunScript.JSEmitInline("(parseInt = {0})"); CompiledName("parseIntAux")>]
            static member ``parseInt <-``(func : System.Func<string, float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(parseFloat({0}))"); CompiledName("parseFloat")>]
            static member parseFloat(_string : string) : float = failwith "never"
            [<FunScript.JSEmitInline("(parseFloat = {0})"); CompiledName("parseFloatAux")>]
            static member ``parseFloat <-``(func : System.Func<string, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(isNaN({0}))"); CompiledName("isNaN")>]
            static member isNaN(number : float) : bool = failwith "never"
            [<FunScript.JSEmitInline("(isNaN = {0})"); CompiledName("isNaNAux")>]
            static member ``isNaN <-``(func : System.Func<float, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(isFinite({0}))"); CompiledName("isFinite")>]
            static member isFinite(number : float) : bool = failwith "never"
            [<FunScript.JSEmitInline("(isFinite = {0})"); CompiledName("isFiniteAux")>]
            static member ``isFinite <-``(func : System.Func<float, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(decodeURI({0}))"); CompiledName("decodeURI")>]
            static member decodeURI(encodedURI : string) : string = failwith "never"
            [<FunScript.JSEmitInline("(decodeURI = {0})"); CompiledName("decodeURIAux")>]
            static member ``decodeURI <-``(func : System.Func<string, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(decodeURIComponent({0}))"); CompiledName("decodeURIComponent")>]
            static member decodeURIComponent(encodedURIComponent : string) : string = failwith "never"
            [<FunScript.JSEmitInline("(decodeURIComponent = {0})"); CompiledName("decodeURIComponentAux")>]
            static member ``decodeURIComponent <-``(func : System.Func<string, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(encodeURI({0}))"); CompiledName("encodeURI")>]
            static member encodeURI(uri : string) : string = failwith "never"
            [<FunScript.JSEmitInline("(encodeURI = {0})"); CompiledName("encodeURIAux")>]
            static member ``encodeURI <-``(func : System.Func<string, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(encodeURIComponent({0}))"); CompiledName("encodeURIComponent")>]
            static member encodeURIComponent(uriComponent : string) : string = failwith "never"
            [<FunScript.JSEmitInline("(encodeURIComponent = {0})"); CompiledName("encodeURIComponentAux")>]
            static member ``encodeURIComponent <-``(func : System.Func<string, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Object)"); CompiledName("Object")>]
            static member Object with get() : FunScript.TypeScript.AnonymousType1 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType1) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Function)"); CompiledName("Function")>]
            static member Function with get() : FunScript.TypeScript.AnonymousType2 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType2) : unit = failwith "never"
            [<FunScript.JSEmitInline("(String)"); CompiledName("String")>]
            static member String with get() : FunScript.TypeScript.AnonymousType3 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType3) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Boolean)"); CompiledName("Boolean")>]
            static member Boolean with get() : FunScript.TypeScript.AnonymousType4 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType4) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Number)"); CompiledName("Number")>]
            static member Number with get() : FunScript.TypeScript.AnonymousType5 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType5) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Math)"); CompiledName("Math")>]
            static member Math with get() : FunScript.TypeScript.Math = failwith "never" and set (v : FunScript.TypeScript.Math) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Date)"); CompiledName("Date")>]
            static member Date with get() : FunScript.TypeScript.AnonymousType6 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType6) : unit = failwith "never"
            [<FunScript.JSEmitInline("(RegExp)"); CompiledName("RegExp")>]
            static member RegExp with get() : FunScript.TypeScript.AnonymousType7 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType7) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Error)"); CompiledName("Error")>]
            static member Error with get() : FunScript.TypeScript.AnonymousType8 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType8) : unit = failwith "never"
            [<FunScript.JSEmitInline("(EvalError)"); CompiledName("EvalError")>]
            static member EvalError with get() : FunScript.TypeScript.AnonymousType9 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType9) : unit = failwith "never"
            [<FunScript.JSEmitInline("(RangeError)"); CompiledName("RangeError")>]
            static member RangeError with get() : FunScript.TypeScript.AnonymousType10 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType10) : unit = failwith "never"
            [<FunScript.JSEmitInline("(ReferenceError)"); CompiledName("ReferenceError")>]
            static member ReferenceError with get() : FunScript.TypeScript.AnonymousType11 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType11) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SyntaxError)"); CompiledName("SyntaxError")>]
            static member SyntaxError with get() : FunScript.TypeScript.AnonymousType12 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType12) : unit = failwith "never"
            [<FunScript.JSEmitInline("(TypeError)"); CompiledName("TypeError")>]
            static member TypeError with get() : FunScript.TypeScript.AnonymousType13 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType13) : unit = failwith "never"
            [<FunScript.JSEmitInline("(URIError)"); CompiledName("URIError")>]
            static member URIError with get() : FunScript.TypeScript.AnonymousType14 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType14) : unit = failwith "never"
            [<FunScript.JSEmitInline("(JSON)"); CompiledName("JSON")>]
            static member JSON with get() : FunScript.TypeScript.JSON = failwith "never" and set (v : FunScript.TypeScript.JSON) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Array)"); CompiledName("Array")>]
            static member Array with get() : FunScript.TypeScript.AnonymousType15 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType15) : unit = failwith "never"
            [<FunScript.JSEmitInline("(ArrayBuffer)"); CompiledName("ArrayBuffer")>]
            static member ArrayBuffer with get() : FunScript.TypeScript.AnonymousType16 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType16) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Int8Array)"); CompiledName("Int8Array")>]
            static member Int8Array with get() : FunScript.TypeScript.AnonymousType17 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType17) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Uint8Array)"); CompiledName("Uint8Array")>]
            static member Uint8Array with get() : FunScript.TypeScript.AnonymousType18 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType18) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Int16Array)"); CompiledName("Int16Array")>]
            static member Int16Array with get() : FunScript.TypeScript.AnonymousType19 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType19) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Uint16Array)"); CompiledName("Uint16Array")>]
            static member Uint16Array with get() : FunScript.TypeScript.AnonymousType20 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType20) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Int32Array)"); CompiledName("Int32Array")>]
            static member Int32Array with get() : FunScript.TypeScript.AnonymousType21 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType21) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Uint32Array)"); CompiledName("Uint32Array")>]
            static member Uint32Array with get() : FunScript.TypeScript.AnonymousType22 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType22) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Float32Array)"); CompiledName("Float32Array")>]
            static member Float32Array with get() : FunScript.TypeScript.AnonymousType23 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType23) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Float64Array)"); CompiledName("Float64Array")>]
            static member Float64Array with get() : FunScript.TypeScript.AnonymousType24 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType24) : unit = failwith "never"
            [<FunScript.JSEmitInline("(DataView)"); CompiledName("DataView")>]
            static member DataView with get() : FunScript.TypeScript.AnonymousType25 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType25) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Map)"); CompiledName("Map")>]
            static member Map with get() : FunScript.TypeScript.AnonymousType26 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType26) : unit = failwith "never"
            [<FunScript.JSEmitInline("(WeakMap)"); CompiledName("WeakMap")>]
            static member WeakMap with get() : FunScript.TypeScript.AnonymousType27 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType27) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Set)"); CompiledName("Set")>]
            static member Set with get() : FunScript.TypeScript.AnonymousType28 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType28) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLElement)"); CompiledName("HTMLElement")>]
            static member HTMLElement with get() : FunScript.TypeScript.AnonymousType32 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType32) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Document)"); CompiledName("Document")>]
            static member Document with get() : FunScript.TypeScript.AnonymousType33 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType33) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Console)"); CompiledName("Console")>]
            static member Console with get() : FunScript.TypeScript.AnonymousType34 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType34) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MSEventObj)"); CompiledName("MSEventObj")>]
            static member MSEventObj with get() : FunScript.TypeScript.AnonymousType35 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType35) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLCanvasElement)"); CompiledName("HTMLCanvasElement")>]
            static member HTMLCanvasElement with get() : FunScript.TypeScript.AnonymousType36 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType36) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Window)"); CompiledName("Window")>]
            static member Window with get() : FunScript.TypeScript.AnonymousType37 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType37) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLCollection)"); CompiledName("HTMLCollection")>]
            static member HTMLCollection with get() : FunScript.TypeScript.AnonymousType38 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType38) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Blob)"); CompiledName("Blob")>]
            static member Blob with get() : FunScript.TypeScript.AnonymousType39 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType39) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLTableElement)"); CompiledName("HTMLTableElement")>]
            static member HTMLTableElement with get() : FunScript.TypeScript.AnonymousType40 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType40) : unit = failwith "never"
            [<FunScript.JSEmitInline("(TreeWalker)"); CompiledName("TreeWalker")>]
            static member TreeWalker with get() : FunScript.TypeScript.AnonymousType41 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType41) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGPathSegCurvetoQuadraticRel)"); CompiledName("SVGPathSegCurvetoQuadraticRel")>]
            static member SVGPathSegCurvetoQuadraticRel with get() : FunScript.TypeScript.AnonymousType42 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType42) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Performance)"); CompiledName("Performance")>]
            static member Performance with get() : FunScript.TypeScript.AnonymousType43 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType43) : unit = failwith "never"
            [<FunScript.JSEmitInline("(CompositionEvent)"); CompiledName("CompositionEvent")>]
            static member CompositionEvent with get() : FunScript.TypeScript.AnonymousType44 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType44) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGMarkerElement)"); CompiledName("SVGMarkerElement")>]
            static member SVGMarkerElement with get() : FunScript.TypeScript.AnonymousType45 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType45) : unit = failwith "never"
            [<FunScript.JSEmitInline("(CSSStyleDeclaration)"); CompiledName("CSSStyleDeclaration")>]
            static member CSSStyleDeclaration with get() : FunScript.TypeScript.AnonymousType46 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType46) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGGElement)"); CompiledName("SVGGElement")>]
            static member SVGGElement with get() : FunScript.TypeScript.AnonymousType47 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType47) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MSStyleCSSProperties)"); CompiledName("MSStyleCSSProperties")>]
            static member MSStyleCSSProperties with get() : FunScript.TypeScript.AnonymousType48 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType48) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Navigator)"); CompiledName("Navigator")>]
            static member Navigator with get() : FunScript.TypeScript.AnonymousType49 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType49) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGPathSegCurvetoCubicSmoothAbs)"); CompiledName("SVGPathSegCurvetoCubicSmoothAbs")>]
            static member SVGPathSegCurvetoCubicSmoothAbs with get() : FunScript.TypeScript.AnonymousType50 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType50) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGZoomEvent)"); CompiledName("SVGZoomEvent")>]
            static member SVGZoomEvent with get() : FunScript.TypeScript.AnonymousType51 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType51) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLTableDataCellElement)"); CompiledName("HTMLTableDataCellElement")>]
            static member HTMLTableDataCellElement with get() : FunScript.TypeScript.AnonymousType52 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType52) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLBaseElement)"); CompiledName("HTMLBaseElement")>]
            static member HTMLBaseElement with get() : FunScript.TypeScript.AnonymousType53 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType53) : unit = failwith "never"
            [<FunScript.JSEmitInline("(ClientRect)"); CompiledName("ClientRect")>]
            static member ClientRect with get() : FunScript.TypeScript.AnonymousType54 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType54) : unit = failwith "never"
            [<FunScript.JSEmitInline("(DOMImplementation)"); CompiledName("DOMImplementation")>]
            static member DOMImplementation with get() : FunScript.TypeScript.AnonymousType55 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType55) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGUnitTypes)"); CompiledName("SVGUnitTypes")>]
            static member SVGUnitTypes with get() : FunScript.TypeScript.SVGUnitTypes = failwith "never" and set (v : FunScript.TypeScript.SVGUnitTypes) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Element)"); CompiledName("Element")>]
            static member Element with get() : FunScript.TypeScript.AnonymousType56 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType56) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLNextIdElement)"); CompiledName("HTMLNextIdElement")>]
            static member HTMLNextIdElement with get() : FunScript.TypeScript.AnonymousType57 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType57) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGPathSegMovetoRel)"); CompiledName("SVGPathSegMovetoRel")>]
            static member SVGPathSegMovetoRel with get() : FunScript.TypeScript.AnonymousType58 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType58) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGLineElement)"); CompiledName("SVGLineElement")>]
            static member SVGLineElement with get() : FunScript.TypeScript.AnonymousType59 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType59) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLParagraphElement)"); CompiledName("HTMLParagraphElement")>]
            static member HTMLParagraphElement with get() : FunScript.TypeScript.AnonymousType60 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType60) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLAreasCollection)"); CompiledName("HTMLAreasCollection")>]
            static member HTMLAreasCollection with get() : FunScript.TypeScript.AnonymousType61 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType61) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGDescElement)"); CompiledName("SVGDescElement")>]
            static member SVGDescElement with get() : FunScript.TypeScript.AnonymousType62 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType62) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Node)"); CompiledName("Node")>]
            static member Node with get() : FunScript.TypeScript.AnonymousType63 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType63) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGPathSegCurvetoQuadraticSmoothRel)"); CompiledName("SVGPathSegCurvetoQuadraticSmoothRel")>]
            static member SVGPathSegCurvetoQuadraticSmoothRel with get() : FunScript.TypeScript.AnonymousType64 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType64) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MSScriptHost)"); CompiledName("MSScriptHost")>]
            static member MSScriptHost with get() : FunScript.TypeScript.AnonymousType65 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType65) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGClipPathElement)"); CompiledName("SVGClipPathElement")>]
            static member SVGClipPathElement with get() : FunScript.TypeScript.AnonymousType66 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType66) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MouseEvent)"); CompiledName("MouseEvent")>]
            static member MouseEvent with get() : FunScript.TypeScript.AnonymousType67 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType67) : unit = failwith "never"
            [<FunScript.JSEmitInline("(RangeException)"); CompiledName("RangeException")>]
            static member RangeException with get() : FunScript.TypeScript.AnonymousType68 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType68) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGTextPositioningElement)"); CompiledName("SVGTextPositioningElement")>]
            static member SVGTextPositioningElement with get() : FunScript.TypeScript.AnonymousType69 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType69) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLAppletElement)"); CompiledName("HTMLAppletElement")>]
            static member HTMLAppletElement with get() : FunScript.TypeScript.AnonymousType70 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType70) : unit = failwith "never"
            [<FunScript.JSEmitInline("(TextMetrics)"); CompiledName("TextMetrics")>]
            static member TextMetrics with get() : FunScript.TypeScript.AnonymousType71 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType71) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLOListElement)"); CompiledName("HTMLOListElement")>]
            static member HTMLOListElement with get() : FunScript.TypeScript.AnonymousType72 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType72) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGPathSegLinetoVerticalRel)"); CompiledName("SVGPathSegLinetoVerticalRel")>]
            static member SVGPathSegLinetoVerticalRel with get() : FunScript.TypeScript.AnonymousType73 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType73) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGAnimatedString)"); CompiledName("SVGAnimatedString")>]
            static member SVGAnimatedString with get() : FunScript.TypeScript.AnonymousType74 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType74) : unit = failwith "never"
            [<FunScript.JSEmitInline("(CDATASection)"); CompiledName("CDATASection")>]
            static member CDATASection with get() : FunScript.TypeScript.AnonymousType75 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType75) : unit = failwith "never"
            [<FunScript.JSEmitInline("(StyleMedia)"); CompiledName("StyleMedia")>]
            static member StyleMedia with get() : FunScript.TypeScript.AnonymousType76 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType76) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLSelectElement)"); CompiledName("HTMLSelectElement")>]
            static member HTMLSelectElement with get() : FunScript.TypeScript.AnonymousType77 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType77) : unit = failwith "never"
            [<FunScript.JSEmitInline("(TextRange)"); CompiledName("TextRange")>]
            static member TextRange with get() : FunScript.TypeScript.AnonymousType78 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType78) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLBlockElement)"); CompiledName("HTMLBlockElement")>]
            static member HTMLBlockElement with get() : FunScript.TypeScript.AnonymousType79 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType79) : unit = failwith "never"
            [<FunScript.JSEmitInline("(CSSStyleSheet)"); CompiledName("CSSStyleSheet")>]
            static member CSSStyleSheet with get() : FunScript.TypeScript.AnonymousType80 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType80) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MSSelection)"); CompiledName("MSSelection")>]
            static member MSSelection with get() : FunScript.TypeScript.AnonymousType81 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType81) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLMetaElement)"); CompiledName("HTMLMetaElement")>]
            static member HTMLMetaElement with get() : FunScript.TypeScript.AnonymousType82 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType82) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGPatternElement)"); CompiledName("SVGPatternElement")>]
            static member SVGPatternElement with get() : FunScript.TypeScript.AnonymousType83 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType83) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGAnimatedAngle)"); CompiledName("SVGAnimatedAngle")>]
            static member SVGAnimatedAngle with get() : FunScript.TypeScript.AnonymousType84 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType84) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Selection)"); CompiledName("Selection")>]
            static member Selection with get() : FunScript.TypeScript.AnonymousType85 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType85) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGScriptElement)"); CompiledName("SVGScriptElement")>]
            static member SVGScriptElement with get() : FunScript.TypeScript.AnonymousType86 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType86) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLDDElement)"); CompiledName("HTMLDDElement")>]
            static member HTMLDDElement with get() : FunScript.TypeScript.AnonymousType87 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType87) : unit = failwith "never"
            [<FunScript.JSEmitInline("(CSSStyleRule)"); CompiledName("CSSStyleRule")>]
            static member CSSStyleRule with get() : FunScript.TypeScript.AnonymousType88 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType88) : unit = failwith "never"
            [<FunScript.JSEmitInline("(NodeIterator)"); CompiledName("NodeIterator")>]
            static member NodeIterator with get() : FunScript.TypeScript.AnonymousType89 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType89) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGViewElement)"); CompiledName("SVGViewElement")>]
            static member SVGViewElement with get() : FunScript.TypeScript.AnonymousType90 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType90) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLLinkElement)"); CompiledName("HTMLLinkElement")>]
            static member HTMLLinkElement with get() : FunScript.TypeScript.AnonymousType91 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType91) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLFontElement)"); CompiledName("HTMLFontElement")>]
            static member HTMLFontElement with get() : FunScript.TypeScript.AnonymousType92 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType92) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGTitleElement)"); CompiledName("SVGTitleElement")>]
            static member SVGTitleElement with get() : FunScript.TypeScript.AnonymousType93 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType93) : unit = failwith "never"
            [<FunScript.JSEmitInline("(ControlRangeCollection)"); CompiledName("ControlRangeCollection")>]
            static member ControlRangeCollection with get() : FunScript.TypeScript.AnonymousType94 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType94) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MSNamespaceInfo)"); CompiledName("MSNamespaceInfo")>]
            static member MSNamespaceInfo with get() : FunScript.TypeScript.AnonymousType95 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType95) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGAnimatedTransformList)"); CompiledName("SVGAnimatedTransformList")>]
            static member SVGAnimatedTransformList with get() : FunScript.TypeScript.AnonymousType96 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType96) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLTableCaptionElement)"); CompiledName("HTMLTableCaptionElement")>]
            static member HTMLTableCaptionElement with get() : FunScript.TypeScript.AnonymousType97 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType97) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLOptionElement)"); CompiledName("HTMLOptionElement")>]
            static member HTMLOptionElement with get() : FunScript.TypeScript.AnonymousType98 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType98) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLMapElement)"); CompiledName("HTMLMapElement")>]
            static member HTMLMapElement with get() : FunScript.TypeScript.AnonymousType99 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType99) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLMenuElement)"); CompiledName("HTMLMenuElement")>]
            static member HTMLMenuElement with get() : FunScript.TypeScript.AnonymousType100 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType100) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MouseWheelEvent)"); CompiledName("MouseWheelEvent")>]
            static member MouseWheelEvent with get() : FunScript.TypeScript.AnonymousType101 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType101) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGPointList)"); CompiledName("SVGPointList")>]
            static member SVGPointList with get() : FunScript.TypeScript.AnonymousType102 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType102) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGAnimatedLengthList)"); CompiledName("SVGAnimatedLengthList")>]
            static member SVGAnimatedLengthList with get() : FunScript.TypeScript.AnonymousType103 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType103) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGAnimatedPreserveAspectRatio)"); CompiledName("SVGAnimatedPreserveAspectRatio")>]
            static member SVGAnimatedPreserveAspectRatio with get() : FunScript.TypeScript.AnonymousType104 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType104) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MSSiteModeEvent)"); CompiledName("MSSiteModeEvent")>]
            static member MSSiteModeEvent with get() : FunScript.TypeScript.AnonymousType105 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType105) : unit = failwith "never"
            [<FunScript.JSEmitInline("(StyleSheetPageList)"); CompiledName("StyleSheetPageList")>]
            static member StyleSheetPageList with get() : FunScript.TypeScript.AnonymousType106 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType106) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MSCSSProperties)"); CompiledName("MSCSSProperties")>]
            static member MSCSSProperties with get() : FunScript.TypeScript.AnonymousType107 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType107) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLImageElement)"); CompiledName("HTMLImageElement")>]
            static member HTMLImageElement with get() : FunScript.TypeScript.AnonymousType108 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType108) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLAreaElement)"); CompiledName("HTMLAreaElement")>]
            static member HTMLAreaElement with get() : FunScript.TypeScript.AnonymousType109 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType109) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGAngle)"); CompiledName("SVGAngle")>]
            static member SVGAngle with get() : FunScript.TypeScript.AnonymousType110 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType110) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLButtonElement)"); CompiledName("HTMLButtonElement")>]
            static member HTMLButtonElement with get() : FunScript.TypeScript.AnonymousType111 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType111) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLSourceElement)"); CompiledName("HTMLSourceElement")>]
            static member HTMLSourceElement with get() : FunScript.TypeScript.AnonymousType112 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType112) : unit = failwith "never"
            [<FunScript.JSEmitInline("(CanvasGradient)"); CompiledName("CanvasGradient")>]
            static member CanvasGradient with get() : FunScript.TypeScript.AnonymousType113 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType113) : unit = failwith "never"
            [<FunScript.JSEmitInline("(KeyboardEvent)"); CompiledName("KeyboardEvent")>]
            static member KeyboardEvent with get() : FunScript.TypeScript.AnonymousType114 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType114) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MessageEvent)"); CompiledName("MessageEvent")>]
            static member MessageEvent with get() : FunScript.TypeScript.AnonymousType115 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType115) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGElement)"); CompiledName("SVGElement")>]
            static member SVGElement with get() : FunScript.TypeScript.AnonymousType116 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType116) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLScriptElement)"); CompiledName("HTMLScriptElement")>]
            static member HTMLScriptElement with get() : FunScript.TypeScript.AnonymousType117 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType117) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLTableRowElement)"); CompiledName("HTMLTableRowElement")>]
            static member HTMLTableRowElement with get() : FunScript.TypeScript.AnonymousType118 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType118) : unit = failwith "never"
            [<FunScript.JSEmitInline("(CanvasRenderingContext2D)"); CompiledName("CanvasRenderingContext2D")>]
            static member CanvasRenderingContext2D with get() : FunScript.TypeScript.AnonymousType119 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType119) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MSCSSRuleList)"); CompiledName("MSCSSRuleList")>]
            static member MSCSSRuleList with get() : FunScript.TypeScript.AnonymousType120 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType120) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGPathSegLinetoHorizontalAbs)"); CompiledName("SVGPathSegLinetoHorizontalAbs")>]
            static member SVGPathSegLinetoHorizontalAbs with get() : FunScript.TypeScript.AnonymousType121 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType121) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGPathSegArcAbs)"); CompiledName("SVGPathSegArcAbs")>]
            static member SVGPathSegArcAbs with get() : FunScript.TypeScript.AnonymousType122 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType122) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGTransformList)"); CompiledName("SVGTransformList")>]
            static member SVGTransformList with get() : FunScript.TypeScript.AnonymousType123 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType123) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLHtmlElement)"); CompiledName("HTMLHtmlElement")>]
            static member HTMLHtmlElement with get() : FunScript.TypeScript.AnonymousType124 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType124) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGPathSegClosePath)"); CompiledName("SVGPathSegClosePath")>]
            static member SVGPathSegClosePath with get() : FunScript.TypeScript.AnonymousType125 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType125) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLFrameElement)"); CompiledName("HTMLFrameElement")>]
            static member HTMLFrameElement with get() : FunScript.TypeScript.AnonymousType126 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType126) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGAnimatedLength)"); CompiledName("SVGAnimatedLength")>]
            static member SVGAnimatedLength with get() : FunScript.TypeScript.AnonymousType127 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType127) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGDefsElement)"); CompiledName("SVGDefsElement")>]
            static member SVGDefsElement with get() : FunScript.TypeScript.AnonymousType128 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType128) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLQuoteElement)"); CompiledName("HTMLQuoteElement")>]
            static member HTMLQuoteElement with get() : FunScript.TypeScript.AnonymousType129 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType129) : unit = failwith "never"
            [<FunScript.JSEmitInline("(CSSMediaRule)"); CompiledName("CSSMediaRule")>]
            static member CSSMediaRule with get() : FunScript.TypeScript.AnonymousType130 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType130) : unit = failwith "never"
            [<FunScript.JSEmitInline("(XMLHttpRequest)"); CompiledName("XMLHttpRequest")>]
            static member XMLHttpRequest with get() : FunScript.TypeScript.AnonymousType131 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType131) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLTableHeaderCellElement)"); CompiledName("HTMLTableHeaderCellElement")>]
            static member HTMLTableHeaderCellElement with get() : FunScript.TypeScript.AnonymousType132 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType132) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLDListElement)"); CompiledName("HTMLDListElement")>]
            static member HTMLDListElement with get() : FunScript.TypeScript.AnonymousType133 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType133) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGPathSegLinetoHorizontalRel)"); CompiledName("SVGPathSegLinetoHorizontalRel")>]
            static member SVGPathSegLinetoHorizontalRel with get() : FunScript.TypeScript.AnonymousType134 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType134) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGEllipseElement)"); CompiledName("SVGEllipseElement")>]
            static member SVGEllipseElement with get() : FunScript.TypeScript.AnonymousType135 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType135) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGAElement)"); CompiledName("SVGAElement")>]
            static member SVGAElement with get() : FunScript.TypeScript.AnonymousType136 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType136) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLFrameSetElement)"); CompiledName("HTMLFrameSetElement")>]
            static member HTMLFrameSetElement with get() : FunScript.TypeScript.AnonymousType137 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType137) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Screen)"); CompiledName("Screen")>]
            static member Screen with get() : FunScript.TypeScript.AnonymousType138 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType138) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Coordinates)"); CompiledName("Coordinates")>]
            static member Coordinates with get() : FunScript.TypeScript.AnonymousType139 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType139) : unit = failwith "never"
            [<FunScript.JSEmitInline("(DataTransfer)"); CompiledName("DataTransfer")>]
            static member DataTransfer with get() : FunScript.TypeScript.AnonymousType140 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType140) : unit = failwith "never"
            [<FunScript.JSEmitInline("(FocusEvent)"); CompiledName("FocusEvent")>]
            static member FocusEvent with get() : FunScript.TypeScript.AnonymousType141 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType141) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Range)"); CompiledName("Range")>]
            static member Range with get() : FunScript.TypeScript.AnonymousType142 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType142) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGPoint)"); CompiledName("SVGPoint")>]
            static member SVGPoint with get() : FunScript.TypeScript.AnonymousType143 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType143) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MSPluginsCollection)"); CompiledName("MSPluginsCollection")>]
            static member MSPluginsCollection with get() : FunScript.TypeScript.AnonymousType144 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType144) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGAnimatedNumberList)"); CompiledName("SVGAnimatedNumberList")>]
            static member SVGAnimatedNumberList with get() : FunScript.TypeScript.AnonymousType145 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType145) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGSVGElement)"); CompiledName("SVGSVGElement")>]
            static member SVGSVGElement with get() : FunScript.TypeScript.AnonymousType146 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType146) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLLabelElement)"); CompiledName("HTMLLabelElement")>]
            static member HTMLLabelElement with get() : FunScript.TypeScript.AnonymousType147 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType147) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLLegendElement)"); CompiledName("HTMLLegendElement")>]
            static member HTMLLegendElement with get() : FunScript.TypeScript.AnonymousType148 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType148) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLDirectoryElement)"); CompiledName("HTMLDirectoryElement")>]
            static member HTMLDirectoryElement with get() : FunScript.TypeScript.AnonymousType149 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType149) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGAnimatedInteger)"); CompiledName("SVGAnimatedInteger")>]
            static member SVGAnimatedInteger with get() : FunScript.TypeScript.AnonymousType150 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType150) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGTextElement)"); CompiledName("SVGTextElement")>]
            static member SVGTextElement with get() : FunScript.TypeScript.AnonymousType151 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType151) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGTSpanElement)"); CompiledName("SVGTSpanElement")>]
            static member SVGTSpanElement with get() : FunScript.TypeScript.AnonymousType152 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType152) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLLIElement)"); CompiledName("HTMLLIElement")>]
            static member HTMLLIElement with get() : FunScript.TypeScript.AnonymousType153 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType153) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGPathSegLinetoVerticalAbs)"); CompiledName("SVGPathSegLinetoVerticalAbs")>]
            static member SVGPathSegLinetoVerticalAbs with get() : FunScript.TypeScript.AnonymousType154 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType154) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGStyleElement)"); CompiledName("SVGStyleElement")>]
            static member SVGStyleElement with get() : FunScript.TypeScript.AnonymousType155 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType155) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MSCurrentStyleCSSProperties)"); CompiledName("MSCurrentStyleCSSProperties")>]
            static member MSCurrentStyleCSSProperties with get() : FunScript.TypeScript.AnonymousType156 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType156) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Storage)"); CompiledName("Storage")>]
            static member Storage with get() : FunScript.TypeScript.AnonymousType157 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType157) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLIFrameElement)"); CompiledName("HTMLIFrameElement")>]
            static member HTMLIFrameElement with get() : FunScript.TypeScript.AnonymousType158 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType158) : unit = failwith "never"
            [<FunScript.JSEmitInline("(TextRangeCollection)"); CompiledName("TextRangeCollection")>]
            static member TextRangeCollection with get() : FunScript.TypeScript.AnonymousType159 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType159) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLBodyElement)"); CompiledName("HTMLBodyElement")>]
            static member HTMLBodyElement with get() : FunScript.TypeScript.AnonymousType160 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType160) : unit = failwith "never"
            [<FunScript.JSEmitInline("(DocumentType)"); CompiledName("DocumentType")>]
            static member DocumentType with get() : FunScript.TypeScript.AnonymousType161 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType161) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGRadialGradientElement)"); CompiledName("SVGRadialGradientElement")>]
            static member SVGRadialGradientElement with get() : FunScript.TypeScript.AnonymousType162 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType162) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MutationEvent)"); CompiledName("MutationEvent")>]
            static member MutationEvent with get() : FunScript.TypeScript.AnonymousType163 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType163) : unit = failwith "never"
            [<FunScript.JSEmitInline("(DragEvent)"); CompiledName("DragEvent")>]
            static member DragEvent with get() : FunScript.TypeScript.AnonymousType164 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType164) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLTableSectionElement)"); CompiledName("HTMLTableSectionElement")>]
            static member HTMLTableSectionElement with get() : FunScript.TypeScript.AnonymousType165 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType165) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLInputElement)"); CompiledName("HTMLInputElement")>]
            static member HTMLInputElement with get() : FunScript.TypeScript.AnonymousType166 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType166) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLAnchorElement)"); CompiledName("HTMLAnchorElement")>]
            static member HTMLAnchorElement with get() : FunScript.TypeScript.AnonymousType167 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType167) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLParamElement)"); CompiledName("HTMLParamElement")>]
            static member HTMLParamElement with get() : FunScript.TypeScript.AnonymousType168 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType168) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGImageElement)"); CompiledName("SVGImageElement")>]
            static member SVGImageElement with get() : FunScript.TypeScript.AnonymousType169 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType169) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGAnimatedNumber)"); CompiledName("SVGAnimatedNumber")>]
            static member SVGAnimatedNumber with get() : FunScript.TypeScript.AnonymousType170 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType170) : unit = failwith "never"
            [<FunScript.JSEmitInline("(PerformanceTiming)"); CompiledName("PerformanceTiming")>]
            static member PerformanceTiming with get() : FunScript.TypeScript.AnonymousType171 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType171) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLPreElement)"); CompiledName("HTMLPreElement")>]
            static member HTMLPreElement with get() : FunScript.TypeScript.AnonymousType172 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType172) : unit = failwith "never"
            [<FunScript.JSEmitInline("(EventException)"); CompiledName("EventException")>]
            static member EventException with get() : FunScript.TypeScript.AnonymousType173 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType173) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGMetadataElement)"); CompiledName("SVGMetadataElement")>]
            static member SVGMetadataElement with get() : FunScript.TypeScript.AnonymousType174 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType174) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGPathSegArcRel)"); CompiledName("SVGPathSegArcRel")>]
            static member SVGPathSegArcRel with get() : FunScript.TypeScript.AnonymousType175 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType175) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGPathSegMovetoAbs)"); CompiledName("SVGPathSegMovetoAbs")>]
            static member SVGPathSegMovetoAbs with get() : FunScript.TypeScript.AnonymousType176 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType176) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGStringList)"); CompiledName("SVGStringList")>]
            static member SVGStringList with get() : FunScript.TypeScript.AnonymousType177 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType177) : unit = failwith "never"
            [<FunScript.JSEmitInline("(XDomainRequest)"); CompiledName("XDomainRequest")>]
            static member XDomainRequest with get() : FunScript.TypeScript.AnonymousType178 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType178) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGLength)"); CompiledName("SVGLength")>]
            static member SVGLength with get() : FunScript.TypeScript.AnonymousType179 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType179) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGPolygonElement)"); CompiledName("SVGPolygonElement")>]
            static member SVGPolygonElement with get() : FunScript.TypeScript.AnonymousType180 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType180) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLPhraseElement)"); CompiledName("HTMLPhraseElement")>]
            static member HTMLPhraseElement with get() : FunScript.TypeScript.AnonymousType181 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType181) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGPathSegCurvetoCubicRel)"); CompiledName("SVGPathSegCurvetoCubicRel")>]
            static member SVGPathSegCurvetoCubicRel with get() : FunScript.TypeScript.AnonymousType182 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType182) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGTextContentElement)"); CompiledName("SVGTextContentElement")>]
            static member SVGTextContentElement with get() : FunScript.TypeScript.AnonymousType183 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType183) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Location)"); CompiledName("Location")>]
            static member Location with get() : FunScript.TypeScript.AnonymousType184 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType184) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLTitleElement)"); CompiledName("HTMLTitleElement")>]
            static member HTMLTitleElement with get() : FunScript.TypeScript.AnonymousType185 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType185) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLStyleElement)"); CompiledName("HTMLStyleElement")>]
            static member HTMLStyleElement with get() : FunScript.TypeScript.AnonymousType186 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType186) : unit = failwith "never"
            [<FunScript.JSEmitInline("(PerformanceEntry)"); CompiledName("PerformanceEntry")>]
            static member PerformanceEntry with get() : FunScript.TypeScript.AnonymousType187 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType187) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGTransform)"); CompiledName("SVGTransform")>]
            static member SVGTransform with get() : FunScript.TypeScript.AnonymousType188 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType188) : unit = failwith "never"
            [<FunScript.JSEmitInline("(UIEvent)"); CompiledName("UIEvent")>]
            static member UIEvent with get() : FunScript.TypeScript.AnonymousType189 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType189) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGPathSeg)"); CompiledName("SVGPathSeg")>]
            static member SVGPathSeg with get() : FunScript.TypeScript.AnonymousType190 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType190) : unit = failwith "never"
            [<FunScript.JSEmitInline("(WheelEvent)"); CompiledName("WheelEvent")>]
            static member WheelEvent with get() : FunScript.TypeScript.AnonymousType191 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType191) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGNumber)"); CompiledName("SVGNumber")>]
            static member SVGNumber with get() : FunScript.TypeScript.AnonymousType192 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType192) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGPathElement)"); CompiledName("SVGPathElement")>]
            static member SVGPathElement with get() : FunScript.TypeScript.AnonymousType193 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType193) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MSCompatibleInfo)"); CompiledName("MSCompatibleInfo")>]
            static member MSCompatibleInfo with get() : FunScript.TypeScript.AnonymousType194 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType194) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Text)"); CompiledName("Text")>]
            static member Text with get() : FunScript.TypeScript.AnonymousType195 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType195) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGAnimatedRect)"); CompiledName("SVGAnimatedRect")>]
            static member SVGAnimatedRect with get() : FunScript.TypeScript.AnonymousType196 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType196) : unit = failwith "never"
            [<FunScript.JSEmitInline("(CSSNamespaceRule)"); CompiledName("CSSNamespaceRule")>]
            static member CSSNamespaceRule with get() : FunScript.TypeScript.AnonymousType197 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType197) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGPathSegList)"); CompiledName("SVGPathSegList")>]
            static member SVGPathSegList with get() : FunScript.TypeScript.AnonymousType198 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType198) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLUnknownElement)"); CompiledName("HTMLUnknownElement")>]
            static member HTMLUnknownElement with get() : FunScript.TypeScript.AnonymousType199 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType199) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLAudioElement)"); CompiledName("HTMLAudioElement")>]
            static member HTMLAudioElement with get() : FunScript.TypeScript.AnonymousType200 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType200) : unit = failwith "never"
            [<FunScript.JSEmitInline("(PositionError)"); CompiledName("PositionError")>]
            static member PositionError with get() : FunScript.TypeScript.AnonymousType201 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType201) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLTableCellElement)"); CompiledName("HTMLTableCellElement")>]
            static member HTMLTableCellElement with get() : FunScript.TypeScript.AnonymousType202 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType202) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGElementInstance)"); CompiledName("SVGElementInstance")>]
            static member SVGElementInstance with get() : FunScript.TypeScript.AnonymousType203 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType203) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MSNamespaceInfoCollection)"); CompiledName("MSNamespaceInfoCollection")>]
            static member MSNamespaceInfoCollection with get() : FunScript.TypeScript.AnonymousType204 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType204) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGCircleElement)"); CompiledName("SVGCircleElement")>]
            static member SVGCircleElement with get() : FunScript.TypeScript.AnonymousType205 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType205) : unit = failwith "never"
            [<FunScript.JSEmitInline("(StyleSheetList)"); CompiledName("StyleSheetList")>]
            static member StyleSheetList with get() : FunScript.TypeScript.AnonymousType206 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType206) : unit = failwith "never"
            [<FunScript.JSEmitInline("(CSSImportRule)"); CompiledName("CSSImportRule")>]
            static member CSSImportRule with get() : FunScript.TypeScript.AnonymousType207 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType207) : unit = failwith "never"
            [<FunScript.JSEmitInline("(CustomEvent)"); CompiledName("CustomEvent")>]
            static member CustomEvent with get() : FunScript.TypeScript.AnonymousType208 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType208) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLBaseFontElement)"); CompiledName("HTMLBaseFontElement")>]
            static member HTMLBaseFontElement with get() : FunScript.TypeScript.AnonymousType209 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType209) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLTextAreaElement)"); CompiledName("HTMLTextAreaElement")>]
            static member HTMLTextAreaElement with get() : FunScript.TypeScript.AnonymousType210 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType210) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Geolocation)"); CompiledName("Geolocation")>]
            static member Geolocation with get() : FunScript.TypeScript.AnonymousType211 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType211) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLMarqueeElement)"); CompiledName("HTMLMarqueeElement")>]
            static member HTMLMarqueeElement with get() : FunScript.TypeScript.AnonymousType212 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType212) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGRect)"); CompiledName("SVGRect")>]
            static member SVGRect with get() : FunScript.TypeScript.AnonymousType213 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType213) : unit = failwith "never"
            [<FunScript.JSEmitInline("(History)"); CompiledName("History")>]
            static member History with get() : FunScript.TypeScript.AnonymousType214 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType214) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGPathSegCurvetoCubicAbs)"); CompiledName("SVGPathSegCurvetoCubicAbs")>]
            static member SVGPathSegCurvetoCubicAbs with get() : FunScript.TypeScript.AnonymousType215 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType215) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGPathSegCurvetoQuadraticAbs)"); CompiledName("SVGPathSegCurvetoQuadraticAbs")>]
            static member SVGPathSegCurvetoQuadraticAbs with get() : FunScript.TypeScript.AnonymousType216 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType216) : unit = failwith "never"
            [<FunScript.JSEmitInline("(TimeRanges)"); CompiledName("TimeRanges")>]
            static member TimeRanges with get() : FunScript.TypeScript.AnonymousType217 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType217) : unit = failwith "never"
            [<FunScript.JSEmitInline("(CSSRule)"); CompiledName("CSSRule")>]
            static member CSSRule with get() : FunScript.TypeScript.AnonymousType218 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType218) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGPathSegLinetoAbs)"); CompiledName("SVGPathSegLinetoAbs")>]
            static member SVGPathSegLinetoAbs with get() : FunScript.TypeScript.AnonymousType219 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType219) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLModElement)"); CompiledName("HTMLModElement")>]
            static member HTMLModElement with get() : FunScript.TypeScript.AnonymousType220 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType220) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGMatrix)"); CompiledName("SVGMatrix")>]
            static member SVGMatrix with get() : FunScript.TypeScript.AnonymousType221 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType221) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MSPopupWindow)"); CompiledName("MSPopupWindow")>]
            static member MSPopupWindow with get() : FunScript.TypeScript.AnonymousType222 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType222) : unit = failwith "never"
            [<FunScript.JSEmitInline("(BeforeUnloadEvent)"); CompiledName("BeforeUnloadEvent")>]
            static member BeforeUnloadEvent with get() : FunScript.TypeScript.AnonymousType223 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType223) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGUseElement)"); CompiledName("SVGUseElement")>]
            static member SVGUseElement with get() : FunScript.TypeScript.AnonymousType224 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType224) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Event)"); CompiledName("Event")>]
            static member Event with get() : FunScript.TypeScript.AnonymousType225 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType225) : unit = failwith "never"
            [<FunScript.JSEmitInline("(ImageData)"); CompiledName("ImageData")>]
            static member ImageData with get() : FunScript.TypeScript.AnonymousType226 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType226) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLTableColElement)"); CompiledName("HTMLTableColElement")>]
            static member HTMLTableColElement with get() : FunScript.TypeScript.AnonymousType227 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType227) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGException)"); CompiledName("SVGException")>]
            static member SVGException with get() : FunScript.TypeScript.AnonymousType228 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType228) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGLinearGradientElement)"); CompiledName("SVGLinearGradientElement")>]
            static member SVGLinearGradientElement with get() : FunScript.TypeScript.AnonymousType229 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType229) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGAnimatedEnumeration)"); CompiledName("SVGAnimatedEnumeration")>]
            static member SVGAnimatedEnumeration with get() : FunScript.TypeScript.AnonymousType230 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType230) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLUListElement)"); CompiledName("HTMLUListElement")>]
            static member HTMLUListElement with get() : FunScript.TypeScript.AnonymousType231 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType231) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGRectElement)"); CompiledName("SVGRectElement")>]
            static member SVGRectElement with get() : FunScript.TypeScript.AnonymousType232 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType232) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLDivElement)"); CompiledName("HTMLDivElement")>]
            static member HTMLDivElement with get() : FunScript.TypeScript.AnonymousType233 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType233) : unit = failwith "never"
            [<FunScript.JSEmitInline("(NamedNodeMap)"); CompiledName("NamedNodeMap")>]
            static member NamedNodeMap with get() : FunScript.TypeScript.AnonymousType234 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType234) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MediaList)"); CompiledName("MediaList")>]
            static member MediaList with get() : FunScript.TypeScript.AnonymousType235 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType235) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGPathSegCurvetoQuadraticSmoothAbs)"); CompiledName("SVGPathSegCurvetoQuadraticSmoothAbs")>]
            static member SVGPathSegCurvetoQuadraticSmoothAbs with get() : FunScript.TypeScript.AnonymousType236 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType236) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGPathSegCurvetoCubicSmoothRel)"); CompiledName("SVGPathSegCurvetoCubicSmoothRel")>]
            static member SVGPathSegCurvetoCubicSmoothRel with get() : FunScript.TypeScript.AnonymousType237 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType237) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGLengthList)"); CompiledName("SVGLengthList")>]
            static member SVGLengthList with get() : FunScript.TypeScript.AnonymousType238 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType238) : unit = failwith "never"
            [<FunScript.JSEmitInline("(ProcessingInstruction)"); CompiledName("ProcessingInstruction")>]
            static member ProcessingInstruction with get() : FunScript.TypeScript.AnonymousType239 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType239) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MSBehaviorUrnsCollection)"); CompiledName("MSBehaviorUrnsCollection")>]
            static member MSBehaviorUrnsCollection with get() : FunScript.TypeScript.AnonymousType240 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType240) : unit = failwith "never"
            [<FunScript.JSEmitInline("(CSSFontFaceRule)"); CompiledName("CSSFontFaceRule")>]
            static member CSSFontFaceRule with get() : FunScript.TypeScript.AnonymousType241 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType241) : unit = failwith "never"
            [<FunScript.JSEmitInline("(TextEvent)"); CompiledName("TextEvent")>]
            static member TextEvent with get() : FunScript.TypeScript.AnonymousType242 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType242) : unit = failwith "never"
            [<FunScript.JSEmitInline("(DocumentFragment)"); CompiledName("DocumentFragment")>]
            static member DocumentFragment with get() : FunScript.TypeScript.AnonymousType243 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType243) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGPolylineElement)"); CompiledName("SVGPolylineElement")>]
            static member SVGPolylineElement with get() : FunScript.TypeScript.AnonymousType244 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType244) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Position)"); CompiledName("Position")>]
            static member Position with get() : FunScript.TypeScript.AnonymousType245 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType245) : unit = failwith "never"
            [<FunScript.JSEmitInline("(BookmarkCollection)"); CompiledName("BookmarkCollection")>]
            static member BookmarkCollection with get() : FunScript.TypeScript.AnonymousType246 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType246) : unit = failwith "never"
            [<FunScript.JSEmitInline("(PerformanceMark)"); CompiledName("PerformanceMark")>]
            static member PerformanceMark with get() : FunScript.TypeScript.AnonymousType247 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType247) : unit = failwith "never"
            [<FunScript.JSEmitInline("(CSSPageRule)"); CompiledName("CSSPageRule")>]
            static member CSSPageRule with get() : FunScript.TypeScript.AnonymousType248 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType248) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLBRElement)"); CompiledName("HTMLBRElement")>]
            static member HTMLBRElement with get() : FunScript.TypeScript.AnonymousType249 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType249) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLSpanElement)"); CompiledName("HTMLSpanElement")>]
            static member HTMLSpanElement with get() : FunScript.TypeScript.AnonymousType250 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType250) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLHeadElement)"); CompiledName("HTMLHeadElement")>]
            static member HTMLHeadElement with get() : FunScript.TypeScript.AnonymousType251 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType251) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLHeadingElement)"); CompiledName("HTMLHeadingElement")>]
            static member HTMLHeadingElement with get() : FunScript.TypeScript.AnonymousType252 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType252) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLFormElement)"); CompiledName("HTMLFormElement")>]
            static member HTMLFormElement with get() : FunScript.TypeScript.AnonymousType253 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType253) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGZoomAndPan)"); CompiledName("SVGZoomAndPan")>]
            static member SVGZoomAndPan with get() : FunScript.TypeScript.SVGZoomAndPan = failwith "never" and set (v : FunScript.TypeScript.SVGZoomAndPan) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLMediaElement)"); CompiledName("HTMLMediaElement")>]
            static member HTMLMediaElement with get() : FunScript.TypeScript.AnonymousType254 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType254) : unit = failwith "never"
            [<FunScript.JSEmitInline("(DOMParser)"); CompiledName("DOMParser")>]
            static member DOMParser with get() : FunScript.TypeScript.AnonymousType255 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType255) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MSMimeTypesCollection)"); CompiledName("MSMimeTypesCollection")>]
            static member MSMimeTypesCollection with get() : FunScript.TypeScript.AnonymousType256 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType256) : unit = failwith "never"
            [<FunScript.JSEmitInline("(StyleSheet)"); CompiledName("StyleSheet")>]
            static member StyleSheet with get() : FunScript.TypeScript.AnonymousType257 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType257) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGTextPathElement)"); CompiledName("SVGTextPathElement")>]
            static member SVGTextPathElement with get() : FunScript.TypeScript.AnonymousType258 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType258) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLDTElement)"); CompiledName("HTMLDTElement")>]
            static member HTMLDTElement with get() : FunScript.TypeScript.AnonymousType259 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType259) : unit = failwith "never"
            [<FunScript.JSEmitInline("(NodeList)"); CompiledName("NodeList")>]
            static member NodeList with get() : FunScript.TypeScript.AnonymousType260 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType260) : unit = failwith "never"
            [<FunScript.JSEmitInline("(XMLSerializer)"); CompiledName("XMLSerializer")>]
            static member XMLSerializer with get() : FunScript.TypeScript.AnonymousType261 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType261) : unit = failwith "never"
            [<FunScript.JSEmitInline("(PerformanceMeasure)"); CompiledName("PerformanceMeasure")>]
            static member PerformanceMeasure with get() : FunScript.TypeScript.AnonymousType262 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType262) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGGradientElement)"); CompiledName("SVGGradientElement")>]
            static member SVGGradientElement with get() : FunScript.TypeScript.AnonymousType263 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType263) : unit = failwith "never"
            [<FunScript.JSEmitInline("(NodeFilter)"); CompiledName("NodeFilter")>]
            static member NodeFilter with get() : FunScript.TypeScript.NodeFilter = failwith "never" and set (v : FunScript.TypeScript.NodeFilter) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGNumberList)"); CompiledName("SVGNumberList")>]
            static member SVGNumberList with get() : FunScript.TypeScript.AnonymousType264 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType264) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MediaError)"); CompiledName("MediaError")>]
            static member MediaError with get() : FunScript.TypeScript.AnonymousType265 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType265) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLFieldSetElement)"); CompiledName("HTMLFieldSetElement")>]
            static member HTMLFieldSetElement with get() : FunScript.TypeScript.AnonymousType266 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType266) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLBGSoundElement)"); CompiledName("HTMLBGSoundElement")>]
            static member HTMLBGSoundElement with get() : FunScript.TypeScript.AnonymousType267 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType267) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Comment)"); CompiledName("Comment")>]
            static member Comment with get() : FunScript.TypeScript.AnonymousType268 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType268) : unit = failwith "never"
            [<FunScript.JSEmitInline("(PerformanceResourceTiming)"); CompiledName("PerformanceResourceTiming")>]
            static member PerformanceResourceTiming with get() : FunScript.TypeScript.AnonymousType269 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType269) : unit = failwith "never"
            [<FunScript.JSEmitInline("(CanvasPattern)"); CompiledName("CanvasPattern")>]
            static member CanvasPattern with get() : FunScript.TypeScript.AnonymousType270 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType270) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLHRElement)"); CompiledName("HTMLHRElement")>]
            static member HTMLHRElement with get() : FunScript.TypeScript.AnonymousType271 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType271) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLObjectElement)"); CompiledName("HTMLObjectElement")>]
            static member HTMLObjectElement with get() : FunScript.TypeScript.AnonymousType272 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType272) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLEmbedElement)"); CompiledName("HTMLEmbedElement")>]
            static member HTMLEmbedElement with get() : FunScript.TypeScript.AnonymousType273 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType273) : unit = failwith "never"
            [<FunScript.JSEmitInline("(StorageEvent)"); CompiledName("StorageEvent")>]
            static member StorageEvent with get() : FunScript.TypeScript.AnonymousType274 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType274) : unit = failwith "never"
            [<FunScript.JSEmitInline("(CharacterData)"); CompiledName("CharacterData")>]
            static member CharacterData with get() : FunScript.TypeScript.AnonymousType275 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType275) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLOptGroupElement)"); CompiledName("HTMLOptGroupElement")>]
            static member HTMLOptGroupElement with get() : FunScript.TypeScript.AnonymousType276 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType276) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLIsIndexElement)"); CompiledName("HTMLIsIndexElement")>]
            static member HTMLIsIndexElement with get() : FunScript.TypeScript.AnonymousType277 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType277) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGPathSegLinetoRel)"); CompiledName("SVGPathSegLinetoRel")>]
            static member SVGPathSegLinetoRel with get() : FunScript.TypeScript.AnonymousType278 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType278) : unit = failwith "never"
            [<FunScript.JSEmitInline("(DOMException)"); CompiledName("DOMException")>]
            static member DOMException with get() : FunScript.TypeScript.AnonymousType279 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType279) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGAnimatedBoolean)"); CompiledName("SVGAnimatedBoolean")>]
            static member SVGAnimatedBoolean with get() : FunScript.TypeScript.AnonymousType280 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType280) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MSCompatibleInfoCollection)"); CompiledName("MSCompatibleInfoCollection")>]
            static member MSCompatibleInfoCollection with get() : FunScript.TypeScript.AnonymousType281 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType281) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGSwitchElement)"); CompiledName("SVGSwitchElement")>]
            static member SVGSwitchElement with get() : FunScript.TypeScript.AnonymousType282 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType282) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGPreserveAspectRatio)"); CompiledName("SVGPreserveAspectRatio")>]
            static member SVGPreserveAspectRatio with get() : FunScript.TypeScript.AnonymousType283 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType283) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Attr)"); CompiledName("Attr")>]
            static member Attr with get() : FunScript.TypeScript.AnonymousType284 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType284) : unit = failwith "never"
            [<FunScript.JSEmitInline("(PerformanceNavigation)"); CompiledName("PerformanceNavigation")>]
            static member PerformanceNavigation with get() : FunScript.TypeScript.AnonymousType285 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType285) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGStopElement)"); CompiledName("SVGStopElement")>]
            static member SVGStopElement with get() : FunScript.TypeScript.AnonymousType286 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType286) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGSymbolElement)"); CompiledName("SVGSymbolElement")>]
            static member SVGSymbolElement with get() : FunScript.TypeScript.AnonymousType287 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType287) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGElementInstanceList)"); CompiledName("SVGElementInstanceList")>]
            static member SVGElementInstanceList with get() : FunScript.TypeScript.AnonymousType288 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType288) : unit = failwith "never"
            [<FunScript.JSEmitInline("(CSSRuleList)"); CompiledName("CSSRuleList")>]
            static member CSSRuleList with get() : FunScript.TypeScript.AnonymousType289 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType289) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLVideoElement)"); CompiledName("HTMLVideoElement")>]
            static member HTMLVideoElement with get() : FunScript.TypeScript.AnonymousType290 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType290) : unit = failwith "never"
            [<FunScript.JSEmitInline("(ClientRectList)"); CompiledName("ClientRectList")>]
            static member ClientRectList with get() : FunScript.TypeScript.AnonymousType291 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType291) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGMaskElement)"); CompiledName("SVGMaskElement")>]
            static member SVGMaskElement with get() : FunScript.TypeScript.AnonymousType292 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType292) : unit = failwith "never"
            [<FunScript.JSEmitInline("(External)"); CompiledName("External")>]
            static member External with get() : FunScript.TypeScript.AnonymousType293 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType293) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MSGestureEvent)"); CompiledName("MSGestureEvent")>]
            static member MSGestureEvent with get() : FunScript.TypeScript.AnonymousType294 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType294) : unit = failwith "never"
            [<FunScript.JSEmitInline("(ErrorEvent)"); CompiledName("ErrorEvent")>]
            static member ErrorEvent with get() : FunScript.TypeScript.AnonymousType295 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType295) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGFilterElement)"); CompiledName("SVGFilterElement")>]
            static member SVGFilterElement with get() : FunScript.TypeScript.AnonymousType296 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType296) : unit = failwith "never"
            [<FunScript.JSEmitInline("(TrackEvent)"); CompiledName("TrackEvent")>]
            static member TrackEvent with get() : FunScript.TypeScript.AnonymousType297 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType297) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGFEMergeNodeElement)"); CompiledName("SVGFEMergeNodeElement")>]
            static member SVGFEMergeNodeElement with get() : FunScript.TypeScript.AnonymousType298 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType298) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGFEFloodElement)"); CompiledName("SVGFEFloodElement")>]
            static member SVGFEFloodElement with get() : FunScript.TypeScript.AnonymousType299 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType299) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MSGesture)"); CompiledName("MSGesture")>]
            static member MSGesture with get() : FunScript.TypeScript.AnonymousType300 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType300) : unit = failwith "never"
            [<FunScript.JSEmitInline("(TextTrackCue)"); CompiledName("TextTrackCue")>]
            static member TextTrackCue with get() : FunScript.TypeScript.AnonymousType301 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType301) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MSStreamReader)"); CompiledName("MSStreamReader")>]
            static member MSStreamReader with get() : FunScript.TypeScript.AnonymousType302 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType302) : unit = failwith "never"
            [<FunScript.JSEmitInline("(DOMTokenList)"); CompiledName("DOMTokenList")>]
            static member DOMTokenList with get() : FunScript.TypeScript.AnonymousType303 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType303) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGFEFuncAElement)"); CompiledName("SVGFEFuncAElement")>]
            static member SVGFEFuncAElement with get() : FunScript.TypeScript.AnonymousType304 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType304) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGFETileElement)"); CompiledName("SVGFETileElement")>]
            static member SVGFETileElement with get() : FunScript.TypeScript.AnonymousType305 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType305) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGFEBlendElement)"); CompiledName("SVGFEBlendElement")>]
            static member SVGFEBlendElement with get() : FunScript.TypeScript.AnonymousType306 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType306) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MessageChannel)"); CompiledName("MessageChannel")>]
            static member MessageChannel with get() : FunScript.TypeScript.AnonymousType307 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType307) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGFEMergeElement)"); CompiledName("SVGFEMergeElement")>]
            static member SVGFEMergeElement with get() : FunScript.TypeScript.AnonymousType308 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType308) : unit = failwith "never"
            [<FunScript.JSEmitInline("(TransitionEvent)"); CompiledName("TransitionEvent")>]
            static member TransitionEvent with get() : FunScript.TypeScript.AnonymousType309 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType309) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MediaQueryList)"); CompiledName("MediaQueryList")>]
            static member MediaQueryList with get() : FunScript.TypeScript.AnonymousType310 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType310) : unit = failwith "never"
            [<FunScript.JSEmitInline("(DOMError)"); CompiledName("DOMError")>]
            static member DOMError with get() : FunScript.TypeScript.AnonymousType311 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType311) : unit = failwith "never"
            [<FunScript.JSEmitInline("(CloseEvent)"); CompiledName("CloseEvent")>]
            static member CloseEvent with get() : FunScript.TypeScript.AnonymousType312 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType312) : unit = failwith "never"
            [<FunScript.JSEmitInline("(WebSocket)"); CompiledName("WebSocket")>]
            static member WebSocket with get() : FunScript.TypeScript.AnonymousType313 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType313) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGFEPointLightElement)"); CompiledName("SVGFEPointLightElement")>]
            static member SVGFEPointLightElement with get() : FunScript.TypeScript.AnonymousType314 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType314) : unit = failwith "never"
            [<FunScript.JSEmitInline("(ProgressEvent)"); CompiledName("ProgressEvent")>]
            static member ProgressEvent with get() : FunScript.TypeScript.AnonymousType315 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType315) : unit = failwith "never"
            [<FunScript.JSEmitInline("(IDBObjectStore)"); CompiledName("IDBObjectStore")>]
            static member IDBObjectStore with get() : FunScript.TypeScript.AnonymousType316 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType316) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGFEGaussianBlurElement)"); CompiledName("SVGFEGaussianBlurElement")>]
            static member SVGFEGaussianBlurElement with get() : FunScript.TypeScript.AnonymousType317 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType317) : unit = failwith "never"
            [<FunScript.JSEmitInline("(IDBVersionChangeEvent)"); CompiledName("IDBVersionChangeEvent")>]
            static member IDBVersionChangeEvent with get() : FunScript.TypeScript.AnonymousType318 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType318) : unit = failwith "never"
            [<FunScript.JSEmitInline("(IDBIndex)"); CompiledName("IDBIndex")>]
            static member IDBIndex with get() : FunScript.TypeScript.AnonymousType319 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType319) : unit = failwith "never"
            [<FunScript.JSEmitInline("(FileList)"); CompiledName("FileList")>]
            static member FileList with get() : FunScript.TypeScript.AnonymousType320 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType320) : unit = failwith "never"
            [<FunScript.JSEmitInline("(IDBCursor)"); CompiledName("IDBCursor")>]
            static member IDBCursor with get() : FunScript.TypeScript.AnonymousType321 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType321) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGFESpecularLightingElement)"); CompiledName("SVGFESpecularLightingElement")>]
            static member SVGFESpecularLightingElement with get() : FunScript.TypeScript.AnonymousType322 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType322) : unit = failwith "never"
            [<FunScript.JSEmitInline("(File)"); CompiledName("File")>]
            static member File with get() : FunScript.TypeScript.AnonymousType323 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType323) : unit = failwith "never"
            [<FunScript.JSEmitInline("(URL)"); CompiledName("URL")>]
            static member URL with get() : FunScript.TypeScript.URL = failwith "never" and set (v : FunScript.TypeScript.URL) : unit = failwith "never"
            [<FunScript.JSEmitInline("(IDBCursorWithValue)"); CompiledName("IDBCursorWithValue")>]
            static member IDBCursorWithValue with get() : FunScript.TypeScript.AnonymousType324 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType324) : unit = failwith "never"
            [<FunScript.JSEmitInline("(XMLHttpRequestEventTarget)"); CompiledName("XMLHttpRequestEventTarget")>]
            static member XMLHttpRequestEventTarget with get() : FunScript.TypeScript.AnonymousType325 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType325) : unit = failwith "never"
            [<FunScript.JSEmitInline("(AudioTrackList)"); CompiledName("AudioTrackList")>]
            static member AudioTrackList with get() : FunScript.TypeScript.AnonymousType326 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType326) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGFEMorphologyElement)"); CompiledName("SVGFEMorphologyElement")>]
            static member SVGFEMorphologyElement with get() : FunScript.TypeScript.AnonymousType327 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType327) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGFEFuncRElement)"); CompiledName("SVGFEFuncRElement")>]
            static member SVGFEFuncRElement with get() : FunScript.TypeScript.AnonymousType328 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType328) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGFEDisplacementMapElement)"); CompiledName("SVGFEDisplacementMapElement")>]
            static member SVGFEDisplacementMapElement with get() : FunScript.TypeScript.AnonymousType329 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType329) : unit = failwith "never"
            [<FunScript.JSEmitInline("(AnimationEvent)"); CompiledName("AnimationEvent")>]
            static member AnimationEvent with get() : FunScript.TypeScript.AnonymousType330 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType330) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGComponentTransferFunctionElement)"); CompiledName("SVGComponentTransferFunctionElement")>]
            static member SVGComponentTransferFunctionElement with get() : FunScript.TypeScript.AnonymousType331 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType331) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MSRangeCollection)"); CompiledName("MSRangeCollection")>]
            static member MSRangeCollection with get() : FunScript.TypeScript.AnonymousType332 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType332) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGFEDistantLightElement)"); CompiledName("SVGFEDistantLightElement")>]
            static member SVGFEDistantLightElement with get() : FunScript.TypeScript.AnonymousType333 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType333) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGFEFuncBElement)"); CompiledName("SVGFEFuncBElement")>]
            static member SVGFEFuncBElement with get() : FunScript.TypeScript.AnonymousType334 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType334) : unit = failwith "never"
            [<FunScript.JSEmitInline("(IDBKeyRange)"); CompiledName("IDBKeyRange")>]
            static member IDBKeyRange with get() : FunScript.TypeScript.AnonymousType335 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType335) : unit = failwith "never"
            [<FunScript.JSEmitInline("(IDBTransaction)"); CompiledName("IDBTransaction")>]
            static member IDBTransaction with get() : FunScript.TypeScript.AnonymousType336 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType336) : unit = failwith "never"
            [<FunScript.JSEmitInline("(AudioTrack)"); CompiledName("AudioTrack")>]
            static member AudioTrack with get() : FunScript.TypeScript.AnonymousType337 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType337) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGFEConvolveMatrixElement)"); CompiledName("SVGFEConvolveMatrixElement")>]
            static member SVGFEConvolveMatrixElement with get() : FunScript.TypeScript.AnonymousType338 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType338) : unit = failwith "never"
            [<FunScript.JSEmitInline("(TextTrackCueList)"); CompiledName("TextTrackCueList")>]
            static member TextTrackCueList with get() : FunScript.TypeScript.AnonymousType339 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType339) : unit = failwith "never"
            [<FunScript.JSEmitInline("(CSSKeyframesRule)"); CompiledName("CSSKeyframesRule")>]
            static member CSSKeyframesRule with get() : FunScript.TypeScript.AnonymousType340 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType340) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGFETurbulenceElement)"); CompiledName("SVGFETurbulenceElement")>]
            static member SVGFETurbulenceElement with get() : FunScript.TypeScript.AnonymousType341 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType341) : unit = failwith "never"
            [<FunScript.JSEmitInline("(TextTrackList)"); CompiledName("TextTrackList")>]
            static member TextTrackList with get() : FunScript.TypeScript.AnonymousType342 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType342) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGFEFuncGElement)"); CompiledName("SVGFEFuncGElement")>]
            static member SVGFEFuncGElement with get() : FunScript.TypeScript.AnonymousType343 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType343) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGFEColorMatrixElement)"); CompiledName("SVGFEColorMatrixElement")>]
            static member SVGFEColorMatrixElement with get() : FunScript.TypeScript.AnonymousType344 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType344) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGFESpotLightElement)"); CompiledName("SVGFESpotLightElement")>]
            static member SVGFESpotLightElement with get() : FunScript.TypeScript.AnonymousType345 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType345) : unit = failwith "never"
            [<FunScript.JSEmitInline("(IDBDatabase)"); CompiledName("IDBDatabase")>]
            static member IDBDatabase with get() : FunScript.TypeScript.AnonymousType346 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType346) : unit = failwith "never"
            [<FunScript.JSEmitInline("(DOMStringList)"); CompiledName("DOMStringList")>]
            static member DOMStringList with get() : FunScript.TypeScript.AnonymousType347 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType347) : unit = failwith "never"
            [<FunScript.JSEmitInline("(IDBOpenDBRequest)"); CompiledName("IDBOpenDBRequest")>]
            static member IDBOpenDBRequest with get() : FunScript.TypeScript.AnonymousType348 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType348) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLProgressElement)"); CompiledName("HTMLProgressElement")>]
            static member HTMLProgressElement with get() : FunScript.TypeScript.AnonymousType349 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType349) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGFEOffsetElement)"); CompiledName("SVGFEOffsetElement")>]
            static member SVGFEOffsetElement with get() : FunScript.TypeScript.AnonymousType350 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType350) : unit = failwith "never"
            [<FunScript.JSEmitInline("(TextTrack)"); CompiledName("TextTrack")>]
            static member TextTrack with get() : FunScript.TypeScript.AnonymousType351 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType351) : unit = failwith "never"
            [<FunScript.JSEmitInline("(IDBRequest)"); CompiledName("IDBRequest")>]
            static member IDBRequest with get() : FunScript.TypeScript.AnonymousType352 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType352) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MessagePort)"); CompiledName("MessagePort")>]
            static member MessagePort with get() : FunScript.TypeScript.AnonymousType353 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType353) : unit = failwith "never"
            [<FunScript.JSEmitInline("(FileReader)"); CompiledName("FileReader")>]
            static member FileReader with get() : FunScript.TypeScript.AnonymousType354 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType354) : unit = failwith "never"
            [<FunScript.JSEmitInline("(ApplicationCache)"); CompiledName("ApplicationCache")>]
            static member ApplicationCache with get() : FunScript.TypeScript.AnonymousType355 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType355) : unit = failwith "never"
            [<FunScript.JSEmitInline("(PopStateEvent)"); CompiledName("PopStateEvent")>]
            static member PopStateEvent with get() : FunScript.TypeScript.AnonymousType356 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType356) : unit = failwith "never"
            [<FunScript.JSEmitInline("(CSSKeyframeRule)"); CompiledName("CSSKeyframeRule")>]
            static member CSSKeyframeRule with get() : FunScript.TypeScript.AnonymousType357 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType357) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MSStream)"); CompiledName("MSStream")>]
            static member MSStream with get() : FunScript.TypeScript.AnonymousType358 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType358) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MSBlobBuilder)"); CompiledName("MSBlobBuilder")>]
            static member MSBlobBuilder with get() : FunScript.TypeScript.AnonymousType359 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType359) : unit = failwith "never"
            [<FunScript.JSEmitInline("(DOMSettableTokenList)"); CompiledName("DOMSettableTokenList")>]
            static member DOMSettableTokenList with get() : FunScript.TypeScript.AnonymousType360 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType360) : unit = failwith "never"
            [<FunScript.JSEmitInline("(IDBFactory)"); CompiledName("IDBFactory")>]
            static member IDBFactory with get() : FunScript.TypeScript.AnonymousType361 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType361) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MSPointerEvent)"); CompiledName("MSPointerEvent")>]
            static member MSPointerEvent with get() : FunScript.TypeScript.AnonymousType362 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType362) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MSManipulationEvent)"); CompiledName("MSManipulationEvent")>]
            static member MSManipulationEvent with get() : FunScript.TypeScript.AnonymousType363 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType363) : unit = failwith "never"
            [<FunScript.JSEmitInline("(FormData)"); CompiledName("FormData")>]
            static member FormData with get() : FunScript.TypeScript.AnonymousType364 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType364) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLDataListElement)"); CompiledName("HTMLDataListElement")>]
            static member HTMLDataListElement with get() : FunScript.TypeScript.AnonymousType365 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType365) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGFEImageElement)"); CompiledName("SVGFEImageElement")>]
            static member SVGFEImageElement with get() : FunScript.TypeScript.AnonymousType366 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType366) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGFECompositeElement)"); CompiledName("SVGFECompositeElement")>]
            static member SVGFECompositeElement with get() : FunScript.TypeScript.AnonymousType367 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType367) : unit = failwith "never"
            [<FunScript.JSEmitInline("(ValidityState)"); CompiledName("ValidityState")>]
            static member ValidityState with get() : FunScript.TypeScript.AnonymousType368 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType368) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLTrackElement)"); CompiledName("HTMLTrackElement")>]
            static member HTMLTrackElement with get() : FunScript.TypeScript.AnonymousType369 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType369) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MSApp)"); CompiledName("MSApp")>]
            static member MSApp with get() : FunScript.TypeScript.MSApp = failwith "never" and set (v : FunScript.TypeScript.MSApp) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGFEComponentTransferElement)"); CompiledName("SVGFEComponentTransferElement")>]
            static member SVGFEComponentTransferElement with get() : FunScript.TypeScript.AnonymousType370 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType370) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SVGFEDiffuseLightingElement)"); CompiledName("SVGFEDiffuseLightingElement")>]
            static member SVGFEDiffuseLightingElement with get() : FunScript.TypeScript.AnonymousType371 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType371) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MSCSSMatrix)"); CompiledName("MSCSSMatrix")>]
            static member MSCSSMatrix with get() : FunScript.TypeScript.AnonymousType372 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType372) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Worker)"); CompiledName("Worker")>]
            static member Worker with get() : FunScript.TypeScript.AnonymousType373 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType373) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MSGraphicsTrust)"); CompiledName("MSGraphicsTrust")>]
            static member MSGraphicsTrust with get() : FunScript.TypeScript.AnonymousType374 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType374) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SubtleCrypto)"); CompiledName("SubtleCrypto")>]
            static member SubtleCrypto with get() : FunScript.TypeScript.AnonymousType375 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType375) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Crypto)"); CompiledName("Crypto")>]
            static member Crypto with get() : FunScript.TypeScript.AnonymousType376 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType376) : unit = failwith "never"
            [<FunScript.JSEmitInline("(VideoPlaybackQuality)"); CompiledName("VideoPlaybackQuality")>]
            static member VideoPlaybackQuality with get() : FunScript.TypeScript.AnonymousType377 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType377) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Key)"); CompiledName("Key")>]
            static member Key with get() : FunScript.TypeScript.AnonymousType378 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType378) : unit = failwith "never"
            [<FunScript.JSEmitInline("(DeviceAcceleration)"); CompiledName("DeviceAcceleration")>]
            static member DeviceAcceleration with get() : FunScript.TypeScript.AnonymousType379 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType379) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLAllCollection)"); CompiledName("HTMLAllCollection")>]
            static member HTMLAllCollection with get() : FunScript.TypeScript.AnonymousType380 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType380) : unit = failwith "never"
            [<FunScript.JSEmitInline("(AesGcmEncryptResult)"); CompiledName("AesGcmEncryptResult")>]
            static member AesGcmEncryptResult with get() : FunScript.TypeScript.AnonymousType381 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType381) : unit = failwith "never"
            [<FunScript.JSEmitInline("(NavigationCompletedEvent)"); CompiledName("NavigationCompletedEvent")>]
            static member NavigationCompletedEvent with get() : FunScript.TypeScript.AnonymousType382 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType382) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MutationRecord)"); CompiledName("MutationRecord")>]
            static member MutationRecord with get() : FunScript.TypeScript.AnonymousType383 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType383) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MimeTypeArray)"); CompiledName("MimeTypeArray")>]
            static member MimeTypeArray with get() : FunScript.TypeScript.AnonymousType384 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType384) : unit = failwith "never"
            [<FunScript.JSEmitInline("(KeyOperation)"); CompiledName("KeyOperation")>]
            static member KeyOperation with get() : FunScript.TypeScript.AnonymousType385 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType385) : unit = failwith "never"
            [<FunScript.JSEmitInline("(DOMStringMap)"); CompiledName("DOMStringMap")>]
            static member DOMStringMap with get() : FunScript.TypeScript.AnonymousType386 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType386) : unit = failwith "never"
            [<FunScript.JSEmitInline("(DeviceOrientationEvent)"); CompiledName("DeviceOrientationEvent")>]
            static member DeviceOrientationEvent with get() : FunScript.TypeScript.AnonymousType387 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType387) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MSMediaKeys)"); CompiledName("MSMediaKeys")>]
            static member MSMediaKeys with get() : FunScript.TypeScript.AnonymousType388 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType388) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MSMediaKeyMessageEvent)"); CompiledName("MSMediaKeyMessageEvent")>]
            static member MSMediaKeyMessageEvent with get() : FunScript.TypeScript.AnonymousType389 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType389) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MSHTMLWebViewElement)"); CompiledName("MSHTMLWebViewElement")>]
            static member MSHTMLWebViewElement with get() : FunScript.TypeScript.AnonymousType390 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType390) : unit = failwith "never"
            [<FunScript.JSEmitInline("(NavigationEvent)"); CompiledName("NavigationEvent")>]
            static member NavigationEvent with get() : FunScript.TypeScript.AnonymousType391 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType391) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SourceBuffer)"); CompiledName("SourceBuffer")>]
            static member SourceBuffer with get() : FunScript.TypeScript.AnonymousType392 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType392) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MSInputMethodContext)"); CompiledName("MSInputMethodContext")>]
            static member MSInputMethodContext with get() : FunScript.TypeScript.AnonymousType393 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType393) : unit = failwith "never"
            [<FunScript.JSEmitInline("(DeviceRotationRate)"); CompiledName("DeviceRotationRate")>]
            static member DeviceRotationRate with get() : FunScript.TypeScript.AnonymousType394 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType394) : unit = failwith "never"
            [<FunScript.JSEmitInline("(PluginArray)"); CompiledName("PluginArray")>]
            static member PluginArray with get() : FunScript.TypeScript.AnonymousType395 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType395) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MSMediaKeyError)"); CompiledName("MSMediaKeyError")>]
            static member MSMediaKeyError with get() : FunScript.TypeScript.AnonymousType396 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType396) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Plugin)"); CompiledName("Plugin")>]
            static member Plugin with get() : FunScript.TypeScript.AnonymousType397 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType397) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MediaSource)"); CompiledName("MediaSource")>]
            static member MediaSource with get() : FunScript.TypeScript.AnonymousType398 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType398) : unit = failwith "never"
            [<FunScript.JSEmitInline("(SourceBufferList)"); CompiledName("SourceBufferList")>]
            static member SourceBufferList with get() : FunScript.TypeScript.AnonymousType399 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType399) : unit = failwith "never"
            [<FunScript.JSEmitInline("(XMLDocument)"); CompiledName("XMLDocument")>]
            static member XMLDocument with get() : FunScript.TypeScript.AnonymousType400 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType400) : unit = failwith "never"
            [<FunScript.JSEmitInline("(DeviceMotionEvent)"); CompiledName("DeviceMotionEvent")>]
            static member DeviceMotionEvent with get() : FunScript.TypeScript.AnonymousType401 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType401) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MimeType)"); CompiledName("MimeType")>]
            static member MimeType with get() : FunScript.TypeScript.AnonymousType402 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType402) : unit = failwith "never"
            [<FunScript.JSEmitInline("(PointerEvent)"); CompiledName("PointerEvent")>]
            static member PointerEvent with get() : FunScript.TypeScript.AnonymousType403 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType403) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MutationObserver)"); CompiledName("MutationObserver")>]
            static member MutationObserver with get() : FunScript.TypeScript.AnonymousType404 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType404) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MSWebViewAsyncOperation)"); CompiledName("MSWebViewAsyncOperation")>]
            static member MSWebViewAsyncOperation with get() : FunScript.TypeScript.AnonymousType405 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType405) : unit = failwith "never"
            [<FunScript.JSEmitInline("(ScriptNotifyEvent)"); CompiledName("ScriptNotifyEvent")>]
            static member ScriptNotifyEvent with get() : FunScript.TypeScript.AnonymousType406 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType406) : unit = failwith "never"
            [<FunScript.JSEmitInline("(PerformanceNavigationTiming)"); CompiledName("PerformanceNavigationTiming")>]
            static member PerformanceNavigationTiming with get() : FunScript.TypeScript.AnonymousType407 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType407) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MSMediaKeyNeededEvent)"); CompiledName("MSMediaKeyNeededEvent")>]
            static member MSMediaKeyNeededEvent with get() : FunScript.TypeScript.AnonymousType408 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType408) : unit = failwith "never"
            [<FunScript.JSEmitInline("(LongRunningScriptDetectedEvent)"); CompiledName("LongRunningScriptDetectedEvent")>]
            static member LongRunningScriptDetectedEvent with get() : FunScript.TypeScript.AnonymousType409 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType409) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MSAppView)"); CompiledName("MSAppView")>]
            static member MSAppView with get() : FunScript.TypeScript.AnonymousType410 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType410) : unit = failwith "never"
            [<FunScript.JSEmitInline("(PerfWidgetExternal)"); CompiledName("PerfWidgetExternal")>]
            static member PerfWidgetExternal with get() : FunScript.TypeScript.AnonymousType411 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType411) : unit = failwith "never"
            [<FunScript.JSEmitInline("(PageTransitionEvent)"); CompiledName("PageTransitionEvent")>]
            static member PageTransitionEvent with get() : FunScript.TypeScript.AnonymousType412 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType412) : unit = failwith "never"
            [<FunScript.JSEmitInline("(HTMLDocument)"); CompiledName("HTMLDocument")>]
            static member HTMLDocument with get() : FunScript.TypeScript.AnonymousType413 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType413) : unit = failwith "never"
            [<FunScript.JSEmitInline("(KeyPair)"); CompiledName("KeyPair")>]
            static member KeyPair with get() : FunScript.TypeScript.AnonymousType414 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType414) : unit = failwith "never"
            [<FunScript.JSEmitInline("(MSMediaKeySession)"); CompiledName("MSMediaKeySession")>]
            static member MSMediaKeySession with get() : FunScript.TypeScript.AnonymousType415 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType415) : unit = failwith "never"
            [<FunScript.JSEmitInline("(UnviewableContentIdentifiedEvent)"); CompiledName("UnviewableContentIdentifiedEvent")>]
            static member UnviewableContentIdentifiedEvent with get() : FunScript.TypeScript.AnonymousType416 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType416) : unit = failwith "never"
            [<FunScript.JSEmitInline("(CryptoOperation)"); CompiledName("CryptoOperation")>]
            static member CryptoOperation with get() : FunScript.TypeScript.AnonymousType417 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType417) : unit = failwith "never"
            [<FunScript.JSEmitInline("(WebGLTexture)"); CompiledName("WebGLTexture")>]
            static member WebGLTexture with get() : FunScript.TypeScript.AnonymousType418 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType418) : unit = failwith "never"
            [<FunScript.JSEmitInline("(OES_texture_float)"); CompiledName("OES_texture_float")>]
            static member OES_texture_float with get() : FunScript.TypeScript.AnonymousType419 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType419) : unit = failwith "never"
            [<FunScript.JSEmitInline("(WebGLContextEvent)"); CompiledName("WebGLContextEvent")>]
            static member WebGLContextEvent with get() : FunScript.TypeScript.AnonymousType420 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType420) : unit = failwith "never"
            [<FunScript.JSEmitInline("(WebGLRenderbuffer)"); CompiledName("WebGLRenderbuffer")>]
            static member WebGLRenderbuffer with get() : FunScript.TypeScript.AnonymousType421 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType421) : unit = failwith "never"
            [<FunScript.JSEmitInline("(WebGLUniformLocation)"); CompiledName("WebGLUniformLocation")>]
            static member WebGLUniformLocation with get() : FunScript.TypeScript.AnonymousType422 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType422) : unit = failwith "never"
            [<FunScript.JSEmitInline("(WebGLActiveInfo)"); CompiledName("WebGLActiveInfo")>]
            static member WebGLActiveInfo with get() : FunScript.TypeScript.AnonymousType423 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType423) : unit = failwith "never"
            [<FunScript.JSEmitInline("(WEBGL_compressed_texture_s3tc)"); CompiledName("WEBGL_compressed_texture_s3tc")>]
            static member WEBGL_compressed_texture_s3tc with get() : FunScript.TypeScript.AnonymousType424 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType424) : unit = failwith "never"
            [<FunScript.JSEmitInline("(WebGLRenderingContext)"); CompiledName("WebGLRenderingContext")>]
            static member WebGLRenderingContext with get() : FunScript.TypeScript.AnonymousType425 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType425) : unit = failwith "never"
            [<FunScript.JSEmitInline("(WebGLProgram)"); CompiledName("WebGLProgram")>]
            static member WebGLProgram with get() : FunScript.TypeScript.AnonymousType426 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType426) : unit = failwith "never"
            [<FunScript.JSEmitInline("(OES_standard_derivatives)"); CompiledName("OES_standard_derivatives")>]
            static member OES_standard_derivatives with get() : FunScript.TypeScript.AnonymousType427 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType427) : unit = failwith "never"
            [<FunScript.JSEmitInline("(WebGLFramebuffer)"); CompiledName("WebGLFramebuffer")>]
            static member WebGLFramebuffer with get() : FunScript.TypeScript.AnonymousType428 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType428) : unit = failwith "never"
            [<FunScript.JSEmitInline("(WebGLShader)"); CompiledName("WebGLShader")>]
            static member WebGLShader with get() : FunScript.TypeScript.AnonymousType429 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType429) : unit = failwith "never"
            [<FunScript.JSEmitInline("(OES_texture_float_linear)"); CompiledName("OES_texture_float_linear")>]
            static member OES_texture_float_linear with get() : FunScript.TypeScript.AnonymousType430 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType430) : unit = failwith "never"
            [<FunScript.JSEmitInline("(WebGLObject)"); CompiledName("WebGLObject")>]
            static member WebGLObject with get() : FunScript.TypeScript.AnonymousType431 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType431) : unit = failwith "never"
            [<FunScript.JSEmitInline("(WebGLBuffer)"); CompiledName("WebGLBuffer")>]
            static member WebGLBuffer with get() : FunScript.TypeScript.AnonymousType432 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType432) : unit = failwith "never"
            [<FunScript.JSEmitInline("(WebGLShaderPrecisionFormat)"); CompiledName("WebGLShaderPrecisionFormat")>]
            static member WebGLShaderPrecisionFormat with get() : FunScript.TypeScript.AnonymousType433 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType433) : unit = failwith "never"
            [<FunScript.JSEmitInline("(EXT_texture_filter_anisotropic)"); CompiledName("EXT_texture_filter_anisotropic")>]
            static member EXT_texture_filter_anisotropic with get() : FunScript.TypeScript.AnonymousType434 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType434) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Option)"); CompiledName("Option")>]
            static member Option with get() : FunScript.TypeScript.AnonymousType435 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType435) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Image)"); CompiledName("Image")>]
            static member Image with get() : FunScript.TypeScript.AnonymousType436 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType436) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Audio)"); CompiledName("Audio")>]
            static member Audio with get() : FunScript.TypeScript.AnonymousType437 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType437) : unit = failwith "never"
            [<FunScript.JSEmitInline("(ondragend)"); CompiledName("ondragend")>]
            static member ondragend with get() : System.Func<FunScript.TypeScript.DragEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.DragEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onkeydown)"); CompiledName("onkeydown")>]
            static member onkeydown with get() : System.Func<FunScript.TypeScript.KeyboardEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.KeyboardEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(ondragover)"); CompiledName("ondragover")>]
            static member ondragover with get() : System.Func<FunScript.TypeScript.DragEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.DragEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onkeyup)"); CompiledName("onkeyup")>]
            static member onkeyup with get() : System.Func<FunScript.TypeScript.KeyboardEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.KeyboardEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onreset)"); CompiledName("onreset")>]
            static member onreset with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onmouseup)"); CompiledName("onmouseup")>]
            static member onmouseup with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(ondragstart)"); CompiledName("ondragstart")>]
            static member ondragstart with get() : System.Func<FunScript.TypeScript.DragEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.DragEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(ondrag)"); CompiledName("ondrag")>]
            static member ondrag with get() : System.Func<FunScript.TypeScript.DragEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.DragEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(screenX)"); CompiledName("screenX")>]
            static member screenX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onmouseover)"); CompiledName("onmouseover")>]
            static member onmouseover with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(ondragleave)"); CompiledName("ondragleave")>]
            static member ondragleave with get() : System.Func<FunScript.TypeScript.DragEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.DragEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(history)"); CompiledName("history")>]
            static member history with get() : FunScript.TypeScript.History = failwith "never" and set (v : FunScript.TypeScript.History) : unit = failwith "never"
            [<FunScript.JSEmitInline("(pageXOffset)"); CompiledName("pageXOffset")>]
            static member pageXOffset with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("(name)"); CompiledName("name")>]
            static member name with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onafterprint)"); CompiledName("onafterprint")>]
            static member onafterprint with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onpause)"); CompiledName("onpause")>]
            static member onpause with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onbeforeprint)"); CompiledName("onbeforeprint")>]
            static member onbeforeprint with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(top)"); CompiledName("top")>]
            static member top with get() : FunScript.TypeScript.Window = failwith "never" and set (v : FunScript.TypeScript.Window) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onmousedown)"); CompiledName("onmousedown")>]
            static member onmousedown with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onseeked)"); CompiledName("onseeked")>]
            static member onseeked with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(opener)"); CompiledName("opener")>]
            static member opener with get() : FunScript.TypeScript.Window = failwith "never" and set (v : FunScript.TypeScript.Window) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onclick)"); CompiledName("onclick")>]
            static member onclick with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(innerHeight)"); CompiledName("innerHeight")>]
            static member innerHeight with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onwaiting)"); CompiledName("onwaiting")>]
            static member onwaiting with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(ononline)"); CompiledName("ononline")>]
            static member ononline with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(ondurationchange)"); CompiledName("ondurationchange")>]
            static member ondurationchange with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(frames)"); CompiledName("frames")>]
            static member frames with get() : FunScript.TypeScript.Window = failwith "never" and set (v : FunScript.TypeScript.Window) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onblur)"); CompiledName("onblur")>]
            static member onblur with get() : System.Func<FunScript.TypeScript.FocusEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.FocusEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onemptied)"); CompiledName("onemptied")>]
            static member onemptied with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onseeking)"); CompiledName("onseeking")>]
            static member onseeking with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(oncanplay)"); CompiledName("oncanplay")>]
            static member oncanplay with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(outerWidth)"); CompiledName("outerWidth")>]
            static member outerWidth with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onstalled)"); CompiledName("onstalled")>]
            static member onstalled with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onmousemove)"); CompiledName("onmousemove")>]
            static member onmousemove with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(innerWidth)"); CompiledName("innerWidth")>]
            static member innerWidth with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onoffline)"); CompiledName("onoffline")>]
            static member onoffline with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(length)"); CompiledName("length")>]
            static member length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("(screen)"); CompiledName("screen")>]
            static member screen with get() : FunScript.TypeScript.Screen = failwith "never" and set (v : FunScript.TypeScript.Screen) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onbeforeunload)"); CompiledName("onbeforeunload")>]
            static member onbeforeunload with get() : System.Func<FunScript.TypeScript.BeforeUnloadEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.BeforeUnloadEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onratechange)"); CompiledName("onratechange")>]
            static member onratechange with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onstorage)"); CompiledName("onstorage")>]
            static member onstorage with get() : System.Func<FunScript.TypeScript.StorageEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.StorageEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onloadstart)"); CompiledName("onloadstart")>]
            static member onloadstart with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(ondragenter)"); CompiledName("ondragenter")>]
            static member ondragenter with get() : System.Func<FunScript.TypeScript.DragEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.DragEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onsubmit)"); CompiledName("onsubmit")>]
            static member onsubmit with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(self)"); CompiledName("self")>]
            static member self with get() : FunScript.TypeScript.Window = failwith "never" and set (v : FunScript.TypeScript.Window) : unit = failwith "never"
            [<FunScript.JSEmitInline("(document)"); CompiledName("document")>]
            static member document with get() : FunScript.TypeScript.Document = failwith "never" and set (v : FunScript.TypeScript.Document) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onprogress)"); CompiledName("onprogress")>]
            static member onprogress with get() : System.Func<FunScript.TypeScript.ProgressEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.ProgressEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(ondblclick)"); CompiledName("ondblclick")>]
            static member ondblclick with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(pageYOffset)"); CompiledName("pageYOffset")>]
            static member pageYOffset with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("(oncontextmenu)"); CompiledName("oncontextmenu")>]
            static member oncontextmenu with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onchange)"); CompiledName("onchange")>]
            static member onchange with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onloadedmetadata)"); CompiledName("onloadedmetadata")>]
            static member onloadedmetadata with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onplay)"); CompiledName("onplay")>]
            static member onplay with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onerror)"); CompiledName("onerror")>]
            static member onerror with get() : FunScript.TypeScript.ErrorEventHandlerDelegate = failwith "never" and set (v : FunScript.TypeScript.ErrorEventHandlerDelegate) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onplaying)"); CompiledName("onplaying")>]
            static member onplaying with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(parent)"); CompiledName("parent")>]
            static member parent with get() : FunScript.TypeScript.Window = failwith "never" and set (v : FunScript.TypeScript.Window) : unit = failwith "never"
            [<FunScript.JSEmitInline("(location)"); CompiledName("location")>]
            static member location with get() : FunScript.TypeScript.Location = failwith "never" and set (v : FunScript.TypeScript.Location) : unit = failwith "never"
            [<FunScript.JSEmitInline("(oncanplaythrough)"); CompiledName("oncanplaythrough")>]
            static member oncanplaythrough with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onabort)"); CompiledName("onabort")>]
            static member onabort with get() : System.Func<FunScript.TypeScript.UIEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.UIEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onreadystatechange)"); CompiledName("onreadystatechange")>]
            static member onreadystatechange with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(outerHeight)"); CompiledName("outerHeight")>]
            static member outerHeight with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onkeypress)"); CompiledName("onkeypress")>]
            static member onkeypress with get() : System.Func<FunScript.TypeScript.KeyboardEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.KeyboardEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(frameElement)"); CompiledName("frameElement")>]
            static member frameElement with get() : FunScript.TypeScript.Element = failwith "never" and set (v : FunScript.TypeScript.Element) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onloadeddata)"); CompiledName("onloadeddata")>]
            static member onloadeddata with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onsuspend)"); CompiledName("onsuspend")>]
            static member onsuspend with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(window)"); CompiledName("window")>]
            static member window with get() : FunScript.TypeScript.Window = failwith "never" and set (v : FunScript.TypeScript.Window) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onfocus)"); CompiledName("onfocus")>]
            static member onfocus with get() : System.Func<FunScript.TypeScript.FocusEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.FocusEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onmessage)"); CompiledName("onmessage")>]
            static member onmessage with get() : System.Func<FunScript.TypeScript.MessageEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MessageEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(ontimeupdate)"); CompiledName("ontimeupdate")>]
            static member ontimeupdate with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onresize)"); CompiledName("onresize")>]
            static member onresize with get() : System.Func<FunScript.TypeScript.UIEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.UIEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onselect)"); CompiledName("onselect")>]
            static member onselect with get() : System.Func<FunScript.TypeScript.UIEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.UIEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(navigator)"); CompiledName("navigator")>]
            static member navigator with get() : FunScript.TypeScript.Navigator = failwith "never" and set (v : FunScript.TypeScript.Navigator) : unit = failwith "never"
            [<FunScript.JSEmitInline("(styleMedia)"); CompiledName("styleMedia")>]
            static member styleMedia with get() : FunScript.TypeScript.StyleMedia = failwith "never" and set (v : FunScript.TypeScript.StyleMedia) : unit = failwith "never"
            [<FunScript.JSEmitInline("(ondrop)"); CompiledName("ondrop")>]
            static member ondrop with get() : System.Func<FunScript.TypeScript.DragEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.DragEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onmouseout)"); CompiledName("onmouseout")>]
            static member onmouseout with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onended)"); CompiledName("onended")>]
            static member onended with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onhashchange)"); CompiledName("onhashchange")>]
            static member onhashchange with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onunload)"); CompiledName("onunload")>]
            static member onunload with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onscroll)"); CompiledName("onscroll")>]
            static member onscroll with get() : System.Func<FunScript.TypeScript.UIEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.UIEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(screenY)"); CompiledName("screenY")>]
            static member screenY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onmousewheel)"); CompiledName("onmousewheel")>]
            static member onmousewheel with get() : System.Func<FunScript.TypeScript.MouseWheelEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseWheelEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onload)"); CompiledName("onload")>]
            static member onload with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onvolumechange)"); CompiledName("onvolumechange")>]
            static member onvolumechange with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(oninput)"); CompiledName("oninput")>]
            static member oninput with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(performance)"); CompiledName("performance")>]
            static member performance with get() : FunScript.TypeScript.Performance = failwith "never" and set (v : FunScript.TypeScript.Performance) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onmspointerdown)"); CompiledName("onmspointerdown")>]
            static member onmspointerdown with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(animationStartTime)"); CompiledName("animationStartTime")>]
            static member animationStartTime with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onmsgesturedoubletap)"); CompiledName("onmsgesturedoubletap")>]
            static member onmsgesturedoubletap with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onmspointerhover)"); CompiledName("onmspointerhover")>]
            static member onmspointerhover with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onmsgesturehold)"); CompiledName("onmsgesturehold")>]
            static member onmsgesturehold with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onmspointermove)"); CompiledName("onmspointermove")>]
            static member onmspointermove with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onmsgesturechange)"); CompiledName("onmsgesturechange")>]
            static member onmsgesturechange with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onmsgesturestart)"); CompiledName("onmsgesturestart")>]
            static member onmsgesturestart with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onmspointercancel)"); CompiledName("onmspointercancel")>]
            static member onmspointercancel with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onmsgestureend)"); CompiledName("onmsgestureend")>]
            static member onmsgestureend with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onmsgesturetap)"); CompiledName("onmsgesturetap")>]
            static member onmsgesturetap with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onmspointerout)"); CompiledName("onmspointerout")>]
            static member onmspointerout with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(msAnimationStartTime)"); CompiledName("msAnimationStartTime")>]
            static member msAnimationStartTime with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("(applicationCache)"); CompiledName("applicationCache")>]
            static member applicationCache with get() : FunScript.TypeScript.ApplicationCache = failwith "never" and set (v : FunScript.TypeScript.ApplicationCache) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onmsinertiastart)"); CompiledName("onmsinertiastart")>]
            static member onmsinertiastart with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onmspointerover)"); CompiledName("onmspointerover")>]
            static member onmspointerover with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onpopstate)"); CompiledName("onpopstate")>]
            static member onpopstate with get() : System.Func<FunScript.TypeScript.PopStateEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.PopStateEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onmspointerup)"); CompiledName("onmspointerup")>]
            static member onmspointerup with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onpageshow)"); CompiledName("onpageshow")>]
            static member onpageshow with get() : System.Func<FunScript.TypeScript.PageTransitionEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.PageTransitionEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(ondevicemotion)"); CompiledName("ondevicemotion")>]
            static member ondevicemotion with get() : System.Func<FunScript.TypeScript.DeviceMotionEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.DeviceMotionEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(devicePixelRatio)"); CompiledName("devicePixelRatio")>]
            static member devicePixelRatio with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("(msCrypto)"); CompiledName("msCrypto")>]
            static member msCrypto with get() : FunScript.TypeScript.Crypto = failwith "never" and set (v : FunScript.TypeScript.Crypto) : unit = failwith "never"
            [<FunScript.JSEmitInline("(ondeviceorientation)"); CompiledName("ondeviceorientation")>]
            static member ondeviceorientation with get() : System.Func<FunScript.TypeScript.DeviceOrientationEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.DeviceOrientationEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(doNotTrack)"); CompiledName("doNotTrack")>]
            static member doNotTrack with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onmspointerenter)"); CompiledName("onmspointerenter")>]
            static member onmspointerenter with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onpagehide)"); CompiledName("onpagehide")>]
            static member onpagehide with get() : System.Func<FunScript.TypeScript.PageTransitionEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.PageTransitionEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onmspointerleave)"); CompiledName("onmspointerleave")>]
            static member onmspointerleave with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(alert({?0}))"); CompiledName("alert")>]
            static member alert(?message : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("(alert = {0})"); CompiledName("alertAux")>]
            static member ``alert <-``(func : System.Func<obj, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(scroll({?0}, {?1}))"); CompiledName("scroll")>]
            static member scroll(?x : float, ?y : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("(scroll = {0})"); CompiledName("scrollAux")>]
            static member ``scroll <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(focus())"); CompiledName("focus")>]
            static member focus() : unit = failwith "never"
            [<FunScript.JSEmitInline("(focus = {0})"); CompiledName("focusAux")>]
            static member ``focus <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(scrollTo({?0}, {?1}))"); CompiledName("scrollTo")>]
            static member scrollTo(?x : float, ?y : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("(scrollTo = {0})"); CompiledName("scrollToAux")>]
            static member ``scrollTo <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(print())"); CompiledName("print")>]
            static member print() : unit = failwith "never"
            [<FunScript.JSEmitInline("(print = {0})"); CompiledName("printAux")>]
            static member ``print <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(prompt({?0}, {?1}))"); CompiledName("prompt")>]
            static member prompt(?message : string, ?_default : string) : string = failwith "never"
            [<FunScript.JSEmitInline("(prompt = {0})"); CompiledName("promptAux")>]
            static member ``prompt <-``(func : System.Func<string, string, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(toString())"); CompiledName("toString")>]
            static member toString() : string = failwith "never"
            [<FunScript.JSEmitInline("(toString = {0})"); CompiledName("toStringAux")>]
            static member ``toString <-``(func : System.Func<string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(open({?0}, {?1}, {?2}, {?3}))"); CompiledName("_open")>]
            static member _open(?url : string, ?target : string, ?features : string, ?replace : bool) : FunScript.TypeScript.Window = failwith "never"
            [<FunScript.JSEmitInline("(open = {0})"); CompiledName("_openAux")>]
            static member ``_open <-``(func : System.Func<string, string, string, bool, FunScript.TypeScript.Window>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(scrollBy({?0}, {?1}))"); CompiledName("scrollBy")>]
            static member scrollBy(?x : float, ?y : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("(scrollBy = {0})"); CompiledName("scrollByAux")>]
            static member ``scrollBy <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(confirm({?0}))"); CompiledName("confirm")>]
            static member confirm(?message : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("(confirm = {0})"); CompiledName("confirmAux")>]
            static member ``confirm <-``(func : System.Func<string, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(close())"); CompiledName("close")>]
            static member close() : unit = failwith "never"
            [<FunScript.JSEmitInline("(close = {0})"); CompiledName("closeAux")>]
            static member ``close <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(postMessage({0}, {1}, {?2}))"); CompiledName("postMessage")>]
            static member postMessage(message : obj, targetOrigin : string, ?ports : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("(postMessage = {0})"); CompiledName("postMessageAux")>]
            static member ``postMessage <-``(func : System.Func<obj, string, obj, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(showModalDialog({?0}, {?1}, {?2}))"); CompiledName("showModalDialog")>]
            static member showModalDialog(?url : string, ?argument : obj, ?options : obj) : obj = failwith "never"
            [<FunScript.JSEmitInline("(showModalDialog = {0})"); CompiledName("showModalDialogAux")>]
            static member ``showModalDialog <-``(func : System.Func<string, obj, obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(blur())"); CompiledName("blur")>]
            static member blur() : unit = failwith "never"
            [<FunScript.JSEmitInline("(blur = {0})"); CompiledName("blurAux")>]
            static member ``blur <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(getSelection())"); CompiledName("getSelection")>]
            static member getSelection() : FunScript.TypeScript.Selection = failwith "never"
            [<FunScript.JSEmitInline("(getSelection = {0})"); CompiledName("getSelectionAux")>]
            static member ``getSelection <-``(func : System.Func<FunScript.TypeScript.Selection>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(getComputedStyle({0}, {?1}))"); CompiledName("getComputedStyle")>]
            static member getComputedStyle(elt : FunScript.TypeScript.Element, ?pseudoElt : string) : FunScript.TypeScript.CSSStyleDeclaration = failwith "never"
            [<FunScript.JSEmitInline("(getComputedStyle = {0})"); CompiledName("getComputedStyleAux")>]
            static member ``getComputedStyle <-``(func : System.Func<FunScript.TypeScript.Element, string, FunScript.TypeScript.CSSStyleDeclaration>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(msCancelRequestAnimationFrame({0}))"); CompiledName("msCancelRequestAnimationFrame")>]
            static member msCancelRequestAnimationFrame(handle : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("(msCancelRequestAnimationFrame = {0})"); CompiledName("msCancelRequestAnimationFrameAux")>]
            static member ``msCancelRequestAnimationFrame <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(matchMedia({0}))"); CompiledName("matchMedia")>]
            static member matchMedia(mediaQuery : string) : FunScript.TypeScript.MediaQueryList = failwith "never"
            [<FunScript.JSEmitInline("(matchMedia = {0})"); CompiledName("matchMediaAux")>]
            static member ``matchMedia <-``(func : System.Func<string, FunScript.TypeScript.MediaQueryList>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(cancelAnimationFrame({0}))"); CompiledName("cancelAnimationFrame")>]
            static member cancelAnimationFrame(handle : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("(cancelAnimationFrame = {0})"); CompiledName("cancelAnimationFrameAux")>]
            static member ``cancelAnimationFrame <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(msIsStaticHTML({0}))"); CompiledName("msIsStaticHTML")>]
            static member msIsStaticHTML(html : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("(msIsStaticHTML = {0})"); CompiledName("msIsStaticHTMLAux")>]
            static member ``msIsStaticHTML <-``(func : System.Func<string, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(msMatchMedia({0}))"); CompiledName("msMatchMedia")>]
            static member msMatchMedia(mediaQuery : string) : FunScript.TypeScript.MediaQueryList = failwith "never"
            [<FunScript.JSEmitInline("(msMatchMedia = {0})"); CompiledName("msMatchMediaAux")>]
            static member ``msMatchMedia <-``(func : System.Func<string, FunScript.TypeScript.MediaQueryList>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(requestAnimationFrame({0}))"); CompiledName("requestAnimationFrame")>]
            static member requestAnimationFrame(callback : FunScript.TypeScript.FrameRequestCallbackDelegate) : float = failwith "never"
            [<FunScript.JSEmitInline("(requestAnimationFrame = {0})"); CompiledName("requestAnimationFrameAux")>]
            static member ``requestAnimationFrame <-``(func : System.Func<FunScript.TypeScript.FrameRequestCallbackDelegate, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(msRequestAnimationFrame({0}))"); CompiledName("msRequestAnimationFrame")>]
            static member msRequestAnimationFrame(callback : FunScript.TypeScript.FrameRequestCallbackDelegate) : float = failwith "never"
            [<FunScript.JSEmitInline("(msRequestAnimationFrame = {0})"); CompiledName("msRequestAnimationFrameAux")>]
            static member ``msRequestAnimationFrame <-``(func : System.Func<FunScript.TypeScript.FrameRequestCallbackDelegate, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(removeEventListener({0}, {1}, {?2}))"); CompiledName("removeEventListener")>]
            static member removeEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(removeEventListener = {0})"); CompiledName("removeEventListenerAux")>]
            static member ``removeEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(dispatchEvent({0}))"); CompiledName("dispatchEvent")>]
            static member dispatchEvent(evt : FunScript.TypeScript.Event) : bool = failwith "never"
            [<FunScript.JSEmitInline("(dispatchEvent = {0})"); CompiledName("dispatchEventAux")>]
            static member ``dispatchEvent <-``(func : System.Func<FunScript.TypeScript.Event, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(attachEvent({0}, {1}))"); CompiledName("attachEvent")>]
            static member attachEvent(_event : string, listener : FunScript.TypeScript.EventListenerDelegate) : bool = failwith "never"
            [<FunScript.JSEmitInline("(attachEvent = {0})"); CompiledName("attachEventAux")>]
            static member ``attachEvent <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(detachEvent({0}, {1}))"); CompiledName("detachEvent")>]
            static member detachEvent(_event : string, listener : FunScript.TypeScript.EventListenerDelegate) : unit = failwith "never"
            [<FunScript.JSEmitInline("(detachEvent = {0})"); CompiledName("detachEventAux")>]
            static member ``detachEvent <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(localStorage)"); CompiledName("localStorage")>]
            static member localStorage with get() : FunScript.TypeScript.Storage = failwith "never" and set (v : FunScript.TypeScript.Storage) : unit = failwith "never"
            [<FunScript.JSEmitInline("(status)"); CompiledName("status")>]
            static member status with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onmouseleave)"); CompiledName("onmouseleave")>]
            static member onmouseleave with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(screenLeft)"); CompiledName("screenLeft")>]
            static member screenLeft with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("(offscreenBuffering)"); CompiledName("offscreenBuffering")>]
            static member offscreenBuffering with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("(maxConnectionsPerServer)"); CompiledName("maxConnectionsPerServer")>]
            static member maxConnectionsPerServer with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onmouseenter)"); CompiledName("onmouseenter")>]
            static member onmouseenter with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(clipboardData)"); CompiledName("clipboardData")>]
            static member clipboardData with get() : FunScript.TypeScript.DataTransfer = failwith "never" and set (v : FunScript.TypeScript.DataTransfer) : unit = failwith "never"
            [<FunScript.JSEmitInline("(defaultStatus)"); CompiledName("defaultStatus")>]
            static member defaultStatus with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("(clientInformation)"); CompiledName("clientInformation")>]
            static member clientInformation with get() : FunScript.TypeScript.Navigator = failwith "never" and set (v : FunScript.TypeScript.Navigator) : unit = failwith "never"
            [<FunScript.JSEmitInline("(closed)"); CompiledName("closed")>]
            static member closed with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onhelp)"); CompiledName("onhelp")>]
            static member onhelp with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(external)"); CompiledName("_external")>]
            static member _external with get() : FunScript.TypeScript.External = failwith "never" and set (v : FunScript.TypeScript.External) : unit = failwith "never"
            [<FunScript.JSEmitInline("(event)"); CompiledName("_event")>]
            static member _event with get() : FunScript.TypeScript.MSEventObj = failwith "never" and set (v : FunScript.TypeScript.MSEventObj) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onfocusout)"); CompiledName("onfocusout")>]
            static member onfocusout with get() : System.Func<FunScript.TypeScript.FocusEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.FocusEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(screenTop)"); CompiledName("screenTop")>]
            static member screenTop with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onfocusin)"); CompiledName("onfocusin")>]
            static member onfocusin with get() : System.Func<FunScript.TypeScript.FocusEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.FocusEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(showModelessDialog({?0}, {?1}, {?2}))"); CompiledName("showModelessDialog")>]
            static member showModelessDialog(?url : string, ?argument : obj, ?options : obj) : FunScript.TypeScript.Window = failwith "never"
            [<FunScript.JSEmitInline("(showModelessDialog = {0})"); CompiledName("showModelessDialogAux")>]
            static member ``showModelessDialog <-``(func : System.Func<string, obj, obj, FunScript.TypeScript.Window>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(navigate({0}))"); CompiledName("navigate")>]
            static member navigate(url : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("(navigate = {0})"); CompiledName("navigateAux")>]
            static member ``navigate <-``(func : System.Func<string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(resizeBy({?0}, {?1}))"); CompiledName("resizeBy")>]
            static member resizeBy(?x : float, ?y : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("(resizeBy = {0})"); CompiledName("resizeByAux")>]
            static member ``resizeBy <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(item({0}))"); CompiledName("item")>]
            static member item(index : obj) : obj = failwith "never"
            [<FunScript.JSEmitInline("(item = {0})"); CompiledName("itemAux")>]
            static member ``item <-``(func : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(resizeTo({?0}, {?1}))"); CompiledName("resizeTo")>]
            static member resizeTo(?x : float, ?y : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("(resizeTo = {0})"); CompiledName("resizeToAux")>]
            static member ``resizeTo <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(createPopup({?0}))"); CompiledName("createPopup")>]
            static member createPopup(?arguments : obj) : FunScript.TypeScript.MSPopupWindow = failwith "never"
            [<FunScript.JSEmitInline("(createPopup = {0})"); CompiledName("createPopupAux")>]
            static member ``createPopup <-``(func : System.Func<obj, FunScript.TypeScript.MSPopupWindow>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(toStaticHTML({0}))"); CompiledName("toStaticHTML")>]
            static member toStaticHTML(html : string) : string = failwith "never"
            [<FunScript.JSEmitInline("(toStaticHTML = {0})"); CompiledName("toStaticHTMLAux")>]
            static member ``toStaticHTML <-``(func : System.Func<string, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(execScript({0}, {?1}))"); CompiledName("execScript")>]
            static member execScript(code : string, ?language : string) : obj = failwith "never"
            [<FunScript.JSEmitInline("(execScript = {0})"); CompiledName("execScriptAux")>]
            static member ``execScript <-``(func : System.Func<string, string, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(msWriteProfilerMark({0}))"); CompiledName("msWriteProfilerMark")>]
            static member msWriteProfilerMark(profilerMarkName : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("(msWriteProfilerMark = {0})"); CompiledName("msWriteProfilerMarkAux")>]
            static member ``msWriteProfilerMark <-``(func : System.Func<string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(moveTo({?0}, {?1}))"); CompiledName("moveTo")>]
            static member moveTo(?x : float, ?y : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("(moveTo = {0})"); CompiledName("moveToAux")>]
            static member ``moveTo <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(moveBy({?0}, {?1}))"); CompiledName("moveBy")>]
            static member moveBy(?x : float, ?y : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("(moveBy = {0})"); CompiledName("moveByAux")>]
            static member ``moveBy <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(showHelp({0}, {?1}, {?2}))"); CompiledName("showHelp")>]
            static member showHelp(url : string, ?helpArg : obj, ?features : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("(showHelp = {0})"); CompiledName("showHelpAux")>]
            static member ``showHelp <-``(func : System.Func<string, obj, string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(captureEvents())"); CompiledName("captureEvents")>]
            static member captureEvents() : unit = failwith "never"
            [<FunScript.JSEmitInline("(captureEvents = {0})"); CompiledName("captureEventsAux")>]
            static member ``captureEvents <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(releaseEvents())"); CompiledName("releaseEvents")>]
            static member releaseEvents() : unit = failwith "never"
            [<FunScript.JSEmitInline("(releaseEvents = {0})"); CompiledName("releaseEventsAux")>]
            static member ``releaseEvents <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(sessionStorage)"); CompiledName("sessionStorage")>]
            static member sessionStorage with get() : FunScript.TypeScript.Storage = failwith "never" and set (v : FunScript.TypeScript.Storage) : unit = failwith "never"
            [<FunScript.JSEmitInline("(clearTimeout({0}))"); CompiledName("clearTimeout")>]
            static member clearTimeout(handle : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("(clearTimeout = {0})"); CompiledName("clearTimeoutAux")>]
            static member ``clearTimeout <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(setTimeout({0}, {?1}))"); CompiledName("setTimeout")>]
            static member setTimeout(handler : obj, ?timeout : obj) : float = failwith "never"
            [<FunScript.JSEmitInline("(setTimeout = {0})"); CompiledName("setTimeoutAux")>]
            static member ``setTimeout <-``(func : System.Func<obj, obj, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(setTimeout({0}, {1}, {2...}))"); CompiledName("setTimeout1")>]
            static member setTimeout(handler : obj, timeout : obj, [<System.ParamArray>] args : array<obj>) : float = failwith "never"
            [<FunScript.JSEmitInline("(clearInterval({0}))"); CompiledName("clearInterval")>]
            static member clearInterval(handle : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("(clearInterval = {0})"); CompiledName("clearIntervalAux")>]
            static member ``clearInterval <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(setInterval({0}, {?1}))"); CompiledName("setInterval")>]
            static member setInterval(handler : obj, ?timeout : obj) : float = failwith "never"
            [<FunScript.JSEmitInline("(setInterval = {0})"); CompiledName("setIntervalAux")>]
            static member ``setInterval <-``(func : System.Func<obj, obj, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(setInterval({0}, {1}, {2...}))"); CompiledName("setInterval1")>]
            static member setInterval(handler : obj, timeout : obj, [<System.ParamArray>] args : array<obj>) : float = failwith "never"
            [<FunScript.JSEmitInline("(msSetImmediate({0}))"); CompiledName("msSetImmediate")>]
            static member msSetImmediate(expression : obj) : float = failwith "never"
            [<FunScript.JSEmitInline("(msSetImmediate = {0})"); CompiledName("msSetImmediateAux")>]
            static member ``msSetImmediate <-``(func : System.Func<obj, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(msSetImmediate({0}, {1...}))"); CompiledName("msSetImmediate1")>]
            static member msSetImmediateOverload2(expression : obj, [<System.ParamArray>] args : array<obj>) : float = failwith "never"
            [<FunScript.JSEmitInline("(clearImmediate({0}))"); CompiledName("clearImmediate")>]
            static member clearImmediate(handle : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("(clearImmediate = {0})"); CompiledName("clearImmediateAux")>]
            static member ``clearImmediate <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(msClearImmediate({0}))"); CompiledName("msClearImmediate")>]
            static member msClearImmediate(handle : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("(msClearImmediate = {0})"); CompiledName("msClearImmediateAux")>]
            static member ``msClearImmediate <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(setImmediate({0}))"); CompiledName("setImmediate")>]
            static member setImmediate(expression : obj) : float = failwith "never"
            [<FunScript.JSEmitInline("(setImmediate = {0})"); CompiledName("setImmediateAux")>]
            static member ``setImmediate <-``(func : System.Func<obj, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(setImmediate({0}, {1...}))"); CompiledName("setImmediate1")>]
            static member setImmediateOverload2(expression : obj, [<System.ParamArray>] args : array<obj>) : float = failwith "never"
            [<FunScript.JSEmitInline("(btoa({0}))"); CompiledName("btoa")>]
            static member btoa(rawString : string) : string = failwith "never"
            [<FunScript.JSEmitInline("(btoa = {0})"); CompiledName("btoaAux")>]
            static member ``btoa <-``(func : System.Func<string, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(atob({0}))"); CompiledName("atob")>]
            static member atob(encodedString : string) : string = failwith "never"
            [<FunScript.JSEmitInline("(atob = {0})"); CompiledName("atobAux")>]
            static member ``atob <-``(func : System.Func<string, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(msIndexedDB)"); CompiledName("msIndexedDB")>]
            static member msIndexedDB with get() : FunScript.TypeScript.IDBFactory = failwith "never" and set (v : FunScript.TypeScript.IDBFactory) : unit = failwith "never"
            [<FunScript.JSEmitInline("(indexedDB)"); CompiledName("indexedDB")>]
            static member indexedDB with get() : FunScript.TypeScript.IDBFactory = failwith "never" and set (v : FunScript.TypeScript.IDBFactory) : unit = failwith "never"
            [<FunScript.JSEmitInline("(console)"); CompiledName("console")>]
            static member console with get() : FunScript.TypeScript.Console = failwith "never" and set (v : FunScript.TypeScript.Console) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onpointerenter)"); CompiledName("onpointerenter")>]
            static member onpointerenter with get() : System.Func<FunScript.TypeScript.PointerEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.PointerEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onpointerout)"); CompiledName("onpointerout")>]
            static member onpointerout with get() : System.Func<FunScript.TypeScript.PointerEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.PointerEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onpointerdown)"); CompiledName("onpointerdown")>]
            static member onpointerdown with get() : System.Func<FunScript.TypeScript.PointerEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.PointerEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onpointerup)"); CompiledName("onpointerup")>]
            static member onpointerup with get() : System.Func<FunScript.TypeScript.PointerEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.PointerEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onpointercancel)"); CompiledName("onpointercancel")>]
            static member onpointercancel with get() : System.Func<FunScript.TypeScript.PointerEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.PointerEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onpointerover)"); CompiledName("onpointerover")>]
            static member onpointerover with get() : System.Func<FunScript.TypeScript.PointerEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.PointerEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onpointermove)"); CompiledName("onpointermove")>]
            static member onpointermove with get() : System.Func<FunScript.TypeScript.PointerEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.PointerEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(onpointerleave)"); CompiledName("onpointerleave")>]
            static member onpointerleave with get() : System.Func<FunScript.TypeScript.PointerEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.PointerEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"mouseleave\", {0}, {?1}))"); CompiledName("addEventListener")>]
            static member addEventListener_mouseleave(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"mouseenter\", {0}, {?1}))"); CompiledName("addEventListener1")>]
            static member addEventListener_mouseenter(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"help\", {0}, {?1}))"); CompiledName("addEventListener2")>]
            static member addEventListener_help(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"focusout\", {0}, {?1}))"); CompiledName("addEventListener3")>]
            static member addEventListener_focusout(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"focusin\", {0}, {?1}))"); CompiledName("addEventListener4")>]
            static member addEventListener_focusin(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"pointerenter\", {0}, {?1}))"); CompiledName("addEventListener5")>]
            static member addEventListener_pointerenter(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"pointerout\", {0}, {?1}))"); CompiledName("addEventListener6")>]
            static member addEventListener_pointerout(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"pointerdown\", {0}, {?1}))"); CompiledName("addEventListener7")>]
            static member addEventListener_pointerdown(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"pointerup\", {0}, {?1}))"); CompiledName("addEventListener8")>]
            static member addEventListener_pointerup(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"pointercancel\", {0}, {?1}))"); CompiledName("addEventListener9")>]
            static member addEventListener_pointercancel(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"pointerover\", {0}, {?1}))"); CompiledName("addEventListener10")>]
            static member addEventListener_pointerover(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"pointermove\", {0}, {?1}))"); CompiledName("addEventListener11")>]
            static member addEventListener_pointermove(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"pointerleave\", {0}, {?1}))"); CompiledName("addEventListener12")>]
            static member addEventListener_pointerleave(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"dragend\", {0}, {?1}))"); CompiledName("addEventListener13")>]
            static member addEventListener_dragend(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"keydown\", {0}, {?1}))"); CompiledName("addEventListener14")>]
            static member addEventListener_keydown(listener : System.Func<FunScript.TypeScript.KeyboardEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"dragover\", {0}, {?1}))"); CompiledName("addEventListener15")>]
            static member addEventListener_dragover(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"keyup\", {0}, {?1}))"); CompiledName("addEventListener16")>]
            static member addEventListener_keyup(listener : System.Func<FunScript.TypeScript.KeyboardEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"reset\", {0}, {?1}))"); CompiledName("addEventListener17")>]
            static member addEventListener_reset(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"mouseup\", {0}, {?1}))"); CompiledName("addEventListener18")>]
            static member addEventListener_mouseup(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"dragstart\", {0}, {?1}))"); CompiledName("addEventListener19")>]
            static member addEventListener_dragstart(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"drag\", {0}, {?1}))"); CompiledName("addEventListener20")>]
            static member addEventListener_drag(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"mouseover\", {0}, {?1}))"); CompiledName("addEventListener21")>]
            static member addEventListener_mouseover(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"dragleave\", {0}, {?1}))"); CompiledName("addEventListener22")>]
            static member addEventListener_dragleave(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"afterprint\", {0}, {?1}))"); CompiledName("addEventListener23")>]
            static member addEventListener_afterprint(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"pause\", {0}, {?1}))"); CompiledName("addEventListener24")>]
            static member addEventListener_pause(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"beforeprint\", {0}, {?1}))"); CompiledName("addEventListener25")>]
            static member addEventListener_beforeprint(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"mousedown\", {0}, {?1}))"); CompiledName("addEventListener26")>]
            static member addEventListener_mousedown(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"seeked\", {0}, {?1}))"); CompiledName("addEventListener27")>]
            static member addEventListener_seeked(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"click\", {0}, {?1}))"); CompiledName("addEventListener28")>]
            static member addEventListener_click(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"waiting\", {0}, {?1}))"); CompiledName("addEventListener29")>]
            static member addEventListener_waiting(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"online\", {0}, {?1}))"); CompiledName("addEventListener30")>]
            static member addEventListener_online(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"durationchange\", {0}, {?1}))"); CompiledName("addEventListener31")>]
            static member addEventListener_durationchange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"blur\", {0}, {?1}))"); CompiledName("addEventListener32")>]
            static member addEventListener_blur(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"emptied\", {0}, {?1}))"); CompiledName("addEventListener33")>]
            static member addEventListener_emptied(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"seeking\", {0}, {?1}))"); CompiledName("addEventListener34")>]
            static member addEventListener_seeking(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"canplay\", {0}, {?1}))"); CompiledName("addEventListener35")>]
            static member addEventListener_canplay(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"stalled\", {0}, {?1}))"); CompiledName("addEventListener36")>]
            static member addEventListener_stalled(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"mousemove\", {0}, {?1}))"); CompiledName("addEventListener37")>]
            static member addEventListener_mousemove(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"offline\", {0}, {?1}))"); CompiledName("addEventListener38")>]
            static member addEventListener_offline(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"beforeunload\", {0}, {?1}))"); CompiledName("addEventListener39")>]
            static member addEventListener_beforeunload(listener : System.Func<FunScript.TypeScript.BeforeUnloadEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"ratechange\", {0}, {?1}))"); CompiledName("addEventListener40")>]
            static member addEventListener_ratechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"storage\", {0}, {?1}))"); CompiledName("addEventListener41")>]
            static member addEventListener_storage(listener : System.Func<FunScript.TypeScript.StorageEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"loadstart\", {0}, {?1}))"); CompiledName("addEventListener42")>]
            static member addEventListener_loadstart(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"dragenter\", {0}, {?1}))"); CompiledName("addEventListener43")>]
            static member addEventListener_dragenter(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"submit\", {0}, {?1}))"); CompiledName("addEventListener44")>]
            static member addEventListener_submit(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"progress\", {0}, {?1}))"); CompiledName("addEventListener45")>]
            static member addEventListener_progress(listener : System.Func<FunScript.TypeScript.ProgressEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"dblclick\", {0}, {?1}))"); CompiledName("addEventListener46")>]
            static member addEventListener_dblclick(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"contextmenu\", {0}, {?1}))"); CompiledName("addEventListener47")>]
            static member addEventListener_contextmenu(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"change\", {0}, {?1}))"); CompiledName("addEventListener48")>]
            static member addEventListener_change(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"loadedmetadata\", {0}, {?1}))"); CompiledName("addEventListener49")>]
            static member addEventListener_loadedmetadata(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"play\", {0}, {?1}))"); CompiledName("addEventListener50")>]
            static member addEventListener_play(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"playing\", {0}, {?1}))"); CompiledName("addEventListener51")>]
            static member addEventListener_playing(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"canplaythrough\", {0}, {?1}))"); CompiledName("addEventListener52")>]
            static member addEventListener_canplaythrough(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"abort\", {0}, {?1}))"); CompiledName("addEventListener53")>]
            static member addEventListener_abort(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"readystatechange\", {0}, {?1}))"); CompiledName("addEventListener54")>]
            static member addEventListener_readystatechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"keypress\", {0}, {?1}))"); CompiledName("addEventListener55")>]
            static member addEventListener_keypress(listener : System.Func<FunScript.TypeScript.KeyboardEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"loadeddata\", {0}, {?1}))"); CompiledName("addEventListener56")>]
            static member addEventListener_loadeddata(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"suspend\", {0}, {?1}))"); CompiledName("addEventListener57")>]
            static member addEventListener_suspend(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"focus\", {0}, {?1}))"); CompiledName("addEventListener58")>]
            static member addEventListener_focus(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"message\", {0}, {?1}))"); CompiledName("addEventListener59")>]
            static member addEventListener_message(listener : System.Func<FunScript.TypeScript.MessageEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"timeupdate\", {0}, {?1}))"); CompiledName("addEventListener60")>]
            static member addEventListener_timeupdate(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"resize\", {0}, {?1}))"); CompiledName("addEventListener61")>]
            static member addEventListener_resize(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"select\", {0}, {?1}))"); CompiledName("addEventListener62")>]
            static member addEventListener_select(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"drop\", {0}, {?1}))"); CompiledName("addEventListener63")>]
            static member addEventListener_drop(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"mouseout\", {0}, {?1}))"); CompiledName("addEventListener64")>]
            static member addEventListener_mouseout(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"ended\", {0}, {?1}))"); CompiledName("addEventListener65")>]
            static member addEventListener_ended(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"hashchange\", {0}, {?1}))"); CompiledName("addEventListener66")>]
            static member addEventListener_hashchange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"unload\", {0}, {?1}))"); CompiledName("addEventListener67")>]
            static member addEventListener_unload(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"scroll\", {0}, {?1}))"); CompiledName("addEventListener68")>]
            static member addEventListener_scroll(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"mousewheel\", {0}, {?1}))"); CompiledName("addEventListener69")>]
            static member addEventListener_mousewheel(listener : System.Func<FunScript.TypeScript.MouseWheelEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"load\", {0}, {?1}))"); CompiledName("addEventListener70")>]
            static member addEventListener_load(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"volumechange\", {0}, {?1}))"); CompiledName("addEventListener71")>]
            static member addEventListener_volumechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"input\", {0}, {?1}))"); CompiledName("addEventListener72")>]
            static member addEventListener_input(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"mspointerdown\", {0}, {?1}))"); CompiledName("addEventListener73")>]
            static member addEventListener_mspointerdown(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"msgesturedoubletap\", {0}, {?1}))"); CompiledName("addEventListener74")>]
            static member addEventListener_msgesturedoubletap(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"mspointerhover\", {0}, {?1}))"); CompiledName("addEventListener75")>]
            static member addEventListener_mspointerhover(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"msgesturehold\", {0}, {?1}))"); CompiledName("addEventListener76")>]
            static member addEventListener_msgesturehold(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"mspointermove\", {0}, {?1}))"); CompiledName("addEventListener77")>]
            static member addEventListener_mspointermove(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"msgesturechange\", {0}, {?1}))"); CompiledName("addEventListener78")>]
            static member addEventListener_msgesturechange(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"msgesturestart\", {0}, {?1}))"); CompiledName("addEventListener79")>]
            static member addEventListener_msgesturestart(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"mspointercancel\", {0}, {?1}))"); CompiledName("addEventListener80")>]
            static member addEventListener_mspointercancel(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"msgestureend\", {0}, {?1}))"); CompiledName("addEventListener81")>]
            static member addEventListener_msgestureend(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"msgesturetap\", {0}, {?1}))"); CompiledName("addEventListener82")>]
            static member addEventListener_msgesturetap(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"mspointerout\", {0}, {?1}))"); CompiledName("addEventListener83")>]
            static member addEventListener_mspointerout(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"msinertiastart\", {0}, {?1}))"); CompiledName("addEventListener84")>]
            static member addEventListener_msinertiastart(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"mspointerover\", {0}, {?1}))"); CompiledName("addEventListener85")>]
            static member addEventListener_mspointerover(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"popstate\", {0}, {?1}))"); CompiledName("addEventListener86")>]
            static member addEventListener_popstate(listener : System.Func<FunScript.TypeScript.PopStateEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"mspointerup\", {0}, {?1}))"); CompiledName("addEventListener87")>]
            static member addEventListener_mspointerup(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"pageshow\", {0}, {?1}))"); CompiledName("addEventListener88")>]
            static member addEventListener_pageshow(listener : System.Func<FunScript.TypeScript.PageTransitionEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"devicemotion\", {0}, {?1}))"); CompiledName("addEventListener89")>]
            static member addEventListener_devicemotion(listener : System.Func<FunScript.TypeScript.DeviceMotionEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"deviceorientation\", {0}, {?1}))"); CompiledName("addEventListener90")>]
            static member addEventListener_deviceorientation(listener : System.Func<FunScript.TypeScript.DeviceOrientationEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"mspointerenter\", {0}, {?1}))"); CompiledName("addEventListener91")>]
            static member addEventListener_mspointerenter(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"pagehide\", {0}, {?1}))"); CompiledName("addEventListener92")>]
            static member addEventListener_pagehide(listener : System.Func<FunScript.TypeScript.PageTransitionEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener(\"mspointerleave\", {0}, {?1}))"); CompiledName("addEventListener93")>]
            static member addEventListener_mspointerleave(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener({0}, {1}, {?2}))"); CompiledName("addEventListener94")>]
            static member addEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("(addEventListener = {0})"); CompiledName("addEventListener94Aux")>]
            static member ``addEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(importScripts())"); CompiledName("importScripts")>]
            static member importScripts() : unit = failwith "never"
            [<FunScript.JSEmitInline("(importScripts = {0})"); CompiledName("importScriptsAux")>]
            static member ``importScripts <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(importScripts({0...}))"); CompiledName("importScripts1")>]
            static member importScriptsOverload2([<System.ParamArray>] urls : array<string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(ActiveXObject)"); CompiledName("ActiveXObject")>]
            static member ActiveXObject with get() : FunScript.TypeScript.AnonymousType438 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType438) : unit = failwith "never"
            [<FunScript.JSEmitInline("(WScript)"); CompiledName("WScript")>]
            static member WScript with get() : FunScript.TypeScript.AnonymousType439 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType439) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_1 =


    type FunScript.TypeScript.AbstractWorker with 

            [<FunScript.JSEmitInline("({0}.onerror)"); CompiledName("onerror1")>]
            member __.onerror with get() : System.Func<FunScript.TypeScript.ErrorEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.ErrorEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"error\", {1}, {?2}))"); CompiledName("addEventListener95")>]
            member __.addEventListener_error(listener : System.Func<FunScript.TypeScript.ErrorEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener({1}, {2}, {?3}))"); CompiledName("addEventListener96")>]
            member __.addEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener = {1})"); CompiledName("addEventListener96Aux")>]
            member __.``addEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_2 =


    type FunScript.TypeScript.AesGcmEncryptResult with 

            [<FunScript.JSEmitInline("({0}.ciphertext)"); CompiledName("ciphertext")>]
            member __.ciphertext with get() : FunScript.TypeScript.ArrayBuffer = failwith "never" and set (v : FunScript.TypeScript.ArrayBuffer) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.tag)"); CompiledName("tag")>]
            member __.tag with get() : FunScript.TypeScript.ArrayBuffer = failwith "never" and set (v : FunScript.TypeScript.ArrayBuffer) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_3 =


    type FunScript.TypeScript.Algorithm with 

            [<FunScript.JSEmitInline("({0}.name)"); CompiledName("name1")>]
            member __.name with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.params)"); CompiledName("_params")>]
            member __._params with get() : FunScript.TypeScript.AlgorithmParameters = failwith "never" and set (v : FunScript.TypeScript.AlgorithmParameters) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_4 =


    type FunScript.TypeScript.AnimationEvent with 

            [<FunScript.JSEmitInline("({0}.animationName)"); CompiledName("animationName")>]
            member __.animationName with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.elapsedTime)"); CompiledName("elapsedTime")>]
            member __.elapsedTime with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initAnimationEvent({1}, {2}, {3}, {4}, {5}))"); CompiledName("initAnimationEvent")>]
            member __.initAnimationEvent(typeArg : string, canBubbleArg : bool, cancelableArg : bool, animationNameArg : string, elapsedTimeArg : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initAnimationEvent = {1})"); CompiledName("initAnimationEventAux")>]
            member __.``initAnimationEvent <-``(func : System.Func<string, bool, bool, string, float, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_5 =


    type FunScript.TypeScript.AnonymousType1 with 

            [<FunScript.JSEmitInline("(new {0}({?1}))"); CompiledName("Create")>]
            member __.Create(?value : obj) : FunScript.TypeScript.Object = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("CreateAux")>]
            member __.``Create <-``(func : System.Func<obj, FunScript.TypeScript.Object>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}())"); CompiledName("Invoke")>]
            member __.Invoke() : obj = failwith "never"
            [<FunScript.JSEmitInline("({0} = {1})"); CompiledName("InvokeAux")>]
            member __.``Invoke <-``(func : System.Func<obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}({1}))"); CompiledName("Invoke1")>]
            member __.Invoke(value : obj) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0} = {1})"); CompiledName("Invoke1Aux")>]
            member __.``Invoke <-``(func : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype")>]
            member __.prototype with get() : FunScript.TypeScript.Object = failwith "never" and set (v : FunScript.TypeScript.Object) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getPrototypeOf({1}))"); CompiledName("getPrototypeOf")>]
            member __.getPrototypeOf(o : obj) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.getPrototypeOf = {1})"); CompiledName("getPrototypeOfAux")>]
            member __.``getPrototypeOf <-``(func : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getOwnPropertyDescriptor({1}, {2}))"); CompiledName("getOwnPropertyDescriptor")>]
            member __.getOwnPropertyDescriptor(o : obj, p : string) : FunScript.TypeScript.PropertyDescriptor = failwith "never"
            [<FunScript.JSEmitInline("({0}.getOwnPropertyDescriptor = {1})"); CompiledName("getOwnPropertyDescriptorAux")>]
            member __.``getOwnPropertyDescriptor <-``(func : System.Func<obj, string, FunScript.TypeScript.PropertyDescriptor>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getOwnPropertyNames({1}))"); CompiledName("getOwnPropertyNames")>]
            member __.getOwnPropertyNames(o : obj) : array<string> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getOwnPropertyNames = {1})"); CompiledName("getOwnPropertyNamesAux")>]
            member __.``getOwnPropertyNames <-``(func : System.Func<obj, array<string>>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.create({1}, {?2}))"); CompiledName("create")>]
            member __.create(o : obj, ?properties : FunScript.TypeScript.PropertyDescriptorMap) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.create = {1})"); CompiledName("createAux")>]
            member __.``create <-``(func : System.Func<obj, FunScript.TypeScript.PropertyDescriptorMap, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.defineProperty({1}, {2}, {3}))"); CompiledName("defineProperty")>]
            member __.defineProperty(o : obj, p : string, attributes : FunScript.TypeScript.PropertyDescriptor) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.defineProperty = {1})"); CompiledName("definePropertyAux")>]
            member __.``defineProperty <-``(func : System.Func<obj, string, FunScript.TypeScript.PropertyDescriptor, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.defineProperties({1}, {2}))"); CompiledName("defineProperties")>]
            member __.defineProperties(o : obj, properties : FunScript.TypeScript.PropertyDescriptorMap) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.defineProperties = {1})"); CompiledName("definePropertiesAux")>]
            member __.``defineProperties <-``(func : System.Func<obj, FunScript.TypeScript.PropertyDescriptorMap, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.seal({1}))"); CompiledName("seal")>]
            member __.seal(o : obj) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.seal = {1})"); CompiledName("sealAux")>]
            member __.``seal <-``(func : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.freeze({1}))"); CompiledName("freeze")>]
            member __.freeze(o : obj) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.freeze = {1})"); CompiledName("freezeAux")>]
            member __.``freeze <-``(func : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.preventExtensions({1}))"); CompiledName("preventExtensions")>]
            member __.preventExtensions(o : obj) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.preventExtensions = {1})"); CompiledName("preventExtensionsAux")>]
            member __.``preventExtensions <-``(func : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.isSealed({1}))"); CompiledName("isSealed")>]
            member __.isSealed(o : obj) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.isSealed = {1})"); CompiledName("isSealedAux")>]
            member __.``isSealed <-``(func : System.Func<obj, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.isFrozen({1}))"); CompiledName("isFrozen")>]
            member __.isFrozen(o : obj) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.isFrozen = {1})"); CompiledName("isFrozenAux")>]
            member __.``isFrozen <-``(func : System.Func<obj, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.isExtensible({1}))"); CompiledName("isExtensible")>]
            member __.isExtensible(o : obj) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.isExtensible = {1})"); CompiledName("isExtensibleAux")>]
            member __.``isExtensible <-``(func : System.Func<obj, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.keys({1}))"); CompiledName("keys")>]
            member __.keys(o : obj) : array<string> = failwith "never"
            [<FunScript.JSEmitInline("({0}.keys = {1})"); CompiledName("keysAux")>]
            member __.``keys <-``(func : System.Func<obj, array<string>>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_6 =


    type FunScript.TypeScript.AnonymousType10 with 

            [<FunScript.JSEmitInline("(new {0}({?1}))"); CompiledName("Create1")>]
            member __.Create(?message : string) : FunScript.TypeScript.RangeError = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create1Aux")>]
            member __.``Create <-``(func : System.Func<string, FunScript.TypeScript.RangeError>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}({?1}))"); CompiledName("Invoke2")>]
            member __.Invoke(?message : string) : FunScript.TypeScript.RangeError = failwith "never"
            [<FunScript.JSEmitInline("({0} = {1})"); CompiledName("Invoke2Aux")>]
            member __.``Invoke <-``(func : System.Func<string, FunScript.TypeScript.RangeError>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype1")>]
            member __.prototype with get() : FunScript.TypeScript.RangeError = failwith "never" and set (v : FunScript.TypeScript.RangeError) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_7 =


    type FunScript.TypeScript.AnonymousType100 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype2")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLMenuElement = failwith "never" and set (v : FunScript.TypeScript.HTMLMenuElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create2")>]
            member __.Create() : FunScript.TypeScript.HTMLMenuElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create2Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLMenuElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_8 =


    type FunScript.TypeScript.AnonymousType101 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype3")>]
            member __.prototype with get() : FunScript.TypeScript.MouseWheelEvent = failwith "never" and set (v : FunScript.TypeScript.MouseWheelEvent) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create3")>]
            member __.Create() : FunScript.TypeScript.MouseWheelEvent = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create3Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MouseWheelEvent>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_9 =


    type FunScript.TypeScript.AnonymousType102 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype4")>]
            member __.prototype with get() : FunScript.TypeScript.SVGPointList = failwith "never" and set (v : FunScript.TypeScript.SVGPointList) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create4")>]
            member __.Create() : FunScript.TypeScript.SVGPointList = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create4Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGPointList>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_10 =


    type FunScript.TypeScript.AnonymousType103 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype5")>]
            member __.prototype with get() : FunScript.TypeScript.SVGAnimatedLengthList = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLengthList) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create5")>]
            member __.Create() : FunScript.TypeScript.SVGAnimatedLengthList = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create5Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGAnimatedLengthList>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_11 =


    type FunScript.TypeScript.AnonymousType104 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype6")>]
            member __.prototype with get() : FunScript.TypeScript.SVGAnimatedPreserveAspectRatio = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedPreserveAspectRatio) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create6")>]
            member __.Create() : FunScript.TypeScript.SVGAnimatedPreserveAspectRatio = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create6Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGAnimatedPreserveAspectRatio>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_12 =


    type FunScript.TypeScript.AnonymousType105 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype7")>]
            member __.prototype with get() : FunScript.TypeScript.MSSiteModeEvent = failwith "never" and set (v : FunScript.TypeScript.MSSiteModeEvent) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create7")>]
            member __.Create() : FunScript.TypeScript.MSSiteModeEvent = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create7Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MSSiteModeEvent>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_13 =


    type FunScript.TypeScript.AnonymousType106 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype8")>]
            member __.prototype with get() : FunScript.TypeScript.StyleSheetPageList = failwith "never" and set (v : FunScript.TypeScript.StyleSheetPageList) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create8")>]
            member __.Create() : FunScript.TypeScript.StyleSheetPageList = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create8Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.StyleSheetPageList>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_14 =


    type FunScript.TypeScript.AnonymousType107 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype9")>]
            member __.prototype with get() : FunScript.TypeScript.MSCSSProperties = failwith "never" and set (v : FunScript.TypeScript.MSCSSProperties) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create9")>]
            member __.Create() : FunScript.TypeScript.MSCSSProperties = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create9Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MSCSSProperties>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_15 =


    type FunScript.TypeScript.AnonymousType108 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype10")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLImageElement = failwith "never" and set (v : FunScript.TypeScript.HTMLImageElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create10")>]
            member __.Create() : FunScript.TypeScript.HTMLImageElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create10Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLImageElement>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.create())"); CompiledName("create1")>]
            member __.create() : FunScript.TypeScript.HTMLImageElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.create = {1})"); CompiledName("create1Aux")>]
            member __.``create <-``(func : System.Func<FunScript.TypeScript.HTMLImageElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_16 =


    type FunScript.TypeScript.AnonymousType109 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype11")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLAreaElement = failwith "never" and set (v : FunScript.TypeScript.HTMLAreaElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create11")>]
            member __.Create() : FunScript.TypeScript.HTMLAreaElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create11Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLAreaElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_17 =


    type FunScript.TypeScript.AnonymousType11 with 

            [<FunScript.JSEmitInline("(new {0}({?1}))"); CompiledName("Create12")>]
            member __.Create(?message : string) : FunScript.TypeScript.ReferenceError = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create12Aux")>]
            member __.``Create <-``(func : System.Func<string, FunScript.TypeScript.ReferenceError>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}({?1}))"); CompiledName("Invoke3")>]
            member __.Invoke(?message : string) : FunScript.TypeScript.ReferenceError = failwith "never"
            [<FunScript.JSEmitInline("({0} = {1})"); CompiledName("Invoke3Aux")>]
            member __.``Invoke <-``(func : System.Func<string, FunScript.TypeScript.ReferenceError>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype12")>]
            member __.prototype with get() : FunScript.TypeScript.ReferenceError = failwith "never" and set (v : FunScript.TypeScript.ReferenceError) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_18 =


    type FunScript.TypeScript.AnonymousType110 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype13")>]
            member __.prototype with get() : FunScript.TypeScript.SVGAngle = failwith "never" and set (v : FunScript.TypeScript.SVGAngle) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create13")>]
            member __.Create() : FunScript.TypeScript.SVGAngle = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create13Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGAngle>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_ANGLETYPE_RAD)"); CompiledName("SVG_ANGLETYPE_RAD")>]
            member __.SVG_ANGLETYPE_RAD with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_ANGLETYPE_UNKNOWN)"); CompiledName("SVG_ANGLETYPE_UNKNOWN")>]
            member __.SVG_ANGLETYPE_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_ANGLETYPE_UNSPECIFIED)"); CompiledName("SVG_ANGLETYPE_UNSPECIFIED")>]
            member __.SVG_ANGLETYPE_UNSPECIFIED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_ANGLETYPE_DEG)"); CompiledName("SVG_ANGLETYPE_DEG")>]
            member __.SVG_ANGLETYPE_DEG with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_ANGLETYPE_GRAD)"); CompiledName("SVG_ANGLETYPE_GRAD")>]
            member __.SVG_ANGLETYPE_GRAD with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_19 =


    type FunScript.TypeScript.AnonymousType111 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype14")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLButtonElement = failwith "never" and set (v : FunScript.TypeScript.HTMLButtonElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create14")>]
            member __.Create() : FunScript.TypeScript.HTMLButtonElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create14Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLButtonElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_20 =


    type FunScript.TypeScript.AnonymousType112 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype15")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLSourceElement = failwith "never" and set (v : FunScript.TypeScript.HTMLSourceElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create15")>]
            member __.Create() : FunScript.TypeScript.HTMLSourceElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create15Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLSourceElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_21 =


    type FunScript.TypeScript.AnonymousType113 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype16")>]
            member __.prototype with get() : FunScript.TypeScript.CanvasGradient = failwith "never" and set (v : FunScript.TypeScript.CanvasGradient) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create16")>]
            member __.Create() : FunScript.TypeScript.CanvasGradient = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create16Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.CanvasGradient>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_22 =


    type FunScript.TypeScript.AnonymousType114 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype17")>]
            member __.prototype with get() : FunScript.TypeScript.KeyboardEvent = failwith "never" and set (v : FunScript.TypeScript.KeyboardEvent) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create17")>]
            member __.Create() : FunScript.TypeScript.KeyboardEvent = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create17Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.KeyboardEvent>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOM_KEY_LOCATION_RIGHT)"); CompiledName("DOM_KEY_LOCATION_RIGHT")>]
            member __.DOM_KEY_LOCATION_RIGHT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOM_KEY_LOCATION_STANDARD)"); CompiledName("DOM_KEY_LOCATION_STANDARD")>]
            member __.DOM_KEY_LOCATION_STANDARD with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOM_KEY_LOCATION_LEFT)"); CompiledName("DOM_KEY_LOCATION_LEFT")>]
            member __.DOM_KEY_LOCATION_LEFT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOM_KEY_LOCATION_NUMPAD)"); CompiledName("DOM_KEY_LOCATION_NUMPAD")>]
            member __.DOM_KEY_LOCATION_NUMPAD with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOM_KEY_LOCATION_JOYSTICK)"); CompiledName("DOM_KEY_LOCATION_JOYSTICK")>]
            member __.DOM_KEY_LOCATION_JOYSTICK with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOM_KEY_LOCATION_MOBILE)"); CompiledName("DOM_KEY_LOCATION_MOBILE")>]
            member __.DOM_KEY_LOCATION_MOBILE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_23 =


    type FunScript.TypeScript.AnonymousType115 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype18")>]
            member __.prototype with get() : FunScript.TypeScript.MessageEvent = failwith "never" and set (v : FunScript.TypeScript.MessageEvent) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create18")>]
            member __.Create() : FunScript.TypeScript.MessageEvent = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create18Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MessageEvent>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_24 =


    type FunScript.TypeScript.AnonymousType116 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype19")>]
            member __.prototype with get() : FunScript.TypeScript.SVGElement = failwith "never" and set (v : FunScript.TypeScript.SVGElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create19")>]
            member __.Create() : FunScript.TypeScript.SVGElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create19Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_25 =


    type FunScript.TypeScript.AnonymousType117 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype20")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLScriptElement = failwith "never" and set (v : FunScript.TypeScript.HTMLScriptElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create20")>]
            member __.Create() : FunScript.TypeScript.HTMLScriptElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create20Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLScriptElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_26 =


    type FunScript.TypeScript.AnonymousType118 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype21")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLTableRowElement = failwith "never" and set (v : FunScript.TypeScript.HTMLTableRowElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create21")>]
            member __.Create() : FunScript.TypeScript.HTMLTableRowElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create21Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLTableRowElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_27 =


    type FunScript.TypeScript.AnonymousType119 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype22")>]
            member __.prototype with get() : FunScript.TypeScript.CanvasRenderingContext2D = failwith "never" and set (v : FunScript.TypeScript.CanvasRenderingContext2D) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create22")>]
            member __.Create() : FunScript.TypeScript.CanvasRenderingContext2D = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create22Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.CanvasRenderingContext2D>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_28 =


    type FunScript.TypeScript.AnonymousType12 with 

            [<FunScript.JSEmitInline("(new {0}({?1}))"); CompiledName("Create23")>]
            member __.Create(?message : string) : FunScript.TypeScript.SyntaxError = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create23Aux")>]
            member __.``Create <-``(func : System.Func<string, FunScript.TypeScript.SyntaxError>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}({?1}))"); CompiledName("Invoke4")>]
            member __.Invoke(?message : string) : FunScript.TypeScript.SyntaxError = failwith "never"
            [<FunScript.JSEmitInline("({0} = {1})"); CompiledName("Invoke4Aux")>]
            member __.``Invoke <-``(func : System.Func<string, FunScript.TypeScript.SyntaxError>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype23")>]
            member __.prototype with get() : FunScript.TypeScript.SyntaxError = failwith "never" and set (v : FunScript.TypeScript.SyntaxError) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_29 =


    type FunScript.TypeScript.AnonymousType120 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype24")>]
            member __.prototype with get() : FunScript.TypeScript.MSCSSRuleList = failwith "never" and set (v : FunScript.TypeScript.MSCSSRuleList) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create24")>]
            member __.Create() : FunScript.TypeScript.MSCSSRuleList = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create24Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MSCSSRuleList>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_30 =


    type FunScript.TypeScript.AnonymousType121 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype25")>]
            member __.prototype with get() : FunScript.TypeScript.SVGPathSegLinetoHorizontalAbs = failwith "never" and set (v : FunScript.TypeScript.SVGPathSegLinetoHorizontalAbs) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create25")>]
            member __.Create() : FunScript.TypeScript.SVGPathSegLinetoHorizontalAbs = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create25Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGPathSegLinetoHorizontalAbs>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_31 =


    type FunScript.TypeScript.AnonymousType122 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype26")>]
            member __.prototype with get() : FunScript.TypeScript.SVGPathSegArcAbs = failwith "never" and set (v : FunScript.TypeScript.SVGPathSegArcAbs) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create26")>]
            member __.Create() : FunScript.TypeScript.SVGPathSegArcAbs = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create26Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGPathSegArcAbs>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_32 =


    type FunScript.TypeScript.AnonymousType123 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype27")>]
            member __.prototype with get() : FunScript.TypeScript.SVGTransformList = failwith "never" and set (v : FunScript.TypeScript.SVGTransformList) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create27")>]
            member __.Create() : FunScript.TypeScript.SVGTransformList = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create27Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGTransformList>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_33 =


    type FunScript.TypeScript.AnonymousType124 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype28")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLHtmlElement = failwith "never" and set (v : FunScript.TypeScript.HTMLHtmlElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create28")>]
            member __.Create() : FunScript.TypeScript.HTMLHtmlElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create28Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLHtmlElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_34 =


    type FunScript.TypeScript.AnonymousType125 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype29")>]
            member __.prototype with get() : FunScript.TypeScript.SVGPathSegClosePath = failwith "never" and set (v : FunScript.TypeScript.SVGPathSegClosePath) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create29")>]
            member __.Create() : FunScript.TypeScript.SVGPathSegClosePath = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create29Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGPathSegClosePath>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_35 =


    type FunScript.TypeScript.AnonymousType126 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype30")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLFrameElement = failwith "never" and set (v : FunScript.TypeScript.HTMLFrameElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create30")>]
            member __.Create() : FunScript.TypeScript.HTMLFrameElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create30Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLFrameElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_36 =


    type FunScript.TypeScript.AnonymousType127 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype31")>]
            member __.prototype with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create31")>]
            member __.Create() : FunScript.TypeScript.SVGAnimatedLength = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create31Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGAnimatedLength>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_37 =


    type FunScript.TypeScript.AnonymousType128 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype32")>]
            member __.prototype with get() : FunScript.TypeScript.SVGDefsElement = failwith "never" and set (v : FunScript.TypeScript.SVGDefsElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create32")>]
            member __.Create() : FunScript.TypeScript.SVGDefsElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create32Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGDefsElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_38 =


    type FunScript.TypeScript.AnonymousType129 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype33")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLQuoteElement = failwith "never" and set (v : FunScript.TypeScript.HTMLQuoteElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create33")>]
            member __.Create() : FunScript.TypeScript.HTMLQuoteElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create33Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLQuoteElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_39 =


    type FunScript.TypeScript.AnonymousType13 with 

            [<FunScript.JSEmitInline("(new {0}({?1}))"); CompiledName("Create34")>]
            member __.Create(?message : string) : FunScript.TypeScript.TypeError = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create34Aux")>]
            member __.``Create <-``(func : System.Func<string, FunScript.TypeScript.TypeError>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}({?1}))"); CompiledName("Invoke5")>]
            member __.Invoke(?message : string) : FunScript.TypeScript.TypeError = failwith "never"
            [<FunScript.JSEmitInline("({0} = {1})"); CompiledName("Invoke5Aux")>]
            member __.``Invoke <-``(func : System.Func<string, FunScript.TypeScript.TypeError>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype34")>]
            member __.prototype with get() : FunScript.TypeScript.TypeError = failwith "never" and set (v : FunScript.TypeScript.TypeError) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_40 =


    type FunScript.TypeScript.AnonymousType130 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype35")>]
            member __.prototype with get() : FunScript.TypeScript.CSSMediaRule = failwith "never" and set (v : FunScript.TypeScript.CSSMediaRule) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create35")>]
            member __.Create() : FunScript.TypeScript.CSSMediaRule = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create35Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.CSSMediaRule>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_41 =


    type FunScript.TypeScript.AnonymousType131 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype36")>]
            member __.prototype with get() : FunScript.TypeScript.XMLHttpRequest = failwith "never" and set (v : FunScript.TypeScript.XMLHttpRequest) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create36")>]
            member __.Create() : FunScript.TypeScript.XMLHttpRequest = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create36Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.XMLHttpRequest>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LOADING)"); CompiledName("LOADING")>]
            member __.LOADING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DONE)"); CompiledName("DONE")>]
            member __.DONE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.UNSENT)"); CompiledName("UNSENT")>]
            member __.UNSENT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.OPENED)"); CompiledName("OPENED")>]
            member __.OPENED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.HEADERS_RECEIVED)"); CompiledName("HEADERS_RECEIVED")>]
            member __.HEADERS_RECEIVED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.create())"); CompiledName("create2")>]
            member __.create() : FunScript.TypeScript.XMLHttpRequest = failwith "never"
            [<FunScript.JSEmitInline("({0}.create = {1})"); CompiledName("create2Aux")>]
            member __.``create <-``(func : System.Func<FunScript.TypeScript.XMLHttpRequest>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_42 =


    type FunScript.TypeScript.AnonymousType132 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype37")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLTableHeaderCellElement = failwith "never" and set (v : FunScript.TypeScript.HTMLTableHeaderCellElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create37")>]
            member __.Create() : FunScript.TypeScript.HTMLTableHeaderCellElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create37Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLTableHeaderCellElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_43 =


    type FunScript.TypeScript.AnonymousType133 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype38")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLDListElement = failwith "never" and set (v : FunScript.TypeScript.HTMLDListElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create38")>]
            member __.Create() : FunScript.TypeScript.HTMLDListElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create38Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLDListElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_44 =


    type FunScript.TypeScript.AnonymousType134 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype39")>]
            member __.prototype with get() : FunScript.TypeScript.SVGPathSegLinetoHorizontalRel = failwith "never" and set (v : FunScript.TypeScript.SVGPathSegLinetoHorizontalRel) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create39")>]
            member __.Create() : FunScript.TypeScript.SVGPathSegLinetoHorizontalRel = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create39Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGPathSegLinetoHorizontalRel>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_45 =


    type FunScript.TypeScript.AnonymousType135 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype40")>]
            member __.prototype with get() : FunScript.TypeScript.SVGEllipseElement = failwith "never" and set (v : FunScript.TypeScript.SVGEllipseElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create40")>]
            member __.Create() : FunScript.TypeScript.SVGEllipseElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create40Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGEllipseElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_46 =


    type FunScript.TypeScript.AnonymousType136 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype41")>]
            member __.prototype with get() : FunScript.TypeScript.SVGAElement = failwith "never" and set (v : FunScript.TypeScript.SVGAElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create41")>]
            member __.Create() : FunScript.TypeScript.SVGAElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create41Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGAElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_47 =


    type FunScript.TypeScript.AnonymousType137 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype42")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLFrameSetElement = failwith "never" and set (v : FunScript.TypeScript.HTMLFrameSetElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create42")>]
            member __.Create() : FunScript.TypeScript.HTMLFrameSetElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create42Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLFrameSetElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_48 =


    type FunScript.TypeScript.AnonymousType138 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype43")>]
            member __.prototype with get() : FunScript.TypeScript.Screen = failwith "never" and set (v : FunScript.TypeScript.Screen) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create43")>]
            member __.Create() : FunScript.TypeScript.Screen = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create43Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.Screen>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_49 =


    type FunScript.TypeScript.AnonymousType139 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype44")>]
            member __.prototype with get() : FunScript.TypeScript.Coordinates = failwith "never" and set (v : FunScript.TypeScript.Coordinates) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create44")>]
            member __.Create() : FunScript.TypeScript.Coordinates = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create44Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.Coordinates>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_50 =


    type FunScript.TypeScript.AnonymousType14 with 

            [<FunScript.JSEmitInline("(new {0}({?1}))"); CompiledName("Create45")>]
            member __.Create(?message : string) : FunScript.TypeScript.URIError = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create45Aux")>]
            member __.``Create <-``(func : System.Func<string, FunScript.TypeScript.URIError>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}({?1}))"); CompiledName("Invoke6")>]
            member __.Invoke(?message : string) : FunScript.TypeScript.URIError = failwith "never"
            [<FunScript.JSEmitInline("({0} = {1})"); CompiledName("Invoke6Aux")>]
            member __.``Invoke <-``(func : System.Func<string, FunScript.TypeScript.URIError>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype45")>]
            member __.prototype with get() : FunScript.TypeScript.URIError = failwith "never" and set (v : FunScript.TypeScript.URIError) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_51 =


    type FunScript.TypeScript.AnonymousType140 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype46")>]
            member __.prototype with get() : FunScript.TypeScript.DataTransfer = failwith "never" and set (v : FunScript.TypeScript.DataTransfer) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create46")>]
            member __.Create() : FunScript.TypeScript.DataTransfer = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create46Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.DataTransfer>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_52 =


    type FunScript.TypeScript.AnonymousType141 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype47")>]
            member __.prototype with get() : FunScript.TypeScript.FocusEvent = failwith "never" and set (v : FunScript.TypeScript.FocusEvent) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create47")>]
            member __.Create() : FunScript.TypeScript.FocusEvent = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create47Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.FocusEvent>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_53 =


    type FunScript.TypeScript.AnonymousType142 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype48")>]
            member __.prototype with get() : FunScript.TypeScript.Range = failwith "never" and set (v : FunScript.TypeScript.Range) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create48")>]
            member __.Create() : FunScript.TypeScript.Range = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create48Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.Range>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.END_TO_END)"); CompiledName("END_TO_END")>]
            member __.END_TO_END with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.START_TO_START)"); CompiledName("START_TO_START")>]
            member __.START_TO_START with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.START_TO_END)"); CompiledName("START_TO_END")>]
            member __.START_TO_END with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.END_TO_START)"); CompiledName("END_TO_START")>]
            member __.END_TO_START with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_54 =


    type FunScript.TypeScript.AnonymousType143 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype49")>]
            member __.prototype with get() : FunScript.TypeScript.SVGPoint = failwith "never" and set (v : FunScript.TypeScript.SVGPoint) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create49")>]
            member __.Create() : FunScript.TypeScript.SVGPoint = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create49Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGPoint>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_55 =


    type FunScript.TypeScript.AnonymousType144 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype50")>]
            member __.prototype with get() : FunScript.TypeScript.MSPluginsCollection = failwith "never" and set (v : FunScript.TypeScript.MSPluginsCollection) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create50")>]
            member __.Create() : FunScript.TypeScript.MSPluginsCollection = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create50Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MSPluginsCollection>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_56 =


    type FunScript.TypeScript.AnonymousType145 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype51")>]
            member __.prototype with get() : FunScript.TypeScript.SVGAnimatedNumberList = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumberList) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create51")>]
            member __.Create() : FunScript.TypeScript.SVGAnimatedNumberList = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create51Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGAnimatedNumberList>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_57 =


    type FunScript.TypeScript.AnonymousType146 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype52")>]
            member __.prototype with get() : FunScript.TypeScript.SVGSVGElement = failwith "never" and set (v : FunScript.TypeScript.SVGSVGElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create52")>]
            member __.Create() : FunScript.TypeScript.SVGSVGElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create52Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGSVGElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_58 =


    type FunScript.TypeScript.AnonymousType147 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype53")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLLabelElement = failwith "never" and set (v : FunScript.TypeScript.HTMLLabelElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create53")>]
            member __.Create() : FunScript.TypeScript.HTMLLabelElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create53Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLLabelElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_59 =


    type FunScript.TypeScript.AnonymousType148 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype54")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLLegendElement = failwith "never" and set (v : FunScript.TypeScript.HTMLLegendElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create54")>]
            member __.Create() : FunScript.TypeScript.HTMLLegendElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create54Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLLegendElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_60 =


    type FunScript.TypeScript.AnonymousType149 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype55")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLDirectoryElement = failwith "never" and set (v : FunScript.TypeScript.HTMLDirectoryElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create55")>]
            member __.Create() : FunScript.TypeScript.HTMLDirectoryElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create55Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLDirectoryElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_61 =


    type FunScript.TypeScript.AnonymousType15 with 

            [<FunScript.JSEmitInline("(new {0}({?1}))"); CompiledName("Create56")>]
            member __.Create(?arrayLength : float) : array<obj> = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create56Aux")>]
            member __.``Create <-``(func : System.Func<float, array<obj>>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}))"); CompiledName("Create57")>]
            member __.Create<'T>(arrayLength : float) : array<'T> = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create57Aux")>]
            member __.``Create <-``<'T>(func : System.Func<float, array<'T>>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create58")>]
            member __.Create<'T>() : array<'T> = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create58Aux")>]
            member __.``Create <-``<'T>(func : System.Func<array<'T>>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1...}))"); CompiledName("Create59")>]
            member __.CreateOverload2<'T>([<System.ParamArray>] items : array<'T>) : array<'T> = failwith "never"
            [<FunScript.JSEmitInline("({0}({?1}))"); CompiledName("Invoke7")>]
            member __.Invoke(?arrayLength : float) : array<obj> = failwith "never"
            [<FunScript.JSEmitInline("({0} = {1})"); CompiledName("Invoke7Aux")>]
            member __.``Invoke <-``(func : System.Func<float, array<obj>>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}({1}))"); CompiledName("Invoke8")>]
            member __.Invoke<'T>(arrayLength : float) : array<'T> = failwith "never"
            [<FunScript.JSEmitInline("({0} = {1})"); CompiledName("Invoke8Aux")>]
            member __.``Invoke <-``<'T>(func : System.Func<float, array<'T>>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}())"); CompiledName("Invoke9")>]
            member __.Invoke<'T>() : array<'T> = failwith "never"
            [<FunScript.JSEmitInline("({0} = {1})"); CompiledName("Invoke9Aux")>]
            member __.``Invoke <-``<'T>(func : System.Func<array<'T>>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}({1...}))"); CompiledName("Invoke10")>]
            member __.InvokeOverload2<'T>([<System.ParamArray>] items : array<'T>) : array<'T> = failwith "never"
            [<FunScript.JSEmitInline("({0}.isArray({1}))"); CompiledName("isArray")>]
            member __.isArray(arg : obj) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.isArray = {1})"); CompiledName("isArrayAux")>]
            member __.``isArray <-``(func : System.Func<obj, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype56")>]
            member __.prototype with get() : array<obj> = failwith "never" and set (v : array<obj>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_62 =


    type FunScript.TypeScript.AnonymousType150 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype57")>]
            member __.prototype with get() : FunScript.TypeScript.SVGAnimatedInteger = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedInteger) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create60")>]
            member __.Create() : FunScript.TypeScript.SVGAnimatedInteger = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create60Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGAnimatedInteger>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_63 =


    type FunScript.TypeScript.AnonymousType151 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype58")>]
            member __.prototype with get() : FunScript.TypeScript.SVGTextElement = failwith "never" and set (v : FunScript.TypeScript.SVGTextElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create61")>]
            member __.Create() : FunScript.TypeScript.SVGTextElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create61Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGTextElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_64 =


    type FunScript.TypeScript.AnonymousType152 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype59")>]
            member __.prototype with get() : FunScript.TypeScript.SVGTSpanElement = failwith "never" and set (v : FunScript.TypeScript.SVGTSpanElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create62")>]
            member __.Create() : FunScript.TypeScript.SVGTSpanElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create62Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGTSpanElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_65 =


    type FunScript.TypeScript.AnonymousType153 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype60")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLLIElement = failwith "never" and set (v : FunScript.TypeScript.HTMLLIElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create63")>]
            member __.Create() : FunScript.TypeScript.HTMLLIElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create63Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLLIElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_66 =


    type FunScript.TypeScript.AnonymousType154 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype61")>]
            member __.prototype with get() : FunScript.TypeScript.SVGPathSegLinetoVerticalAbs = failwith "never" and set (v : FunScript.TypeScript.SVGPathSegLinetoVerticalAbs) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create64")>]
            member __.Create() : FunScript.TypeScript.SVGPathSegLinetoVerticalAbs = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create64Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGPathSegLinetoVerticalAbs>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_67 =


    type FunScript.TypeScript.AnonymousType155 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype62")>]
            member __.prototype with get() : FunScript.TypeScript.SVGStyleElement = failwith "never" and set (v : FunScript.TypeScript.SVGStyleElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create65")>]
            member __.Create() : FunScript.TypeScript.SVGStyleElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create65Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGStyleElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_68 =


    type FunScript.TypeScript.AnonymousType156 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype63")>]
            member __.prototype with get() : FunScript.TypeScript.MSCurrentStyleCSSProperties = failwith "never" and set (v : FunScript.TypeScript.MSCurrentStyleCSSProperties) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create66")>]
            member __.Create() : FunScript.TypeScript.MSCurrentStyleCSSProperties = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create66Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MSCurrentStyleCSSProperties>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_69 =


    type FunScript.TypeScript.AnonymousType157 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype64")>]
            member __.prototype with get() : FunScript.TypeScript.Storage = failwith "never" and set (v : FunScript.TypeScript.Storage) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create67")>]
            member __.Create() : FunScript.TypeScript.Storage = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create67Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.Storage>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_70 =


    type FunScript.TypeScript.AnonymousType158 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype65")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLIFrameElement = failwith "never" and set (v : FunScript.TypeScript.HTMLIFrameElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create68")>]
            member __.Create() : FunScript.TypeScript.HTMLIFrameElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create68Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLIFrameElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_71 =


    type FunScript.TypeScript.AnonymousType159 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype66")>]
            member __.prototype with get() : FunScript.TypeScript.TextRangeCollection = failwith "never" and set (v : FunScript.TypeScript.TextRangeCollection) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create69")>]
            member __.Create() : FunScript.TypeScript.TextRangeCollection = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create69Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.TextRangeCollection>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_72 =


    type FunScript.TypeScript.AnonymousType16 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype67")>]
            member __.prototype with get() : FunScript.TypeScript.ArrayBuffer = failwith "never" and set (v : FunScript.TypeScript.ArrayBuffer) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}))"); CompiledName("Create70")>]
            member __.Create(byteLength : float) : FunScript.TypeScript.ArrayBuffer = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create70Aux")>]
            member __.``Create <-``(func : System.Func<float, FunScript.TypeScript.ArrayBuffer>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_73 =


    type FunScript.TypeScript.AnonymousType160 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype68")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLBodyElement = failwith "never" and set (v : FunScript.TypeScript.HTMLBodyElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create71")>]
            member __.Create() : FunScript.TypeScript.HTMLBodyElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create71Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLBodyElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_74 =


    type FunScript.TypeScript.AnonymousType161 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype69")>]
            member __.prototype with get() : FunScript.TypeScript.DocumentType = failwith "never" and set (v : FunScript.TypeScript.DocumentType) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create72")>]
            member __.Create() : FunScript.TypeScript.DocumentType = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create72Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.DocumentType>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_75 =


    type FunScript.TypeScript.AnonymousType162 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype70")>]
            member __.prototype with get() : FunScript.TypeScript.SVGRadialGradientElement = failwith "never" and set (v : FunScript.TypeScript.SVGRadialGradientElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create73")>]
            member __.Create() : FunScript.TypeScript.SVGRadialGradientElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create73Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGRadialGradientElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_76 =


    type FunScript.TypeScript.AnonymousType163 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype71")>]
            member __.prototype with get() : FunScript.TypeScript.MutationEvent = failwith "never" and set (v : FunScript.TypeScript.MutationEvent) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create74")>]
            member __.Create() : FunScript.TypeScript.MutationEvent = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create74Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MutationEvent>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MODIFICATION)"); CompiledName("MODIFICATION")>]
            member __.MODIFICATION with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.REMOVAL)"); CompiledName("REMOVAL")>]
            member __.REMOVAL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ADDITION)"); CompiledName("ADDITION")>]
            member __.ADDITION with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_77 =


    type FunScript.TypeScript.AnonymousType164 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype72")>]
            member __.prototype with get() : FunScript.TypeScript.DragEvent = failwith "never" and set (v : FunScript.TypeScript.DragEvent) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create75")>]
            member __.Create() : FunScript.TypeScript.DragEvent = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create75Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.DragEvent>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_78 =


    type FunScript.TypeScript.AnonymousType165 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype73")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLTableSectionElement = failwith "never" and set (v : FunScript.TypeScript.HTMLTableSectionElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create76")>]
            member __.Create() : FunScript.TypeScript.HTMLTableSectionElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create76Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLTableSectionElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_79 =


    type FunScript.TypeScript.AnonymousType166 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype74")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLInputElement = failwith "never" and set (v : FunScript.TypeScript.HTMLInputElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create77")>]
            member __.Create() : FunScript.TypeScript.HTMLInputElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create77Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLInputElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_80 =


    type FunScript.TypeScript.AnonymousType167 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype75")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLAnchorElement = failwith "never" and set (v : FunScript.TypeScript.HTMLAnchorElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create78")>]
            member __.Create() : FunScript.TypeScript.HTMLAnchorElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create78Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLAnchorElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_81 =


    type FunScript.TypeScript.AnonymousType168 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype76")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLParamElement = failwith "never" and set (v : FunScript.TypeScript.HTMLParamElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create79")>]
            member __.Create() : FunScript.TypeScript.HTMLParamElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create79Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLParamElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_82 =


    type FunScript.TypeScript.AnonymousType169 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype77")>]
            member __.prototype with get() : FunScript.TypeScript.SVGImageElement = failwith "never" and set (v : FunScript.TypeScript.SVGImageElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create80")>]
            member __.Create() : FunScript.TypeScript.SVGImageElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create80Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGImageElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_83 =


    type FunScript.TypeScript.AnonymousType17 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype78")>]
            member __.prototype with get() : FunScript.TypeScript.Int8Array = failwith "never" and set (v : FunScript.TypeScript.Int8Array) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}))"); CompiledName("Create81")>]
            member __.Create(length : float) : FunScript.TypeScript.Int8Array = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create81Aux")>]
            member __.``Create <-``(func : System.Func<float, FunScript.TypeScript.Int8Array>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}))"); CompiledName("Create82")>]
            member __.Create(array : FunScript.TypeScript.Int8Array) : FunScript.TypeScript.Int8Array = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create82Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.Int8Array, FunScript.TypeScript.Int8Array>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}))"); CompiledName("Create83")>]
            member __.Create(array : array<float>) : FunScript.TypeScript.Int8Array = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create83Aux")>]
            member __.``Create <-``(func : System.Func<array<float>, FunScript.TypeScript.Int8Array>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}, {?2}, {?3}))"); CompiledName("Create84")>]
            member __.Create(buffer : FunScript.TypeScript.ArrayBuffer, ?byteOffset : float, ?length : float) : FunScript.TypeScript.Int8Array = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create84Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.ArrayBuffer, float, float, FunScript.TypeScript.Int8Array>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BYTES_PER_ELEMENT)"); CompiledName("BYTES_PER_ELEMENT")>]
            member __.BYTES_PER_ELEMENT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_84 =


    type FunScript.TypeScript.AnonymousType170 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype79")>]
            member __.prototype with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create85")>]
            member __.Create() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create85Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGAnimatedNumber>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_85 =


    type FunScript.TypeScript.AnonymousType171 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype80")>]
            member __.prototype with get() : FunScript.TypeScript.PerformanceTiming = failwith "never" and set (v : FunScript.TypeScript.PerformanceTiming) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create86")>]
            member __.Create() : FunScript.TypeScript.PerformanceTiming = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create86Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.PerformanceTiming>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_86 =


    type FunScript.TypeScript.AnonymousType172 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype81")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLPreElement = failwith "never" and set (v : FunScript.TypeScript.HTMLPreElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create87")>]
            member __.Create() : FunScript.TypeScript.HTMLPreElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create87Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLPreElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_87 =


    type FunScript.TypeScript.AnonymousType173 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype82")>]
            member __.prototype with get() : FunScript.TypeScript.EventException = failwith "never" and set (v : FunScript.TypeScript.EventException) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create88")>]
            member __.Create() : FunScript.TypeScript.EventException = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create88Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.EventException>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DISPATCH_REQUEST_ERR)"); CompiledName("DISPATCH_REQUEST_ERR")>]
            member __.DISPATCH_REQUEST_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.UNSPECIFIED_EVENT_TYPE_ERR)"); CompiledName("UNSPECIFIED_EVENT_TYPE_ERR")>]
            member __.UNSPECIFIED_EVENT_TYPE_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_88 =


    type FunScript.TypeScript.AnonymousType174 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype83")>]
            member __.prototype with get() : FunScript.TypeScript.SVGMetadataElement = failwith "never" and set (v : FunScript.TypeScript.SVGMetadataElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create89")>]
            member __.Create() : FunScript.TypeScript.SVGMetadataElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create89Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGMetadataElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_89 =


    type FunScript.TypeScript.AnonymousType175 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype84")>]
            member __.prototype with get() : FunScript.TypeScript.SVGPathSegArcRel = failwith "never" and set (v : FunScript.TypeScript.SVGPathSegArcRel) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create90")>]
            member __.Create() : FunScript.TypeScript.SVGPathSegArcRel = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create90Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGPathSegArcRel>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_90 =


    type FunScript.TypeScript.AnonymousType176 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype85")>]
            member __.prototype with get() : FunScript.TypeScript.SVGPathSegMovetoAbs = failwith "never" and set (v : FunScript.TypeScript.SVGPathSegMovetoAbs) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create91")>]
            member __.Create() : FunScript.TypeScript.SVGPathSegMovetoAbs = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create91Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGPathSegMovetoAbs>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_91 =


    type FunScript.TypeScript.AnonymousType177 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype86")>]
            member __.prototype with get() : FunScript.TypeScript.SVGStringList = failwith "never" and set (v : FunScript.TypeScript.SVGStringList) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create92")>]
            member __.Create() : FunScript.TypeScript.SVGStringList = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create92Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGStringList>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_92 =


    type FunScript.TypeScript.AnonymousType178 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype87")>]
            member __.prototype with get() : FunScript.TypeScript.XDomainRequest = failwith "never" and set (v : FunScript.TypeScript.XDomainRequest) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create93")>]
            member __.Create() : FunScript.TypeScript.XDomainRequest = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create93Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.XDomainRequest>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.create())"); CompiledName("create3")>]
            member __.create() : FunScript.TypeScript.XDomainRequest = failwith "never"
            [<FunScript.JSEmitInline("({0}.create = {1})"); CompiledName("create3Aux")>]
            member __.``create <-``(func : System.Func<FunScript.TypeScript.XDomainRequest>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_93 =


    type FunScript.TypeScript.AnonymousType179 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype88")>]
            member __.prototype with get() : FunScript.TypeScript.SVGLength = failwith "never" and set (v : FunScript.TypeScript.SVGLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create94")>]
            member __.Create() : FunScript.TypeScript.SVGLength = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create94Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGLength>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_LENGTHTYPE_NUMBER)"); CompiledName("SVG_LENGTHTYPE_NUMBER")>]
            member __.SVG_LENGTHTYPE_NUMBER with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_LENGTHTYPE_CM)"); CompiledName("SVG_LENGTHTYPE_CM")>]
            member __.SVG_LENGTHTYPE_CM with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_LENGTHTYPE_PC)"); CompiledName("SVG_LENGTHTYPE_PC")>]
            member __.SVG_LENGTHTYPE_PC with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_LENGTHTYPE_PERCENTAGE)"); CompiledName("SVG_LENGTHTYPE_PERCENTAGE")>]
            member __.SVG_LENGTHTYPE_PERCENTAGE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_LENGTHTYPE_MM)"); CompiledName("SVG_LENGTHTYPE_MM")>]
            member __.SVG_LENGTHTYPE_MM with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_LENGTHTYPE_PT)"); CompiledName("SVG_LENGTHTYPE_PT")>]
            member __.SVG_LENGTHTYPE_PT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_LENGTHTYPE_IN)"); CompiledName("SVG_LENGTHTYPE_IN")>]
            member __.SVG_LENGTHTYPE_IN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_LENGTHTYPE_EMS)"); CompiledName("SVG_LENGTHTYPE_EMS")>]
            member __.SVG_LENGTHTYPE_EMS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_LENGTHTYPE_PX)"); CompiledName("SVG_LENGTHTYPE_PX")>]
            member __.SVG_LENGTHTYPE_PX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_LENGTHTYPE_UNKNOWN)"); CompiledName("SVG_LENGTHTYPE_UNKNOWN")>]
            member __.SVG_LENGTHTYPE_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_LENGTHTYPE_EXS)"); CompiledName("SVG_LENGTHTYPE_EXS")>]
            member __.SVG_LENGTHTYPE_EXS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_94 =


    type FunScript.TypeScript.AnonymousType18 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype89")>]
            member __.prototype with get() : FunScript.TypeScript.Uint8Array = failwith "never" and set (v : FunScript.TypeScript.Uint8Array) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}))"); CompiledName("Create95")>]
            member __.Create(length : float) : FunScript.TypeScript.Uint8Array = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create95Aux")>]
            member __.``Create <-``(func : System.Func<float, FunScript.TypeScript.Uint8Array>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}))"); CompiledName("Create96")>]
            member __.Create(array : FunScript.TypeScript.Uint8Array) : FunScript.TypeScript.Uint8Array = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create96Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.Uint8Array, FunScript.TypeScript.Uint8Array>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}))"); CompiledName("Create97")>]
            member __.Create(array : array<float>) : FunScript.TypeScript.Uint8Array = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create97Aux")>]
            member __.``Create <-``(func : System.Func<array<float>, FunScript.TypeScript.Uint8Array>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}, {?2}, {?3}))"); CompiledName("Create98")>]
            member __.Create(buffer : FunScript.TypeScript.ArrayBuffer, ?byteOffset : float, ?length : float) : FunScript.TypeScript.Uint8Array = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create98Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.ArrayBuffer, float, float, FunScript.TypeScript.Uint8Array>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BYTES_PER_ELEMENT)"); CompiledName("BYTES_PER_ELEMENT1")>]
            member __.BYTES_PER_ELEMENT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_95 =


    type FunScript.TypeScript.AnonymousType180 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype90")>]
            member __.prototype with get() : FunScript.TypeScript.SVGPolygonElement = failwith "never" and set (v : FunScript.TypeScript.SVGPolygonElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create99")>]
            member __.Create() : FunScript.TypeScript.SVGPolygonElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create99Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGPolygonElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_96 =


    type FunScript.TypeScript.AnonymousType181 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype91")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLPhraseElement = failwith "never" and set (v : FunScript.TypeScript.HTMLPhraseElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create100")>]
            member __.Create() : FunScript.TypeScript.HTMLPhraseElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create100Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLPhraseElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_97 =


    type FunScript.TypeScript.AnonymousType182 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype92")>]
            member __.prototype with get() : FunScript.TypeScript.SVGPathSegCurvetoCubicRel = failwith "never" and set (v : FunScript.TypeScript.SVGPathSegCurvetoCubicRel) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create101")>]
            member __.Create() : FunScript.TypeScript.SVGPathSegCurvetoCubicRel = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create101Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGPathSegCurvetoCubicRel>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_98 =


    type FunScript.TypeScript.AnonymousType183 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype93")>]
            member __.prototype with get() : FunScript.TypeScript.SVGTextContentElement = failwith "never" and set (v : FunScript.TypeScript.SVGTextContentElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create102")>]
            member __.Create() : FunScript.TypeScript.SVGTextContentElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create102Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGTextContentElement>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LENGTHADJUST_SPACING)"); CompiledName("LENGTHADJUST_SPACING")>]
            member __.LENGTHADJUST_SPACING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LENGTHADJUST_SPACINGANDGLYPHS)"); CompiledName("LENGTHADJUST_SPACINGANDGLYPHS")>]
            member __.LENGTHADJUST_SPACINGANDGLYPHS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LENGTHADJUST_UNKNOWN)"); CompiledName("LENGTHADJUST_UNKNOWN")>]
            member __.LENGTHADJUST_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_99 =


    type FunScript.TypeScript.AnonymousType184 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype94")>]
            member __.prototype with get() : FunScript.TypeScript.Location = failwith "never" and set (v : FunScript.TypeScript.Location) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create103")>]
            member __.Create() : FunScript.TypeScript.Location = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create103Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.Location>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_100 =


    type FunScript.TypeScript.AnonymousType185 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype95")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLTitleElement = failwith "never" and set (v : FunScript.TypeScript.HTMLTitleElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create104")>]
            member __.Create() : FunScript.TypeScript.HTMLTitleElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create104Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLTitleElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_101 =


    type FunScript.TypeScript.AnonymousType186 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype96")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLStyleElement = failwith "never" and set (v : FunScript.TypeScript.HTMLStyleElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create105")>]
            member __.Create() : FunScript.TypeScript.HTMLStyleElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create105Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLStyleElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_102 =


    type FunScript.TypeScript.AnonymousType187 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype97")>]
            member __.prototype with get() : FunScript.TypeScript.PerformanceEntry = failwith "never" and set (v : FunScript.TypeScript.PerformanceEntry) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create106")>]
            member __.Create() : FunScript.TypeScript.PerformanceEntry = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create106Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.PerformanceEntry>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_103 =


    type FunScript.TypeScript.AnonymousType188 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype98")>]
            member __.prototype with get() : FunScript.TypeScript.SVGTransform = failwith "never" and set (v : FunScript.TypeScript.SVGTransform) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create107")>]
            member __.Create() : FunScript.TypeScript.SVGTransform = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create107Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGTransform>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_TRANSFORM_SKEWX)"); CompiledName("SVG_TRANSFORM_SKEWX")>]
            member __.SVG_TRANSFORM_SKEWX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_TRANSFORM_UNKNOWN)"); CompiledName("SVG_TRANSFORM_UNKNOWN")>]
            member __.SVG_TRANSFORM_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_TRANSFORM_SCALE)"); CompiledName("SVG_TRANSFORM_SCALE")>]
            member __.SVG_TRANSFORM_SCALE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_TRANSFORM_TRANSLATE)"); CompiledName("SVG_TRANSFORM_TRANSLATE")>]
            member __.SVG_TRANSFORM_TRANSLATE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_TRANSFORM_MATRIX)"); CompiledName("SVG_TRANSFORM_MATRIX")>]
            member __.SVG_TRANSFORM_MATRIX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_TRANSFORM_ROTATE)"); CompiledName("SVG_TRANSFORM_ROTATE")>]
            member __.SVG_TRANSFORM_ROTATE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_TRANSFORM_SKEWY)"); CompiledName("SVG_TRANSFORM_SKEWY")>]
            member __.SVG_TRANSFORM_SKEWY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_104 =


    type FunScript.TypeScript.AnonymousType189 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype99")>]
            member __.prototype with get() : FunScript.TypeScript.UIEvent = failwith "never" and set (v : FunScript.TypeScript.UIEvent) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create108")>]
            member __.Create() : FunScript.TypeScript.UIEvent = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create108Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.UIEvent>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_105 =


    type FunScript.TypeScript.AnonymousType19 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype100")>]
            member __.prototype with get() : FunScript.TypeScript.Int16Array = failwith "never" and set (v : FunScript.TypeScript.Int16Array) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}))"); CompiledName("Create109")>]
            member __.Create(length : float) : FunScript.TypeScript.Int16Array = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create109Aux")>]
            member __.``Create <-``(func : System.Func<float, FunScript.TypeScript.Int16Array>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}))"); CompiledName("Create110")>]
            member __.Create(array : FunScript.TypeScript.Int16Array) : FunScript.TypeScript.Int16Array = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create110Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.Int16Array, FunScript.TypeScript.Int16Array>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}))"); CompiledName("Create111")>]
            member __.Create(array : array<float>) : FunScript.TypeScript.Int16Array = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create111Aux")>]
            member __.``Create <-``(func : System.Func<array<float>, FunScript.TypeScript.Int16Array>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}, {?2}, {?3}))"); CompiledName("Create112")>]
            member __.Create(buffer : FunScript.TypeScript.ArrayBuffer, ?byteOffset : float, ?length : float) : FunScript.TypeScript.Int16Array = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create112Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.ArrayBuffer, float, float, FunScript.TypeScript.Int16Array>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BYTES_PER_ELEMENT)"); CompiledName("BYTES_PER_ELEMENT2")>]
            member __.BYTES_PER_ELEMENT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_106 =


    type FunScript.TypeScript.AnonymousType190 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype101")>]
            member __.prototype with get() : FunScript.TypeScript.SVGPathSeg = failwith "never" and set (v : FunScript.TypeScript.SVGPathSeg) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create113")>]
            member __.Create() : FunScript.TypeScript.SVGPathSeg = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create113Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGPathSeg>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PATHSEG_MOVETO_REL)"); CompiledName("PATHSEG_MOVETO_REL")>]
            member __.PATHSEG_MOVETO_REL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PATHSEG_LINETO_VERTICAL_REL)"); CompiledName("PATHSEG_LINETO_VERTICAL_REL")>]
            member __.PATHSEG_LINETO_VERTICAL_REL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS)"); CompiledName("PATHSEG_CURVETO_CUBIC_SMOOTH_ABS")>]
            member __.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PATHSEG_CURVETO_QUADRATIC_REL)"); CompiledName("PATHSEG_CURVETO_QUADRATIC_REL")>]
            member __.PATHSEG_CURVETO_QUADRATIC_REL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PATHSEG_CURVETO_CUBIC_ABS)"); CompiledName("PATHSEG_CURVETO_CUBIC_ABS")>]
            member __.PATHSEG_CURVETO_CUBIC_ABS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PATHSEG_LINETO_HORIZONTAL_ABS)"); CompiledName("PATHSEG_LINETO_HORIZONTAL_ABS")>]
            member __.PATHSEG_LINETO_HORIZONTAL_ABS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PATHSEG_CURVETO_QUADRATIC_ABS)"); CompiledName("PATHSEG_CURVETO_QUADRATIC_ABS")>]
            member __.PATHSEG_CURVETO_QUADRATIC_ABS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PATHSEG_LINETO_ABS)"); CompiledName("PATHSEG_LINETO_ABS")>]
            member __.PATHSEG_LINETO_ABS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PATHSEG_CLOSEPATH)"); CompiledName("PATHSEG_CLOSEPATH")>]
            member __.PATHSEG_CLOSEPATH with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PATHSEG_LINETO_HORIZONTAL_REL)"); CompiledName("PATHSEG_LINETO_HORIZONTAL_REL")>]
            member __.PATHSEG_LINETO_HORIZONTAL_REL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PATHSEG_CURVETO_CUBIC_SMOOTH_REL)"); CompiledName("PATHSEG_CURVETO_CUBIC_SMOOTH_REL")>]
            member __.PATHSEG_CURVETO_CUBIC_SMOOTH_REL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PATHSEG_LINETO_REL)"); CompiledName("PATHSEG_LINETO_REL")>]
            member __.PATHSEG_LINETO_REL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS)"); CompiledName("PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS")>]
            member __.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PATHSEG_ARC_REL)"); CompiledName("PATHSEG_ARC_REL")>]
            member __.PATHSEG_ARC_REL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PATHSEG_CURVETO_CUBIC_REL)"); CompiledName("PATHSEG_CURVETO_CUBIC_REL")>]
            member __.PATHSEG_CURVETO_CUBIC_REL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PATHSEG_UNKNOWN)"); CompiledName("PATHSEG_UNKNOWN")>]
            member __.PATHSEG_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PATHSEG_LINETO_VERTICAL_ABS)"); CompiledName("PATHSEG_LINETO_VERTICAL_ABS")>]
            member __.PATHSEG_LINETO_VERTICAL_ABS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PATHSEG_ARC_ABS)"); CompiledName("PATHSEG_ARC_ABS")>]
            member __.PATHSEG_ARC_ABS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PATHSEG_MOVETO_ABS)"); CompiledName("PATHSEG_MOVETO_ABS")>]
            member __.PATHSEG_MOVETO_ABS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL)"); CompiledName("PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL")>]
            member __.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_107 =


    type FunScript.TypeScript.AnonymousType191 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype102")>]
            member __.prototype with get() : FunScript.TypeScript.WheelEvent = failwith "never" and set (v : FunScript.TypeScript.WheelEvent) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create114")>]
            member __.Create() : FunScript.TypeScript.WheelEvent = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create114Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.WheelEvent>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOM_DELTA_PIXEL)"); CompiledName("DOM_DELTA_PIXEL")>]
            member __.DOM_DELTA_PIXEL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOM_DELTA_LINE)"); CompiledName("DOM_DELTA_LINE")>]
            member __.DOM_DELTA_LINE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOM_DELTA_PAGE)"); CompiledName("DOM_DELTA_PAGE")>]
            member __.DOM_DELTA_PAGE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_108 =


    type FunScript.TypeScript.AnonymousType192 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype103")>]
            member __.prototype with get() : FunScript.TypeScript.SVGNumber = failwith "never" and set (v : FunScript.TypeScript.SVGNumber) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create115")>]
            member __.Create() : FunScript.TypeScript.SVGNumber = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create115Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGNumber>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_109 =


    type FunScript.TypeScript.AnonymousType193 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype104")>]
            member __.prototype with get() : FunScript.TypeScript.SVGPathElement = failwith "never" and set (v : FunScript.TypeScript.SVGPathElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create116")>]
            member __.Create() : FunScript.TypeScript.SVGPathElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create116Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGPathElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_110 =


    type FunScript.TypeScript.AnonymousType194 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype105")>]
            member __.prototype with get() : FunScript.TypeScript.MSCompatibleInfo = failwith "never" and set (v : FunScript.TypeScript.MSCompatibleInfo) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create117")>]
            member __.Create() : FunScript.TypeScript.MSCompatibleInfo = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create117Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MSCompatibleInfo>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_111 =


    type FunScript.TypeScript.AnonymousType195 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype106")>]
            member __.prototype with get() : FunScript.TypeScript.Text = failwith "never" and set (v : FunScript.TypeScript.Text) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create118")>]
            member __.Create() : FunScript.TypeScript.Text = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create118Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.Text>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_112 =


    type FunScript.TypeScript.AnonymousType196 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype107")>]
            member __.prototype with get() : FunScript.TypeScript.SVGAnimatedRect = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedRect) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create119")>]
            member __.Create() : FunScript.TypeScript.SVGAnimatedRect = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create119Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGAnimatedRect>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_113 =


    type FunScript.TypeScript.AnonymousType197 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype108")>]
            member __.prototype with get() : FunScript.TypeScript.CSSNamespaceRule = failwith "never" and set (v : FunScript.TypeScript.CSSNamespaceRule) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create120")>]
            member __.Create() : FunScript.TypeScript.CSSNamespaceRule = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create120Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.CSSNamespaceRule>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_114 =


    type FunScript.TypeScript.AnonymousType198 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype109")>]
            member __.prototype with get() : FunScript.TypeScript.SVGPathSegList = failwith "never" and set (v : FunScript.TypeScript.SVGPathSegList) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create121")>]
            member __.Create() : FunScript.TypeScript.SVGPathSegList = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create121Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGPathSegList>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_115 =


    type FunScript.TypeScript.AnonymousType199 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype110")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLUnknownElement = failwith "never" and set (v : FunScript.TypeScript.HTMLUnknownElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create122")>]
            member __.Create() : FunScript.TypeScript.HTMLUnknownElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create122Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLUnknownElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_116 =


    type FunScript.TypeScript.AnonymousType2 with 

            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create123")>]
            member __.Create() : FunScript.TypeScript.Function = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create123Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.Function>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1...}))"); CompiledName("Create124")>]
            member __.CreateOverload2([<System.ParamArray>] args : array<string>) : FunScript.TypeScript.Function = failwith "never"
            [<FunScript.JSEmitInline("({0}())"); CompiledName("Invoke11")>]
            member __.Invoke() : FunScript.TypeScript.Function = failwith "never"
            [<FunScript.JSEmitInline("({0} = {1})"); CompiledName("Invoke11Aux")>]
            member __.``Invoke <-``(func : System.Func<FunScript.TypeScript.Function>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}({1...}))"); CompiledName("Invoke12")>]
            member __.InvokeOverload2([<System.ParamArray>] args : array<string>) : FunScript.TypeScript.Function = failwith "never"
            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype111")>]
            member __.prototype with get() : FunScript.TypeScript.Function = failwith "never" and set (v : FunScript.TypeScript.Function) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_117 =


    type FunScript.TypeScript.AnonymousType20 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype112")>]
            member __.prototype with get() : FunScript.TypeScript.Uint16Array = failwith "never" and set (v : FunScript.TypeScript.Uint16Array) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}))"); CompiledName("Create125")>]
            member __.Create(length : float) : FunScript.TypeScript.Uint16Array = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create125Aux")>]
            member __.``Create <-``(func : System.Func<float, FunScript.TypeScript.Uint16Array>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}))"); CompiledName("Create126")>]
            member __.Create(array : FunScript.TypeScript.Uint16Array) : FunScript.TypeScript.Uint16Array = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create126Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.Uint16Array, FunScript.TypeScript.Uint16Array>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}))"); CompiledName("Create127")>]
            member __.Create(array : array<float>) : FunScript.TypeScript.Uint16Array = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create127Aux")>]
            member __.``Create <-``(func : System.Func<array<float>, FunScript.TypeScript.Uint16Array>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}, {?2}, {?3}))"); CompiledName("Create128")>]
            member __.Create(buffer : FunScript.TypeScript.ArrayBuffer, ?byteOffset : float, ?length : float) : FunScript.TypeScript.Uint16Array = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create128Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.ArrayBuffer, float, float, FunScript.TypeScript.Uint16Array>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BYTES_PER_ELEMENT)"); CompiledName("BYTES_PER_ELEMENT3")>]
            member __.BYTES_PER_ELEMENT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_118 =


    type FunScript.TypeScript.AnonymousType200 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype113")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLAudioElement = failwith "never" and set (v : FunScript.TypeScript.HTMLAudioElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create129")>]
            member __.Create() : FunScript.TypeScript.HTMLAudioElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create129Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLAudioElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_119 =


    type FunScript.TypeScript.AnonymousType201 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype114")>]
            member __.prototype with get() : FunScript.TypeScript.PositionError = failwith "never" and set (v : FunScript.TypeScript.PositionError) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create130")>]
            member __.Create() : FunScript.TypeScript.PositionError = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create130Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.PositionError>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.POSITION_UNAVAILABLE)"); CompiledName("POSITION_UNAVAILABLE")>]
            member __.POSITION_UNAVAILABLE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PERMISSION_DENIED)"); CompiledName("PERMISSION_DENIED")>]
            member __.PERMISSION_DENIED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TIMEOUT)"); CompiledName("TIMEOUT")>]
            member __.TIMEOUT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_120 =


    type FunScript.TypeScript.AnonymousType202 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype115")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLTableCellElement = failwith "never" and set (v : FunScript.TypeScript.HTMLTableCellElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create131")>]
            member __.Create() : FunScript.TypeScript.HTMLTableCellElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create131Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLTableCellElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_121 =


    type FunScript.TypeScript.AnonymousType203 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype116")>]
            member __.prototype with get() : FunScript.TypeScript.SVGElementInstance = failwith "never" and set (v : FunScript.TypeScript.SVGElementInstance) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create132")>]
            member __.Create() : FunScript.TypeScript.SVGElementInstance = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create132Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGElementInstance>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_122 =


    type FunScript.TypeScript.AnonymousType204 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype117")>]
            member __.prototype with get() : FunScript.TypeScript.MSNamespaceInfoCollection = failwith "never" and set (v : FunScript.TypeScript.MSNamespaceInfoCollection) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create133")>]
            member __.Create() : FunScript.TypeScript.MSNamespaceInfoCollection = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create133Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MSNamespaceInfoCollection>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_123 =


    type FunScript.TypeScript.AnonymousType205 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype118")>]
            member __.prototype with get() : FunScript.TypeScript.SVGCircleElement = failwith "never" and set (v : FunScript.TypeScript.SVGCircleElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create134")>]
            member __.Create() : FunScript.TypeScript.SVGCircleElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create134Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGCircleElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_124 =


    type FunScript.TypeScript.AnonymousType206 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype119")>]
            member __.prototype with get() : FunScript.TypeScript.StyleSheetList = failwith "never" and set (v : FunScript.TypeScript.StyleSheetList) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create135")>]
            member __.Create() : FunScript.TypeScript.StyleSheetList = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create135Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.StyleSheetList>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_125 =


    type FunScript.TypeScript.AnonymousType207 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype120")>]
            member __.prototype with get() : FunScript.TypeScript.CSSImportRule = failwith "never" and set (v : FunScript.TypeScript.CSSImportRule) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create136")>]
            member __.Create() : FunScript.TypeScript.CSSImportRule = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create136Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.CSSImportRule>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_126 =


    type FunScript.TypeScript.AnonymousType208 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype121")>]
            member __.prototype with get() : FunScript.TypeScript.CustomEvent = failwith "never" and set (v : FunScript.TypeScript.CustomEvent) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create137")>]
            member __.Create() : FunScript.TypeScript.CustomEvent = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create137Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.CustomEvent>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_127 =


    type FunScript.TypeScript.AnonymousType209 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype122")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLBaseFontElement = failwith "never" and set (v : FunScript.TypeScript.HTMLBaseFontElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create138")>]
            member __.Create() : FunScript.TypeScript.HTMLBaseFontElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create138Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLBaseFontElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_128 =


    type FunScript.TypeScript.AnonymousType21 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype123")>]
            member __.prototype with get() : FunScript.TypeScript.Int32Array = failwith "never" and set (v : FunScript.TypeScript.Int32Array) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}))"); CompiledName("Create139")>]
            member __.Create(length : float) : FunScript.TypeScript.Int32Array = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create139Aux")>]
            member __.``Create <-``(func : System.Func<float, FunScript.TypeScript.Int32Array>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}))"); CompiledName("Create140")>]
            member __.Create(array : FunScript.TypeScript.Int32Array) : FunScript.TypeScript.Int32Array = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create140Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.Int32Array, FunScript.TypeScript.Int32Array>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}))"); CompiledName("Create141")>]
            member __.Create(array : array<float>) : FunScript.TypeScript.Int32Array = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create141Aux")>]
            member __.``Create <-``(func : System.Func<array<float>, FunScript.TypeScript.Int32Array>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}, {?2}, {?3}))"); CompiledName("Create142")>]
            member __.Create(buffer : FunScript.TypeScript.ArrayBuffer, ?byteOffset : float, ?length : float) : FunScript.TypeScript.Int32Array = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create142Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.ArrayBuffer, float, float, FunScript.TypeScript.Int32Array>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BYTES_PER_ELEMENT)"); CompiledName("BYTES_PER_ELEMENT4")>]
            member __.BYTES_PER_ELEMENT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_129 =


    type FunScript.TypeScript.AnonymousType210 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype124")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLTextAreaElement = failwith "never" and set (v : FunScript.TypeScript.HTMLTextAreaElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create143")>]
            member __.Create() : FunScript.TypeScript.HTMLTextAreaElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create143Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLTextAreaElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_130 =


    type FunScript.TypeScript.AnonymousType211 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype125")>]
            member __.prototype with get() : FunScript.TypeScript.Geolocation = failwith "never" and set (v : FunScript.TypeScript.Geolocation) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create144")>]
            member __.Create() : FunScript.TypeScript.Geolocation = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create144Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.Geolocation>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_131 =


    type FunScript.TypeScript.AnonymousType212 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype126")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLMarqueeElement = failwith "never" and set (v : FunScript.TypeScript.HTMLMarqueeElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create145")>]
            member __.Create() : FunScript.TypeScript.HTMLMarqueeElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create145Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLMarqueeElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_132 =


    type FunScript.TypeScript.AnonymousType213 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype127")>]
            member __.prototype with get() : FunScript.TypeScript.SVGRect = failwith "never" and set (v : FunScript.TypeScript.SVGRect) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create146")>]
            member __.Create() : FunScript.TypeScript.SVGRect = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create146Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGRect>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_133 =


    type FunScript.TypeScript.AnonymousType214 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype128")>]
            member __.prototype with get() : FunScript.TypeScript.History = failwith "never" and set (v : FunScript.TypeScript.History) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create147")>]
            member __.Create() : FunScript.TypeScript.History = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create147Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.History>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_134 =


    type FunScript.TypeScript.AnonymousType215 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype129")>]
            member __.prototype with get() : FunScript.TypeScript.SVGPathSegCurvetoCubicAbs = failwith "never" and set (v : FunScript.TypeScript.SVGPathSegCurvetoCubicAbs) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create148")>]
            member __.Create() : FunScript.TypeScript.SVGPathSegCurvetoCubicAbs = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create148Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGPathSegCurvetoCubicAbs>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_135 =


    type FunScript.TypeScript.AnonymousType216 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype130")>]
            member __.prototype with get() : FunScript.TypeScript.SVGPathSegCurvetoQuadraticAbs = failwith "never" and set (v : FunScript.TypeScript.SVGPathSegCurvetoQuadraticAbs) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create149")>]
            member __.Create() : FunScript.TypeScript.SVGPathSegCurvetoQuadraticAbs = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create149Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGPathSegCurvetoQuadraticAbs>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_136 =


    type FunScript.TypeScript.AnonymousType217 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype131")>]
            member __.prototype with get() : FunScript.TypeScript.TimeRanges = failwith "never" and set (v : FunScript.TypeScript.TimeRanges) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create150")>]
            member __.Create() : FunScript.TypeScript.TimeRanges = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create150Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.TimeRanges>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_137 =


    type FunScript.TypeScript.AnonymousType218 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype132")>]
            member __.prototype with get() : FunScript.TypeScript.CSSRule = failwith "never" and set (v : FunScript.TypeScript.CSSRule) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create151")>]
            member __.Create() : FunScript.TypeScript.CSSRule = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create151Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.CSSRule>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.IMPORT_RULE)"); CompiledName("IMPORT_RULE")>]
            member __.IMPORT_RULE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MEDIA_RULE)"); CompiledName("MEDIA_RULE")>]
            member __.MEDIA_RULE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STYLE_RULE)"); CompiledName("STYLE_RULE")>]
            member __.STYLE_RULE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NAMESPACE_RULE)"); CompiledName("NAMESPACE_RULE")>]
            member __.NAMESPACE_RULE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PAGE_RULE)"); CompiledName("PAGE_RULE")>]
            member __.PAGE_RULE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.UNKNOWN_RULE)"); CompiledName("UNKNOWN_RULE")>]
            member __.UNKNOWN_RULE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FONT_FACE_RULE)"); CompiledName("FONT_FACE_RULE")>]
            member __.FONT_FACE_RULE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.CHARSET_RULE)"); CompiledName("CHARSET_RULE")>]
            member __.CHARSET_RULE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.KEYFRAMES_RULE)"); CompiledName("KEYFRAMES_RULE")>]
            member __.KEYFRAMES_RULE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.KEYFRAME_RULE)"); CompiledName("KEYFRAME_RULE")>]
            member __.KEYFRAME_RULE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.VIEWPORT_RULE)"); CompiledName("VIEWPORT_RULE")>]
            member __.VIEWPORT_RULE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_138 =


    type FunScript.TypeScript.AnonymousType219 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype133")>]
            member __.prototype with get() : FunScript.TypeScript.SVGPathSegLinetoAbs = failwith "never" and set (v : FunScript.TypeScript.SVGPathSegLinetoAbs) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create152")>]
            member __.Create() : FunScript.TypeScript.SVGPathSegLinetoAbs = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create152Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGPathSegLinetoAbs>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_139 =


    type FunScript.TypeScript.AnonymousType22 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype134")>]
            member __.prototype with get() : FunScript.TypeScript.Uint32Array = failwith "never" and set (v : FunScript.TypeScript.Uint32Array) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}))"); CompiledName("Create153")>]
            member __.Create(length : float) : FunScript.TypeScript.Uint32Array = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create153Aux")>]
            member __.``Create <-``(func : System.Func<float, FunScript.TypeScript.Uint32Array>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}))"); CompiledName("Create154")>]
            member __.Create(array : FunScript.TypeScript.Uint32Array) : FunScript.TypeScript.Uint32Array = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create154Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.Uint32Array, FunScript.TypeScript.Uint32Array>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}))"); CompiledName("Create155")>]
            member __.Create(array : array<float>) : FunScript.TypeScript.Uint32Array = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create155Aux")>]
            member __.``Create <-``(func : System.Func<array<float>, FunScript.TypeScript.Uint32Array>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}, {?2}, {?3}))"); CompiledName("Create156")>]
            member __.Create(buffer : FunScript.TypeScript.ArrayBuffer, ?byteOffset : float, ?length : float) : FunScript.TypeScript.Uint32Array = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create156Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.ArrayBuffer, float, float, FunScript.TypeScript.Uint32Array>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BYTES_PER_ELEMENT)"); CompiledName("BYTES_PER_ELEMENT5")>]
            member __.BYTES_PER_ELEMENT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_140 =


    type FunScript.TypeScript.AnonymousType220 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype135")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLModElement = failwith "never" and set (v : FunScript.TypeScript.HTMLModElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create157")>]
            member __.Create() : FunScript.TypeScript.HTMLModElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create157Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLModElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_141 =


    type FunScript.TypeScript.AnonymousType221 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype136")>]
            member __.prototype with get() : FunScript.TypeScript.SVGMatrix = failwith "never" and set (v : FunScript.TypeScript.SVGMatrix) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create158")>]
            member __.Create() : FunScript.TypeScript.SVGMatrix = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create158Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGMatrix>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_142 =


    type FunScript.TypeScript.AnonymousType222 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype137")>]
            member __.prototype with get() : FunScript.TypeScript.MSPopupWindow = failwith "never" and set (v : FunScript.TypeScript.MSPopupWindow) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create159")>]
            member __.Create() : FunScript.TypeScript.MSPopupWindow = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create159Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MSPopupWindow>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_143 =


    type FunScript.TypeScript.AnonymousType223 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype138")>]
            member __.prototype with get() : FunScript.TypeScript.BeforeUnloadEvent = failwith "never" and set (v : FunScript.TypeScript.BeforeUnloadEvent) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create160")>]
            member __.Create() : FunScript.TypeScript.BeforeUnloadEvent = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create160Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.BeforeUnloadEvent>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_144 =


    type FunScript.TypeScript.AnonymousType224 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype139")>]
            member __.prototype with get() : FunScript.TypeScript.SVGUseElement = failwith "never" and set (v : FunScript.TypeScript.SVGUseElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create161")>]
            member __.Create() : FunScript.TypeScript.SVGUseElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create161Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGUseElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_145 =


    type FunScript.TypeScript.AnonymousType225 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype140")>]
            member __.prototype with get() : FunScript.TypeScript.Event = failwith "never" and set (v : FunScript.TypeScript.Event) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create162")>]
            member __.Create() : FunScript.TypeScript.Event = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create162Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.Event>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.CAPTURING_PHASE)"); CompiledName("CAPTURING_PHASE")>]
            member __.CAPTURING_PHASE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.AT_TARGET)"); CompiledName("AT_TARGET")>]
            member __.AT_TARGET with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BUBBLING_PHASE)"); CompiledName("BUBBLING_PHASE")>]
            member __.BUBBLING_PHASE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_146 =


    type FunScript.TypeScript.AnonymousType226 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype141")>]
            member __.prototype with get() : FunScript.TypeScript.ImageData = failwith "never" and set (v : FunScript.TypeScript.ImageData) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create163")>]
            member __.Create() : FunScript.TypeScript.ImageData = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create163Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.ImageData>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_147 =


    type FunScript.TypeScript.AnonymousType227 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype142")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLTableColElement = failwith "never" and set (v : FunScript.TypeScript.HTMLTableColElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create164")>]
            member __.Create() : FunScript.TypeScript.HTMLTableColElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create164Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLTableColElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_148 =


    type FunScript.TypeScript.AnonymousType228 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype143")>]
            member __.prototype with get() : FunScript.TypeScript.SVGException = failwith "never" and set (v : FunScript.TypeScript.SVGException) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create165")>]
            member __.Create() : FunScript.TypeScript.SVGException = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create165Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGException>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_MATRIX_NOT_INVERTABLE)"); CompiledName("SVG_MATRIX_NOT_INVERTABLE")>]
            member __.SVG_MATRIX_NOT_INVERTABLE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_WRONG_TYPE_ERR)"); CompiledName("SVG_WRONG_TYPE_ERR")>]
            member __.SVG_WRONG_TYPE_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_INVALID_VALUE_ERR)"); CompiledName("SVG_INVALID_VALUE_ERR")>]
            member __.SVG_INVALID_VALUE_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_149 =


    type FunScript.TypeScript.AnonymousType229 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype144")>]
            member __.prototype with get() : FunScript.TypeScript.SVGLinearGradientElement = failwith "never" and set (v : FunScript.TypeScript.SVGLinearGradientElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create166")>]
            member __.Create() : FunScript.TypeScript.SVGLinearGradientElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create166Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGLinearGradientElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_150 =


    type FunScript.TypeScript.AnonymousType23 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype145")>]
            member __.prototype with get() : FunScript.TypeScript.Float32Array = failwith "never" and set (v : FunScript.TypeScript.Float32Array) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}))"); CompiledName("Create167")>]
            member __.Create(length : float) : FunScript.TypeScript.Float32Array = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create167Aux")>]
            member __.``Create <-``(func : System.Func<float, FunScript.TypeScript.Float32Array>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}))"); CompiledName("Create168")>]
            member __.Create(array : FunScript.TypeScript.Float32Array) : FunScript.TypeScript.Float32Array = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create168Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.Float32Array, FunScript.TypeScript.Float32Array>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}))"); CompiledName("Create169")>]
            member __.Create(array : array<float>) : FunScript.TypeScript.Float32Array = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create169Aux")>]
            member __.``Create <-``(func : System.Func<array<float>, FunScript.TypeScript.Float32Array>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}, {?2}, {?3}))"); CompiledName("Create170")>]
            member __.Create(buffer : FunScript.TypeScript.ArrayBuffer, ?byteOffset : float, ?length : float) : FunScript.TypeScript.Float32Array = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create170Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.ArrayBuffer, float, float, FunScript.TypeScript.Float32Array>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BYTES_PER_ELEMENT)"); CompiledName("BYTES_PER_ELEMENT6")>]
            member __.BYTES_PER_ELEMENT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_151 =


    type FunScript.TypeScript.AnonymousType230 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype146")>]
            member __.prototype with get() : FunScript.TypeScript.SVGAnimatedEnumeration = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedEnumeration) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create171")>]
            member __.Create() : FunScript.TypeScript.SVGAnimatedEnumeration = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create171Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGAnimatedEnumeration>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_152 =


    type FunScript.TypeScript.AnonymousType231 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype147")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLUListElement = failwith "never" and set (v : FunScript.TypeScript.HTMLUListElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create172")>]
            member __.Create() : FunScript.TypeScript.HTMLUListElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create172Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLUListElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_153 =


    type FunScript.TypeScript.AnonymousType232 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype148")>]
            member __.prototype with get() : FunScript.TypeScript.SVGRectElement = failwith "never" and set (v : FunScript.TypeScript.SVGRectElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create173")>]
            member __.Create() : FunScript.TypeScript.SVGRectElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create173Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGRectElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_154 =


    type FunScript.TypeScript.AnonymousType233 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype149")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLDivElement = failwith "never" and set (v : FunScript.TypeScript.HTMLDivElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create174")>]
            member __.Create() : FunScript.TypeScript.HTMLDivElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create174Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLDivElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_155 =


    type FunScript.TypeScript.AnonymousType234 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype150")>]
            member __.prototype with get() : FunScript.TypeScript.NamedNodeMap = failwith "never" and set (v : FunScript.TypeScript.NamedNodeMap) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create175")>]
            member __.Create() : FunScript.TypeScript.NamedNodeMap = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create175Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.NamedNodeMap>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_156 =


    type FunScript.TypeScript.AnonymousType235 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype151")>]
            member __.prototype with get() : FunScript.TypeScript.MediaList = failwith "never" and set (v : FunScript.TypeScript.MediaList) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create176")>]
            member __.Create() : FunScript.TypeScript.MediaList = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create176Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MediaList>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_157 =


    type FunScript.TypeScript.AnonymousType236 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype152")>]
            member __.prototype with get() : FunScript.TypeScript.SVGPathSegCurvetoQuadraticSmoothAbs = failwith "never" and set (v : FunScript.TypeScript.SVGPathSegCurvetoQuadraticSmoothAbs) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create177")>]
            member __.Create() : FunScript.TypeScript.SVGPathSegCurvetoQuadraticSmoothAbs = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create177Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGPathSegCurvetoQuadraticSmoothAbs>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_158 =


    type FunScript.TypeScript.AnonymousType237 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype153")>]
            member __.prototype with get() : FunScript.TypeScript.SVGPathSegCurvetoCubicSmoothRel = failwith "never" and set (v : FunScript.TypeScript.SVGPathSegCurvetoCubicSmoothRel) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create178")>]
            member __.Create() : FunScript.TypeScript.SVGPathSegCurvetoCubicSmoothRel = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create178Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGPathSegCurvetoCubicSmoothRel>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_159 =


    type FunScript.TypeScript.AnonymousType238 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype154")>]
            member __.prototype with get() : FunScript.TypeScript.SVGLengthList = failwith "never" and set (v : FunScript.TypeScript.SVGLengthList) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create179")>]
            member __.Create() : FunScript.TypeScript.SVGLengthList = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create179Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGLengthList>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_160 =


    type FunScript.TypeScript.AnonymousType239 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype155")>]
            member __.prototype with get() : FunScript.TypeScript.ProcessingInstruction = failwith "never" and set (v : FunScript.TypeScript.ProcessingInstruction) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create180")>]
            member __.Create() : FunScript.TypeScript.ProcessingInstruction = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create180Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.ProcessingInstruction>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_161 =


    type FunScript.TypeScript.AnonymousType24 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype156")>]
            member __.prototype with get() : FunScript.TypeScript.Float64Array = failwith "never" and set (v : FunScript.TypeScript.Float64Array) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}))"); CompiledName("Create181")>]
            member __.Create(length : float) : FunScript.TypeScript.Float64Array = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create181Aux")>]
            member __.``Create <-``(func : System.Func<float, FunScript.TypeScript.Float64Array>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}))"); CompiledName("Create182")>]
            member __.Create(array : FunScript.TypeScript.Float64Array) : FunScript.TypeScript.Float64Array = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create182Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.Float64Array, FunScript.TypeScript.Float64Array>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}))"); CompiledName("Create183")>]
            member __.Create(array : array<float>) : FunScript.TypeScript.Float64Array = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create183Aux")>]
            member __.``Create <-``(func : System.Func<array<float>, FunScript.TypeScript.Float64Array>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}, {?2}, {?3}))"); CompiledName("Create184")>]
            member __.Create(buffer : FunScript.TypeScript.ArrayBuffer, ?byteOffset : float, ?length : float) : FunScript.TypeScript.Float64Array = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create184Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.ArrayBuffer, float, float, FunScript.TypeScript.Float64Array>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BYTES_PER_ELEMENT)"); CompiledName("BYTES_PER_ELEMENT7")>]
            member __.BYTES_PER_ELEMENT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_162 =


    type FunScript.TypeScript.AnonymousType240 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype157")>]
            member __.prototype with get() : FunScript.TypeScript.MSBehaviorUrnsCollection = failwith "never" and set (v : FunScript.TypeScript.MSBehaviorUrnsCollection) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create185")>]
            member __.Create() : FunScript.TypeScript.MSBehaviorUrnsCollection = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create185Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MSBehaviorUrnsCollection>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_163 =


    type FunScript.TypeScript.AnonymousType241 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype158")>]
            member __.prototype with get() : FunScript.TypeScript.CSSFontFaceRule = failwith "never" and set (v : FunScript.TypeScript.CSSFontFaceRule) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create186")>]
            member __.Create() : FunScript.TypeScript.CSSFontFaceRule = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create186Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.CSSFontFaceRule>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_164 =


    type FunScript.TypeScript.AnonymousType242 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype159")>]
            member __.prototype with get() : FunScript.TypeScript.TextEvent = failwith "never" and set (v : FunScript.TypeScript.TextEvent) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create187")>]
            member __.Create() : FunScript.TypeScript.TextEvent = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create187Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.TextEvent>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOM_INPUT_METHOD_KEYBOARD)"); CompiledName("DOM_INPUT_METHOD_KEYBOARD")>]
            member __.DOM_INPUT_METHOD_KEYBOARD with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOM_INPUT_METHOD_DROP)"); CompiledName("DOM_INPUT_METHOD_DROP")>]
            member __.DOM_INPUT_METHOD_DROP with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOM_INPUT_METHOD_IME)"); CompiledName("DOM_INPUT_METHOD_IME")>]
            member __.DOM_INPUT_METHOD_IME with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOM_INPUT_METHOD_SCRIPT)"); CompiledName("DOM_INPUT_METHOD_SCRIPT")>]
            member __.DOM_INPUT_METHOD_SCRIPT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOM_INPUT_METHOD_VOICE)"); CompiledName("DOM_INPUT_METHOD_VOICE")>]
            member __.DOM_INPUT_METHOD_VOICE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOM_INPUT_METHOD_UNKNOWN)"); CompiledName("DOM_INPUT_METHOD_UNKNOWN")>]
            member __.DOM_INPUT_METHOD_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOM_INPUT_METHOD_PASTE)"); CompiledName("DOM_INPUT_METHOD_PASTE")>]
            member __.DOM_INPUT_METHOD_PASTE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOM_INPUT_METHOD_HANDWRITING)"); CompiledName("DOM_INPUT_METHOD_HANDWRITING")>]
            member __.DOM_INPUT_METHOD_HANDWRITING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOM_INPUT_METHOD_OPTION)"); CompiledName("DOM_INPUT_METHOD_OPTION")>]
            member __.DOM_INPUT_METHOD_OPTION with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOM_INPUT_METHOD_MULTIMODAL)"); CompiledName("DOM_INPUT_METHOD_MULTIMODAL")>]
            member __.DOM_INPUT_METHOD_MULTIMODAL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_165 =


    type FunScript.TypeScript.AnonymousType243 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype160")>]
            member __.prototype with get() : FunScript.TypeScript.DocumentFragment = failwith "never" and set (v : FunScript.TypeScript.DocumentFragment) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create188")>]
            member __.Create() : FunScript.TypeScript.DocumentFragment = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create188Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.DocumentFragment>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_166 =


    type FunScript.TypeScript.AnonymousType244 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype161")>]
            member __.prototype with get() : FunScript.TypeScript.SVGPolylineElement = failwith "never" and set (v : FunScript.TypeScript.SVGPolylineElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create189")>]
            member __.Create() : FunScript.TypeScript.SVGPolylineElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create189Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGPolylineElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_167 =


    type FunScript.TypeScript.AnonymousType245 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype162")>]
            member __.prototype with get() : FunScript.TypeScript.Position = failwith "never" and set (v : FunScript.TypeScript.Position) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create190")>]
            member __.Create() : FunScript.TypeScript.Position = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create190Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.Position>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_168 =


    type FunScript.TypeScript.AnonymousType246 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype163")>]
            member __.prototype with get() : FunScript.TypeScript.BookmarkCollection = failwith "never" and set (v : FunScript.TypeScript.BookmarkCollection) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create191")>]
            member __.Create() : FunScript.TypeScript.BookmarkCollection = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create191Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.BookmarkCollection>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_169 =


    type FunScript.TypeScript.AnonymousType247 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype164")>]
            member __.prototype with get() : FunScript.TypeScript.PerformanceMark = failwith "never" and set (v : FunScript.TypeScript.PerformanceMark) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create192")>]
            member __.Create() : FunScript.TypeScript.PerformanceMark = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create192Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.PerformanceMark>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_170 =


    type FunScript.TypeScript.AnonymousType248 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype165")>]
            member __.prototype with get() : FunScript.TypeScript.CSSPageRule = failwith "never" and set (v : FunScript.TypeScript.CSSPageRule) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create193")>]
            member __.Create() : FunScript.TypeScript.CSSPageRule = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create193Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.CSSPageRule>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_171 =


    type FunScript.TypeScript.AnonymousType249 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype166")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLBRElement = failwith "never" and set (v : FunScript.TypeScript.HTMLBRElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create194")>]
            member __.Create() : FunScript.TypeScript.HTMLBRElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create194Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLBRElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_172 =


    type FunScript.TypeScript.AnonymousType25 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype167")>]
            member __.prototype with get() : FunScript.TypeScript.DataView = failwith "never" and set (v : FunScript.TypeScript.DataView) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}, {?2}, {?3}))"); CompiledName("Create195")>]
            member __.Create(buffer : FunScript.TypeScript.ArrayBuffer, ?byteOffset : float, ?length : float) : FunScript.TypeScript.DataView = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create195Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.ArrayBuffer, float, float, FunScript.TypeScript.DataView>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_173 =


    type FunScript.TypeScript.AnonymousType250 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype168")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLSpanElement = failwith "never" and set (v : FunScript.TypeScript.HTMLSpanElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create196")>]
            member __.Create() : FunScript.TypeScript.HTMLSpanElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create196Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLSpanElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_174 =


    type FunScript.TypeScript.AnonymousType251 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype169")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLHeadElement = failwith "never" and set (v : FunScript.TypeScript.HTMLHeadElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create197")>]
            member __.Create() : FunScript.TypeScript.HTMLHeadElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create197Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLHeadElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_175 =


    type FunScript.TypeScript.AnonymousType252 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype170")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLHeadingElement = failwith "never" and set (v : FunScript.TypeScript.HTMLHeadingElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create198")>]
            member __.Create() : FunScript.TypeScript.HTMLHeadingElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create198Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLHeadingElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_176 =


    type FunScript.TypeScript.AnonymousType253 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype171")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLFormElement = failwith "never" and set (v : FunScript.TypeScript.HTMLFormElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create199")>]
            member __.Create() : FunScript.TypeScript.HTMLFormElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create199Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLFormElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_177 =


    type FunScript.TypeScript.AnonymousType254 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype172")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLMediaElement = failwith "never" and set (v : FunScript.TypeScript.HTMLMediaElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create200")>]
            member __.Create() : FunScript.TypeScript.HTMLMediaElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create200Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLMediaElement>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.HAVE_METADATA)"); CompiledName("HAVE_METADATA")>]
            member __.HAVE_METADATA with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.HAVE_CURRENT_DATA)"); CompiledName("HAVE_CURRENT_DATA")>]
            member __.HAVE_CURRENT_DATA with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.HAVE_NOTHING)"); CompiledName("HAVE_NOTHING")>]
            member __.HAVE_NOTHING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NETWORK_NO_SOURCE)"); CompiledName("NETWORK_NO_SOURCE")>]
            member __.NETWORK_NO_SOURCE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.HAVE_ENOUGH_DATA)"); CompiledName("HAVE_ENOUGH_DATA")>]
            member __.HAVE_ENOUGH_DATA with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NETWORK_EMPTY)"); CompiledName("NETWORK_EMPTY")>]
            member __.NETWORK_EMPTY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NETWORK_LOADING)"); CompiledName("NETWORK_LOADING")>]
            member __.NETWORK_LOADING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NETWORK_IDLE)"); CompiledName("NETWORK_IDLE")>]
            member __.NETWORK_IDLE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.HAVE_FUTURE_DATA)"); CompiledName("HAVE_FUTURE_DATA")>]
            member __.HAVE_FUTURE_DATA with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_178 =


    type FunScript.TypeScript.AnonymousType255 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype173")>]
            member __.prototype with get() : FunScript.TypeScript.DOMParser = failwith "never" and set (v : FunScript.TypeScript.DOMParser) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create201")>]
            member __.Create() : FunScript.TypeScript.DOMParser = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create201Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.DOMParser>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_179 =


    type FunScript.TypeScript.AnonymousType256 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype174")>]
            member __.prototype with get() : FunScript.TypeScript.MSMimeTypesCollection = failwith "never" and set (v : FunScript.TypeScript.MSMimeTypesCollection) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create202")>]
            member __.Create() : FunScript.TypeScript.MSMimeTypesCollection = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create202Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MSMimeTypesCollection>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_180 =


    type FunScript.TypeScript.AnonymousType257 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype175")>]
            member __.prototype with get() : FunScript.TypeScript.StyleSheet = failwith "never" and set (v : FunScript.TypeScript.StyleSheet) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create203")>]
            member __.Create() : FunScript.TypeScript.StyleSheet = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create203Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.StyleSheet>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_181 =


    type FunScript.TypeScript.AnonymousType258 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype176")>]
            member __.prototype with get() : FunScript.TypeScript.SVGTextPathElement = failwith "never" and set (v : FunScript.TypeScript.SVGTextPathElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create204")>]
            member __.Create() : FunScript.TypeScript.SVGTextPathElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create204Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGTextPathElement>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTPATH_SPACINGTYPE_EXACT)"); CompiledName("TEXTPATH_SPACINGTYPE_EXACT")>]
            member __.TEXTPATH_SPACINGTYPE_EXACT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTPATH_METHODTYPE_STRETCH)"); CompiledName("TEXTPATH_METHODTYPE_STRETCH")>]
            member __.TEXTPATH_METHODTYPE_STRETCH with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTPATH_SPACINGTYPE_AUTO)"); CompiledName("TEXTPATH_SPACINGTYPE_AUTO")>]
            member __.TEXTPATH_SPACINGTYPE_AUTO with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTPATH_SPACINGTYPE_UNKNOWN)"); CompiledName("TEXTPATH_SPACINGTYPE_UNKNOWN")>]
            member __.TEXTPATH_SPACINGTYPE_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTPATH_METHODTYPE_UNKNOWN)"); CompiledName("TEXTPATH_METHODTYPE_UNKNOWN")>]
            member __.TEXTPATH_METHODTYPE_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTPATH_METHODTYPE_ALIGN)"); CompiledName("TEXTPATH_METHODTYPE_ALIGN")>]
            member __.TEXTPATH_METHODTYPE_ALIGN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_182 =


    type FunScript.TypeScript.AnonymousType259 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype177")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLDTElement = failwith "never" and set (v : FunScript.TypeScript.HTMLDTElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create205")>]
            member __.Create() : FunScript.TypeScript.HTMLDTElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create205Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLDTElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_183 =


    type FunScript.TypeScript.AnonymousType26 with 

            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create206")>]
            member __.Create<'K, 'V>() : FunScript.TypeScript.Map<'K, 'V> = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create206Aux")>]
            member __.``Create <-``<'K, 'V>(func : System.Func<FunScript.TypeScript.Map<'K, 'V>>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_184 =


    type FunScript.TypeScript.AnonymousType260 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype178")>]
            member __.prototype with get() : FunScript.TypeScript.NodeList = failwith "never" and set (v : FunScript.TypeScript.NodeList) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create207")>]
            member __.Create() : FunScript.TypeScript.NodeList = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create207Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.NodeList>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_185 =


    type FunScript.TypeScript.AnonymousType261 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype179")>]
            member __.prototype with get() : FunScript.TypeScript.XMLSerializer = failwith "never" and set (v : FunScript.TypeScript.XMLSerializer) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create208")>]
            member __.Create() : FunScript.TypeScript.XMLSerializer = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create208Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.XMLSerializer>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_186 =


    type FunScript.TypeScript.AnonymousType262 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype180")>]
            member __.prototype with get() : FunScript.TypeScript.PerformanceMeasure = failwith "never" and set (v : FunScript.TypeScript.PerformanceMeasure) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create209")>]
            member __.Create() : FunScript.TypeScript.PerformanceMeasure = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create209Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.PerformanceMeasure>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_187 =


    type FunScript.TypeScript.AnonymousType263 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype181")>]
            member __.prototype with get() : FunScript.TypeScript.SVGGradientElement = failwith "never" and set (v : FunScript.TypeScript.SVGGradientElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create210")>]
            member __.Create() : FunScript.TypeScript.SVGGradientElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create210Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGGradientElement>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_SPREADMETHOD_REFLECT)"); CompiledName("SVG_SPREADMETHOD_REFLECT")>]
            member __.SVG_SPREADMETHOD_REFLECT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_SPREADMETHOD_PAD)"); CompiledName("SVG_SPREADMETHOD_PAD")>]
            member __.SVG_SPREADMETHOD_PAD with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_SPREADMETHOD_UNKNOWN)"); CompiledName("SVG_SPREADMETHOD_UNKNOWN")>]
            member __.SVG_SPREADMETHOD_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_SPREADMETHOD_REPEAT)"); CompiledName("SVG_SPREADMETHOD_REPEAT")>]
            member __.SVG_SPREADMETHOD_REPEAT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_188 =


    type FunScript.TypeScript.AnonymousType264 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype182")>]
            member __.prototype with get() : FunScript.TypeScript.SVGNumberList = failwith "never" and set (v : FunScript.TypeScript.SVGNumberList) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create211")>]
            member __.Create() : FunScript.TypeScript.SVGNumberList = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create211Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGNumberList>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_189 =


    type FunScript.TypeScript.AnonymousType265 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype183")>]
            member __.prototype with get() : FunScript.TypeScript.MediaError = failwith "never" and set (v : FunScript.TypeScript.MediaError) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create212")>]
            member __.Create() : FunScript.TypeScript.MediaError = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create212Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MediaError>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MEDIA_ERR_ABORTED)"); CompiledName("MEDIA_ERR_ABORTED")>]
            member __.MEDIA_ERR_ABORTED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MEDIA_ERR_NETWORK)"); CompiledName("MEDIA_ERR_NETWORK")>]
            member __.MEDIA_ERR_NETWORK with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MEDIA_ERR_SRC_NOT_SUPPORTED)"); CompiledName("MEDIA_ERR_SRC_NOT_SUPPORTED")>]
            member __.MEDIA_ERR_SRC_NOT_SUPPORTED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MEDIA_ERR_DECODE)"); CompiledName("MEDIA_ERR_DECODE")>]
            member __.MEDIA_ERR_DECODE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MS_MEDIA_ERR_ENCRYPTED)"); CompiledName("MS_MEDIA_ERR_ENCRYPTED")>]
            member __.MS_MEDIA_ERR_ENCRYPTED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_190 =


    type FunScript.TypeScript.AnonymousType266 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype184")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLFieldSetElement = failwith "never" and set (v : FunScript.TypeScript.HTMLFieldSetElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create213")>]
            member __.Create() : FunScript.TypeScript.HTMLFieldSetElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create213Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLFieldSetElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_191 =


    type FunScript.TypeScript.AnonymousType267 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype185")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLBGSoundElement = failwith "never" and set (v : FunScript.TypeScript.HTMLBGSoundElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create214")>]
            member __.Create() : FunScript.TypeScript.HTMLBGSoundElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create214Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLBGSoundElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_192 =


    type FunScript.TypeScript.AnonymousType268 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype186")>]
            member __.prototype with get() : FunScript.TypeScript.Comment = failwith "never" and set (v : FunScript.TypeScript.Comment) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create215")>]
            member __.Create() : FunScript.TypeScript.Comment = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create215Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.Comment>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_193 =


    type FunScript.TypeScript.AnonymousType269 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype187")>]
            member __.prototype with get() : FunScript.TypeScript.PerformanceResourceTiming = failwith "never" and set (v : FunScript.TypeScript.PerformanceResourceTiming) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create216")>]
            member __.Create() : FunScript.TypeScript.PerformanceResourceTiming = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create216Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.PerformanceResourceTiming>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_194 =


    type FunScript.TypeScript.AnonymousType27 with 

            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create217")>]
            member __.Create<'K, 'V>() : FunScript.TypeScript.WeakMap<'K, 'V> = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create217Aux")>]
            member __.``Create <-``<'K, 'V>(func : System.Func<FunScript.TypeScript.WeakMap<'K, 'V>>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_195 =


    type FunScript.TypeScript.AnonymousType270 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype188")>]
            member __.prototype with get() : FunScript.TypeScript.CanvasPattern = failwith "never" and set (v : FunScript.TypeScript.CanvasPattern) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create218")>]
            member __.Create() : FunScript.TypeScript.CanvasPattern = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create218Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.CanvasPattern>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_196 =


    type FunScript.TypeScript.AnonymousType271 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype189")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLHRElement = failwith "never" and set (v : FunScript.TypeScript.HTMLHRElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create219")>]
            member __.Create() : FunScript.TypeScript.HTMLHRElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create219Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLHRElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_197 =


    type FunScript.TypeScript.AnonymousType272 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype190")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLObjectElement = failwith "never" and set (v : FunScript.TypeScript.HTMLObjectElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create220")>]
            member __.Create() : FunScript.TypeScript.HTMLObjectElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create220Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLObjectElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_198 =


    type FunScript.TypeScript.AnonymousType273 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype191")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLEmbedElement = failwith "never" and set (v : FunScript.TypeScript.HTMLEmbedElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create221")>]
            member __.Create() : FunScript.TypeScript.HTMLEmbedElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create221Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLEmbedElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_199 =


    type FunScript.TypeScript.AnonymousType274 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype192")>]
            member __.prototype with get() : FunScript.TypeScript.StorageEvent = failwith "never" and set (v : FunScript.TypeScript.StorageEvent) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create222")>]
            member __.Create() : FunScript.TypeScript.StorageEvent = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create222Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.StorageEvent>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_200 =


    type FunScript.TypeScript.AnonymousType275 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype193")>]
            member __.prototype with get() : FunScript.TypeScript.CharacterData = failwith "never" and set (v : FunScript.TypeScript.CharacterData) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create223")>]
            member __.Create() : FunScript.TypeScript.CharacterData = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create223Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.CharacterData>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_201 =


    type FunScript.TypeScript.AnonymousType276 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype194")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLOptGroupElement = failwith "never" and set (v : FunScript.TypeScript.HTMLOptGroupElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create224")>]
            member __.Create() : FunScript.TypeScript.HTMLOptGroupElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create224Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLOptGroupElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_202 =


    type FunScript.TypeScript.AnonymousType277 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype195")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLIsIndexElement = failwith "never" and set (v : FunScript.TypeScript.HTMLIsIndexElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create225")>]
            member __.Create() : FunScript.TypeScript.HTMLIsIndexElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create225Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLIsIndexElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_203 =


    type FunScript.TypeScript.AnonymousType278 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype196")>]
            member __.prototype with get() : FunScript.TypeScript.SVGPathSegLinetoRel = failwith "never" and set (v : FunScript.TypeScript.SVGPathSegLinetoRel) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create226")>]
            member __.Create() : FunScript.TypeScript.SVGPathSegLinetoRel = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create226Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGPathSegLinetoRel>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_204 =


    type FunScript.TypeScript.AnonymousType279 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype197")>]
            member __.prototype with get() : FunScript.TypeScript.DOMException = failwith "never" and set (v : FunScript.TypeScript.DOMException) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create227")>]
            member __.Create() : FunScript.TypeScript.DOMException = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create227Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.DOMException>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.HIERARCHY_REQUEST_ERR)"); CompiledName("HIERARCHY_REQUEST_ERR")>]
            member __.HIERARCHY_REQUEST_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NO_MODIFICATION_ALLOWED_ERR)"); CompiledName("NO_MODIFICATION_ALLOWED_ERR")>]
            member __.NO_MODIFICATION_ALLOWED_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.INVALID_MODIFICATION_ERR)"); CompiledName("INVALID_MODIFICATION_ERR")>]
            member __.INVALID_MODIFICATION_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NAMESPACE_ERR)"); CompiledName("NAMESPACE_ERR")>]
            member __.NAMESPACE_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.INVALID_CHARACTER_ERR)"); CompiledName("INVALID_CHARACTER_ERR")>]
            member __.INVALID_CHARACTER_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TYPE_MISMATCH_ERR)"); CompiledName("TYPE_MISMATCH_ERR")>]
            member __.TYPE_MISMATCH_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ABORT_ERR)"); CompiledName("ABORT_ERR")>]
            member __.ABORT_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.INVALID_STATE_ERR)"); CompiledName("INVALID_STATE_ERR")>]
            member __.INVALID_STATE_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SECURITY_ERR)"); CompiledName("SECURITY_ERR")>]
            member __.SECURITY_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NETWORK_ERR)"); CompiledName("NETWORK_ERR")>]
            member __.NETWORK_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.WRONG_DOCUMENT_ERR)"); CompiledName("WRONG_DOCUMENT_ERR")>]
            member __.WRONG_DOCUMENT_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.QUOTA_EXCEEDED_ERR)"); CompiledName("QUOTA_EXCEEDED_ERR")>]
            member __.QUOTA_EXCEEDED_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.INDEX_SIZE_ERR)"); CompiledName("INDEX_SIZE_ERR")>]
            member __.INDEX_SIZE_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOMSTRING_SIZE_ERR)"); CompiledName("DOMSTRING_SIZE_ERR")>]
            member __.DOMSTRING_SIZE_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SYNTAX_ERR)"); CompiledName("SYNTAX_ERR")>]
            member __.SYNTAX_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SERIALIZE_ERR)"); CompiledName("SERIALIZE_ERR")>]
            member __.SERIALIZE_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.VALIDATION_ERR)"); CompiledName("VALIDATION_ERR")>]
            member __.VALIDATION_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NOT_FOUND_ERR)"); CompiledName("NOT_FOUND_ERR")>]
            member __.NOT_FOUND_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.URL_MISMATCH_ERR)"); CompiledName("URL_MISMATCH_ERR")>]
            member __.URL_MISMATCH_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PARSE_ERR)"); CompiledName("PARSE_ERR")>]
            member __.PARSE_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NO_DATA_ALLOWED_ERR)"); CompiledName("NO_DATA_ALLOWED_ERR")>]
            member __.NO_DATA_ALLOWED_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NOT_SUPPORTED_ERR)"); CompiledName("NOT_SUPPORTED_ERR")>]
            member __.NOT_SUPPORTED_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.INVALID_ACCESS_ERR)"); CompiledName("INVALID_ACCESS_ERR")>]
            member __.INVALID_ACCESS_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.INUSE_ATTRIBUTE_ERR)"); CompiledName("INUSE_ATTRIBUTE_ERR")>]
            member __.INUSE_ATTRIBUTE_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.INVALID_NODE_TYPE_ERR)"); CompiledName("INVALID_NODE_TYPE_ERR")>]
            member __.INVALID_NODE_TYPE_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DATA_CLONE_ERR)"); CompiledName("DATA_CLONE_ERR")>]
            member __.DATA_CLONE_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TIMEOUT_ERR)"); CompiledName("TIMEOUT_ERR")>]
            member __.TIMEOUT_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_205 =


    type FunScript.TypeScript.AnonymousType28 with 

            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create228")>]
            member __.Create<'T>() : FunScript.TypeScript.Set<'T> = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create228Aux")>]
            member __.``Create <-``<'T>(func : System.Func<FunScript.TypeScript.Set<'T>>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_206 =


    type FunScript.TypeScript.AnonymousType280 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype198")>]
            member __.prototype with get() : FunScript.TypeScript.SVGAnimatedBoolean = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedBoolean) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create229")>]
            member __.Create() : FunScript.TypeScript.SVGAnimatedBoolean = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create229Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGAnimatedBoolean>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_207 =


    type FunScript.TypeScript.AnonymousType281 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype199")>]
            member __.prototype with get() : FunScript.TypeScript.MSCompatibleInfoCollection = failwith "never" and set (v : FunScript.TypeScript.MSCompatibleInfoCollection) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create230")>]
            member __.Create() : FunScript.TypeScript.MSCompatibleInfoCollection = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create230Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MSCompatibleInfoCollection>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_208 =


    type FunScript.TypeScript.AnonymousType282 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype200")>]
            member __.prototype with get() : FunScript.TypeScript.SVGSwitchElement = failwith "never" and set (v : FunScript.TypeScript.SVGSwitchElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create231")>]
            member __.Create() : FunScript.TypeScript.SVGSwitchElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create231Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGSwitchElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_209 =


    type FunScript.TypeScript.AnonymousType283 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype201")>]
            member __.prototype with get() : FunScript.TypeScript.SVGPreserveAspectRatio = failwith "never" and set (v : FunScript.TypeScript.SVGPreserveAspectRatio) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create232")>]
            member __.Create() : FunScript.TypeScript.SVGPreserveAspectRatio = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create232Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGPreserveAspectRatio>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_PRESERVEASPECTRATIO_NONE)"); CompiledName("SVG_PRESERVEASPECTRATIO_NONE")>]
            member __.SVG_PRESERVEASPECTRATIO_NONE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_PRESERVEASPECTRATIO_XMINYMID)"); CompiledName("SVG_PRESERVEASPECTRATIO_XMINYMID")>]
            member __.SVG_PRESERVEASPECTRATIO_XMINYMID with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_PRESERVEASPECTRATIO_XMAXYMIN)"); CompiledName("SVG_PRESERVEASPECTRATIO_XMAXYMIN")>]
            member __.SVG_PRESERVEASPECTRATIO_XMAXYMIN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_PRESERVEASPECTRATIO_XMINYMAX)"); CompiledName("SVG_PRESERVEASPECTRATIO_XMINYMAX")>]
            member __.SVG_PRESERVEASPECTRATIO_XMINYMAX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_PRESERVEASPECTRATIO_XMAXYMAX)"); CompiledName("SVG_PRESERVEASPECTRATIO_XMAXYMAX")>]
            member __.SVG_PRESERVEASPECTRATIO_XMAXYMAX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_MEETORSLICE_UNKNOWN)"); CompiledName("SVG_MEETORSLICE_UNKNOWN")>]
            member __.SVG_MEETORSLICE_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_PRESERVEASPECTRATIO_XMAXYMID)"); CompiledName("SVG_PRESERVEASPECTRATIO_XMAXYMID")>]
            member __.SVG_PRESERVEASPECTRATIO_XMAXYMID with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_PRESERVEASPECTRATIO_XMIDYMAX)"); CompiledName("SVG_PRESERVEASPECTRATIO_XMIDYMAX")>]
            member __.SVG_PRESERVEASPECTRATIO_XMIDYMAX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_PRESERVEASPECTRATIO_XMINYMIN)"); CompiledName("SVG_PRESERVEASPECTRATIO_XMINYMIN")>]
            member __.SVG_PRESERVEASPECTRATIO_XMINYMIN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_MEETORSLICE_MEET)"); CompiledName("SVG_MEETORSLICE_MEET")>]
            member __.SVG_MEETORSLICE_MEET with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_PRESERVEASPECTRATIO_XMIDYMID)"); CompiledName("SVG_PRESERVEASPECTRATIO_XMIDYMID")>]
            member __.SVG_PRESERVEASPECTRATIO_XMIDYMID with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_PRESERVEASPECTRATIO_XMIDYMIN)"); CompiledName("SVG_PRESERVEASPECTRATIO_XMIDYMIN")>]
            member __.SVG_PRESERVEASPECTRATIO_XMIDYMIN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_MEETORSLICE_SLICE)"); CompiledName("SVG_MEETORSLICE_SLICE")>]
            member __.SVG_MEETORSLICE_SLICE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_PRESERVEASPECTRATIO_UNKNOWN)"); CompiledName("SVG_PRESERVEASPECTRATIO_UNKNOWN")>]
            member __.SVG_PRESERVEASPECTRATIO_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_210 =


    type FunScript.TypeScript.AnonymousType284 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype202")>]
            member __.prototype with get() : FunScript.TypeScript.Attr = failwith "never" and set (v : FunScript.TypeScript.Attr) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create233")>]
            member __.Create() : FunScript.TypeScript.Attr = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create233Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.Attr>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_211 =


    type FunScript.TypeScript.AnonymousType285 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype203")>]
            member __.prototype with get() : FunScript.TypeScript.PerformanceNavigation = failwith "never" and set (v : FunScript.TypeScript.PerformanceNavigation) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create234")>]
            member __.Create() : FunScript.TypeScript.PerformanceNavigation = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create234Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.PerformanceNavigation>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TYPE_RELOAD)"); CompiledName("TYPE_RELOAD")>]
            member __.TYPE_RELOAD with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TYPE_RESERVED)"); CompiledName("TYPE_RESERVED")>]
            member __.TYPE_RESERVED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TYPE_BACK_FORWARD)"); CompiledName("TYPE_BACK_FORWARD")>]
            member __.TYPE_BACK_FORWARD with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TYPE_NAVIGATE)"); CompiledName("TYPE_NAVIGATE")>]
            member __.TYPE_NAVIGATE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_212 =


    type FunScript.TypeScript.AnonymousType286 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype204")>]
            member __.prototype with get() : FunScript.TypeScript.SVGStopElement = failwith "never" and set (v : FunScript.TypeScript.SVGStopElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create235")>]
            member __.Create() : FunScript.TypeScript.SVGStopElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create235Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGStopElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_213 =


    type FunScript.TypeScript.AnonymousType287 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype205")>]
            member __.prototype with get() : FunScript.TypeScript.SVGSymbolElement = failwith "never" and set (v : FunScript.TypeScript.SVGSymbolElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create236")>]
            member __.Create() : FunScript.TypeScript.SVGSymbolElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create236Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGSymbolElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_214 =


    type FunScript.TypeScript.AnonymousType288 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype206")>]
            member __.prototype with get() : FunScript.TypeScript.SVGElementInstanceList = failwith "never" and set (v : FunScript.TypeScript.SVGElementInstanceList) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create237")>]
            member __.Create() : FunScript.TypeScript.SVGElementInstanceList = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create237Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGElementInstanceList>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_215 =


    type FunScript.TypeScript.AnonymousType289 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype207")>]
            member __.prototype with get() : FunScript.TypeScript.CSSRuleList = failwith "never" and set (v : FunScript.TypeScript.CSSRuleList) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create238")>]
            member __.Create() : FunScript.TypeScript.CSSRuleList = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create238Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.CSSRuleList>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_216 =


    type FunScript.TypeScript.Intl.AnonymousType29 with 

            [<FunScript.JSEmitInline("(new {0}({?1}, {?2}))"); CompiledName("Create239")>]
            member __.Create(?locales : array<string>, ?options : FunScript.TypeScript.Intl.CollatorOptions) : FunScript.TypeScript.Intl.Collator = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create239Aux")>]
            member __.``Create <-``(func : System.Func<array<string>, FunScript.TypeScript.Intl.CollatorOptions, FunScript.TypeScript.Intl.Collator>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({?1}, {?2}))"); CompiledName("Create240")>]
            member __.CreateOverload2(?locale : string, ?options : FunScript.TypeScript.Intl.CollatorOptions) : FunScript.TypeScript.Intl.Collator = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create240Aux")>]
            member __.``CreateOverload2 <-``(func : System.Func<string, FunScript.TypeScript.Intl.CollatorOptions, FunScript.TypeScript.Intl.Collator>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}({?1}, {?2}))"); CompiledName("Invoke13")>]
            member __.Invoke(?locales : array<string>, ?options : FunScript.TypeScript.Intl.CollatorOptions) : FunScript.TypeScript.Intl.Collator = failwith "never"
            [<FunScript.JSEmitInline("({0} = {1})"); CompiledName("Invoke13Aux")>]
            member __.``Invoke <-``(func : System.Func<array<string>, FunScript.TypeScript.Intl.CollatorOptions, FunScript.TypeScript.Intl.Collator>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}({?1}, {?2}))"); CompiledName("Invoke14")>]
            member __.InvokeOverload2(?locale : string, ?options : FunScript.TypeScript.Intl.CollatorOptions) : FunScript.TypeScript.Intl.Collator = failwith "never"
            [<FunScript.JSEmitInline("({0} = {1})"); CompiledName("Invoke14Aux")>]
            member __.``InvokeOverload2 <-``(func : System.Func<string, FunScript.TypeScript.Intl.CollatorOptions, FunScript.TypeScript.Intl.Collator>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.supportedLocalesOf({1}, {?2}))"); CompiledName("supportedLocalesOf")>]
            member __.supportedLocalesOf(locales : array<string>, ?options : FunScript.TypeScript.Intl.CollatorOptions) : array<string> = failwith "never"
            [<FunScript.JSEmitInline("({0}.supportedLocalesOf = {1})"); CompiledName("supportedLocalesOfAux")>]
            member __.``supportedLocalesOf <-``(func : System.Func<array<string>, FunScript.TypeScript.Intl.CollatorOptions, array<string>>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.supportedLocalesOf({1}, {?2}))"); CompiledName("supportedLocalesOf1")>]
            member __.supportedLocalesOf(locale : string, ?options : FunScript.TypeScript.Intl.CollatorOptions) : array<string> = failwith "never"
            [<FunScript.JSEmitInline("({0}.supportedLocalesOf = {1})"); CompiledName("supportedLocalesOf1Aux")>]
            member __.``supportedLocalesOf <-``(func : System.Func<string, FunScript.TypeScript.Intl.CollatorOptions, array<string>>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_217 =


    type FunScript.TypeScript.AnonymousType290 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype208")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLVideoElement = failwith "never" and set (v : FunScript.TypeScript.HTMLVideoElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create241")>]
            member __.Create() : FunScript.TypeScript.HTMLVideoElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create241Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLVideoElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_218 =


    type FunScript.TypeScript.AnonymousType291 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype209")>]
            member __.prototype with get() : FunScript.TypeScript.ClientRectList = failwith "never" and set (v : FunScript.TypeScript.ClientRectList) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create242")>]
            member __.Create() : FunScript.TypeScript.ClientRectList = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create242Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.ClientRectList>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_219 =


    type FunScript.TypeScript.AnonymousType292 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype210")>]
            member __.prototype with get() : FunScript.TypeScript.SVGMaskElement = failwith "never" and set (v : FunScript.TypeScript.SVGMaskElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create243")>]
            member __.Create() : FunScript.TypeScript.SVGMaskElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create243Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGMaskElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_220 =


    type FunScript.TypeScript.AnonymousType293 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype211")>]
            member __.prototype with get() : FunScript.TypeScript.External = failwith "never" and set (v : FunScript.TypeScript.External) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create244")>]
            member __.Create() : FunScript.TypeScript.External = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create244Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.External>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_221 =


    type FunScript.TypeScript.AnonymousType294 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype212")>]
            member __.prototype with get() : FunScript.TypeScript.MSGestureEvent = failwith "never" and set (v : FunScript.TypeScript.MSGestureEvent) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create245")>]
            member __.Create() : FunScript.TypeScript.MSGestureEvent = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create245Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MSGestureEvent>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MSGESTURE_FLAG_BEGIN)"); CompiledName("MSGESTURE_FLAG_BEGIN")>]
            member __.MSGESTURE_FLAG_BEGIN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MSGESTURE_FLAG_END)"); CompiledName("MSGESTURE_FLAG_END")>]
            member __.MSGESTURE_FLAG_END with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MSGESTURE_FLAG_CANCEL)"); CompiledName("MSGESTURE_FLAG_CANCEL")>]
            member __.MSGESTURE_FLAG_CANCEL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MSGESTURE_FLAG_INERTIA)"); CompiledName("MSGESTURE_FLAG_INERTIA")>]
            member __.MSGESTURE_FLAG_INERTIA with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MSGESTURE_FLAG_NONE)"); CompiledName("MSGESTURE_FLAG_NONE")>]
            member __.MSGESTURE_FLAG_NONE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_222 =


    type FunScript.TypeScript.AnonymousType295 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype213")>]
            member __.prototype with get() : FunScript.TypeScript.ErrorEvent = failwith "never" and set (v : FunScript.TypeScript.ErrorEvent) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create246")>]
            member __.Create() : FunScript.TypeScript.ErrorEvent = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create246Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.ErrorEvent>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_223 =


    type FunScript.TypeScript.AnonymousType296 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype214")>]
            member __.prototype with get() : FunScript.TypeScript.SVGFilterElement = failwith "never" and set (v : FunScript.TypeScript.SVGFilterElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create247")>]
            member __.Create() : FunScript.TypeScript.SVGFilterElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create247Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGFilterElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_224 =


    type FunScript.TypeScript.AnonymousType297 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype215")>]
            member __.prototype with get() : FunScript.TypeScript.TrackEvent = failwith "never" and set (v : FunScript.TypeScript.TrackEvent) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create248")>]
            member __.Create() : FunScript.TypeScript.TrackEvent = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create248Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.TrackEvent>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_225 =


    type FunScript.TypeScript.AnonymousType298 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype216")>]
            member __.prototype with get() : FunScript.TypeScript.SVGFEMergeNodeElement = failwith "never" and set (v : FunScript.TypeScript.SVGFEMergeNodeElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create249")>]
            member __.Create() : FunScript.TypeScript.SVGFEMergeNodeElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create249Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGFEMergeNodeElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_226 =


    type FunScript.TypeScript.AnonymousType299 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype217")>]
            member __.prototype with get() : FunScript.TypeScript.SVGFEFloodElement = failwith "never" and set (v : FunScript.TypeScript.SVGFEFloodElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create250")>]
            member __.Create() : FunScript.TypeScript.SVGFEFloodElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create250Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGFEFloodElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_227 =


    type FunScript.TypeScript.AnonymousType3 with 

            [<FunScript.JSEmitInline("(new {0}({?1}))"); CompiledName("Create251")>]
            member __.Create(?value : obj) : FunScript.TypeScript.String = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create251Aux")>]
            member __.``Create <-``(func : System.Func<obj, FunScript.TypeScript.String>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}({?1}))"); CompiledName("Invoke15")>]
            member __.Invoke(?value : obj) : string = failwith "never"
            [<FunScript.JSEmitInline("({0} = {1})"); CompiledName("Invoke15Aux")>]
            member __.``Invoke <-``(func : System.Func<obj, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype218")>]
            member __.prototype with get() : FunScript.TypeScript.String = failwith "never" and set (v : FunScript.TypeScript.String) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.fromCharCode())"); CompiledName("fromCharCode")>]
            member __.fromCharCode() : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.fromCharCode = {1})"); CompiledName("fromCharCodeAux")>]
            member __.``fromCharCode <-``(func : System.Func<string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.fromCharCode({1...}))"); CompiledName("fromCharCode1")>]
            member __.fromCharCodeOverload2([<System.ParamArray>] codes : array<float>) : string = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_228 =


    type FunScript.TypeScript.Intl.AnonymousType30 with 

            [<FunScript.JSEmitInline("(new {0}({?1}, {?2}))"); CompiledName("Create252")>]
            member __.Create(?locales : array<string>, ?options : FunScript.TypeScript.Intl.NumberFormatOptions) : FunScript.TypeScript.Intl.Collator = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create252Aux")>]
            member __.``Create <-``(func : System.Func<array<string>, FunScript.TypeScript.Intl.NumberFormatOptions, FunScript.TypeScript.Intl.Collator>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({?1}, {?2}))"); CompiledName("Create253")>]
            member __.CreateOverload2(?locale : string, ?options : FunScript.TypeScript.Intl.NumberFormatOptions) : FunScript.TypeScript.Intl.Collator = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create253Aux")>]
            member __.``CreateOverload2 <-``(func : System.Func<string, FunScript.TypeScript.Intl.NumberFormatOptions, FunScript.TypeScript.Intl.Collator>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}({?1}, {?2}))"); CompiledName("Invoke16")>]
            member __.Invoke(?locales : array<string>, ?options : FunScript.TypeScript.Intl.NumberFormatOptions) : FunScript.TypeScript.Intl.Collator = failwith "never"
            [<FunScript.JSEmitInline("({0} = {1})"); CompiledName("Invoke16Aux")>]
            member __.``Invoke <-``(func : System.Func<array<string>, FunScript.TypeScript.Intl.NumberFormatOptions, FunScript.TypeScript.Intl.Collator>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}({?1}, {?2}))"); CompiledName("Invoke17")>]
            member __.InvokeOverload2(?locale : string, ?options : FunScript.TypeScript.Intl.NumberFormatOptions) : FunScript.TypeScript.Intl.Collator = failwith "never"
            [<FunScript.JSEmitInline("({0} = {1})"); CompiledName("Invoke17Aux")>]
            member __.``InvokeOverload2 <-``(func : System.Func<string, FunScript.TypeScript.Intl.NumberFormatOptions, FunScript.TypeScript.Intl.Collator>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.supportedLocalesOf({1}, {?2}))"); CompiledName("supportedLocalesOf2")>]
            member __.supportedLocalesOf(locales : array<string>, ?options : FunScript.TypeScript.Intl.NumberFormatOptions) : array<string> = failwith "never"
            [<FunScript.JSEmitInline("({0}.supportedLocalesOf = {1})"); CompiledName("supportedLocalesOf2Aux")>]
            member __.``supportedLocalesOf <-``(func : System.Func<array<string>, FunScript.TypeScript.Intl.NumberFormatOptions, array<string>>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.supportedLocalesOf({1}, {?2}))"); CompiledName("supportedLocalesOf3")>]
            member __.supportedLocalesOf(locale : string, ?options : FunScript.TypeScript.Intl.NumberFormatOptions) : array<string> = failwith "never"
            [<FunScript.JSEmitInline("({0}.supportedLocalesOf = {1})"); CompiledName("supportedLocalesOf3Aux")>]
            member __.``supportedLocalesOf <-``(func : System.Func<string, FunScript.TypeScript.Intl.NumberFormatOptions, array<string>>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_229 =


    type FunScript.TypeScript.AnonymousType300 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype219")>]
            member __.prototype with get() : FunScript.TypeScript.MSGesture = failwith "never" and set (v : FunScript.TypeScript.MSGesture) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create254")>]
            member __.Create() : FunScript.TypeScript.MSGesture = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create254Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MSGesture>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_230 =


    type FunScript.TypeScript.AnonymousType301 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype220")>]
            member __.prototype with get() : FunScript.TypeScript.TextTrackCue = failwith "never" and set (v : FunScript.TypeScript.TextTrackCue) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}, {2}, {3}))"); CompiledName("Create255")>]
            member __.Create(startTime : float, endTime : float, text : string) : FunScript.TypeScript.TextTrackCue = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create255Aux")>]
            member __.``Create <-``(func : System.Func<float, float, string, FunScript.TypeScript.TextTrackCue>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_231 =


    type FunScript.TypeScript.AnonymousType302 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype221")>]
            member __.prototype with get() : FunScript.TypeScript.MSStreamReader = failwith "never" and set (v : FunScript.TypeScript.MSStreamReader) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create256")>]
            member __.Create() : FunScript.TypeScript.MSStreamReader = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create256Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MSStreamReader>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_232 =


    type FunScript.TypeScript.AnonymousType303 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype222")>]
            member __.prototype with get() : FunScript.TypeScript.DOMTokenList = failwith "never" and set (v : FunScript.TypeScript.DOMTokenList) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create257")>]
            member __.Create() : FunScript.TypeScript.DOMTokenList = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create257Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.DOMTokenList>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_233 =


    type FunScript.TypeScript.AnonymousType304 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype223")>]
            member __.prototype with get() : FunScript.TypeScript.SVGFEFuncAElement = failwith "never" and set (v : FunScript.TypeScript.SVGFEFuncAElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create258")>]
            member __.Create() : FunScript.TypeScript.SVGFEFuncAElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create258Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGFEFuncAElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_234 =


    type FunScript.TypeScript.AnonymousType305 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype224")>]
            member __.prototype with get() : FunScript.TypeScript.SVGFETileElement = failwith "never" and set (v : FunScript.TypeScript.SVGFETileElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create259")>]
            member __.Create() : FunScript.TypeScript.SVGFETileElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create259Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGFETileElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_235 =


    type FunScript.TypeScript.AnonymousType306 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype225")>]
            member __.prototype with get() : FunScript.TypeScript.SVGFEBlendElement = failwith "never" and set (v : FunScript.TypeScript.SVGFEBlendElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create260")>]
            member __.Create() : FunScript.TypeScript.SVGFEBlendElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create260Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGFEBlendElement>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FEBLEND_MODE_DARKEN)"); CompiledName("SVG_FEBLEND_MODE_DARKEN")>]
            member __.SVG_FEBLEND_MODE_DARKEN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FEBLEND_MODE_UNKNOWN)"); CompiledName("SVG_FEBLEND_MODE_UNKNOWN")>]
            member __.SVG_FEBLEND_MODE_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FEBLEND_MODE_MULTIPLY)"); CompiledName("SVG_FEBLEND_MODE_MULTIPLY")>]
            member __.SVG_FEBLEND_MODE_MULTIPLY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FEBLEND_MODE_NORMAL)"); CompiledName("SVG_FEBLEND_MODE_NORMAL")>]
            member __.SVG_FEBLEND_MODE_NORMAL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FEBLEND_MODE_SCREEN)"); CompiledName("SVG_FEBLEND_MODE_SCREEN")>]
            member __.SVG_FEBLEND_MODE_SCREEN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FEBLEND_MODE_LIGHTEN)"); CompiledName("SVG_FEBLEND_MODE_LIGHTEN")>]
            member __.SVG_FEBLEND_MODE_LIGHTEN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_236 =


    type FunScript.TypeScript.AnonymousType307 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype226")>]
            member __.prototype with get() : FunScript.TypeScript.MessageChannel = failwith "never" and set (v : FunScript.TypeScript.MessageChannel) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create261")>]
            member __.Create() : FunScript.TypeScript.MessageChannel = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create261Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MessageChannel>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_237 =


    type FunScript.TypeScript.AnonymousType308 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype227")>]
            member __.prototype with get() : FunScript.TypeScript.SVGFEMergeElement = failwith "never" and set (v : FunScript.TypeScript.SVGFEMergeElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create262")>]
            member __.Create() : FunScript.TypeScript.SVGFEMergeElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create262Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGFEMergeElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_238 =


    type FunScript.TypeScript.AnonymousType309 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype228")>]
            member __.prototype with get() : FunScript.TypeScript.TransitionEvent = failwith "never" and set (v : FunScript.TypeScript.TransitionEvent) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create263")>]
            member __.Create() : FunScript.TypeScript.TransitionEvent = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create263Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.TransitionEvent>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_239 =


    type FunScript.TypeScript.Intl.AnonymousType31 with 

            [<FunScript.JSEmitInline("(new {0}({?1}, {?2}))"); CompiledName("Create264")>]
            member __.Create(?locales : array<string>, ?options : FunScript.TypeScript.Intl.DateTimeFormatOptions) : FunScript.TypeScript.Intl.Collator = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create264Aux")>]
            member __.``Create <-``(func : System.Func<array<string>, FunScript.TypeScript.Intl.DateTimeFormatOptions, FunScript.TypeScript.Intl.Collator>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({?1}, {?2}))"); CompiledName("Create265")>]
            member __.CreateOverload2(?locale : string, ?options : FunScript.TypeScript.Intl.DateTimeFormatOptions) : FunScript.TypeScript.Intl.Collator = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create265Aux")>]
            member __.``CreateOverload2 <-``(func : System.Func<string, FunScript.TypeScript.Intl.DateTimeFormatOptions, FunScript.TypeScript.Intl.Collator>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}({?1}, {?2}))"); CompiledName("Invoke18")>]
            member __.Invoke(?locales : array<string>, ?options : FunScript.TypeScript.Intl.DateTimeFormatOptions) : FunScript.TypeScript.Intl.Collator = failwith "never"
            [<FunScript.JSEmitInline("({0} = {1})"); CompiledName("Invoke18Aux")>]
            member __.``Invoke <-``(func : System.Func<array<string>, FunScript.TypeScript.Intl.DateTimeFormatOptions, FunScript.TypeScript.Intl.Collator>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}({?1}, {?2}))"); CompiledName("Invoke19")>]
            member __.InvokeOverload2(?locale : string, ?options : FunScript.TypeScript.Intl.DateTimeFormatOptions) : FunScript.TypeScript.Intl.Collator = failwith "never"
            [<FunScript.JSEmitInline("({0} = {1})"); CompiledName("Invoke19Aux")>]
            member __.``InvokeOverload2 <-``(func : System.Func<string, FunScript.TypeScript.Intl.DateTimeFormatOptions, FunScript.TypeScript.Intl.Collator>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.supportedLocalesOf({1}, {?2}))"); CompiledName("supportedLocalesOf4")>]
            member __.supportedLocalesOf(locales : array<string>, ?options : FunScript.TypeScript.Intl.DateTimeFormatOptions) : array<string> = failwith "never"
            [<FunScript.JSEmitInline("({0}.supportedLocalesOf = {1})"); CompiledName("supportedLocalesOf4Aux")>]
            member __.``supportedLocalesOf <-``(func : System.Func<array<string>, FunScript.TypeScript.Intl.DateTimeFormatOptions, array<string>>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.supportedLocalesOf({1}, {?2}))"); CompiledName("supportedLocalesOf5")>]
            member __.supportedLocalesOf(locale : string, ?options : FunScript.TypeScript.Intl.DateTimeFormatOptions) : array<string> = failwith "never"
            [<FunScript.JSEmitInline("({0}.supportedLocalesOf = {1})"); CompiledName("supportedLocalesOf5Aux")>]
            member __.``supportedLocalesOf <-``(func : System.Func<string, FunScript.TypeScript.Intl.DateTimeFormatOptions, array<string>>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_240 =


    type FunScript.TypeScript.AnonymousType310 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype229")>]
            member __.prototype with get() : FunScript.TypeScript.MediaQueryList = failwith "never" and set (v : FunScript.TypeScript.MediaQueryList) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create266")>]
            member __.Create() : FunScript.TypeScript.MediaQueryList = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create266Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MediaQueryList>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_241 =


    type FunScript.TypeScript.AnonymousType311 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype230")>]
            member __.prototype with get() : FunScript.TypeScript.DOMError = failwith "never" and set (v : FunScript.TypeScript.DOMError) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create267")>]
            member __.Create() : FunScript.TypeScript.DOMError = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create267Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.DOMError>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_242 =


    type FunScript.TypeScript.AnonymousType312 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype231")>]
            member __.prototype with get() : FunScript.TypeScript.CloseEvent = failwith "never" and set (v : FunScript.TypeScript.CloseEvent) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create268")>]
            member __.Create() : FunScript.TypeScript.CloseEvent = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create268Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.CloseEvent>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_243 =


    type FunScript.TypeScript.AnonymousType313 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype232")>]
            member __.prototype with get() : FunScript.TypeScript.WebSocket = failwith "never" and set (v : FunScript.TypeScript.WebSocket) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}, {?2}))"); CompiledName("Create269")>]
            member __.Create(url : string, ?protocols : string) : FunScript.TypeScript.WebSocket = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create269Aux")>]
            member __.``Create <-``(func : System.Func<string, string, FunScript.TypeScript.WebSocket>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}, {?2}))"); CompiledName("Create270")>]
            member __.CreateOverload2(url : string, ?protocols : array<string>) : FunScript.TypeScript.WebSocket = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create270Aux")>]
            member __.``CreateOverload2 <-``(func : System.Func<string, array<string>, FunScript.TypeScript.WebSocket>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.OPEN)"); CompiledName("OPEN")>]
            member __.OPEN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.CLOSING)"); CompiledName("CLOSING")>]
            member __.CLOSING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.CONNECTING)"); CompiledName("CONNECTING")>]
            member __.CONNECTING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.CLOSED)"); CompiledName("CLOSED")>]
            member __.CLOSED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_244 =


    type FunScript.TypeScript.AnonymousType314 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype233")>]
            member __.prototype with get() : FunScript.TypeScript.SVGFEPointLightElement = failwith "never" and set (v : FunScript.TypeScript.SVGFEPointLightElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create271")>]
            member __.Create() : FunScript.TypeScript.SVGFEPointLightElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create271Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGFEPointLightElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_245 =


    type FunScript.TypeScript.AnonymousType315 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype234")>]
            member __.prototype with get() : FunScript.TypeScript.ProgressEvent = failwith "never" and set (v : FunScript.TypeScript.ProgressEvent) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create272")>]
            member __.Create() : FunScript.TypeScript.ProgressEvent = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create272Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.ProgressEvent>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_246 =


    type FunScript.TypeScript.AnonymousType316 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype235")>]
            member __.prototype with get() : FunScript.TypeScript.IDBObjectStore = failwith "never" and set (v : FunScript.TypeScript.IDBObjectStore) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create273")>]
            member __.Create() : FunScript.TypeScript.IDBObjectStore = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create273Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.IDBObjectStore>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_247 =


    type FunScript.TypeScript.AnonymousType317 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype236")>]
            member __.prototype with get() : FunScript.TypeScript.SVGFEGaussianBlurElement = failwith "never" and set (v : FunScript.TypeScript.SVGFEGaussianBlurElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create274")>]
            member __.Create() : FunScript.TypeScript.SVGFEGaussianBlurElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create274Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGFEGaussianBlurElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_248 =


    type FunScript.TypeScript.AnonymousType318 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype237")>]
            member __.prototype with get() : FunScript.TypeScript.IDBVersionChangeEvent = failwith "never" and set (v : FunScript.TypeScript.IDBVersionChangeEvent) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create275")>]
            member __.Create() : FunScript.TypeScript.IDBVersionChangeEvent = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create275Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.IDBVersionChangeEvent>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_249 =


    type FunScript.TypeScript.AnonymousType319 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype238")>]
            member __.prototype with get() : FunScript.TypeScript.IDBIndex = failwith "never" and set (v : FunScript.TypeScript.IDBIndex) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create276")>]
            member __.Create() : FunScript.TypeScript.IDBIndex = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create276Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.IDBIndex>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_250 =


    type FunScript.TypeScript.AnonymousType32 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype239")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLElement = failwith "never" and set (v : FunScript.TypeScript.HTMLElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create277")>]
            member __.Create() : FunScript.TypeScript.HTMLElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create277Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_251 =


    type FunScript.TypeScript.AnonymousType320 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype240")>]
            member __.prototype with get() : FunScript.TypeScript.FileList = failwith "never" and set (v : FunScript.TypeScript.FileList) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create278")>]
            member __.Create() : FunScript.TypeScript.FileList = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create278Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.FileList>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_252 =


    type FunScript.TypeScript.AnonymousType321 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype241")>]
            member __.prototype with get() : FunScript.TypeScript.IDBCursor = failwith "never" and set (v : FunScript.TypeScript.IDBCursor) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create279")>]
            member __.Create() : FunScript.TypeScript.IDBCursor = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create279Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.IDBCursor>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PREV)"); CompiledName("PREV")>]
            member __.PREV with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PREV_NO_DUPLICATE)"); CompiledName("PREV_NO_DUPLICATE")>]
            member __.PREV_NO_DUPLICATE with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NEXT)"); CompiledName("NEXT")>]
            member __.NEXT with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NEXT_NO_DUPLICATE)"); CompiledName("NEXT_NO_DUPLICATE")>]
            member __.NEXT_NO_DUPLICATE with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_253 =


    type FunScript.TypeScript.AnonymousType322 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype242")>]
            member __.prototype with get() : FunScript.TypeScript.SVGFESpecularLightingElement = failwith "never" and set (v : FunScript.TypeScript.SVGFESpecularLightingElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create280")>]
            member __.Create() : FunScript.TypeScript.SVGFESpecularLightingElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create280Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGFESpecularLightingElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_254 =


    type FunScript.TypeScript.AnonymousType323 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype243")>]
            member __.prototype with get() : FunScript.TypeScript.File = failwith "never" and set (v : FunScript.TypeScript.File) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create281")>]
            member __.Create() : FunScript.TypeScript.File = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create281Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.File>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_255 =


    type FunScript.TypeScript.AnonymousType324 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype244")>]
            member __.prototype with get() : FunScript.TypeScript.IDBCursorWithValue = failwith "never" and set (v : FunScript.TypeScript.IDBCursorWithValue) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create282")>]
            member __.Create() : FunScript.TypeScript.IDBCursorWithValue = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create282Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.IDBCursorWithValue>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_256 =


    type FunScript.TypeScript.AnonymousType325 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype245")>]
            member __.prototype with get() : FunScript.TypeScript.XMLHttpRequestEventTarget = failwith "never" and set (v : FunScript.TypeScript.XMLHttpRequestEventTarget) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create283")>]
            member __.Create() : FunScript.TypeScript.XMLHttpRequestEventTarget = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create283Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.XMLHttpRequestEventTarget>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_257 =


    type FunScript.TypeScript.AnonymousType326 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype246")>]
            member __.prototype with get() : FunScript.TypeScript.AudioTrackList = failwith "never" and set (v : FunScript.TypeScript.AudioTrackList) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create284")>]
            member __.Create() : FunScript.TypeScript.AudioTrackList = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create284Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.AudioTrackList>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_258 =


    type FunScript.TypeScript.AnonymousType327 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype247")>]
            member __.prototype with get() : FunScript.TypeScript.SVGFEMorphologyElement = failwith "never" and set (v : FunScript.TypeScript.SVGFEMorphologyElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create285")>]
            member __.Create() : FunScript.TypeScript.SVGFEMorphologyElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create285Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGFEMorphologyElement>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_MORPHOLOGY_OPERATOR_UNKNOWN)"); CompiledName("SVG_MORPHOLOGY_OPERATOR_UNKNOWN")>]
            member __.SVG_MORPHOLOGY_OPERATOR_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_MORPHOLOGY_OPERATOR_ERODE)"); CompiledName("SVG_MORPHOLOGY_OPERATOR_ERODE")>]
            member __.SVG_MORPHOLOGY_OPERATOR_ERODE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_MORPHOLOGY_OPERATOR_DILATE)"); CompiledName("SVG_MORPHOLOGY_OPERATOR_DILATE")>]
            member __.SVG_MORPHOLOGY_OPERATOR_DILATE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_259 =


    type FunScript.TypeScript.AnonymousType328 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype248")>]
            member __.prototype with get() : FunScript.TypeScript.SVGFEFuncRElement = failwith "never" and set (v : FunScript.TypeScript.SVGFEFuncRElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create286")>]
            member __.Create() : FunScript.TypeScript.SVGFEFuncRElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create286Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGFEFuncRElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_260 =


    type FunScript.TypeScript.AnonymousType329 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype249")>]
            member __.prototype with get() : FunScript.TypeScript.SVGFEDisplacementMapElement = failwith "never" and set (v : FunScript.TypeScript.SVGFEDisplacementMapElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create287")>]
            member __.Create() : FunScript.TypeScript.SVGFEDisplacementMapElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create287Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGFEDisplacementMapElement>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_CHANNEL_B)"); CompiledName("SVG_CHANNEL_B")>]
            member __.SVG_CHANNEL_B with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_CHANNEL_R)"); CompiledName("SVG_CHANNEL_R")>]
            member __.SVG_CHANNEL_R with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_CHANNEL_G)"); CompiledName("SVG_CHANNEL_G")>]
            member __.SVG_CHANNEL_G with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_CHANNEL_UNKNOWN)"); CompiledName("SVG_CHANNEL_UNKNOWN")>]
            member __.SVG_CHANNEL_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_CHANNEL_A)"); CompiledName("SVG_CHANNEL_A")>]
            member __.SVG_CHANNEL_A with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_261 =


    type FunScript.TypeScript.AnonymousType33 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype250")>]
            member __.prototype with get() : FunScript.TypeScript.Document = failwith "never" and set (v : FunScript.TypeScript.Document) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create288")>]
            member __.Create() : FunScript.TypeScript.Document = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create288Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.Document>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_262 =


    type FunScript.TypeScript.AnonymousType330 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype251")>]
            member __.prototype with get() : FunScript.TypeScript.AnimationEvent = failwith "never" and set (v : FunScript.TypeScript.AnimationEvent) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create289")>]
            member __.Create() : FunScript.TypeScript.AnimationEvent = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create289Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.AnimationEvent>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_263 =


    type FunScript.TypeScript.AnonymousType331 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype252")>]
            member __.prototype with get() : FunScript.TypeScript.SVGComponentTransferFunctionElement = failwith "never" and set (v : FunScript.TypeScript.SVGComponentTransferFunctionElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create290")>]
            member __.Create() : FunScript.TypeScript.SVGComponentTransferFunctionElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create290Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGComponentTransferFunctionElement>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN)"); CompiledName("SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN")>]
            member __.SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FECOMPONENTTRANSFER_TYPE_TABLE)"); CompiledName("SVG_FECOMPONENTTRANSFER_TYPE_TABLE")>]
            member __.SVG_FECOMPONENTTRANSFER_TYPE_TABLE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY)"); CompiledName("SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY")>]
            member __.SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FECOMPONENTTRANSFER_TYPE_GAMMA)"); CompiledName("SVG_FECOMPONENTTRANSFER_TYPE_GAMMA")>]
            member __.SVG_FECOMPONENTTRANSFER_TYPE_GAMMA with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE)"); CompiledName("SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE")>]
            member __.SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FECOMPONENTTRANSFER_TYPE_LINEAR)"); CompiledName("SVG_FECOMPONENTTRANSFER_TYPE_LINEAR")>]
            member __.SVG_FECOMPONENTTRANSFER_TYPE_LINEAR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_264 =


    type FunScript.TypeScript.AnonymousType332 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype253")>]
            member __.prototype with get() : FunScript.TypeScript.MSRangeCollection = failwith "never" and set (v : FunScript.TypeScript.MSRangeCollection) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create291")>]
            member __.Create() : FunScript.TypeScript.MSRangeCollection = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create291Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MSRangeCollection>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_265 =


    type FunScript.TypeScript.AnonymousType333 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype254")>]
            member __.prototype with get() : FunScript.TypeScript.SVGFEDistantLightElement = failwith "never" and set (v : FunScript.TypeScript.SVGFEDistantLightElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create292")>]
            member __.Create() : FunScript.TypeScript.SVGFEDistantLightElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create292Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGFEDistantLightElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_266 =


    type FunScript.TypeScript.AnonymousType334 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype255")>]
            member __.prototype with get() : FunScript.TypeScript.SVGFEFuncBElement = failwith "never" and set (v : FunScript.TypeScript.SVGFEFuncBElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create293")>]
            member __.Create() : FunScript.TypeScript.SVGFEFuncBElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create293Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGFEFuncBElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_267 =


    type FunScript.TypeScript.AnonymousType335 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype256")>]
            member __.prototype with get() : FunScript.TypeScript.IDBKeyRange = failwith "never" and set (v : FunScript.TypeScript.IDBKeyRange) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create294")>]
            member __.Create() : FunScript.TypeScript.IDBKeyRange = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create294Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.IDBKeyRange>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.bound({1}, {2}, {?3}, {?4}))"); CompiledName("bound")>]
            member __.bound(lower : obj, upper : obj, ?lowerOpen : bool, ?upperOpen : bool) : FunScript.TypeScript.IDBKeyRange = failwith "never"
            [<FunScript.JSEmitInline("({0}.bound = {1})"); CompiledName("boundAux")>]
            member __.``bound <-``(func : System.Func<obj, obj, bool, bool, FunScript.TypeScript.IDBKeyRange>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.only({1}))"); CompiledName("only")>]
            member __.only(value : obj) : FunScript.TypeScript.IDBKeyRange = failwith "never"
            [<FunScript.JSEmitInline("({0}.only = {1})"); CompiledName("onlyAux")>]
            member __.``only <-``(func : System.Func<obj, FunScript.TypeScript.IDBKeyRange>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.lowerBound({1}, {?2}))"); CompiledName("lowerBound")>]
            member __.lowerBound(bound : obj, ?_open : bool) : FunScript.TypeScript.IDBKeyRange = failwith "never"
            [<FunScript.JSEmitInline("({0}.lowerBound = {1})"); CompiledName("lowerBoundAux")>]
            member __.``lowerBound <-``(func : System.Func<obj, bool, FunScript.TypeScript.IDBKeyRange>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.upperBound({1}, {?2}))"); CompiledName("upperBound")>]
            member __.upperBound(bound : obj, ?_open : bool) : FunScript.TypeScript.IDBKeyRange = failwith "never"
            [<FunScript.JSEmitInline("({0}.upperBound = {1})"); CompiledName("upperBoundAux")>]
            member __.``upperBound <-``(func : System.Func<obj, bool, FunScript.TypeScript.IDBKeyRange>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_268 =


    type FunScript.TypeScript.AnonymousType336 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype257")>]
            member __.prototype with get() : FunScript.TypeScript.IDBTransaction = failwith "never" and set (v : FunScript.TypeScript.IDBTransaction) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create295")>]
            member __.Create() : FunScript.TypeScript.IDBTransaction = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create295Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.IDBTransaction>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.READ_ONLY)"); CompiledName("READ_ONLY")>]
            member __.READ_ONLY with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.VERSION_CHANGE)"); CompiledName("VERSION_CHANGE")>]
            member __.VERSION_CHANGE with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.READ_WRITE)"); CompiledName("READ_WRITE")>]
            member __.READ_WRITE with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_269 =


    type FunScript.TypeScript.AnonymousType337 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype258")>]
            member __.prototype with get() : FunScript.TypeScript.AudioTrack = failwith "never" and set (v : FunScript.TypeScript.AudioTrack) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create296")>]
            member __.Create() : FunScript.TypeScript.AudioTrack = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create296Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.AudioTrack>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_270 =


    type FunScript.TypeScript.AnonymousType338 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype259")>]
            member __.prototype with get() : FunScript.TypeScript.SVGFEConvolveMatrixElement = failwith "never" and set (v : FunScript.TypeScript.SVGFEConvolveMatrixElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create297")>]
            member __.Create() : FunScript.TypeScript.SVGFEConvolveMatrixElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create297Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGFEConvolveMatrixElement>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_EDGEMODE_WRAP)"); CompiledName("SVG_EDGEMODE_WRAP")>]
            member __.SVG_EDGEMODE_WRAP with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_EDGEMODE_DUPLICATE)"); CompiledName("SVG_EDGEMODE_DUPLICATE")>]
            member __.SVG_EDGEMODE_DUPLICATE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_EDGEMODE_UNKNOWN)"); CompiledName("SVG_EDGEMODE_UNKNOWN")>]
            member __.SVG_EDGEMODE_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_EDGEMODE_NONE)"); CompiledName("SVG_EDGEMODE_NONE")>]
            member __.SVG_EDGEMODE_NONE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_271 =


    type FunScript.TypeScript.AnonymousType339 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype260")>]
            member __.prototype with get() : FunScript.TypeScript.TextTrackCueList = failwith "never" and set (v : FunScript.TypeScript.TextTrackCueList) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create298")>]
            member __.Create() : FunScript.TypeScript.TextTrackCueList = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create298Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.TextTrackCueList>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_272 =


    type FunScript.TypeScript.AnonymousType34 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype261")>]
            member __.prototype with get() : FunScript.TypeScript.Console = failwith "never" and set (v : FunScript.TypeScript.Console) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create299")>]
            member __.Create() : FunScript.TypeScript.Console = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create299Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.Console>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_273 =


    type FunScript.TypeScript.AnonymousType340 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype262")>]
            member __.prototype with get() : FunScript.TypeScript.CSSKeyframesRule = failwith "never" and set (v : FunScript.TypeScript.CSSKeyframesRule) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create300")>]
            member __.Create() : FunScript.TypeScript.CSSKeyframesRule = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create300Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.CSSKeyframesRule>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_274 =


    type FunScript.TypeScript.AnonymousType341 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype263")>]
            member __.prototype with get() : FunScript.TypeScript.SVGFETurbulenceElement = failwith "never" and set (v : FunScript.TypeScript.SVGFETurbulenceElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create301")>]
            member __.Create() : FunScript.TypeScript.SVGFETurbulenceElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create301Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGFETurbulenceElement>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_STITCHTYPE_UNKNOWN)"); CompiledName("SVG_STITCHTYPE_UNKNOWN")>]
            member __.SVG_STITCHTYPE_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_STITCHTYPE_NOSTITCH)"); CompiledName("SVG_STITCHTYPE_NOSTITCH")>]
            member __.SVG_STITCHTYPE_NOSTITCH with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_TURBULENCE_TYPE_UNKNOWN)"); CompiledName("SVG_TURBULENCE_TYPE_UNKNOWN")>]
            member __.SVG_TURBULENCE_TYPE_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_TURBULENCE_TYPE_TURBULENCE)"); CompiledName("SVG_TURBULENCE_TYPE_TURBULENCE")>]
            member __.SVG_TURBULENCE_TYPE_TURBULENCE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_TURBULENCE_TYPE_FRACTALNOISE)"); CompiledName("SVG_TURBULENCE_TYPE_FRACTALNOISE")>]
            member __.SVG_TURBULENCE_TYPE_FRACTALNOISE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_STITCHTYPE_STITCH)"); CompiledName("SVG_STITCHTYPE_STITCH")>]
            member __.SVG_STITCHTYPE_STITCH with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_275 =


    type FunScript.TypeScript.AnonymousType342 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype264")>]
            member __.prototype with get() : FunScript.TypeScript.TextTrackList = failwith "never" and set (v : FunScript.TypeScript.TextTrackList) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create302")>]
            member __.Create() : FunScript.TypeScript.TextTrackList = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create302Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.TextTrackList>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_276 =


    type FunScript.TypeScript.AnonymousType343 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype265")>]
            member __.prototype with get() : FunScript.TypeScript.SVGFEFuncGElement = failwith "never" and set (v : FunScript.TypeScript.SVGFEFuncGElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create303")>]
            member __.Create() : FunScript.TypeScript.SVGFEFuncGElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create303Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGFEFuncGElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_277 =


    type FunScript.TypeScript.AnonymousType344 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype266")>]
            member __.prototype with get() : FunScript.TypeScript.SVGFEColorMatrixElement = failwith "never" and set (v : FunScript.TypeScript.SVGFEColorMatrixElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create304")>]
            member __.Create() : FunScript.TypeScript.SVGFEColorMatrixElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create304Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGFEColorMatrixElement>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FECOLORMATRIX_TYPE_SATURATE)"); CompiledName("SVG_FECOLORMATRIX_TYPE_SATURATE")>]
            member __.SVG_FECOLORMATRIX_TYPE_SATURATE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FECOLORMATRIX_TYPE_UNKNOWN)"); CompiledName("SVG_FECOLORMATRIX_TYPE_UNKNOWN")>]
            member __.SVG_FECOLORMATRIX_TYPE_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FECOLORMATRIX_TYPE_MATRIX)"); CompiledName("SVG_FECOLORMATRIX_TYPE_MATRIX")>]
            member __.SVG_FECOLORMATRIX_TYPE_MATRIX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FECOLORMATRIX_TYPE_HUEROTATE)"); CompiledName("SVG_FECOLORMATRIX_TYPE_HUEROTATE")>]
            member __.SVG_FECOLORMATRIX_TYPE_HUEROTATE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA)"); CompiledName("SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA")>]
            member __.SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_278 =


    type FunScript.TypeScript.AnonymousType345 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype267")>]
            member __.prototype with get() : FunScript.TypeScript.SVGFESpotLightElement = failwith "never" and set (v : FunScript.TypeScript.SVGFESpotLightElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create305")>]
            member __.Create() : FunScript.TypeScript.SVGFESpotLightElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create305Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGFESpotLightElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_279 =


    type FunScript.TypeScript.AnonymousType346 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype268")>]
            member __.prototype with get() : FunScript.TypeScript.IDBDatabase = failwith "never" and set (v : FunScript.TypeScript.IDBDatabase) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create306")>]
            member __.Create() : FunScript.TypeScript.IDBDatabase = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create306Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.IDBDatabase>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_280 =


    type FunScript.TypeScript.AnonymousType347 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype269")>]
            member __.prototype with get() : FunScript.TypeScript.DOMStringList = failwith "never" and set (v : FunScript.TypeScript.DOMStringList) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create307")>]
            member __.Create() : FunScript.TypeScript.DOMStringList = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create307Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.DOMStringList>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_281 =


    type FunScript.TypeScript.AnonymousType348 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype270")>]
            member __.prototype with get() : FunScript.TypeScript.IDBOpenDBRequest = failwith "never" and set (v : FunScript.TypeScript.IDBOpenDBRequest) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create308")>]
            member __.Create() : FunScript.TypeScript.IDBOpenDBRequest = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create308Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.IDBOpenDBRequest>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_282 =


    type FunScript.TypeScript.AnonymousType349 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype271")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLProgressElement = failwith "never" and set (v : FunScript.TypeScript.HTMLProgressElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create309")>]
            member __.Create() : FunScript.TypeScript.HTMLProgressElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create309Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLProgressElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_283 =


    type FunScript.TypeScript.AnonymousType35 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype272")>]
            member __.prototype with get() : FunScript.TypeScript.MSEventObj = failwith "never" and set (v : FunScript.TypeScript.MSEventObj) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create310")>]
            member __.Create() : FunScript.TypeScript.MSEventObj = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create310Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MSEventObj>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_284 =


    type FunScript.TypeScript.AnonymousType350 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype273")>]
            member __.prototype with get() : FunScript.TypeScript.SVGFEOffsetElement = failwith "never" and set (v : FunScript.TypeScript.SVGFEOffsetElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create311")>]
            member __.Create() : FunScript.TypeScript.SVGFEOffsetElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create311Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGFEOffsetElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_285 =


    type FunScript.TypeScript.AnonymousType351 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype274")>]
            member __.prototype with get() : FunScript.TypeScript.TextTrack = failwith "never" and set (v : FunScript.TypeScript.TextTrack) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create312")>]
            member __.Create() : FunScript.TypeScript.TextTrack = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create312Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.TextTrack>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ERROR)"); CompiledName("ERROR")>]
            member __.ERROR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SHOWING)"); CompiledName("SHOWING")>]
            member __.SHOWING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LOADING)"); CompiledName("LOADING1")>]
            member __.LOADING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LOADED)"); CompiledName("LOADED")>]
            member __.LOADED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NONE)"); CompiledName("NONE")>]
            member __.NONE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.HIDDEN)"); CompiledName("HIDDEN")>]
            member __.HIDDEN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DISABLED)"); CompiledName("DISABLED")>]
            member __.DISABLED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_286 =


    type FunScript.TypeScript.AnonymousType352 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype275")>]
            member __.prototype with get() : FunScript.TypeScript.IDBRequest = failwith "never" and set (v : FunScript.TypeScript.IDBRequest) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create313")>]
            member __.Create() : FunScript.TypeScript.IDBRequest = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create313Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.IDBRequest>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_287 =


    type FunScript.TypeScript.AnonymousType353 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype276")>]
            member __.prototype with get() : FunScript.TypeScript.MessagePort = failwith "never" and set (v : FunScript.TypeScript.MessagePort) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create314")>]
            member __.Create() : FunScript.TypeScript.MessagePort = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create314Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MessagePort>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_288 =


    type FunScript.TypeScript.AnonymousType354 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype277")>]
            member __.prototype with get() : FunScript.TypeScript.FileReader = failwith "never" and set (v : FunScript.TypeScript.FileReader) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create315")>]
            member __.Create() : FunScript.TypeScript.FileReader = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create315Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.FileReader>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_289 =


    type FunScript.TypeScript.AnonymousType355 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype278")>]
            member __.prototype with get() : FunScript.TypeScript.ApplicationCache = failwith "never" and set (v : FunScript.TypeScript.ApplicationCache) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create316")>]
            member __.Create() : FunScript.TypeScript.ApplicationCache = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create316Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.ApplicationCache>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.CHECKING)"); CompiledName("CHECKING")>]
            member __.CHECKING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.UNCACHED)"); CompiledName("UNCACHED")>]
            member __.UNCACHED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.UPDATEREADY)"); CompiledName("UPDATEREADY")>]
            member __.UPDATEREADY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOWNLOADING)"); CompiledName("DOWNLOADING")>]
            member __.DOWNLOADING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.IDLE)"); CompiledName("IDLE")>]
            member __.IDLE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.OBSOLETE)"); CompiledName("OBSOLETE")>]
            member __.OBSOLETE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_290 =


    type FunScript.TypeScript.AnonymousType356 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype279")>]
            member __.prototype with get() : FunScript.TypeScript.PopStateEvent = failwith "never" and set (v : FunScript.TypeScript.PopStateEvent) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create317")>]
            member __.Create() : FunScript.TypeScript.PopStateEvent = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create317Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.PopStateEvent>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_291 =


    type FunScript.TypeScript.AnonymousType357 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype280")>]
            member __.prototype with get() : FunScript.TypeScript.CSSKeyframeRule = failwith "never" and set (v : FunScript.TypeScript.CSSKeyframeRule) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create318")>]
            member __.Create() : FunScript.TypeScript.CSSKeyframeRule = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create318Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.CSSKeyframeRule>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_292 =


    type FunScript.TypeScript.AnonymousType358 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype281")>]
            member __.prototype with get() : FunScript.TypeScript.MSStream = failwith "never" and set (v : FunScript.TypeScript.MSStream) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create319")>]
            member __.Create() : FunScript.TypeScript.MSStream = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create319Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MSStream>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_293 =


    type FunScript.TypeScript.AnonymousType359 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype282")>]
            member __.prototype with get() : FunScript.TypeScript.MSBlobBuilder = failwith "never" and set (v : FunScript.TypeScript.MSBlobBuilder) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create320")>]
            member __.Create() : FunScript.TypeScript.MSBlobBuilder = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create320Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MSBlobBuilder>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_294 =


    type FunScript.TypeScript.AnonymousType36 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype283")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLCanvasElement = failwith "never" and set (v : FunScript.TypeScript.HTMLCanvasElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create321")>]
            member __.Create() : FunScript.TypeScript.HTMLCanvasElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create321Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLCanvasElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_295 =


    type FunScript.TypeScript.AnonymousType360 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype284")>]
            member __.prototype with get() : FunScript.TypeScript.DOMSettableTokenList = failwith "never" and set (v : FunScript.TypeScript.DOMSettableTokenList) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create322")>]
            member __.Create() : FunScript.TypeScript.DOMSettableTokenList = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create322Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.DOMSettableTokenList>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_296 =


    type FunScript.TypeScript.AnonymousType361 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype285")>]
            member __.prototype with get() : FunScript.TypeScript.IDBFactory = failwith "never" and set (v : FunScript.TypeScript.IDBFactory) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create323")>]
            member __.Create() : FunScript.TypeScript.IDBFactory = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create323Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.IDBFactory>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_297 =


    type FunScript.TypeScript.AnonymousType362 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype286")>]
            member __.prototype with get() : FunScript.TypeScript.MSPointerEvent = failwith "never" and set (v : FunScript.TypeScript.MSPointerEvent) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create324")>]
            member __.Create() : FunScript.TypeScript.MSPointerEvent = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create324Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MSPointerEvent>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MSPOINTER_TYPE_PEN)"); CompiledName("MSPOINTER_TYPE_PEN")>]
            member __.MSPOINTER_TYPE_PEN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MSPOINTER_TYPE_MOUSE)"); CompiledName("MSPOINTER_TYPE_MOUSE")>]
            member __.MSPOINTER_TYPE_MOUSE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MSPOINTER_TYPE_TOUCH)"); CompiledName("MSPOINTER_TYPE_TOUCH")>]
            member __.MSPOINTER_TYPE_TOUCH with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_298 =


    type FunScript.TypeScript.AnonymousType363 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype287")>]
            member __.prototype with get() : FunScript.TypeScript.MSManipulationEvent = failwith "never" and set (v : FunScript.TypeScript.MSManipulationEvent) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create325")>]
            member __.Create() : FunScript.TypeScript.MSManipulationEvent = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create325Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MSManipulationEvent>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MS_MANIPULATION_STATE_STOPPED)"); CompiledName("MS_MANIPULATION_STATE_STOPPED")>]
            member __.MS_MANIPULATION_STATE_STOPPED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MS_MANIPULATION_STATE_ACTIVE)"); CompiledName("MS_MANIPULATION_STATE_ACTIVE")>]
            member __.MS_MANIPULATION_STATE_ACTIVE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MS_MANIPULATION_STATE_INERTIA)"); CompiledName("MS_MANIPULATION_STATE_INERTIA")>]
            member __.MS_MANIPULATION_STATE_INERTIA with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MS_MANIPULATION_STATE_SELECTING)"); CompiledName("MS_MANIPULATION_STATE_SELECTING")>]
            member __.MS_MANIPULATION_STATE_SELECTING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MS_MANIPULATION_STATE_COMMITTED)"); CompiledName("MS_MANIPULATION_STATE_COMMITTED")>]
            member __.MS_MANIPULATION_STATE_COMMITTED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MS_MANIPULATION_STATE_PRESELECT)"); CompiledName("MS_MANIPULATION_STATE_PRESELECT")>]
            member __.MS_MANIPULATION_STATE_PRESELECT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MS_MANIPULATION_STATE_DRAGGING)"); CompiledName("MS_MANIPULATION_STATE_DRAGGING")>]
            member __.MS_MANIPULATION_STATE_DRAGGING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MS_MANIPULATION_STATE_CANCELLED)"); CompiledName("MS_MANIPULATION_STATE_CANCELLED")>]
            member __.MS_MANIPULATION_STATE_CANCELLED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_299 =


    type FunScript.TypeScript.AnonymousType364 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype288")>]
            member __.prototype with get() : FunScript.TypeScript.FormData = failwith "never" and set (v : FunScript.TypeScript.FormData) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create326")>]
            member __.Create() : FunScript.TypeScript.FormData = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create326Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.FormData>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_300 =


    type FunScript.TypeScript.AnonymousType365 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype289")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLDataListElement = failwith "never" and set (v : FunScript.TypeScript.HTMLDataListElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create327")>]
            member __.Create() : FunScript.TypeScript.HTMLDataListElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create327Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLDataListElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_301 =


    type FunScript.TypeScript.AnonymousType366 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype290")>]
            member __.prototype with get() : FunScript.TypeScript.SVGFEImageElement = failwith "never" and set (v : FunScript.TypeScript.SVGFEImageElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create328")>]
            member __.Create() : FunScript.TypeScript.SVGFEImageElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create328Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGFEImageElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_302 =


    type FunScript.TypeScript.AnonymousType367 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype291")>]
            member __.prototype with get() : FunScript.TypeScript.SVGFECompositeElement = failwith "never" and set (v : FunScript.TypeScript.SVGFECompositeElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create329")>]
            member __.Create() : FunScript.TypeScript.SVGFECompositeElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create329Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGFECompositeElement>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FECOMPOSITE_OPERATOR_OUT)"); CompiledName("SVG_FECOMPOSITE_OPERATOR_OUT")>]
            member __.SVG_FECOMPOSITE_OPERATOR_OUT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FECOMPOSITE_OPERATOR_OVER)"); CompiledName("SVG_FECOMPOSITE_OPERATOR_OVER")>]
            member __.SVG_FECOMPOSITE_OPERATOR_OVER with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FECOMPOSITE_OPERATOR_XOR)"); CompiledName("SVG_FECOMPOSITE_OPERATOR_XOR")>]
            member __.SVG_FECOMPOSITE_OPERATOR_XOR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FECOMPOSITE_OPERATOR_ARITHMETIC)"); CompiledName("SVG_FECOMPOSITE_OPERATOR_ARITHMETIC")>]
            member __.SVG_FECOMPOSITE_OPERATOR_ARITHMETIC with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FECOMPOSITE_OPERATOR_UNKNOWN)"); CompiledName("SVG_FECOMPOSITE_OPERATOR_UNKNOWN")>]
            member __.SVG_FECOMPOSITE_OPERATOR_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FECOMPOSITE_OPERATOR_IN)"); CompiledName("SVG_FECOMPOSITE_OPERATOR_IN")>]
            member __.SVG_FECOMPOSITE_OPERATOR_IN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FECOMPOSITE_OPERATOR_ATOP)"); CompiledName("SVG_FECOMPOSITE_OPERATOR_ATOP")>]
            member __.SVG_FECOMPOSITE_OPERATOR_ATOP with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_303 =


    type FunScript.TypeScript.AnonymousType368 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype292")>]
            member __.prototype with get() : FunScript.TypeScript.ValidityState = failwith "never" and set (v : FunScript.TypeScript.ValidityState) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create330")>]
            member __.Create() : FunScript.TypeScript.ValidityState = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create330Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.ValidityState>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_304 =


    type FunScript.TypeScript.AnonymousType369 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype293")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLTrackElement = failwith "never" and set (v : FunScript.TypeScript.HTMLTrackElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create331")>]
            member __.Create() : FunScript.TypeScript.HTMLTrackElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create331Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLTrackElement>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ERROR)"); CompiledName("ERROR1")>]
            member __.ERROR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LOADING)"); CompiledName("LOADING2")>]
            member __.LOADING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LOADED)"); CompiledName("LOADED1")>]
            member __.LOADED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NONE)"); CompiledName("NONE1")>]
            member __.NONE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_305 =


    type FunScript.TypeScript.AnonymousType37 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype294")>]
            member __.prototype with get() : FunScript.TypeScript.Window = failwith "never" and set (v : FunScript.TypeScript.Window) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create332")>]
            member __.Create() : FunScript.TypeScript.Window = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create332Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.Window>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_306 =


    type FunScript.TypeScript.AnonymousType370 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype295")>]
            member __.prototype with get() : FunScript.TypeScript.SVGFEComponentTransferElement = failwith "never" and set (v : FunScript.TypeScript.SVGFEComponentTransferElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create333")>]
            member __.Create() : FunScript.TypeScript.SVGFEComponentTransferElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create333Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGFEComponentTransferElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_307 =


    type FunScript.TypeScript.AnonymousType371 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype296")>]
            member __.prototype with get() : FunScript.TypeScript.SVGFEDiffuseLightingElement = failwith "never" and set (v : FunScript.TypeScript.SVGFEDiffuseLightingElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create334")>]
            member __.Create() : FunScript.TypeScript.SVGFEDiffuseLightingElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create334Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGFEDiffuseLightingElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_308 =


    type FunScript.TypeScript.AnonymousType372 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype297")>]
            member __.prototype with get() : FunScript.TypeScript.MSCSSMatrix = failwith "never" and set (v : FunScript.TypeScript.MSCSSMatrix) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({?1}))"); CompiledName("Create335")>]
            member __.Create(?text : string) : FunScript.TypeScript.MSCSSMatrix = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create335Aux")>]
            member __.``Create <-``(func : System.Func<string, FunScript.TypeScript.MSCSSMatrix>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_309 =


    type FunScript.TypeScript.AnonymousType373 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype298")>]
            member __.prototype with get() : FunScript.TypeScript.Worker = failwith "never" and set (v : FunScript.TypeScript.Worker) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}))"); CompiledName("Create336")>]
            member __.Create(stringUrl : string) : FunScript.TypeScript.Worker = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create336Aux")>]
            member __.``Create <-``(func : System.Func<string, FunScript.TypeScript.Worker>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_310 =


    type FunScript.TypeScript.AnonymousType374 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype299")>]
            member __.prototype with get() : FunScript.TypeScript.MSGraphicsTrust = failwith "never" and set (v : FunScript.TypeScript.MSGraphicsTrust) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create337")>]
            member __.Create() : FunScript.TypeScript.MSGraphicsTrust = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create337Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MSGraphicsTrust>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_311 =


    type FunScript.TypeScript.AnonymousType375 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype300")>]
            member __.prototype with get() : FunScript.TypeScript.SubtleCrypto = failwith "never" and set (v : FunScript.TypeScript.SubtleCrypto) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create338")>]
            member __.Create() : FunScript.TypeScript.SubtleCrypto = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create338Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SubtleCrypto>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_312 =


    type FunScript.TypeScript.AnonymousType376 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype301")>]
            member __.prototype with get() : FunScript.TypeScript.Crypto = failwith "never" and set (v : FunScript.TypeScript.Crypto) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create339")>]
            member __.Create() : FunScript.TypeScript.Crypto = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create339Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.Crypto>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_313 =


    type FunScript.TypeScript.AnonymousType377 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype302")>]
            member __.prototype with get() : FunScript.TypeScript.VideoPlaybackQuality = failwith "never" and set (v : FunScript.TypeScript.VideoPlaybackQuality) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create340")>]
            member __.Create() : FunScript.TypeScript.VideoPlaybackQuality = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create340Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.VideoPlaybackQuality>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_314 =


    type FunScript.TypeScript.AnonymousType378 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype303")>]
            member __.prototype with get() : FunScript.TypeScript.Key = failwith "never" and set (v : FunScript.TypeScript.Key) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create341")>]
            member __.Create() : FunScript.TypeScript.Key = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create341Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.Key>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_315 =


    type FunScript.TypeScript.AnonymousType379 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype304")>]
            member __.prototype with get() : FunScript.TypeScript.DeviceAcceleration = failwith "never" and set (v : FunScript.TypeScript.DeviceAcceleration) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create342")>]
            member __.Create() : FunScript.TypeScript.DeviceAcceleration = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create342Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.DeviceAcceleration>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_316 =


    type FunScript.TypeScript.AnonymousType38 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype305")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLCollection = failwith "never" and set (v : FunScript.TypeScript.HTMLCollection) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create343")>]
            member __.Create() : FunScript.TypeScript.HTMLCollection = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create343Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLCollection>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_317 =


    type FunScript.TypeScript.AnonymousType380 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype306")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLAllCollection = failwith "never" and set (v : FunScript.TypeScript.HTMLAllCollection) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create344")>]
            member __.Create() : FunScript.TypeScript.HTMLAllCollection = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create344Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLAllCollection>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_318 =


    type FunScript.TypeScript.AnonymousType381 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype307")>]
            member __.prototype with get() : FunScript.TypeScript.AesGcmEncryptResult = failwith "never" and set (v : FunScript.TypeScript.AesGcmEncryptResult) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create345")>]
            member __.Create() : FunScript.TypeScript.AesGcmEncryptResult = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create345Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.AesGcmEncryptResult>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_319 =


    type FunScript.TypeScript.AnonymousType382 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype308")>]
            member __.prototype with get() : FunScript.TypeScript.NavigationCompletedEvent = failwith "never" and set (v : FunScript.TypeScript.NavigationCompletedEvent) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create346")>]
            member __.Create() : FunScript.TypeScript.NavigationCompletedEvent = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create346Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.NavigationCompletedEvent>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_320 =


    type FunScript.TypeScript.AnonymousType383 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype309")>]
            member __.prototype with get() : FunScript.TypeScript.MutationRecord = failwith "never" and set (v : FunScript.TypeScript.MutationRecord) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create347")>]
            member __.Create() : FunScript.TypeScript.MutationRecord = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create347Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MutationRecord>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_321 =


    type FunScript.TypeScript.AnonymousType384 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype310")>]
            member __.prototype with get() : FunScript.TypeScript.MimeTypeArray = failwith "never" and set (v : FunScript.TypeScript.MimeTypeArray) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create348")>]
            member __.Create() : FunScript.TypeScript.MimeTypeArray = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create348Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MimeTypeArray>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_322 =


    type FunScript.TypeScript.AnonymousType385 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype311")>]
            member __.prototype with get() : FunScript.TypeScript.KeyOperation = failwith "never" and set (v : FunScript.TypeScript.KeyOperation) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create349")>]
            member __.Create() : FunScript.TypeScript.KeyOperation = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create349Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.KeyOperation>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_323 =


    type FunScript.TypeScript.AnonymousType386 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype312")>]
            member __.prototype with get() : FunScript.TypeScript.DOMStringMap = failwith "never" and set (v : FunScript.TypeScript.DOMStringMap) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create350")>]
            member __.Create() : FunScript.TypeScript.DOMStringMap = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create350Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.DOMStringMap>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_324 =


    type FunScript.TypeScript.AnonymousType387 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype313")>]
            member __.prototype with get() : FunScript.TypeScript.DeviceOrientationEvent = failwith "never" and set (v : FunScript.TypeScript.DeviceOrientationEvent) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create351")>]
            member __.Create() : FunScript.TypeScript.DeviceOrientationEvent = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create351Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.DeviceOrientationEvent>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_325 =


    type FunScript.TypeScript.AnonymousType388 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype314")>]
            member __.prototype with get() : FunScript.TypeScript.MSMediaKeys = failwith "never" and set (v : FunScript.TypeScript.MSMediaKeys) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}))"); CompiledName("Create352")>]
            member __.Create(keySystem : string) : FunScript.TypeScript.MSMediaKeys = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create352Aux")>]
            member __.``Create <-``(func : System.Func<string, FunScript.TypeScript.MSMediaKeys>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.isTypeSupported({1}, {?2}))"); CompiledName("isTypeSupported")>]
            member __.isTypeSupported(keySystem : string, ?_type : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.isTypeSupported = {1})"); CompiledName("isTypeSupportedAux")>]
            member __.``isTypeSupported <-``(func : System.Func<string, string, bool>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_326 =


    type FunScript.TypeScript.AnonymousType389 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype315")>]
            member __.prototype with get() : FunScript.TypeScript.MSMediaKeyMessageEvent = failwith "never" and set (v : FunScript.TypeScript.MSMediaKeyMessageEvent) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create353")>]
            member __.Create() : FunScript.TypeScript.MSMediaKeyMessageEvent = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create353Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MSMediaKeyMessageEvent>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_327 =


    type FunScript.TypeScript.AnonymousType39 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype316")>]
            member __.prototype with get() : FunScript.TypeScript.Blob = failwith "never" and set (v : FunScript.TypeScript.Blob) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({?1}, {?2}))"); CompiledName("Create354")>]
            member __.Create(?blobParts : array<obj>, ?options : FunScript.TypeScript.BlobPropertyBag) : FunScript.TypeScript.Blob = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create354Aux")>]
            member __.``Create <-``(func : System.Func<array<obj>, FunScript.TypeScript.BlobPropertyBag, FunScript.TypeScript.Blob>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_328 =


    type FunScript.TypeScript.AnonymousType390 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype317")>]
            member __.prototype with get() : FunScript.TypeScript.MSHTMLWebViewElement = failwith "never" and set (v : FunScript.TypeScript.MSHTMLWebViewElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create355")>]
            member __.Create() : FunScript.TypeScript.MSHTMLWebViewElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create355Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MSHTMLWebViewElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_329 =


    type FunScript.TypeScript.AnonymousType391 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype318")>]
            member __.prototype with get() : FunScript.TypeScript.NavigationEvent = failwith "never" and set (v : FunScript.TypeScript.NavigationEvent) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create356")>]
            member __.Create() : FunScript.TypeScript.NavigationEvent = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create356Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.NavigationEvent>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_330 =


    type FunScript.TypeScript.AnonymousType392 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype319")>]
            member __.prototype with get() : FunScript.TypeScript.SourceBuffer = failwith "never" and set (v : FunScript.TypeScript.SourceBuffer) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create357")>]
            member __.Create() : FunScript.TypeScript.SourceBuffer = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create357Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SourceBuffer>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_331 =


    type FunScript.TypeScript.AnonymousType393 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype320")>]
            member __.prototype with get() : FunScript.TypeScript.MSInputMethodContext = failwith "never" and set (v : FunScript.TypeScript.MSInputMethodContext) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create358")>]
            member __.Create() : FunScript.TypeScript.MSInputMethodContext = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create358Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MSInputMethodContext>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_332 =


    type FunScript.TypeScript.AnonymousType394 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype321")>]
            member __.prototype with get() : FunScript.TypeScript.DeviceRotationRate = failwith "never" and set (v : FunScript.TypeScript.DeviceRotationRate) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create359")>]
            member __.Create() : FunScript.TypeScript.DeviceRotationRate = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create359Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.DeviceRotationRate>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_333 =


    type FunScript.TypeScript.AnonymousType395 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype322")>]
            member __.prototype with get() : FunScript.TypeScript.PluginArray = failwith "never" and set (v : FunScript.TypeScript.PluginArray) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create360")>]
            member __.Create() : FunScript.TypeScript.PluginArray = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create360Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.PluginArray>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_334 =


    type FunScript.TypeScript.AnonymousType396 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype323")>]
            member __.prototype with get() : FunScript.TypeScript.MSMediaKeyError = failwith "never" and set (v : FunScript.TypeScript.MSMediaKeyError) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create361")>]
            member __.Create() : FunScript.TypeScript.MSMediaKeyError = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create361Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MSMediaKeyError>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MS_MEDIA_KEYERR_SERVICE)"); CompiledName("MS_MEDIA_KEYERR_SERVICE")>]
            member __.MS_MEDIA_KEYERR_SERVICE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MS_MEDIA_KEYERR_HARDWARECHANGE)"); CompiledName("MS_MEDIA_KEYERR_HARDWARECHANGE")>]
            member __.MS_MEDIA_KEYERR_HARDWARECHANGE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MS_MEDIA_KEYERR_OUTPUT)"); CompiledName("MS_MEDIA_KEYERR_OUTPUT")>]
            member __.MS_MEDIA_KEYERR_OUTPUT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MS_MEDIA_KEYERR_DOMAIN)"); CompiledName("MS_MEDIA_KEYERR_DOMAIN")>]
            member __.MS_MEDIA_KEYERR_DOMAIN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MS_MEDIA_KEYERR_UNKNOWN)"); CompiledName("MS_MEDIA_KEYERR_UNKNOWN")>]
            member __.MS_MEDIA_KEYERR_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MS_MEDIA_KEYERR_CLIENT)"); CompiledName("MS_MEDIA_KEYERR_CLIENT")>]
            member __.MS_MEDIA_KEYERR_CLIENT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_335 =


    type FunScript.TypeScript.AnonymousType397 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype324")>]
            member __.prototype with get() : FunScript.TypeScript.Plugin = failwith "never" and set (v : FunScript.TypeScript.Plugin) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create362")>]
            member __.Create() : FunScript.TypeScript.Plugin = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create362Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.Plugin>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_336 =


    type FunScript.TypeScript.AnonymousType398 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype325")>]
            member __.prototype with get() : FunScript.TypeScript.MediaSource = failwith "never" and set (v : FunScript.TypeScript.MediaSource) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create363")>]
            member __.Create() : FunScript.TypeScript.MediaSource = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create363Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MediaSource>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.isTypeSupported({1}))"); CompiledName("isTypeSupported1")>]
            member __.isTypeSupported(_type : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.isTypeSupported = {1})"); CompiledName("isTypeSupported1Aux")>]
            member __.``isTypeSupported <-``(func : System.Func<string, bool>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_337 =


    type FunScript.TypeScript.AnonymousType399 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype326")>]
            member __.prototype with get() : FunScript.TypeScript.SourceBufferList = failwith "never" and set (v : FunScript.TypeScript.SourceBufferList) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create364")>]
            member __.Create() : FunScript.TypeScript.SourceBufferList = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create364Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SourceBufferList>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_338 =


    type FunScript.TypeScript.AnonymousType4 with 

            [<FunScript.JSEmitInline("(new {0}({?1}))"); CompiledName("Create365")>]
            member __.Create(?value : obj) : FunScript.TypeScript.Boolean = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create365Aux")>]
            member __.``Create <-``(func : System.Func<obj, FunScript.TypeScript.Boolean>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}({?1}))"); CompiledName("Invoke20")>]
            member __.Invoke(?value : obj) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0} = {1})"); CompiledName("Invoke20Aux")>]
            member __.``Invoke <-``(func : System.Func<obj, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype327")>]
            member __.prototype with get() : FunScript.TypeScript.Boolean = failwith "never" and set (v : FunScript.TypeScript.Boolean) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_339 =


    type FunScript.TypeScript.AnonymousType40 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype328")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLTableElement = failwith "never" and set (v : FunScript.TypeScript.HTMLTableElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create366")>]
            member __.Create() : FunScript.TypeScript.HTMLTableElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create366Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLTableElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_340 =


    type FunScript.TypeScript.AnonymousType400 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype329")>]
            member __.prototype with get() : FunScript.TypeScript.XMLDocument = failwith "never" and set (v : FunScript.TypeScript.XMLDocument) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create367")>]
            member __.Create() : FunScript.TypeScript.XMLDocument = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create367Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.XMLDocument>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_341 =


    type FunScript.TypeScript.AnonymousType401 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype330")>]
            member __.prototype with get() : FunScript.TypeScript.DeviceMotionEvent = failwith "never" and set (v : FunScript.TypeScript.DeviceMotionEvent) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create368")>]
            member __.Create() : FunScript.TypeScript.DeviceMotionEvent = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create368Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.DeviceMotionEvent>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_342 =


    type FunScript.TypeScript.AnonymousType402 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype331")>]
            member __.prototype with get() : FunScript.TypeScript.MimeType = failwith "never" and set (v : FunScript.TypeScript.MimeType) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create369")>]
            member __.Create() : FunScript.TypeScript.MimeType = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create369Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MimeType>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_343 =


    type FunScript.TypeScript.AnonymousType403 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype332")>]
            member __.prototype with get() : FunScript.TypeScript.PointerEvent = failwith "never" and set (v : FunScript.TypeScript.PointerEvent) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create370")>]
            member __.Create() : FunScript.TypeScript.PointerEvent = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create370Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.PointerEvent>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_344 =


    type FunScript.TypeScript.AnonymousType404 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype333")>]
            member __.prototype with get() : FunScript.TypeScript.MutationObserver = failwith "never" and set (v : FunScript.TypeScript.MutationObserver) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}))"); CompiledName("Create371")>]
            member __.Create(callback : System.Func<array<FunScript.TypeScript.MutationRecord>, FunScript.TypeScript.MutationObserver, obj>) : FunScript.TypeScript.MutationObserver = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create371Aux")>]
            member __.``Create <-``(func : System.Func<System.Func<array<FunScript.TypeScript.MutationRecord>, FunScript.TypeScript.MutationObserver, obj>, FunScript.TypeScript.MutationObserver>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_345 =


    type FunScript.TypeScript.AnonymousType405 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype334")>]
            member __.prototype with get() : FunScript.TypeScript.MSWebViewAsyncOperation = failwith "never" and set (v : FunScript.TypeScript.MSWebViewAsyncOperation) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create372")>]
            member __.Create() : FunScript.TypeScript.MSWebViewAsyncOperation = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create372Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MSWebViewAsyncOperation>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ERROR)"); CompiledName("ERROR2")>]
            member __.ERROR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TYPE_CREATE_DATA_PACKAGE_FROM_SELECTION)"); CompiledName("TYPE_CREATE_DATA_PACKAGE_FROM_SELECTION")>]
            member __.TYPE_CREATE_DATA_PACKAGE_FROM_SELECTION with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TYPE_INVOKE_SCRIPT)"); CompiledName("TYPE_INVOKE_SCRIPT")>]
            member __.TYPE_INVOKE_SCRIPT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.COMPLETED)"); CompiledName("COMPLETED")>]
            member __.COMPLETED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TYPE_CAPTURE_PREVIEW_TO_RANDOM_ACCESS_STREAM)"); CompiledName("TYPE_CAPTURE_PREVIEW_TO_RANDOM_ACCESS_STREAM")>]
            member __.TYPE_CAPTURE_PREVIEW_TO_RANDOM_ACCESS_STREAM with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STARTED)"); CompiledName("STARTED")>]
            member __.STARTED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_346 =


    type FunScript.TypeScript.AnonymousType406 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype335")>]
            member __.prototype with get() : FunScript.TypeScript.ScriptNotifyEvent = failwith "never" and set (v : FunScript.TypeScript.ScriptNotifyEvent) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create373")>]
            member __.Create() : FunScript.TypeScript.ScriptNotifyEvent = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create373Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.ScriptNotifyEvent>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_347 =


    type FunScript.TypeScript.AnonymousType407 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype336")>]
            member __.prototype with get() : FunScript.TypeScript.PerformanceNavigationTiming = failwith "never" and set (v : FunScript.TypeScript.PerformanceNavigationTiming) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create374")>]
            member __.Create() : FunScript.TypeScript.PerformanceNavigationTiming = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create374Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.PerformanceNavigationTiming>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_348 =


    type FunScript.TypeScript.AnonymousType408 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype337")>]
            member __.prototype with get() : FunScript.TypeScript.MSMediaKeyNeededEvent = failwith "never" and set (v : FunScript.TypeScript.MSMediaKeyNeededEvent) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create375")>]
            member __.Create() : FunScript.TypeScript.MSMediaKeyNeededEvent = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create375Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MSMediaKeyNeededEvent>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_349 =


    type FunScript.TypeScript.AnonymousType409 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype338")>]
            member __.prototype with get() : FunScript.TypeScript.LongRunningScriptDetectedEvent = failwith "never" and set (v : FunScript.TypeScript.LongRunningScriptDetectedEvent) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create376")>]
            member __.Create() : FunScript.TypeScript.LongRunningScriptDetectedEvent = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create376Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.LongRunningScriptDetectedEvent>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_350 =


    type FunScript.TypeScript.AnonymousType41 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype339")>]
            member __.prototype with get() : FunScript.TypeScript.TreeWalker = failwith "never" and set (v : FunScript.TypeScript.TreeWalker) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create377")>]
            member __.Create() : FunScript.TypeScript.TreeWalker = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create377Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.TreeWalker>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_351 =


    type FunScript.TypeScript.AnonymousType410 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype340")>]
            member __.prototype with get() : FunScript.TypeScript.MSAppView = failwith "never" and set (v : FunScript.TypeScript.MSAppView) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create378")>]
            member __.Create() : FunScript.TypeScript.MSAppView = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create378Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MSAppView>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_352 =


    type FunScript.TypeScript.AnonymousType411 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype341")>]
            member __.prototype with get() : FunScript.TypeScript.PerfWidgetExternal = failwith "never" and set (v : FunScript.TypeScript.PerfWidgetExternal) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create379")>]
            member __.Create() : FunScript.TypeScript.PerfWidgetExternal = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create379Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.PerfWidgetExternal>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_353 =


    type FunScript.TypeScript.AnonymousType412 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype342")>]
            member __.prototype with get() : FunScript.TypeScript.PageTransitionEvent = failwith "never" and set (v : FunScript.TypeScript.PageTransitionEvent) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create380")>]
            member __.Create() : FunScript.TypeScript.PageTransitionEvent = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create380Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.PageTransitionEvent>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_354 =


    type FunScript.TypeScript.AnonymousType413 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype343")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLDocument = failwith "never" and set (v : FunScript.TypeScript.HTMLDocument) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create381")>]
            member __.Create() : FunScript.TypeScript.HTMLDocument = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create381Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLDocument>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_355 =


    type FunScript.TypeScript.AnonymousType414 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype344")>]
            member __.prototype with get() : FunScript.TypeScript.KeyPair = failwith "never" and set (v : FunScript.TypeScript.KeyPair) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create382")>]
            member __.Create() : FunScript.TypeScript.KeyPair = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create382Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.KeyPair>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_356 =


    type FunScript.TypeScript.AnonymousType415 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype345")>]
            member __.prototype with get() : FunScript.TypeScript.MSMediaKeySession = failwith "never" and set (v : FunScript.TypeScript.MSMediaKeySession) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create383")>]
            member __.Create() : FunScript.TypeScript.MSMediaKeySession = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create383Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MSMediaKeySession>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_357 =


    type FunScript.TypeScript.AnonymousType416 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype346")>]
            member __.prototype with get() : FunScript.TypeScript.UnviewableContentIdentifiedEvent = failwith "never" and set (v : FunScript.TypeScript.UnviewableContentIdentifiedEvent) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create384")>]
            member __.Create() : FunScript.TypeScript.UnviewableContentIdentifiedEvent = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create384Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.UnviewableContentIdentifiedEvent>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_358 =


    type FunScript.TypeScript.AnonymousType417 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype347")>]
            member __.prototype with get() : FunScript.TypeScript.CryptoOperation = failwith "never" and set (v : FunScript.TypeScript.CryptoOperation) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create385")>]
            member __.Create() : FunScript.TypeScript.CryptoOperation = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create385Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.CryptoOperation>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_359 =


    type FunScript.TypeScript.AnonymousType418 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype348")>]
            member __.prototype with get() : FunScript.TypeScript.WebGLTexture = failwith "never" and set (v : FunScript.TypeScript.WebGLTexture) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create386")>]
            member __.Create() : FunScript.TypeScript.WebGLTexture = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create386Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.WebGLTexture>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_360 =


    type FunScript.TypeScript.AnonymousType419 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype349")>]
            member __.prototype with get() : FunScript.TypeScript.OES_texture_float = failwith "never" and set (v : FunScript.TypeScript.OES_texture_float) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create387")>]
            member __.Create() : FunScript.TypeScript.OES_texture_float = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create387Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.OES_texture_float>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_361 =


    type FunScript.TypeScript.AnonymousType42 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype350")>]
            member __.prototype with get() : FunScript.TypeScript.SVGPathSegCurvetoQuadraticRel = failwith "never" and set (v : FunScript.TypeScript.SVGPathSegCurvetoQuadraticRel) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create388")>]
            member __.Create() : FunScript.TypeScript.SVGPathSegCurvetoQuadraticRel = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create388Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGPathSegCurvetoQuadraticRel>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_362 =


    type FunScript.TypeScript.AnonymousType420 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype351")>]
            member __.prototype with get() : FunScript.TypeScript.WebGLContextEvent = failwith "never" and set (v : FunScript.TypeScript.WebGLContextEvent) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create389")>]
            member __.Create() : FunScript.TypeScript.WebGLContextEvent = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create389Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.WebGLContextEvent>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_363 =


    type FunScript.TypeScript.AnonymousType421 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype352")>]
            member __.prototype with get() : FunScript.TypeScript.WebGLRenderbuffer = failwith "never" and set (v : FunScript.TypeScript.WebGLRenderbuffer) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create390")>]
            member __.Create() : FunScript.TypeScript.WebGLRenderbuffer = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create390Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.WebGLRenderbuffer>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_364 =


    type FunScript.TypeScript.AnonymousType422 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype353")>]
            member __.prototype with get() : FunScript.TypeScript.WebGLUniformLocation = failwith "never" and set (v : FunScript.TypeScript.WebGLUniformLocation) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create391")>]
            member __.Create() : FunScript.TypeScript.WebGLUniformLocation = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create391Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.WebGLUniformLocation>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_365 =


    type FunScript.TypeScript.AnonymousType423 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype354")>]
            member __.prototype with get() : FunScript.TypeScript.WebGLActiveInfo = failwith "never" and set (v : FunScript.TypeScript.WebGLActiveInfo) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create392")>]
            member __.Create() : FunScript.TypeScript.WebGLActiveInfo = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create392Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.WebGLActiveInfo>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_366 =


    type FunScript.TypeScript.AnonymousType424 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype355")>]
            member __.prototype with get() : FunScript.TypeScript.WEBGL_compressed_texture_s3tc = failwith "never" and set (v : FunScript.TypeScript.WEBGL_compressed_texture_s3tc) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create393")>]
            member __.Create() : FunScript.TypeScript.WEBGL_compressed_texture_s3tc = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create393Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.WEBGL_compressed_texture_s3tc>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.COMPRESSED_RGBA_S3TC_DXT1_EXT)"); CompiledName("COMPRESSED_RGBA_S3TC_DXT1_EXT")>]
            member __.COMPRESSED_RGBA_S3TC_DXT1_EXT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.COMPRESSED_RGBA_S3TC_DXT5_EXT)"); CompiledName("COMPRESSED_RGBA_S3TC_DXT5_EXT")>]
            member __.COMPRESSED_RGBA_S3TC_DXT5_EXT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.COMPRESSED_RGBA_S3TC_DXT3_EXT)"); CompiledName("COMPRESSED_RGBA_S3TC_DXT3_EXT")>]
            member __.COMPRESSED_RGBA_S3TC_DXT3_EXT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.COMPRESSED_RGB_S3TC_DXT1_EXT)"); CompiledName("COMPRESSED_RGB_S3TC_DXT1_EXT")>]
            member __.COMPRESSED_RGB_S3TC_DXT1_EXT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_367 =


    type FunScript.TypeScript.AnonymousType425 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype356")>]
            member __.prototype with get() : FunScript.TypeScript.WebGLRenderingContext = failwith "never" and set (v : FunScript.TypeScript.WebGLRenderingContext) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create394")>]
            member __.Create() : FunScript.TypeScript.WebGLRenderingContext = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create394Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.WebGLRenderingContext>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DEPTH_FUNC)"); CompiledName("DEPTH_FUNC")>]
            member __.DEPTH_FUNC with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DEPTH_COMPONENT16)"); CompiledName("DEPTH_COMPONENT16")>]
            member __.DEPTH_COMPONENT16 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.REPLACE)"); CompiledName("REPLACE")>]
            member __.REPLACE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.REPEAT)"); CompiledName("REPEAT")>]
            member __.REPEAT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.VERTEX_ATTRIB_ARRAY_ENABLED)"); CompiledName("VERTEX_ATTRIB_ARRAY_ENABLED")>]
            member __.VERTEX_ATTRIB_ARRAY_ENABLED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FRAMEBUFFER_INCOMPLETE_DIMENSIONS)"); CompiledName("FRAMEBUFFER_INCOMPLETE_DIMENSIONS")>]
            member __.FRAMEBUFFER_INCOMPLETE_DIMENSIONS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_BUFFER_BIT)"); CompiledName("STENCIL_BUFFER_BIT")>]
            member __.STENCIL_BUFFER_BIT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.RENDERER)"); CompiledName("RENDERER")>]
            member __.RENDERER with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_BACK_REF)"); CompiledName("STENCIL_BACK_REF")>]
            member __.STENCIL_BACK_REF with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE26)"); CompiledName("TEXTURE26")>]
            member __.TEXTURE26 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.RGB565)"); CompiledName("RGB565")>]
            member __.RGB565 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DITHER)"); CompiledName("DITHER")>]
            member __.DITHER with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.CONSTANT_COLOR)"); CompiledName("CONSTANT_COLOR")>]
            member __.CONSTANT_COLOR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.GENERATE_MIPMAP_HINT)"); CompiledName("GENERATE_MIPMAP_HINT")>]
            member __.GENERATE_MIPMAP_HINT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.POINTS)"); CompiledName("POINTS")>]
            member __.POINTS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DECR)"); CompiledName("DECR")>]
            member __.DECR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.INT_VEC3)"); CompiledName("INT_VEC3")>]
            member __.INT_VEC3 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE28)"); CompiledName("TEXTURE28")>]
            member __.TEXTURE28 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ONE_MINUS_CONSTANT_ALPHA)"); CompiledName("ONE_MINUS_CONSTANT_ALPHA")>]
            member __.ONE_MINUS_CONSTANT_ALPHA with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BACK)"); CompiledName("BACK")>]
            member __.BACK with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.RENDERBUFFER_STENCIL_SIZE)"); CompiledName("RENDERBUFFER_STENCIL_SIZE")>]
            member __.RENDERBUFFER_STENCIL_SIZE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.UNPACK_FLIP_Y_WEBGL)"); CompiledName("UNPACK_FLIP_Y_WEBGL")>]
            member __.UNPACK_FLIP_Y_WEBGL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BLEND)"); CompiledName("BLEND")>]
            member __.BLEND with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE9)"); CompiledName("TEXTURE9")>]
            member __.TEXTURE9 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ARRAY_BUFFER_BINDING)"); CompiledName("ARRAY_BUFFER_BINDING")>]
            member __.ARRAY_BUFFER_BINDING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MAX_VIEWPORT_DIMS)"); CompiledName("MAX_VIEWPORT_DIMS")>]
            member __.MAX_VIEWPORT_DIMS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.INVALID_FRAMEBUFFER_OPERATION)"); CompiledName("INVALID_FRAMEBUFFER_OPERATION")>]
            member __.INVALID_FRAMEBUFFER_OPERATION with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE)"); CompiledName("TEXTURE")>]
            member __.TEXTURE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE0)"); CompiledName("TEXTURE0")>]
            member __.TEXTURE0 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE31)"); CompiledName("TEXTURE31")>]
            member __.TEXTURE31 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE24)"); CompiledName("TEXTURE24")>]
            member __.TEXTURE24 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.HIGH_INT)"); CompiledName("HIGH_INT")>]
            member __.HIGH_INT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.RENDERBUFFER_BINDING)"); CompiledName("RENDERBUFFER_BINDING")>]
            member __.RENDERBUFFER_BINDING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BLEND_COLOR)"); CompiledName("BLEND_COLOR")>]
            member __.BLEND_COLOR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FASTEST)"); CompiledName("FASTEST")>]
            member __.FASTEST with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_WRITEMASK)"); CompiledName("STENCIL_WRITEMASK")>]
            member __.STENCIL_WRITEMASK with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ALIASED_POINT_SIZE_RANGE)"); CompiledName("ALIASED_POINT_SIZE_RANGE")>]
            member __.ALIASED_POINT_SIZE_RANGE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE12)"); CompiledName("TEXTURE12")>]
            member __.TEXTURE12 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DST_ALPHA)"); CompiledName("DST_ALPHA")>]
            member __.DST_ALPHA with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BLEND_EQUATION_RGB)"); CompiledName("BLEND_EQUATION_RGB")>]
            member __.BLEND_EQUATION_RGB with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FRAMEBUFFER_COMPLETE)"); CompiledName("FRAMEBUFFER_COMPLETE")>]
            member __.FRAMEBUFFER_COMPLETE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NEAREST_MIPMAP_NEAREST)"); CompiledName("NEAREST_MIPMAP_NEAREST")>]
            member __.NEAREST_MIPMAP_NEAREST with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.VERTEX_ATTRIB_ARRAY_SIZE)"); CompiledName("VERTEX_ATTRIB_ARRAY_SIZE")>]
            member __.VERTEX_ATTRIB_ARRAY_SIZE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE3)"); CompiledName("TEXTURE3")>]
            member __.TEXTURE3 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DEPTH_WRITEMASK)"); CompiledName("DEPTH_WRITEMASK")>]
            member __.DEPTH_WRITEMASK with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.CONTEXT_LOST_WEBGL)"); CompiledName("CONTEXT_LOST_WEBGL")>]
            member __.CONTEXT_LOST_WEBGL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.INVALID_VALUE)"); CompiledName("INVALID_VALUE")>]
            member __.INVALID_VALUE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE_MAG_FILTER)"); CompiledName("TEXTURE_MAG_FILTER")>]
            member __.TEXTURE_MAG_FILTER with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ONE_MINUS_CONSTANT_COLOR)"); CompiledName("ONE_MINUS_CONSTANT_COLOR")>]
            member __.ONE_MINUS_CONSTANT_COLOR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ONE_MINUS_SRC_ALPHA)"); CompiledName("ONE_MINUS_SRC_ALPHA")>]
            member __.ONE_MINUS_SRC_ALPHA with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE_CUBE_MAP_POSITIVE_Z)"); CompiledName("TEXTURE_CUBE_MAP_POSITIVE_Z")>]
            member __.TEXTURE_CUBE_MAP_POSITIVE_Z with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NOTEQUAL)"); CompiledName("NOTEQUAL")>]
            member __.NOTEQUAL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ALPHA)"); CompiledName("ALPHA")>]
            member __.ALPHA with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DEPTH_STENCIL)"); CompiledName("DEPTH_STENCIL")>]
            member __.DEPTH_STENCIL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MAX_VERTEX_UNIFORM_VECTORS)"); CompiledName("MAX_VERTEX_UNIFORM_VECTORS")>]
            member __.MAX_VERTEX_UNIFORM_VECTORS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DEPTH_COMPONENT)"); CompiledName("DEPTH_COMPONENT")>]
            member __.DEPTH_COMPONENT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.RENDERBUFFER_RED_SIZE)"); CompiledName("RENDERBUFFER_RED_SIZE")>]
            member __.RENDERBUFFER_RED_SIZE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE20)"); CompiledName("TEXTURE20")>]
            member __.TEXTURE20 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.RED_BITS)"); CompiledName("RED_BITS")>]
            member __.RED_BITS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.RENDERBUFFER_BLUE_SIZE)"); CompiledName("RENDERBUFFER_BLUE_SIZE")>]
            member __.RENDERBUFFER_BLUE_SIZE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SCISSOR_BOX)"); CompiledName("SCISSOR_BOX")>]
            member __.SCISSOR_BOX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.VENDOR)"); CompiledName("VENDOR")>]
            member __.VENDOR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FRONT_AND_BACK)"); CompiledName("FRONT_AND_BACK")>]
            member __.FRONT_AND_BACK with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.CONSTANT_ALPHA)"); CompiledName("CONSTANT_ALPHA")>]
            member __.CONSTANT_ALPHA with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING)"); CompiledName("VERTEX_ATTRIB_ARRAY_BUFFER_BINDING")>]
            member __.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NEAREST)"); CompiledName("NEAREST")>]
            member __.NEAREST with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.CULL_FACE)"); CompiledName("CULL_FACE")>]
            member __.CULL_FACE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ALIASED_LINE_WIDTH_RANGE)"); CompiledName("ALIASED_LINE_WIDTH_RANGE")>]
            member __.ALIASED_LINE_WIDTH_RANGE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE19)"); CompiledName("TEXTURE19")>]
            member __.TEXTURE19 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FRONT)"); CompiledName("FRONT")>]
            member __.FRONT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DEPTH_CLEAR_VALUE)"); CompiledName("DEPTH_CLEAR_VALUE")>]
            member __.DEPTH_CLEAR_VALUE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.GREEN_BITS)"); CompiledName("GREEN_BITS")>]
            member __.GREEN_BITS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE29)"); CompiledName("TEXTURE29")>]
            member __.TEXTURE29 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE23)"); CompiledName("TEXTURE23")>]
            member __.TEXTURE23 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MAX_RENDERBUFFER_SIZE)"); CompiledName("MAX_RENDERBUFFER_SIZE")>]
            member __.MAX_RENDERBUFFER_SIZE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_ATTACHMENT)"); CompiledName("STENCIL_ATTACHMENT")>]
            member __.STENCIL_ATTACHMENT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE27)"); CompiledName("TEXTURE27")>]
            member __.TEXTURE27 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BOOL_VEC2)"); CompiledName("BOOL_VEC2")>]
            member __.BOOL_VEC2 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.OUT_OF_MEMORY)"); CompiledName("OUT_OF_MEMORY")>]
            member __.OUT_OF_MEMORY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MIRRORED_REPEAT)"); CompiledName("MIRRORED_REPEAT")>]
            member __.MIRRORED_REPEAT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.POLYGON_OFFSET_UNITS)"); CompiledName("POLYGON_OFFSET_UNITS")>]
            member __.POLYGON_OFFSET_UNITS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE_MIN_FILTER)"); CompiledName("TEXTURE_MIN_FILTER")>]
            member __.TEXTURE_MIN_FILTER with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_BACK_PASS_DEPTH_PASS)"); CompiledName("STENCIL_BACK_PASS_DEPTH_PASS")>]
            member __.STENCIL_BACK_PASS_DEPTH_PASS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LINE_LOOP)"); CompiledName("LINE_LOOP")>]
            member __.LINE_LOOP with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FLOAT_MAT3)"); CompiledName("FLOAT_MAT3")>]
            member __.FLOAT_MAT3 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE14)"); CompiledName("TEXTURE14")>]
            member __.TEXTURE14 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LINEAR)"); CompiledName("LINEAR")>]
            member __.LINEAR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.RGB5_A1)"); CompiledName("RGB5_A1")>]
            member __.RGB5_A1 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ONE_MINUS_SRC_COLOR)"); CompiledName("ONE_MINUS_SRC_COLOR")>]
            member __.ONE_MINUS_SRC_COLOR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SAMPLE_COVERAGE_INVERT)"); CompiledName("SAMPLE_COVERAGE_INVERT")>]
            member __.SAMPLE_COVERAGE_INVERT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DONT_CARE)"); CompiledName("DONT_CARE")>]
            member __.DONT_CARE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FRAMEBUFFER_BINDING)"); CompiledName("FRAMEBUFFER_BINDING")>]
            member __.FRAMEBUFFER_BINDING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.RENDERBUFFER_ALPHA_SIZE)"); CompiledName("RENDERBUFFER_ALPHA_SIZE")>]
            member __.RENDERBUFFER_ALPHA_SIZE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_REF)"); CompiledName("STENCIL_REF")>]
            member __.STENCIL_REF with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ZERO)"); CompiledName("ZERO")>]
            member __.ZERO with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DECR_WRAP)"); CompiledName("DECR_WRAP")>]
            member __.DECR_WRAP with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SAMPLE_COVERAGE)"); CompiledName("SAMPLE_COVERAGE")>]
            member __.SAMPLE_COVERAGE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_BACK_FUNC)"); CompiledName("STENCIL_BACK_FUNC")>]
            member __.STENCIL_BACK_FUNC with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE30)"); CompiledName("TEXTURE30")>]
            member __.TEXTURE30 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.VIEWPORT)"); CompiledName("VIEWPORT")>]
            member __.VIEWPORT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_BITS)"); CompiledName("STENCIL_BITS")>]
            member __.STENCIL_BITS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FLOAT)"); CompiledName("FLOAT")>]
            member __.FLOAT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.COLOR_WRITEMASK)"); CompiledName("COLOR_WRITEMASK")>]
            member __.COLOR_WRITEMASK with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SAMPLE_COVERAGE_VALUE)"); CompiledName("SAMPLE_COVERAGE_VALUE")>]
            member __.SAMPLE_COVERAGE_VALUE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE_CUBE_MAP_NEGATIVE_Y)"); CompiledName("TEXTURE_CUBE_MAP_NEGATIVE_Y")>]
            member __.TEXTURE_CUBE_MAP_NEGATIVE_Y with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_BACK_FAIL)"); CompiledName("STENCIL_BACK_FAIL")>]
            member __.STENCIL_BACK_FAIL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FLOAT_MAT4)"); CompiledName("FLOAT_MAT4")>]
            member __.FLOAT_MAT4 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.UNSIGNED_SHORT_4_4_4_4)"); CompiledName("UNSIGNED_SHORT_4_4_4_4")>]
            member __.UNSIGNED_SHORT_4_4_4_4 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE6)"); CompiledName("TEXTURE6")>]
            member __.TEXTURE6 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.RENDERBUFFER_WIDTH)"); CompiledName("RENDERBUFFER_WIDTH")>]
            member __.RENDERBUFFER_WIDTH with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.RGBA4)"); CompiledName("RGBA4")>]
            member __.RGBA4 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ALWAYS)"); CompiledName("ALWAYS")>]
            member __.ALWAYS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BLEND_EQUATION_ALPHA)"); CompiledName("BLEND_EQUATION_ALPHA")>]
            member __.BLEND_EQUATION_ALPHA with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.COLOR_BUFFER_BIT)"); CompiledName("COLOR_BUFFER_BIT")>]
            member __.COLOR_BUFFER_BIT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE_CUBE_MAP)"); CompiledName("TEXTURE_CUBE_MAP")>]
            member __.TEXTURE_CUBE_MAP with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DEPTH_BUFFER_BIT)"); CompiledName("DEPTH_BUFFER_BIT")>]
            member __.DEPTH_BUFFER_BIT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_CLEAR_VALUE)"); CompiledName("STENCIL_CLEAR_VALUE")>]
            member __.STENCIL_CLEAR_VALUE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BLEND_EQUATION)"); CompiledName("BLEND_EQUATION")>]
            member __.BLEND_EQUATION with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.RENDERBUFFER_GREEN_SIZE)"); CompiledName("RENDERBUFFER_GREEN_SIZE")>]
            member __.RENDERBUFFER_GREEN_SIZE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NEAREST_MIPMAP_LINEAR)"); CompiledName("NEAREST_MIPMAP_LINEAR")>]
            member __.NEAREST_MIPMAP_LINEAR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.VERTEX_ATTRIB_ARRAY_TYPE)"); CompiledName("VERTEX_ATTRIB_ARRAY_TYPE")>]
            member __.VERTEX_ATTRIB_ARRAY_TYPE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.INCR_WRAP)"); CompiledName("INCR_WRAP")>]
            member __.INCR_WRAP with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ONE_MINUS_DST_COLOR)"); CompiledName("ONE_MINUS_DST_COLOR")>]
            member __.ONE_MINUS_DST_COLOR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.HIGH_FLOAT)"); CompiledName("HIGH_FLOAT")>]
            member __.HIGH_FLOAT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BYTE)"); CompiledName("BYTE")>]
            member __.BYTE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FRONT_FACE)"); CompiledName("FRONT_FACE")>]
            member __.FRONT_FACE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SAMPLE_ALPHA_TO_COVERAGE)"); CompiledName("SAMPLE_ALPHA_TO_COVERAGE")>]
            member __.SAMPLE_ALPHA_TO_COVERAGE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.CCW)"); CompiledName("CCW")>]
            member __.CCW with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE13)"); CompiledName("TEXTURE13")>]
            member __.TEXTURE13 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MAX_VERTEX_ATTRIBS)"); CompiledName("MAX_VERTEX_ATTRIBS")>]
            member __.MAX_VERTEX_ATTRIBS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MAX_VERTEX_TEXTURE_IMAGE_UNITS)"); CompiledName("MAX_VERTEX_TEXTURE_IMAGE_UNITS")>]
            member __.MAX_VERTEX_TEXTURE_IMAGE_UNITS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE_WRAP_T)"); CompiledName("TEXTURE_WRAP_T")>]
            member __.TEXTURE_WRAP_T with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.UNPACK_PREMULTIPLY_ALPHA_WEBGL)"); CompiledName("UNPACK_PREMULTIPLY_ALPHA_WEBGL")>]
            member __.UNPACK_PREMULTIPLY_ALPHA_WEBGL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FLOAT_VEC2)"); CompiledName("FLOAT_VEC2")>]
            member __.FLOAT_VEC2 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LUMINANCE)"); CompiledName("LUMINANCE")>]
            member __.LUMINANCE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.GREATER)"); CompiledName("GREATER")>]
            member __.GREATER with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.INT_VEC2)"); CompiledName("INT_VEC2")>]
            member __.INT_VEC2 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.VALIDATE_STATUS)"); CompiledName("VALIDATE_STATUS")>]
            member __.VALIDATE_STATUS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FRAMEBUFFER)"); CompiledName("FRAMEBUFFER")>]
            member __.FRAMEBUFFER with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FRAMEBUFFER_UNSUPPORTED)"); CompiledName("FRAMEBUFFER_UNSUPPORTED")>]
            member __.FRAMEBUFFER_UNSUPPORTED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE5)"); CompiledName("TEXTURE5")>]
            member __.TEXTURE5 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FUNC_SUBTRACT)"); CompiledName("FUNC_SUBTRACT")>]
            member __.FUNC_SUBTRACT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BLEND_DST_ALPHA)"); CompiledName("BLEND_DST_ALPHA")>]
            member __.BLEND_DST_ALPHA with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SAMPLER_CUBE)"); CompiledName("SAMPLER_CUBE")>]
            member __.SAMPLER_CUBE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ONE_MINUS_DST_ALPHA)"); CompiledName("ONE_MINUS_DST_ALPHA")>]
            member __.ONE_MINUS_DST_ALPHA with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LESS)"); CompiledName("LESS")>]
            member __.LESS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE_CUBE_MAP_POSITIVE_X)"); CompiledName("TEXTURE_CUBE_MAP_POSITIVE_X")>]
            member __.TEXTURE_CUBE_MAP_POSITIVE_X with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BLUE_BITS)"); CompiledName("BLUE_BITS")>]
            member __.BLUE_BITS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DEPTH_TEST)"); CompiledName("DEPTH_TEST")>]
            member __.DEPTH_TEST with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.VERTEX_ATTRIB_ARRAY_STRIDE)"); CompiledName("VERTEX_ATTRIB_ARRAY_STRIDE")>]
            member __.VERTEX_ATTRIB_ARRAY_STRIDE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DELETE_STATUS)"); CompiledName("DELETE_STATUS")>]
            member __.DELETE_STATUS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE18)"); CompiledName("TEXTURE18")>]
            member __.TEXTURE18 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.POLYGON_OFFSET_FACTOR)"); CompiledName("POLYGON_OFFSET_FACTOR")>]
            member __.POLYGON_OFFSET_FACTOR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.UNSIGNED_INT)"); CompiledName("UNSIGNED_INT")>]
            member __.UNSIGNED_INT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE_2D)"); CompiledName("TEXTURE_2D")>]
            member __.TEXTURE_2D with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DST_COLOR)"); CompiledName("DST_COLOR")>]
            member __.DST_COLOR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FLOAT_MAT2)"); CompiledName("FLOAT_MAT2")>]
            member __.FLOAT_MAT2 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.COMPRESSED_TEXTURE_FORMATS)"); CompiledName("COMPRESSED_TEXTURE_FORMATS")>]
            member __.COMPRESSED_TEXTURE_FORMATS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MAX_FRAGMENT_UNIFORM_VECTORS)"); CompiledName("MAX_FRAGMENT_UNIFORM_VECTORS")>]
            member __.MAX_FRAGMENT_UNIFORM_VECTORS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DEPTH_STENCIL_ATTACHMENT)"); CompiledName("DEPTH_STENCIL_ATTACHMENT")>]
            member __.DEPTH_STENCIL_ATTACHMENT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LUMINANCE_ALPHA)"); CompiledName("LUMINANCE_ALPHA")>]
            member __.LUMINANCE_ALPHA with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.CW)"); CompiledName("CW")>]
            member __.CW with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.VERTEX_ATTRIB_ARRAY_NORMALIZED)"); CompiledName("VERTEX_ATTRIB_ARRAY_NORMALIZED")>]
            member __.VERTEX_ATTRIB_ARRAY_NORMALIZED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE_CUBE_MAP_NEGATIVE_Z)"); CompiledName("TEXTURE_CUBE_MAP_NEGATIVE_Z")>]
            member __.TEXTURE_CUBE_MAP_NEGATIVE_Z with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LINEAR_MIPMAP_LINEAR)"); CompiledName("LINEAR_MIPMAP_LINEAR")>]
            member __.LINEAR_MIPMAP_LINEAR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BUFFER_SIZE)"); CompiledName("BUFFER_SIZE")>]
            member __.BUFFER_SIZE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SAMPLE_BUFFERS)"); CompiledName("SAMPLE_BUFFERS")>]
            member __.SAMPLE_BUFFERS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE15)"); CompiledName("TEXTURE15")>]
            member __.TEXTURE15 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ACTIVE_TEXTURE)"); CompiledName("ACTIVE_TEXTURE")>]
            member __.ACTIVE_TEXTURE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.VERTEX_SHADER)"); CompiledName("VERTEX_SHADER")>]
            member __.VERTEX_SHADER with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE22)"); CompiledName("TEXTURE22")>]
            member __.TEXTURE22 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.VERTEX_ATTRIB_ARRAY_POINTER)"); CompiledName("VERTEX_ATTRIB_ARRAY_POINTER")>]
            member __.VERTEX_ATTRIB_ARRAY_POINTER with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.INCR)"); CompiledName("INCR")>]
            member __.INCR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.COMPILE_STATUS)"); CompiledName("COMPILE_STATUS")>]
            member __.COMPILE_STATUS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MAX_COMBINED_TEXTURE_IMAGE_UNITS)"); CompiledName("MAX_COMBINED_TEXTURE_IMAGE_UNITS")>]
            member __.MAX_COMBINED_TEXTURE_IMAGE_UNITS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE7)"); CompiledName("TEXTURE7")>]
            member __.TEXTURE7 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.UNSIGNED_SHORT_5_5_5_1)"); CompiledName("UNSIGNED_SHORT_5_5_5_1")>]
            member __.UNSIGNED_SHORT_5_5_5_1 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DEPTH_BITS)"); CompiledName("DEPTH_BITS")>]
            member __.DEPTH_BITS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.RGBA)"); CompiledName("RGBA")>]
            member __.RGBA with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TRIANGLE_STRIP)"); CompiledName("TRIANGLE_STRIP")>]
            member __.TRIANGLE_STRIP with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.COLOR_CLEAR_VALUE)"); CompiledName("COLOR_CLEAR_VALUE")>]
            member __.COLOR_CLEAR_VALUE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BROWSER_DEFAULT_WEBGL)"); CompiledName("BROWSER_DEFAULT_WEBGL")>]
            member __.BROWSER_DEFAULT_WEBGL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.INVALID_ENUM)"); CompiledName("INVALID_ENUM")>]
            member __.INVALID_ENUM with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SCISSOR_TEST)"); CompiledName("SCISSOR_TEST")>]
            member __.SCISSOR_TEST with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LINE_STRIP)"); CompiledName("LINE_STRIP")>]
            member __.LINE_STRIP with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FRAMEBUFFER_INCOMPLETE_ATTACHMENT)"); CompiledName("FRAMEBUFFER_INCOMPLETE_ATTACHMENT")>]
            member __.FRAMEBUFFER_INCOMPLETE_ATTACHMENT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_FUNC)"); CompiledName("STENCIL_FUNC")>]
            member __.STENCIL_FUNC with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME)"); CompiledName("FRAMEBUFFER_ATTACHMENT_OBJECT_NAME")>]
            member __.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.RENDERBUFFER_HEIGHT)"); CompiledName("RENDERBUFFER_HEIGHT")>]
            member __.RENDERBUFFER_HEIGHT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE8)"); CompiledName("TEXTURE8")>]
            member __.TEXTURE8 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TRIANGLES)"); CompiledName("TRIANGLES")>]
            member __.TRIANGLES with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE)"); CompiledName("FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE")>]
            member __.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_BACK_VALUE_MASK)"); CompiledName("STENCIL_BACK_VALUE_MASK")>]
            member __.STENCIL_BACK_VALUE_MASK with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE25)"); CompiledName("TEXTURE25")>]
            member __.TEXTURE25 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.RENDERBUFFER)"); CompiledName("RENDERBUFFER")>]
            member __.RENDERBUFFER with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LEQUAL)"); CompiledName("LEQUAL")>]
            member __.LEQUAL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE1)"); CompiledName("TEXTURE1")>]
            member __.TEXTURE1 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_INDEX8)"); CompiledName("STENCIL_INDEX8")>]
            member __.STENCIL_INDEX8 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FUNC_ADD)"); CompiledName("FUNC_ADD")>]
            member __.FUNC_ADD with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_FAIL)"); CompiledName("STENCIL_FAIL")>]
            member __.STENCIL_FAIL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BLEND_SRC_ALPHA)"); CompiledName("BLEND_SRC_ALPHA")>]
            member __.BLEND_SRC_ALPHA with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BOOL)"); CompiledName("BOOL")>]
            member __.BOOL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ALPHA_BITS)"); CompiledName("ALPHA_BITS")>]
            member __.ALPHA_BITS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LOW_INT)"); CompiledName("LOW_INT")>]
            member __.LOW_INT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE10)"); CompiledName("TEXTURE10")>]
            member __.TEXTURE10 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SRC_COLOR)"); CompiledName("SRC_COLOR")>]
            member __.SRC_COLOR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MAX_VARYING_VECTORS)"); CompiledName("MAX_VARYING_VECTORS")>]
            member __.MAX_VARYING_VECTORS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BLEND_DST_RGB)"); CompiledName("BLEND_DST_RGB")>]
            member __.BLEND_DST_RGB with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE_BINDING_CUBE_MAP)"); CompiledName("TEXTURE_BINDING_CUBE_MAP")>]
            member __.TEXTURE_BINDING_CUBE_MAP with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_INDEX)"); CompiledName("STENCIL_INDEX")>]
            member __.STENCIL_INDEX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE_BINDING_2D)"); CompiledName("TEXTURE_BINDING_2D")>]
            member __.TEXTURE_BINDING_2D with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MEDIUM_INT)"); CompiledName("MEDIUM_INT")>]
            member __.MEDIUM_INT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SHADER_TYPE)"); CompiledName("SHADER_TYPE")>]
            member __.SHADER_TYPE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.POLYGON_OFFSET_FILL)"); CompiledName("POLYGON_OFFSET_FILL")>]
            member __.POLYGON_OFFSET_FILL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DYNAMIC_DRAW)"); CompiledName("DYNAMIC_DRAW")>]
            member __.DYNAMIC_DRAW with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE4)"); CompiledName("TEXTURE4")>]
            member __.TEXTURE4 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_BACK_PASS_DEPTH_FAIL)"); CompiledName("STENCIL_BACK_PASS_DEPTH_FAIL")>]
            member __.STENCIL_BACK_PASS_DEPTH_FAIL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STREAM_DRAW)"); CompiledName("STREAM_DRAW")>]
            member __.STREAM_DRAW with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MAX_CUBE_MAP_TEXTURE_SIZE)"); CompiledName("MAX_CUBE_MAP_TEXTURE_SIZE")>]
            member __.MAX_CUBE_MAP_TEXTURE_SIZE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE17)"); CompiledName("TEXTURE17")>]
            member __.TEXTURE17 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TRIANGLE_FAN)"); CompiledName("TRIANGLE_FAN")>]
            member __.TRIANGLE_FAN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.UNPACK_ALIGNMENT)"); CompiledName("UNPACK_ALIGNMENT")>]
            member __.UNPACK_ALIGNMENT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.CURRENT_PROGRAM)"); CompiledName("CURRENT_PROGRAM")>]
            member __.CURRENT_PROGRAM with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LINES)"); CompiledName("LINES")>]
            member __.LINES with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.INVALID_OPERATION)"); CompiledName("INVALID_OPERATION")>]
            member __.INVALID_OPERATION with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT)"); CompiledName("FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT")>]
            member __.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LINEAR_MIPMAP_NEAREST)"); CompiledName("LINEAR_MIPMAP_NEAREST")>]
            member __.LINEAR_MIPMAP_NEAREST with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.CLAMP_TO_EDGE)"); CompiledName("CLAMP_TO_EDGE")>]
            member __.CLAMP_TO_EDGE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.RENDERBUFFER_DEPTH_SIZE)"); CompiledName("RENDERBUFFER_DEPTH_SIZE")>]
            member __.RENDERBUFFER_DEPTH_SIZE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE_WRAP_S)"); CompiledName("TEXTURE_WRAP_S")>]
            member __.TEXTURE_WRAP_S with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ELEMENT_ARRAY_BUFFER)"); CompiledName("ELEMENT_ARRAY_BUFFER")>]
            member __.ELEMENT_ARRAY_BUFFER with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.UNSIGNED_SHORT_5_6_5)"); CompiledName("UNSIGNED_SHORT_5_6_5")>]
            member __.UNSIGNED_SHORT_5_6_5 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ACTIVE_UNIFORMS)"); CompiledName("ACTIVE_UNIFORMS")>]
            member __.ACTIVE_UNIFORMS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FLOAT_VEC3)"); CompiledName("FLOAT_VEC3")>]
            member __.FLOAT_VEC3 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NO_ERROR)"); CompiledName("NO_ERROR")>]
            member __.NO_ERROR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ATTACHED_SHADERS)"); CompiledName("ATTACHED_SHADERS")>]
            member __.ATTACHED_SHADERS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DEPTH_ATTACHMENT)"); CompiledName("DEPTH_ATTACHMENT")>]
            member __.DEPTH_ATTACHMENT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE11)"); CompiledName("TEXTURE11")>]
            member __.TEXTURE11 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_TEST)"); CompiledName("STENCIL_TEST")>]
            member __.STENCIL_TEST with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ONE)"); CompiledName("ONE")>]
            member __.ONE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE)"); CompiledName("FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE")>]
            member __.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STATIC_DRAW)"); CompiledName("STATIC_DRAW")>]
            member __.STATIC_DRAW with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.GEQUAL)"); CompiledName("GEQUAL")>]
            member __.GEQUAL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BOOL_VEC4)"); CompiledName("BOOL_VEC4")>]
            member __.BOOL_VEC4 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.COLOR_ATTACHMENT0)"); CompiledName("COLOR_ATTACHMENT0")>]
            member __.COLOR_ATTACHMENT0 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PACK_ALIGNMENT)"); CompiledName("PACK_ALIGNMENT")>]
            member __.PACK_ALIGNMENT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MAX_TEXTURE_SIZE)"); CompiledName("MAX_TEXTURE_SIZE")>]
            member __.MAX_TEXTURE_SIZE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_PASS_DEPTH_FAIL)"); CompiledName("STENCIL_PASS_DEPTH_FAIL")>]
            member __.STENCIL_PASS_DEPTH_FAIL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.CULL_FACE_MODE)"); CompiledName("CULL_FACE_MODE")>]
            member __.CULL_FACE_MODE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE16)"); CompiledName("TEXTURE16")>]
            member __.TEXTURE16 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_BACK_WRITEMASK)"); CompiledName("STENCIL_BACK_WRITEMASK")>]
            member __.STENCIL_BACK_WRITEMASK with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SRC_ALPHA)"); CompiledName("SRC_ALPHA")>]
            member __.SRC_ALPHA with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.UNSIGNED_SHORT)"); CompiledName("UNSIGNED_SHORT")>]
            member __.UNSIGNED_SHORT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE21)"); CompiledName("TEXTURE21")>]
            member __.TEXTURE21 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FUNC_REVERSE_SUBTRACT)"); CompiledName("FUNC_REVERSE_SUBTRACT")>]
            member __.FUNC_REVERSE_SUBTRACT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SHADING_LANGUAGE_VERSION)"); CompiledName("SHADING_LANGUAGE_VERSION")>]
            member __.SHADING_LANGUAGE_VERSION with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.EQUAL)"); CompiledName("EQUAL")>]
            member __.EQUAL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL)"); CompiledName("FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL")>]
            member __.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BOOL_VEC3)"); CompiledName("BOOL_VEC3")>]
            member __.BOOL_VEC3 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SAMPLER_2D)"); CompiledName("SAMPLER_2D")>]
            member __.SAMPLER_2D with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE_CUBE_MAP_NEGATIVE_X)"); CompiledName("TEXTURE_CUBE_MAP_NEGATIVE_X")>]
            member __.TEXTURE_CUBE_MAP_NEGATIVE_X with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MAX_TEXTURE_IMAGE_UNITS)"); CompiledName("MAX_TEXTURE_IMAGE_UNITS")>]
            member __.MAX_TEXTURE_IMAGE_UNITS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE_CUBE_MAP_POSITIVE_Y)"); CompiledName("TEXTURE_CUBE_MAP_POSITIVE_Y")>]
            member __.TEXTURE_CUBE_MAP_POSITIVE_Y with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.RENDERBUFFER_INTERNAL_FORMAT)"); CompiledName("RENDERBUFFER_INTERNAL_FORMAT")>]
            member __.RENDERBUFFER_INTERNAL_FORMAT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_VALUE_MASK)"); CompiledName("STENCIL_VALUE_MASK")>]
            member __.STENCIL_VALUE_MASK with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ELEMENT_ARRAY_BUFFER_BINDING)"); CompiledName("ELEMENT_ARRAY_BUFFER_BINDING")>]
            member __.ELEMENT_ARRAY_BUFFER_BINDING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ARRAY_BUFFER)"); CompiledName("ARRAY_BUFFER")>]
            member __.ARRAY_BUFFER with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DEPTH_RANGE)"); CompiledName("DEPTH_RANGE")>]
            member __.DEPTH_RANGE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NICEST)"); CompiledName("NICEST")>]
            member __.NICEST with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ACTIVE_ATTRIBUTES)"); CompiledName("ACTIVE_ATTRIBUTES")>]
            member __.ACTIVE_ATTRIBUTES with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NEVER)"); CompiledName("NEVER")>]
            member __.NEVER with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FLOAT_VEC4)"); CompiledName("FLOAT_VEC4")>]
            member __.FLOAT_VEC4 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.CURRENT_VERTEX_ATTRIB)"); CompiledName("CURRENT_VERTEX_ATTRIB")>]
            member __.CURRENT_VERTEX_ATTRIB with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_PASS_DEPTH_PASS)"); CompiledName("STENCIL_PASS_DEPTH_PASS")>]
            member __.STENCIL_PASS_DEPTH_PASS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.INVERT)"); CompiledName("INVERT")>]
            member __.INVERT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LINK_STATUS)"); CompiledName("LINK_STATUS")>]
            member __.LINK_STATUS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.RGB)"); CompiledName("RGB")>]
            member __.RGB with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.INT_VEC4)"); CompiledName("INT_VEC4")>]
            member __.INT_VEC4 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE2)"); CompiledName("TEXTURE2")>]
            member __.TEXTURE2 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.UNPACK_COLORSPACE_CONVERSION_WEBGL)"); CompiledName("UNPACK_COLORSPACE_CONVERSION_WEBGL")>]
            member __.UNPACK_COLORSPACE_CONVERSION_WEBGL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MEDIUM_FLOAT)"); CompiledName("MEDIUM_FLOAT")>]
            member __.MEDIUM_FLOAT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SRC_ALPHA_SATURATE)"); CompiledName("SRC_ALPHA_SATURATE")>]
            member __.SRC_ALPHA_SATURATE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BUFFER_USAGE)"); CompiledName("BUFFER_USAGE")>]
            member __.BUFFER_USAGE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SHORT)"); CompiledName("SHORT")>]
            member __.SHORT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NONE)"); CompiledName("NONE2")>]
            member __.NONE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.UNSIGNED_BYTE)"); CompiledName("UNSIGNED_BYTE")>]
            member __.UNSIGNED_BYTE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.INT)"); CompiledName("INT")>]
            member __.INT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SUBPIXEL_BITS)"); CompiledName("SUBPIXEL_BITS")>]
            member __.SUBPIXEL_BITS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.KEEP)"); CompiledName("KEEP")>]
            member __.KEEP with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SAMPLES)"); CompiledName("SAMPLES")>]
            member __.SAMPLES with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FRAGMENT_SHADER)"); CompiledName("FRAGMENT_SHADER")>]
            member __.FRAGMENT_SHADER with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LINE_WIDTH)"); CompiledName("LINE_WIDTH")>]
            member __.LINE_WIDTH with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BLEND_SRC_RGB)"); CompiledName("BLEND_SRC_RGB")>]
            member __.BLEND_SRC_RGB with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LOW_FLOAT)"); CompiledName("LOW_FLOAT")>]
            member __.LOW_FLOAT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.VERSION)"); CompiledName("VERSION")>]
            member __.VERSION with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_368 =


    type FunScript.TypeScript.AnonymousType426 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype357")>]
            member __.prototype with get() : FunScript.TypeScript.WebGLProgram = failwith "never" and set (v : FunScript.TypeScript.WebGLProgram) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create395")>]
            member __.Create() : FunScript.TypeScript.WebGLProgram = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create395Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.WebGLProgram>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_369 =


    type FunScript.TypeScript.AnonymousType427 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype358")>]
            member __.prototype with get() : FunScript.TypeScript.OES_standard_derivatives = failwith "never" and set (v : FunScript.TypeScript.OES_standard_derivatives) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create396")>]
            member __.Create() : FunScript.TypeScript.OES_standard_derivatives = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create396Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.OES_standard_derivatives>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FRAGMENT_SHADER_DERIVATIVE_HINT_OES)"); CompiledName("FRAGMENT_SHADER_DERIVATIVE_HINT_OES")>]
            member __.FRAGMENT_SHADER_DERIVATIVE_HINT_OES with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_370 =


    type FunScript.TypeScript.AnonymousType428 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype359")>]
            member __.prototype with get() : FunScript.TypeScript.WebGLFramebuffer = failwith "never" and set (v : FunScript.TypeScript.WebGLFramebuffer) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create397")>]
            member __.Create() : FunScript.TypeScript.WebGLFramebuffer = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create397Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.WebGLFramebuffer>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_371 =


    type FunScript.TypeScript.AnonymousType429 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype360")>]
            member __.prototype with get() : FunScript.TypeScript.WebGLShader = failwith "never" and set (v : FunScript.TypeScript.WebGLShader) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create398")>]
            member __.Create() : FunScript.TypeScript.WebGLShader = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create398Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.WebGLShader>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_372 =


    type FunScript.TypeScript.AnonymousType43 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype361")>]
            member __.prototype with get() : FunScript.TypeScript.Performance = failwith "never" and set (v : FunScript.TypeScript.Performance) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create399")>]
            member __.Create() : FunScript.TypeScript.Performance = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create399Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.Performance>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_373 =


    type FunScript.TypeScript.AnonymousType430 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype362")>]
            member __.prototype with get() : FunScript.TypeScript.OES_texture_float_linear = failwith "never" and set (v : FunScript.TypeScript.OES_texture_float_linear) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create400")>]
            member __.Create() : FunScript.TypeScript.OES_texture_float_linear = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create400Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.OES_texture_float_linear>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_374 =


    type FunScript.TypeScript.AnonymousType431 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype363")>]
            member __.prototype with get() : FunScript.TypeScript.WebGLObject = failwith "never" and set (v : FunScript.TypeScript.WebGLObject) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create401")>]
            member __.Create() : FunScript.TypeScript.WebGLObject = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create401Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.WebGLObject>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_375 =


    type FunScript.TypeScript.AnonymousType432 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype364")>]
            member __.prototype with get() : FunScript.TypeScript.WebGLBuffer = failwith "never" and set (v : FunScript.TypeScript.WebGLBuffer) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create402")>]
            member __.Create() : FunScript.TypeScript.WebGLBuffer = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create402Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.WebGLBuffer>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_376 =


    type FunScript.TypeScript.AnonymousType433 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype365")>]
            member __.prototype with get() : FunScript.TypeScript.WebGLShaderPrecisionFormat = failwith "never" and set (v : FunScript.TypeScript.WebGLShaderPrecisionFormat) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create403")>]
            member __.Create() : FunScript.TypeScript.WebGLShaderPrecisionFormat = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create403Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.WebGLShaderPrecisionFormat>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_377 =


    type FunScript.TypeScript.AnonymousType434 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype366")>]
            member __.prototype with get() : FunScript.TypeScript.EXT_texture_filter_anisotropic = failwith "never" and set (v : FunScript.TypeScript.EXT_texture_filter_anisotropic) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create404")>]
            member __.Create() : FunScript.TypeScript.EXT_texture_filter_anisotropic = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create404Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.EXT_texture_filter_anisotropic>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE_MAX_ANISOTROPY_EXT)"); CompiledName("TEXTURE_MAX_ANISOTROPY_EXT")>]
            member __.TEXTURE_MAX_ANISOTROPY_EXT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MAX_TEXTURE_MAX_ANISOTROPY_EXT)"); CompiledName("MAX_TEXTURE_MAX_ANISOTROPY_EXT")>]
            member __.MAX_TEXTURE_MAX_ANISOTROPY_EXT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_378 =


    type FunScript.TypeScript.AnonymousType435 with 

            [<FunScript.JSEmitInline("(new {0}({?1}, {?2}, {?3}, {?4}))"); CompiledName("Create405")>]
            member __.Create(?text : string, ?value : string, ?defaultSelected : bool, ?selected : bool) : FunScript.TypeScript.HTMLOptionElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create405Aux")>]
            member __.``Create <-``(func : System.Func<string, string, bool, bool, FunScript.TypeScript.HTMLOptionElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_379 =


    type FunScript.TypeScript.AnonymousType436 with 

            [<FunScript.JSEmitInline("(new {0}({?1}, {?2}))"); CompiledName("Create406")>]
            member __.Create(?width : float, ?height : float) : FunScript.TypeScript.HTMLImageElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create406Aux")>]
            member __.``Create <-``(func : System.Func<float, float, FunScript.TypeScript.HTMLImageElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_380 =


    type FunScript.TypeScript.AnonymousType437 with 

            [<FunScript.JSEmitInline("(new {0}({?1}))"); CompiledName("Create407")>]
            member __.Create(?src : string) : FunScript.TypeScript.HTMLAudioElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create407Aux")>]
            member __.``Create <-``(func : System.Func<string, FunScript.TypeScript.HTMLAudioElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_381 =


    type FunScript.TypeScript.AnonymousType438 with 

            [<FunScript.JSEmitInline("(new {0}({1}))"); CompiledName("Create408")>]
            member __.Create(s : string) : obj = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create408Aux")>]
            member __.``Create <-``(func : System.Func<string, obj>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_382 =


    type FunScript.TypeScript.AnonymousType439 with 

            [<FunScript.JSEmitInline("({0}.Echo({1}))"); CompiledName("Echo")>]
            member __.Echo(s : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.Echo = {1})"); CompiledName("EchoAux")>]
            member __.``Echo <-``(func : System.Func<obj, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.StdErr)"); CompiledName("StdErr")>]
            member __.StdErr with get() : FunScript.TypeScript.ITextWriter = failwith "never" and set (v : FunScript.TypeScript.ITextWriter) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.StdOut)"); CompiledName("StdOut")>]
            member __.StdOut with get() : FunScript.TypeScript.ITextWriter = failwith "never" and set (v : FunScript.TypeScript.ITextWriter) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.Arguments)"); CompiledName("Arguments")>]
            member __.Arguments with get() : FunScript.TypeScript.AnonymousType440 = failwith "never" and set (v : FunScript.TypeScript.AnonymousType440) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ScriptFullName)"); CompiledName("ScriptFullName")>]
            member __.ScriptFullName with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.Quit({?1}))"); CompiledName("Quit")>]
            member __.Quit(?exitCode : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.Quit = {1})"); CompiledName("QuitAux")>]
            member __.``Quit <-``(func : System.Func<float, float>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_383 =


    type FunScript.TypeScript.AnonymousType44 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype367")>]
            member __.prototype with get() : FunScript.TypeScript.CompositionEvent = failwith "never" and set (v : FunScript.TypeScript.CompositionEvent) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create409")>]
            member __.Create() : FunScript.TypeScript.CompositionEvent = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create409Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.CompositionEvent>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_384 =


    type FunScript.TypeScript.AnonymousType440 with 

            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length1")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.Item({1}))"); CompiledName("Item")>]
            member __.Item(n : float) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.Item = {1})"); CompiledName("ItemAux")>]
            member __.``Item <-``(func : System.Func<float, string>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_385 =


    type FunScript.TypeScript.AnonymousType45 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype368")>]
            member __.prototype with get() : FunScript.TypeScript.SVGMarkerElement = failwith "never" and set (v : FunScript.TypeScript.SVGMarkerElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create410")>]
            member __.Create() : FunScript.TypeScript.SVGMarkerElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create410Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGMarkerElement>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_MARKER_ORIENT_UNKNOWN)"); CompiledName("SVG_MARKER_ORIENT_UNKNOWN")>]
            member __.SVG_MARKER_ORIENT_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_MARKER_ORIENT_ANGLE)"); CompiledName("SVG_MARKER_ORIENT_ANGLE")>]
            member __.SVG_MARKER_ORIENT_ANGLE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_MARKERUNITS_UNKNOWN)"); CompiledName("SVG_MARKERUNITS_UNKNOWN")>]
            member __.SVG_MARKERUNITS_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_MARKERUNITS_STROKEWIDTH)"); CompiledName("SVG_MARKERUNITS_STROKEWIDTH")>]
            member __.SVG_MARKERUNITS_STROKEWIDTH with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_MARKER_ORIENT_AUTO)"); CompiledName("SVG_MARKER_ORIENT_AUTO")>]
            member __.SVG_MARKER_ORIENT_AUTO with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_MARKERUNITS_USERSPACEONUSE)"); CompiledName("SVG_MARKERUNITS_USERSPACEONUSE")>]
            member __.SVG_MARKERUNITS_USERSPACEONUSE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_386 =


    type FunScript.TypeScript.AnonymousType46 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype369")>]
            member __.prototype with get() : FunScript.TypeScript.CSSStyleDeclaration = failwith "never" and set (v : FunScript.TypeScript.CSSStyleDeclaration) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create411")>]
            member __.Create() : FunScript.TypeScript.CSSStyleDeclaration = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create411Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.CSSStyleDeclaration>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_387 =


    type FunScript.TypeScript.AnonymousType47 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype370")>]
            member __.prototype with get() : FunScript.TypeScript.SVGGElement = failwith "never" and set (v : FunScript.TypeScript.SVGGElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create412")>]
            member __.Create() : FunScript.TypeScript.SVGGElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create412Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGGElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_388 =


    type FunScript.TypeScript.AnonymousType48 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype371")>]
            member __.prototype with get() : FunScript.TypeScript.MSStyleCSSProperties = failwith "never" and set (v : FunScript.TypeScript.MSStyleCSSProperties) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create413")>]
            member __.Create() : FunScript.TypeScript.MSStyleCSSProperties = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create413Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MSStyleCSSProperties>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_389 =


    type FunScript.TypeScript.AnonymousType49 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype372")>]
            member __.prototype with get() : FunScript.TypeScript.Navigator = failwith "never" and set (v : FunScript.TypeScript.Navigator) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create414")>]
            member __.Create() : FunScript.TypeScript.Navigator = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create414Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.Navigator>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_390 =


    type FunScript.TypeScript.AnonymousType5 with 

            [<FunScript.JSEmitInline("(new {0}({?1}))"); CompiledName("Create415")>]
            member __.Create(?value : obj) : FunScript.TypeScript.Number = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create415Aux")>]
            member __.``Create <-``(func : System.Func<obj, FunScript.TypeScript.Number>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}({?1}))"); CompiledName("Invoke21")>]
            member __.Invoke(?value : obj) : float = failwith "never"
            [<FunScript.JSEmitInline("({0} = {1})"); CompiledName("Invoke21Aux")>]
            member __.``Invoke <-``(func : System.Func<obj, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype373")>]
            member __.prototype with get() : FunScript.TypeScript.Number = failwith "never" and set (v : FunScript.TypeScript.Number) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MAX_VALUE)"); CompiledName("MAX_VALUE")>]
            member __.MAX_VALUE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MIN_VALUE)"); CompiledName("MIN_VALUE")>]
            member __.MIN_VALUE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NaN)"); CompiledName("NaN1")>]
            member __.NaN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NEGATIVE_INFINITY)"); CompiledName("NEGATIVE_INFINITY")>]
            member __.NEGATIVE_INFINITY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.POSITIVE_INFINITY)"); CompiledName("POSITIVE_INFINITY")>]
            member __.POSITIVE_INFINITY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_391 =


    type FunScript.TypeScript.AnonymousType50 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype374")>]
            member __.prototype with get() : FunScript.TypeScript.SVGPathSegCurvetoCubicSmoothAbs = failwith "never" and set (v : FunScript.TypeScript.SVGPathSegCurvetoCubicSmoothAbs) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create416")>]
            member __.Create() : FunScript.TypeScript.SVGPathSegCurvetoCubicSmoothAbs = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create416Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGPathSegCurvetoCubicSmoothAbs>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_392 =


    type FunScript.TypeScript.AnonymousType51 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype375")>]
            member __.prototype with get() : FunScript.TypeScript.SVGZoomEvent = failwith "never" and set (v : FunScript.TypeScript.SVGZoomEvent) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create417")>]
            member __.Create() : FunScript.TypeScript.SVGZoomEvent = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create417Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGZoomEvent>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_393 =


    type FunScript.TypeScript.AnonymousType52 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype376")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLTableDataCellElement = failwith "never" and set (v : FunScript.TypeScript.HTMLTableDataCellElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create418")>]
            member __.Create() : FunScript.TypeScript.HTMLTableDataCellElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create418Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLTableDataCellElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_394 =


    type FunScript.TypeScript.AnonymousType53 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype377")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLBaseElement = failwith "never" and set (v : FunScript.TypeScript.HTMLBaseElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create419")>]
            member __.Create() : FunScript.TypeScript.HTMLBaseElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create419Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLBaseElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_395 =


    type FunScript.TypeScript.AnonymousType54 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype378")>]
            member __.prototype with get() : FunScript.TypeScript.ClientRect = failwith "never" and set (v : FunScript.TypeScript.ClientRect) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create420")>]
            member __.Create() : FunScript.TypeScript.ClientRect = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create420Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.ClientRect>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_396 =


    type FunScript.TypeScript.AnonymousType55 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype379")>]
            member __.prototype with get() : FunScript.TypeScript.DOMImplementation = failwith "never" and set (v : FunScript.TypeScript.DOMImplementation) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create421")>]
            member __.Create() : FunScript.TypeScript.DOMImplementation = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create421Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.DOMImplementation>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_397 =


    type FunScript.TypeScript.AnonymousType56 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype380")>]
            member __.prototype with get() : FunScript.TypeScript.Element = failwith "never" and set (v : FunScript.TypeScript.Element) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create422")>]
            member __.Create() : FunScript.TypeScript.Element = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create422Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.Element>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_398 =


    type FunScript.TypeScript.AnonymousType57 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype381")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLNextIdElement = failwith "never" and set (v : FunScript.TypeScript.HTMLNextIdElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create423")>]
            member __.Create() : FunScript.TypeScript.HTMLNextIdElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create423Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLNextIdElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_399 =


    type FunScript.TypeScript.AnonymousType58 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype382")>]
            member __.prototype with get() : FunScript.TypeScript.SVGPathSegMovetoRel = failwith "never" and set (v : FunScript.TypeScript.SVGPathSegMovetoRel) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create424")>]
            member __.Create() : FunScript.TypeScript.SVGPathSegMovetoRel = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create424Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGPathSegMovetoRel>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_400 =


    type FunScript.TypeScript.AnonymousType59 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype383")>]
            member __.prototype with get() : FunScript.TypeScript.SVGLineElement = failwith "never" and set (v : FunScript.TypeScript.SVGLineElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create425")>]
            member __.Create() : FunScript.TypeScript.SVGLineElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create425Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGLineElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_401 =


    type FunScript.TypeScript.AnonymousType6 with 

            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create426")>]
            member __.Create() : FunScript.TypeScript.Date = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create426Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.Date>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}))"); CompiledName("Create427")>]
            member __.Create(value : float) : FunScript.TypeScript.Date = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create427Aux")>]
            member __.``Create <-``(func : System.Func<float, FunScript.TypeScript.Date>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}))"); CompiledName("Create428")>]
            member __.Create(value : string) : FunScript.TypeScript.Date = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create428Aux")>]
            member __.``Create <-``(func : System.Func<string, FunScript.TypeScript.Date>) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}({1}, {2}, {?3}, {?4}, {?5}, {?6}, {?7}))"); CompiledName("Create429")>]
            member __.Create(year : float, month : float, ?date : float, ?hours : float, ?minutes : float, ?seconds : float, ?ms : float) : FunScript.TypeScript.Date = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create429Aux")>]
            member __.``Create <-``(func : System.Func<float, float, float, float, float, float, float, FunScript.TypeScript.Date>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}())"); CompiledName("Invoke22")>]
            member __.Invoke() : string = failwith "never"
            [<FunScript.JSEmitInline("({0} = {1})"); CompiledName("Invoke22Aux")>]
            member __.``Invoke <-``(func : System.Func<string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype384")>]
            member __.prototype with get() : FunScript.TypeScript.Date = failwith "never" and set (v : FunScript.TypeScript.Date) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.parse({1}))"); CompiledName("parse")>]
            member __.parse(s : string) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.parse = {1})"); CompiledName("parseAux")>]
            member __.``parse <-``(func : System.Func<string, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.UTC({1}, {2}, {?3}, {?4}, {?5}, {?6}, {?7}))"); CompiledName("UTC")>]
            member __.UTC(year : float, month : float, ?date : float, ?hours : float, ?minutes : float, ?seconds : float, ?ms : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.UTC = {1})"); CompiledName("UTCAux")>]
            member __.``UTC <-``(func : System.Func<float, float, float, float, float, float, float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.now())"); CompiledName("now")>]
            member __.now() : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.now = {1})"); CompiledName("nowAux")>]
            member __.``now <-``(func : System.Func<float>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_402 =


    type FunScript.TypeScript.AnonymousType60 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype385")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLParagraphElement = failwith "never" and set (v : FunScript.TypeScript.HTMLParagraphElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create430")>]
            member __.Create() : FunScript.TypeScript.HTMLParagraphElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create430Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLParagraphElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_403 =


    type FunScript.TypeScript.AnonymousType61 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype386")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLAreasCollection = failwith "never" and set (v : FunScript.TypeScript.HTMLAreasCollection) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create431")>]
            member __.Create() : FunScript.TypeScript.HTMLAreasCollection = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create431Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLAreasCollection>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_404 =


    type FunScript.TypeScript.AnonymousType62 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype387")>]
            member __.prototype with get() : FunScript.TypeScript.SVGDescElement = failwith "never" and set (v : FunScript.TypeScript.SVGDescElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create432")>]
            member __.Create() : FunScript.TypeScript.SVGDescElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create432Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGDescElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_405 =


    type FunScript.TypeScript.AnonymousType63 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype388")>]
            member __.prototype with get() : FunScript.TypeScript.Node = failwith "never" and set (v : FunScript.TypeScript.Node) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create433")>]
            member __.Create() : FunScript.TypeScript.Node = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create433Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.Node>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ENTITY_REFERENCE_NODE)"); CompiledName("ENTITY_REFERENCE_NODE")>]
            member __.ENTITY_REFERENCE_NODE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ATTRIBUTE_NODE)"); CompiledName("ATTRIBUTE_NODE")>]
            member __.ATTRIBUTE_NODE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOCUMENT_FRAGMENT_NODE)"); CompiledName("DOCUMENT_FRAGMENT_NODE")>]
            member __.DOCUMENT_FRAGMENT_NODE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXT_NODE)"); CompiledName("TEXT_NODE")>]
            member __.TEXT_NODE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ELEMENT_NODE)"); CompiledName("ELEMENT_NODE")>]
            member __.ELEMENT_NODE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.COMMENT_NODE)"); CompiledName("COMMENT_NODE")>]
            member __.COMMENT_NODE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOCUMENT_POSITION_DISCONNECTED)"); CompiledName("DOCUMENT_POSITION_DISCONNECTED")>]
            member __.DOCUMENT_POSITION_DISCONNECTED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOCUMENT_POSITION_CONTAINED_BY)"); CompiledName("DOCUMENT_POSITION_CONTAINED_BY")>]
            member __.DOCUMENT_POSITION_CONTAINED_BY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOCUMENT_POSITION_CONTAINS)"); CompiledName("DOCUMENT_POSITION_CONTAINS")>]
            member __.DOCUMENT_POSITION_CONTAINS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOCUMENT_TYPE_NODE)"); CompiledName("DOCUMENT_TYPE_NODE")>]
            member __.DOCUMENT_TYPE_NODE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC)"); CompiledName("DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC")>]
            member __.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOCUMENT_NODE)"); CompiledName("DOCUMENT_NODE")>]
            member __.DOCUMENT_NODE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ENTITY_NODE)"); CompiledName("ENTITY_NODE")>]
            member __.ENTITY_NODE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PROCESSING_INSTRUCTION_NODE)"); CompiledName("PROCESSING_INSTRUCTION_NODE")>]
            member __.PROCESSING_INSTRUCTION_NODE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.CDATA_SECTION_NODE)"); CompiledName("CDATA_SECTION_NODE")>]
            member __.CDATA_SECTION_NODE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NOTATION_NODE)"); CompiledName("NOTATION_NODE")>]
            member __.NOTATION_NODE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOCUMENT_POSITION_FOLLOWING)"); CompiledName("DOCUMENT_POSITION_FOLLOWING")>]
            member __.DOCUMENT_POSITION_FOLLOWING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOCUMENT_POSITION_PRECEDING)"); CompiledName("DOCUMENT_POSITION_PRECEDING")>]
            member __.DOCUMENT_POSITION_PRECEDING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_406 =


    type FunScript.TypeScript.AnonymousType64 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype389")>]
            member __.prototype with get() : FunScript.TypeScript.SVGPathSegCurvetoQuadraticSmoothRel = failwith "never" and set (v : FunScript.TypeScript.SVGPathSegCurvetoQuadraticSmoothRel) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create434")>]
            member __.Create() : FunScript.TypeScript.SVGPathSegCurvetoQuadraticSmoothRel = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create434Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGPathSegCurvetoQuadraticSmoothRel>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_407 =


    type FunScript.TypeScript.AnonymousType65 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype390")>]
            member __.prototype with get() : FunScript.TypeScript.MSScriptHost = failwith "never" and set (v : FunScript.TypeScript.MSScriptHost) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create435")>]
            member __.Create() : FunScript.TypeScript.MSScriptHost = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create435Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MSScriptHost>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_408 =


    type FunScript.TypeScript.AnonymousType66 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype391")>]
            member __.prototype with get() : FunScript.TypeScript.SVGClipPathElement = failwith "never" and set (v : FunScript.TypeScript.SVGClipPathElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create436")>]
            member __.Create() : FunScript.TypeScript.SVGClipPathElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create436Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGClipPathElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_409 =


    type FunScript.TypeScript.AnonymousType67 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype392")>]
            member __.prototype with get() : FunScript.TypeScript.MouseEvent = failwith "never" and set (v : FunScript.TypeScript.MouseEvent) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create437")>]
            member __.Create() : FunScript.TypeScript.MouseEvent = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create437Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MouseEvent>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_410 =


    type FunScript.TypeScript.AnonymousType68 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype393")>]
            member __.prototype with get() : FunScript.TypeScript.RangeException = failwith "never" and set (v : FunScript.TypeScript.RangeException) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create438")>]
            member __.Create() : FunScript.TypeScript.RangeException = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create438Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.RangeException>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.INVALID_NODE_TYPE_ERR)"); CompiledName("INVALID_NODE_TYPE_ERR1")>]
            member __.INVALID_NODE_TYPE_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BAD_BOUNDARYPOINTS_ERR)"); CompiledName("BAD_BOUNDARYPOINTS_ERR")>]
            member __.BAD_BOUNDARYPOINTS_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_411 =


    type FunScript.TypeScript.AnonymousType69 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype394")>]
            member __.prototype with get() : FunScript.TypeScript.SVGTextPositioningElement = failwith "never" and set (v : FunScript.TypeScript.SVGTextPositioningElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create439")>]
            member __.Create() : FunScript.TypeScript.SVGTextPositioningElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create439Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGTextPositioningElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_412 =


    type FunScript.TypeScript.AnonymousType7 with 

            [<FunScript.JSEmitInline("(new {0}({1}, {?2}))"); CompiledName("Create440")>]
            member __.Create(pattern : string, ?flags : string) : FunScript.TypeScript.RegExp = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create440Aux")>]
            member __.``Create <-``(func : System.Func<string, string, FunScript.TypeScript.RegExp>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}({1}, {?2}))"); CompiledName("Invoke23")>]
            member __.Invoke(pattern : string, ?flags : string) : FunScript.TypeScript.RegExp = failwith "never"
            [<FunScript.JSEmitInline("({0} = {1})"); CompiledName("Invoke23Aux")>]
            member __.``Invoke <-``(func : System.Func<string, string, FunScript.TypeScript.RegExp>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.$1)"); CompiledName("Dollar1")>]
            member __.Dollar1 with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.$2)"); CompiledName("Dollar2")>]
            member __.Dollar2 with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.$3)"); CompiledName("Dollar3")>]
            member __.Dollar3 with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.$4)"); CompiledName("Dollar4")>]
            member __.Dollar4 with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.$5)"); CompiledName("Dollar5")>]
            member __.Dollar5 with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.$6)"); CompiledName("Dollar6")>]
            member __.Dollar6 with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.$7)"); CompiledName("Dollar7")>]
            member __.Dollar7 with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.$8)"); CompiledName("Dollar8")>]
            member __.Dollar8 with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.$9)"); CompiledName("Dollar9")>]
            member __.Dollar9 with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.lastMatch)"); CompiledName("lastMatch")>]
            member __.lastMatch with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_413 =


    type FunScript.TypeScript.AnonymousType70 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype395")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLAppletElement = failwith "never" and set (v : FunScript.TypeScript.HTMLAppletElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create441")>]
            member __.Create() : FunScript.TypeScript.HTMLAppletElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create441Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLAppletElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_414 =


    type FunScript.TypeScript.AnonymousType71 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype396")>]
            member __.prototype with get() : FunScript.TypeScript.TextMetrics = failwith "never" and set (v : FunScript.TypeScript.TextMetrics) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create442")>]
            member __.Create() : FunScript.TypeScript.TextMetrics = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create442Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.TextMetrics>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_415 =


    type FunScript.TypeScript.AnonymousType72 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype397")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLOListElement = failwith "never" and set (v : FunScript.TypeScript.HTMLOListElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create443")>]
            member __.Create() : FunScript.TypeScript.HTMLOListElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create443Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLOListElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_416 =


    type FunScript.TypeScript.AnonymousType73 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype398")>]
            member __.prototype with get() : FunScript.TypeScript.SVGPathSegLinetoVerticalRel = failwith "never" and set (v : FunScript.TypeScript.SVGPathSegLinetoVerticalRel) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create444")>]
            member __.Create() : FunScript.TypeScript.SVGPathSegLinetoVerticalRel = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create444Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGPathSegLinetoVerticalRel>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_417 =


    type FunScript.TypeScript.AnonymousType74 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype399")>]
            member __.prototype with get() : FunScript.TypeScript.SVGAnimatedString = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedString) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create445")>]
            member __.Create() : FunScript.TypeScript.SVGAnimatedString = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create445Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGAnimatedString>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_418 =


    type FunScript.TypeScript.AnonymousType75 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype400")>]
            member __.prototype with get() : FunScript.TypeScript.CDATASection = failwith "never" and set (v : FunScript.TypeScript.CDATASection) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create446")>]
            member __.Create() : FunScript.TypeScript.CDATASection = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create446Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.CDATASection>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_419 =


    type FunScript.TypeScript.AnonymousType76 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype401")>]
            member __.prototype with get() : FunScript.TypeScript.StyleMedia = failwith "never" and set (v : FunScript.TypeScript.StyleMedia) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create447")>]
            member __.Create() : FunScript.TypeScript.StyleMedia = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create447Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.StyleMedia>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_420 =


    type FunScript.TypeScript.AnonymousType77 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype402")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLSelectElement = failwith "never" and set (v : FunScript.TypeScript.HTMLSelectElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create448")>]
            member __.Create() : FunScript.TypeScript.HTMLSelectElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create448Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLSelectElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_421 =


    type FunScript.TypeScript.AnonymousType78 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype403")>]
            member __.prototype with get() : FunScript.TypeScript.TextRange = failwith "never" and set (v : FunScript.TypeScript.TextRange) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create449")>]
            member __.Create() : FunScript.TypeScript.TextRange = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create449Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.TextRange>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_422 =


    type FunScript.TypeScript.AnonymousType79 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype404")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLBlockElement = failwith "never" and set (v : FunScript.TypeScript.HTMLBlockElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create450")>]
            member __.Create() : FunScript.TypeScript.HTMLBlockElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create450Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLBlockElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_423 =


    type FunScript.TypeScript.AnonymousType8 with 

            [<FunScript.JSEmitInline("(new {0}({?1}))"); CompiledName("Create451")>]
            member __.Create(?message : string) : FunScript.TypeScript.Error = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create451Aux")>]
            member __.``Create <-``(func : System.Func<string, FunScript.TypeScript.Error>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}({?1}))"); CompiledName("Invoke24")>]
            member __.Invoke(?message : string) : FunScript.TypeScript.Error = failwith "never"
            [<FunScript.JSEmitInline("({0} = {1})"); CompiledName("Invoke24Aux")>]
            member __.``Invoke <-``(func : System.Func<string, FunScript.TypeScript.Error>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype405")>]
            member __.prototype with get() : FunScript.TypeScript.Error = failwith "never" and set (v : FunScript.TypeScript.Error) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_424 =


    type FunScript.TypeScript.AnonymousType80 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype406")>]
            member __.prototype with get() : FunScript.TypeScript.CSSStyleSheet = failwith "never" and set (v : FunScript.TypeScript.CSSStyleSheet) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create452")>]
            member __.Create() : FunScript.TypeScript.CSSStyleSheet = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create452Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.CSSStyleSheet>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_425 =


    type FunScript.TypeScript.AnonymousType81 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype407")>]
            member __.prototype with get() : FunScript.TypeScript.MSSelection = failwith "never" and set (v : FunScript.TypeScript.MSSelection) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create453")>]
            member __.Create() : FunScript.TypeScript.MSSelection = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create453Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MSSelection>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_426 =


    type FunScript.TypeScript.AnonymousType82 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype408")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLMetaElement = failwith "never" and set (v : FunScript.TypeScript.HTMLMetaElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create454")>]
            member __.Create() : FunScript.TypeScript.HTMLMetaElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create454Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLMetaElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_427 =


    type FunScript.TypeScript.AnonymousType83 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype409")>]
            member __.prototype with get() : FunScript.TypeScript.SVGPatternElement = failwith "never" and set (v : FunScript.TypeScript.SVGPatternElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create455")>]
            member __.Create() : FunScript.TypeScript.SVGPatternElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create455Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGPatternElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_428 =


    type FunScript.TypeScript.AnonymousType84 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype410")>]
            member __.prototype with get() : FunScript.TypeScript.SVGAnimatedAngle = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedAngle) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create456")>]
            member __.Create() : FunScript.TypeScript.SVGAnimatedAngle = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create456Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGAnimatedAngle>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_429 =


    type FunScript.TypeScript.AnonymousType85 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype411")>]
            member __.prototype with get() : FunScript.TypeScript.Selection = failwith "never" and set (v : FunScript.TypeScript.Selection) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create457")>]
            member __.Create() : FunScript.TypeScript.Selection = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create457Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.Selection>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_430 =


    type FunScript.TypeScript.AnonymousType86 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype412")>]
            member __.prototype with get() : FunScript.TypeScript.SVGScriptElement = failwith "never" and set (v : FunScript.TypeScript.SVGScriptElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create458")>]
            member __.Create() : FunScript.TypeScript.SVGScriptElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create458Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGScriptElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_431 =


    type FunScript.TypeScript.AnonymousType87 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype413")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLDDElement = failwith "never" and set (v : FunScript.TypeScript.HTMLDDElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create459")>]
            member __.Create() : FunScript.TypeScript.HTMLDDElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create459Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLDDElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_432 =


    type FunScript.TypeScript.AnonymousType88 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype414")>]
            member __.prototype with get() : FunScript.TypeScript.CSSStyleRule = failwith "never" and set (v : FunScript.TypeScript.CSSStyleRule) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create460")>]
            member __.Create() : FunScript.TypeScript.CSSStyleRule = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create460Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.CSSStyleRule>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_433 =


    type FunScript.TypeScript.AnonymousType89 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype415")>]
            member __.prototype with get() : FunScript.TypeScript.NodeIterator = failwith "never" and set (v : FunScript.TypeScript.NodeIterator) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create461")>]
            member __.Create() : FunScript.TypeScript.NodeIterator = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create461Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.NodeIterator>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_434 =


    type FunScript.TypeScript.AnonymousType9 with 

            [<FunScript.JSEmitInline("(new {0}({?1}))"); CompiledName("Create462")>]
            member __.Create(?message : string) : FunScript.TypeScript.EvalError = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create462Aux")>]
            member __.``Create <-``(func : System.Func<string, FunScript.TypeScript.EvalError>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}({?1}))"); CompiledName("Invoke25")>]
            member __.Invoke(?message : string) : FunScript.TypeScript.EvalError = failwith "never"
            [<FunScript.JSEmitInline("({0} = {1})"); CompiledName("Invoke25Aux")>]
            member __.``Invoke <-``(func : System.Func<string, FunScript.TypeScript.EvalError>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype416")>]
            member __.prototype with get() : FunScript.TypeScript.EvalError = failwith "never" and set (v : FunScript.TypeScript.EvalError) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_435 =


    type FunScript.TypeScript.AnonymousType90 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype417")>]
            member __.prototype with get() : FunScript.TypeScript.SVGViewElement = failwith "never" and set (v : FunScript.TypeScript.SVGViewElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create463")>]
            member __.Create() : FunScript.TypeScript.SVGViewElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create463Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGViewElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_436 =


    type FunScript.TypeScript.AnonymousType91 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype418")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLLinkElement = failwith "never" and set (v : FunScript.TypeScript.HTMLLinkElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create464")>]
            member __.Create() : FunScript.TypeScript.HTMLLinkElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create464Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLLinkElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_437 =


    type FunScript.TypeScript.AnonymousType92 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype419")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLFontElement = failwith "never" and set (v : FunScript.TypeScript.HTMLFontElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create465")>]
            member __.Create() : FunScript.TypeScript.HTMLFontElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create465Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLFontElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_438 =


    type FunScript.TypeScript.AnonymousType93 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype420")>]
            member __.prototype with get() : FunScript.TypeScript.SVGTitleElement = failwith "never" and set (v : FunScript.TypeScript.SVGTitleElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create466")>]
            member __.Create() : FunScript.TypeScript.SVGTitleElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create466Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGTitleElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_439 =


    type FunScript.TypeScript.AnonymousType94 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype421")>]
            member __.prototype with get() : FunScript.TypeScript.ControlRangeCollection = failwith "never" and set (v : FunScript.TypeScript.ControlRangeCollection) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create467")>]
            member __.Create() : FunScript.TypeScript.ControlRangeCollection = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create467Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.ControlRangeCollection>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_440 =


    type FunScript.TypeScript.AnonymousType95 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype422")>]
            member __.prototype with get() : FunScript.TypeScript.MSNamespaceInfo = failwith "never" and set (v : FunScript.TypeScript.MSNamespaceInfo) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create468")>]
            member __.Create() : FunScript.TypeScript.MSNamespaceInfo = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create468Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.MSNamespaceInfo>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_441 =


    type FunScript.TypeScript.AnonymousType96 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype423")>]
            member __.prototype with get() : FunScript.TypeScript.SVGAnimatedTransformList = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedTransformList) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create469")>]
            member __.Create() : FunScript.TypeScript.SVGAnimatedTransformList = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create469Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.SVGAnimatedTransformList>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_442 =


    type FunScript.TypeScript.AnonymousType97 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype424")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLTableCaptionElement = failwith "never" and set (v : FunScript.TypeScript.HTMLTableCaptionElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create470")>]
            member __.Create() : FunScript.TypeScript.HTMLTableCaptionElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create470Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLTableCaptionElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_443 =


    type FunScript.TypeScript.AnonymousType98 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype425")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLOptionElement = failwith "never" and set (v : FunScript.TypeScript.HTMLOptionElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create471")>]
            member __.Create() : FunScript.TypeScript.HTMLOptionElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create471Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLOptionElement>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.create())"); CompiledName("create4")>]
            member __.create() : FunScript.TypeScript.HTMLOptionElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.create = {1})"); CompiledName("create4Aux")>]
            member __.``create <-``(func : System.Func<FunScript.TypeScript.HTMLOptionElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_444 =


    type FunScript.TypeScript.AnonymousType99 with 

            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype426")>]
            member __.prototype with get() : FunScript.TypeScript.HTMLMapElement = failwith "never" and set (v : FunScript.TypeScript.HTMLMapElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("(new {0}())"); CompiledName("Create472")>]
            member __.Create() : FunScript.TypeScript.HTMLMapElement = failwith "never"
            [<FunScript.JSEmitInline("(new {0} = {1})"); CompiledName("Create472Aux")>]
            member __.``Create <-``(func : System.Func<FunScript.TypeScript.HTMLMapElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_445 =


    type FunScript.TypeScript.ApplicationCache with 

            [<FunScript.JSEmitInline("({0}.status)"); CompiledName("status1")>]
            member __.status with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ondownloading)"); CompiledName("ondownloading")>]
            member __.ondownloading with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onprogress)"); CompiledName("onprogress1")>]
            member __.onprogress with get() : System.Func<FunScript.TypeScript.ProgressEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.ProgressEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onupdateready)"); CompiledName("onupdateready")>]
            member __.onupdateready with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.oncached)"); CompiledName("oncached")>]
            member __.oncached with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onobsolete)"); CompiledName("onobsolete")>]
            member __.onobsolete with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onerror)"); CompiledName("onerror2")>]
            member __.onerror with get() : System.Func<FunScript.TypeScript.ErrorEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.ErrorEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onchecking)"); CompiledName("onchecking")>]
            member __.onchecking with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onnoupdate)"); CompiledName("onnoupdate")>]
            member __.onnoupdate with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.swapCache())"); CompiledName("swapCache")>]
            member __.swapCache() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.swapCache = {1})"); CompiledName("swapCacheAux")>]
            member __.``swapCache <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.abort())"); CompiledName("abort")>]
            member __.abort() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.abort = {1})"); CompiledName("abortAux")>]
            member __.``abort <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.update())"); CompiledName("update")>]
            member __.update() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.update = {1})"); CompiledName("updateAux")>]
            member __.``update <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.CHECKING)"); CompiledName("CHECKING1")>]
            member __.CHECKING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.UNCACHED)"); CompiledName("UNCACHED1")>]
            member __.UNCACHED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.UPDATEREADY)"); CompiledName("UPDATEREADY1")>]
            member __.UPDATEREADY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOWNLOADING)"); CompiledName("DOWNLOADING1")>]
            member __.DOWNLOADING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.IDLE)"); CompiledName("IDLE1")>]
            member __.IDLE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.OBSOLETE)"); CompiledName("OBSOLETE1")>]
            member __.OBSOLETE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"downloading\", {1}, {?2}))"); CompiledName("addEventListener97")>]
            member __.addEventListener_downloading(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"progress\", {1}, {?2}))"); CompiledName("addEventListener98")>]
            member __.addEventListener_progress(listener : System.Func<FunScript.TypeScript.ProgressEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"updateready\", {1}, {?2}))"); CompiledName("addEventListener99")>]
            member __.addEventListener_updateready(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"cached\", {1}, {?2}))"); CompiledName("addEventListener100")>]
            member __.addEventListener_cached(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"obsolete\", {1}, {?2}))"); CompiledName("addEventListener101")>]
            member __.addEventListener_obsolete(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"error\", {1}, {?2}))"); CompiledName("addEventListener102")>]
            member __.addEventListener_error(listener : System.Func<FunScript.TypeScript.ErrorEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"checking\", {1}, {?2}))"); CompiledName("addEventListener103")>]
            member __.addEventListener_checking(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"noupdate\", {1}, {?2}))"); CompiledName("addEventListener104")>]
            member __.addEventListener_noupdate(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener({1}, {2}, {?3}))"); CompiledName("addEventListener105")>]
            member __.addEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener = {1})"); CompiledName("addEventListener105Aux")>]
            member __.``addEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_446 =


    type System.Collections.Generic.IList<'T> with 

            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length2")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toString())"); CompiledName("toString1")>]
            member __.toString() : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toString = {1})"); CompiledName("toString1Aux")>]
            member __.``toString <-``(func : System.Func<string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toLocaleString())"); CompiledName("toLocaleString")>]
            member __.toLocaleString() : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toLocaleString = {1})"); CompiledName("toLocaleStringAux")>]
            member __.``toLocaleString <-``(func : System.Func<string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.push())"); CompiledName("push")>]
            member __.push() : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.push = {1})"); CompiledName("pushAux")>]
            member __.``push <-``(func : System.Func<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.push({1...}))"); CompiledName("push1")>]
            member __.pushOverload2([<System.ParamArray>] items : array<'T>) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.pop())"); CompiledName("pop")>]
            member __.pop() : 'T = failwith "never"
            [<FunScript.JSEmitInline("({0}.pop = {1})"); CompiledName("popAux")>]
            member __.``pop <-``(func : System.Func<'T>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.concat())"); CompiledName("concat")>]
            member __.concat<'U>() : array<'T> = failwith "never"
            [<FunScript.JSEmitInline("({0}.concat = {1})"); CompiledName("concatAux")>]
            member __.``concat <-``<'U>(func : System.Func<array<'T>>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.concat({1...}))"); CompiledName("concat1")>]
            member __.concatOverload2<'U>([<System.ParamArray>] items : array<array<'T>>) : array<'T> = failwith "never"
            [<FunScript.JSEmitInline("({0}.concat())"); CompiledName("concat2")>]
            member __.concat() : array<'T> = failwith "never"
            [<FunScript.JSEmitInline("({0}.concat = {1})"); CompiledName("concat2Aux")>]
            member __.``concat <-``(func : System.Func<array<'T>>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.concat({1...}))"); CompiledName("concat3")>]
            member __.concatOverload2([<System.ParamArray>] items : array<'T>) : array<'T> = failwith "never"
            [<FunScript.JSEmitInline("({0}.join({?1}))"); CompiledName("join")>]
            member __.join(?separator : string) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.join = {1})"); CompiledName("joinAux")>]
            member __.``join <-``(func : System.Func<string, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.reverse())"); CompiledName("reverse")>]
            member __.reverse() : array<'T> = failwith "never"
            [<FunScript.JSEmitInline("({0}.reverse = {1})"); CompiledName("reverseAux")>]
            member __.``reverse <-``(func : System.Func<array<'T>>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.shift())"); CompiledName("shift")>]
            member __.shift() : 'T = failwith "never"
            [<FunScript.JSEmitInline("({0}.shift = {1})"); CompiledName("shiftAux")>]
            member __.``shift <-``(func : System.Func<'T>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.slice({?1}, {?2}))"); CompiledName("slice")>]
            member __.slice(?start : float, ?_end : float) : array<'T> = failwith "never"
            [<FunScript.JSEmitInline("({0}.slice = {1})"); CompiledName("sliceAux")>]
            member __.``slice <-``(func : System.Func<float, float, array<'T>>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.sort({?1}))"); CompiledName("sort")>]
            member __.sort(?compareFn : System.Func<'T, 'T, float>) : array<'T> = failwith "never"
            [<FunScript.JSEmitInline("({0}.sort = {1})"); CompiledName("sortAux")>]
            member __.``sort <-``(func : System.Func<System.Func<'T, 'T, float>, array<'T>>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.splice({1}))"); CompiledName("splice")>]
            member __.splice(start : float) : array<'T> = failwith "never"
            [<FunScript.JSEmitInline("({0}.splice = {1})"); CompiledName("spliceAux")>]
            member __.``splice <-``(func : System.Func<float, array<'T>>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.splice({1}, {2}))"); CompiledName("splice1")>]
            member __.splice(start : float, deleteCount : float) : array<'T> = failwith "never"
            [<FunScript.JSEmitInline("({0}.splice = {1})"); CompiledName("splice1Aux")>]
            member __.``splice <-``(func : System.Func<float, float, array<'T>>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.splice({1}, {2}, {3...}))"); CompiledName("splice2")>]
            member __.spliceOverload2(start : float, deleteCount : float, [<System.ParamArray>] items : array<'T>) : array<'T> = failwith "never"
            [<FunScript.JSEmitInline("({0}.unshift())"); CompiledName("unshift")>]
            member __.unshift() : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.unshift = {1})"); CompiledName("unshiftAux")>]
            member __.``unshift <-``(func : System.Func<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.unshift({1...}))"); CompiledName("unshift1")>]
            member __.unshiftOverload2([<System.ParamArray>] items : array<'T>) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.indexOf({1}, {?2}))"); CompiledName("indexOf")>]
            member __.indexOf(searchElement : 'T, ?fromIndex : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.indexOf = {1})"); CompiledName("indexOfAux")>]
            member __.``indexOf <-``(func : System.Func<'T, float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.lastIndexOf({1}, {?2}))"); CompiledName("lastIndexOf")>]
            member __.lastIndexOf(searchElement : 'T, ?fromIndex : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.lastIndexOf = {1})"); CompiledName("lastIndexOfAux")>]
            member __.``lastIndexOf <-``(func : System.Func<'T, float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.every({1}, {?2}))"); CompiledName("every")>]
            member __.every(callbackfn : System.Func<'T, float, array<'T>, bool>, ?thisArg : obj) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.every = {1})"); CompiledName("everyAux")>]
            member __.``every <-``(func : System.Func<System.Func<'T, float, array<'T>, bool>, obj, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.some({1}, {?2}))"); CompiledName("some")>]
            member __.some(callbackfn : System.Func<'T, float, array<'T>, bool>, ?thisArg : obj) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.some = {1})"); CompiledName("someAux")>]
            member __.``some <-``(func : System.Func<System.Func<'T, float, array<'T>, bool>, obj, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.forEach({1}, {?2}))"); CompiledName("forEach")>]
            member __.forEach(callbackfn : System.Func<'T, float, array<'T>, unit>, ?thisArg : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.forEach = {1})"); CompiledName("forEachAux")>]
            member __.``forEach <-``(func : System.Func<System.Func<'T, float, array<'T>, unit>, obj, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.map({1}, {?2}))"); CompiledName("map")>]
            member __.map<'U>(callbackfn : System.Func<'T, float, array<'T>, 'U>, ?thisArg : obj) : array<'U> = failwith "never"
            [<FunScript.JSEmitInline("({0}.map = {1})"); CompiledName("mapAux")>]
            member __.``map <-``<'U>(func : System.Func<System.Func<'T, float, array<'T>, 'U>, obj, array<'U>>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.filter({1}, {?2}))"); CompiledName("filter")>]
            member __.filter(callbackfn : System.Func<'T, float, array<'T>, bool>, ?thisArg : obj) : array<'T> = failwith "never"
            [<FunScript.JSEmitInline("({0}.filter = {1})"); CompiledName("filterAux")>]
            member __.``filter <-``(func : System.Func<System.Func<'T, float, array<'T>, bool>, obj, array<'T>>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.reduce({1}, {?2}))"); CompiledName("reduce")>]
            member __.reduce(callbackfn : System.Func<'T, 'T, float, array<'T>, 'T>, ?initialValue : 'T) : 'T = failwith "never"
            [<FunScript.JSEmitInline("({0}.reduce = {1})"); CompiledName("reduceAux")>]
            member __.``reduce <-``(func : System.Func<System.Func<'T, 'T, float, array<'T>, 'T>, 'T, 'T>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.reduce({1}, {2}))"); CompiledName("reduce1")>]
            member __.reduce<'U>(callbackfn : System.Func<'U, 'T, float, array<'T>, 'U>, initialValue : 'U) : 'U = failwith "never"
            [<FunScript.JSEmitInline("({0}.reduce = {1})"); CompiledName("reduce1Aux")>]
            member __.``reduce <-``<'U>(func : System.Func<System.Func<'U, 'T, float, array<'T>, 'U>, 'U, 'U>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.reduceRight({1}, {?2}))"); CompiledName("reduceRight")>]
            member __.reduceRight(callbackfn : System.Func<'T, 'T, float, array<'T>, 'T>, ?initialValue : 'T) : 'T = failwith "never"
            [<FunScript.JSEmitInline("({0}.reduceRight = {1})"); CompiledName("reduceRightAux")>]
            member __.``reduceRight <-``(func : System.Func<System.Func<'T, 'T, float, array<'T>, 'T>, 'T, 'T>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.reduceRight({1}, {2}))"); CompiledName("reduceRight1")>]
            member __.reduceRight<'U>(callbackfn : System.Func<'U, 'T, float, array<'T>, 'U>, initialValue : 'U) : 'U = failwith "never"
            [<FunScript.JSEmitInline("({0}.reduceRight = {1})"); CompiledName("reduceRight1Aux")>]
            member __.``reduceRight <-``<'U>(func : System.Func<System.Func<'U, 'T, float, array<'T>, 'U>, 'U, 'U>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}[{1}])"); CompiledName("Item1")>]
            member __.Item with get(i : int) : 'T = failwith "never" and set (i : int) (v : 'T) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_447 =


    type FunScript.TypeScript.ArrayBuffer with 

            [<FunScript.JSEmitInline("({0}.byteLength)"); CompiledName("byteLength")>]
            member __.byteLength with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.slice({1}, {?2}))"); CompiledName("slice1")>]
            member __.slice(_begin : float, ?_end : float) : FunScript.TypeScript.ArrayBuffer = failwith "never"
            [<FunScript.JSEmitInline("({0}.slice = {1})"); CompiledName("slice1Aux")>]
            member __.``slice <-``(func : System.Func<float, float, FunScript.TypeScript.ArrayBuffer>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_448 =


    type FunScript.TypeScript.ArrayBufferView with 

            [<FunScript.JSEmitInline("({0}.buffer)"); CompiledName("buffer")>]
            member __.buffer with get() : FunScript.TypeScript.ArrayBuffer = failwith "never" and set (v : FunScript.TypeScript.ArrayBuffer) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.byteOffset)"); CompiledName("byteOffset")>]
            member __.byteOffset with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.byteLength)"); CompiledName("byteLength1")>]
            member __.byteLength with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_449 =


    type FunScript.TypeScript.Attr with 

            [<FunScript.JSEmitInline("({0}.expando)"); CompiledName("expando")>]
            member __.expando with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.specified)"); CompiledName("specified")>]
            member __.specified with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ownerElement)"); CompiledName("ownerElement")>]
            member __.ownerElement with get() : FunScript.TypeScript.Element = failwith "never" and set (v : FunScript.TypeScript.Element) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.value)"); CompiledName("value")>]
            member __.value with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.name)"); CompiledName("name2")>]
            member __.name with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_450 =


    type FunScript.TypeScript.AudioTrack with 

            [<FunScript.JSEmitInline("({0}.kind)"); CompiledName("kind")>]
            member __.kind with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.language)"); CompiledName("language")>]
            member __.language with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.id)"); CompiledName("id")>]
            member __.id with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.label)"); CompiledName("label")>]
            member __.label with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.enabled)"); CompiledName("enabled")>]
            member __.enabled with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.sourceBuffer)"); CompiledName("sourceBuffer")>]
            member __.sourceBuffer with get() : FunScript.TypeScript.SourceBuffer = failwith "never" and set (v : FunScript.TypeScript.SourceBuffer) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_451 =


    type FunScript.TypeScript.AudioTrackList with 

            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length3")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onchange)"); CompiledName("onchange1")>]
            member __.onchange with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onaddtrack)"); CompiledName("onaddtrack")>]
            member __.onaddtrack with get() : System.Func<FunScript.TypeScript.TrackEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.TrackEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onremovetrack)"); CompiledName("onremovetrack")>]
            member __.onremovetrack with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getTrackById({1}))"); CompiledName("getTrackById")>]
            member __.getTrackById(id : string) : FunScript.TypeScript.AudioTrack = failwith "never"
            [<FunScript.JSEmitInline("({0}.getTrackById = {1})"); CompiledName("getTrackByIdAux")>]
            member __.``getTrackById <-``(func : System.Func<string, FunScript.TypeScript.AudioTrack>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.item({1}))"); CompiledName("item1")>]
            member __.item(index : float) : FunScript.TypeScript.AudioTrack = failwith "never"
            [<FunScript.JSEmitInline("({0}.item = {1})"); CompiledName("item1Aux")>]
            member __.``item <-``(func : System.Func<float, FunScript.TypeScript.AudioTrack>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}[{1}])"); CompiledName("Item2")>]
            member __.Item with get(i : int) : FunScript.TypeScript.AudioTrack = failwith "never" and set (i : int) (v : FunScript.TypeScript.AudioTrack) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"change\", {1}, {?2}))"); CompiledName("addEventListener106")>]
            member __.addEventListener_change(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"addtrack\", {1}, {?2}))"); CompiledName("addEventListener107")>]
            member __.addEventListener_addtrack(listener : System.Func<FunScript.TypeScript.TrackEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"removetrack\", {1}, {?2}))"); CompiledName("addEventListener108")>]
            member __.addEventListener_removetrack(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener({1}, {2}, {?3}))"); CompiledName("addEventListener109")>]
            member __.addEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener = {1})"); CompiledName("addEventListener109Aux")>]
            member __.``addEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_452 =


    type FunScript.TypeScript.BeforeUnloadEvent with 

            [<FunScript.JSEmitInline("({0}.returnValue)"); CompiledName("returnValue")>]
            member __.returnValue with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_453 =


    type FunScript.TypeScript.Blob with 

            [<FunScript.JSEmitInline("({0}.type)"); CompiledName("_type")>]
            member __._type with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.size)"); CompiledName("size")>]
            member __.size with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msDetachStream())"); CompiledName("msDetachStream")>]
            member __.msDetachStream() : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.msDetachStream = {1})"); CompiledName("msDetachStreamAux")>]
            member __.``msDetachStream <-``(func : System.Func<obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.slice({?1}, {?2}, {?3}))"); CompiledName("slice2")>]
            member __.slice(?start : float, ?_end : float, ?contentType : string) : FunScript.TypeScript.Blob = failwith "never"
            [<FunScript.JSEmitInline("({0}.slice = {1})"); CompiledName("slice2Aux")>]
            member __.``slice <-``(func : System.Func<float, float, string, FunScript.TypeScript.Blob>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msClose())"); CompiledName("msClose")>]
            member __.msClose() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msClose = {1})"); CompiledName("msCloseAux")>]
            member __.``msClose <-``(func : System.Func<unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_454 =


    type FunScript.TypeScript.BlobPropertyBag with 

            [<FunScript.JSEmitInline("({0}.type)"); CompiledName("_type1")>]
            member __._type with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.endings)"); CompiledName("endings")>]
            member __.endings with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_455 =


    type FunScript.TypeScript.BookmarkCollection with 

            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length4")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.item({1}))"); CompiledName("item2")>]
            member __.item(index : float) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.item = {1})"); CompiledName("item2Aux")>]
            member __.``item <-``(func : System.Func<float, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}[{1}])"); CompiledName("Item3")>]
            member __.Item with get(i : int) : obj = failwith "never" and set (i : int) (v : obj) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_456 =


    type FunScript.TypeScript.CSSFontFaceRule with 

            [<FunScript.JSEmitInline("({0}.style)"); CompiledName("style")>]
            member __.style with get() : FunScript.TypeScript.CSSStyleDeclaration = failwith "never" and set (v : FunScript.TypeScript.CSSStyleDeclaration) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_457 =


    type FunScript.TypeScript.CSSImportRule with 

            [<FunScript.JSEmitInline("({0}.styleSheet)"); CompiledName("styleSheet")>]
            member __.styleSheet with get() : FunScript.TypeScript.CSSStyleSheet = failwith "never" and set (v : FunScript.TypeScript.CSSStyleSheet) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.href)"); CompiledName("href")>]
            member __.href with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.media)"); CompiledName("media")>]
            member __.media with get() : FunScript.TypeScript.MediaList = failwith "never" and set (v : FunScript.TypeScript.MediaList) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_458 =


    type FunScript.TypeScript.CSSKeyframeRule with 

            [<FunScript.JSEmitInline("({0}.keyText)"); CompiledName("keyText")>]
            member __.keyText with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.style)"); CompiledName("style1")>]
            member __.style with get() : FunScript.TypeScript.CSSStyleDeclaration = failwith "never" and set (v : FunScript.TypeScript.CSSStyleDeclaration) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_459 =


    type FunScript.TypeScript.CSSKeyframesRule with 

            [<FunScript.JSEmitInline("({0}.name)"); CompiledName("name3")>]
            member __.name with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.cssRules)"); CompiledName("cssRules")>]
            member __.cssRules with get() : FunScript.TypeScript.CSSRuleList = failwith "never" and set (v : FunScript.TypeScript.CSSRuleList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.findRule({1}))"); CompiledName("findRule")>]
            member __.findRule(rule : string) : FunScript.TypeScript.CSSKeyframeRule = failwith "never"
            [<FunScript.JSEmitInline("({0}.findRule = {1})"); CompiledName("findRuleAux")>]
            member __.``findRule <-``(func : System.Func<string, FunScript.TypeScript.CSSKeyframeRule>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteRule({1}))"); CompiledName("deleteRule")>]
            member __.deleteRule(rule : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteRule = {1})"); CompiledName("deleteRuleAux")>]
            member __.``deleteRule <-``(func : System.Func<string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.appendRule({1}))"); CompiledName("appendRule")>]
            member __.appendRule(rule : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.appendRule = {1})"); CompiledName("appendRuleAux")>]
            member __.``appendRule <-``(func : System.Func<string, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_460 =


    type FunScript.TypeScript.CSSMediaRule with 

            [<FunScript.JSEmitInline("({0}.media)"); CompiledName("media1")>]
            member __.media with get() : FunScript.TypeScript.MediaList = failwith "never" and set (v : FunScript.TypeScript.MediaList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.cssRules)"); CompiledName("cssRules1")>]
            member __.cssRules with get() : FunScript.TypeScript.CSSRuleList = failwith "never" and set (v : FunScript.TypeScript.CSSRuleList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.insertRule({1}, {?2}))"); CompiledName("insertRule")>]
            member __.insertRule(rule : string, ?index : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.insertRule = {1})"); CompiledName("insertRuleAux")>]
            member __.``insertRule <-``(func : System.Func<string, float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteRule({?1}))"); CompiledName("deleteRule1")>]
            member __.deleteRule(?index : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteRule = {1})"); CompiledName("deleteRule1Aux")>]
            member __.``deleteRule <-``(func : System.Func<float, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_461 =


    type FunScript.TypeScript.CSSNamespaceRule with 

            [<FunScript.JSEmitInline("({0}.namespaceURI)"); CompiledName("namespaceURI")>]
            member __.namespaceURI with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.prefix)"); CompiledName("prefix")>]
            member __.prefix with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_462 =


    type FunScript.TypeScript.CSSPageRule with 

            [<FunScript.JSEmitInline("({0}.pseudoClass)"); CompiledName("pseudoClass")>]
            member __.pseudoClass with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.selectorText)"); CompiledName("selectorText")>]
            member __.selectorText with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.selector)"); CompiledName("selector")>]
            member __.selector with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.style)"); CompiledName("style2")>]
            member __.style with get() : FunScript.TypeScript.CSSStyleDeclaration = failwith "never" and set (v : FunScript.TypeScript.CSSStyleDeclaration) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_463 =


    type FunScript.TypeScript.CSSRule with 

            [<FunScript.JSEmitInline("({0}.cssText)"); CompiledName("cssText")>]
            member __.cssText with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.parentStyleSheet)"); CompiledName("parentStyleSheet")>]
            member __.parentStyleSheet with get() : FunScript.TypeScript.CSSStyleSheet = failwith "never" and set (v : FunScript.TypeScript.CSSStyleSheet) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.parentRule)"); CompiledName("parentRule")>]
            member __.parentRule with get() : FunScript.TypeScript.CSSRule = failwith "never" and set (v : FunScript.TypeScript.CSSRule) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.type)"); CompiledName("_type2")>]
            member __._type with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.IMPORT_RULE)"); CompiledName("IMPORT_RULE1")>]
            member __.IMPORT_RULE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MEDIA_RULE)"); CompiledName("MEDIA_RULE1")>]
            member __.MEDIA_RULE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STYLE_RULE)"); CompiledName("STYLE_RULE1")>]
            member __.STYLE_RULE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NAMESPACE_RULE)"); CompiledName("NAMESPACE_RULE1")>]
            member __.NAMESPACE_RULE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PAGE_RULE)"); CompiledName("PAGE_RULE1")>]
            member __.PAGE_RULE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.UNKNOWN_RULE)"); CompiledName("UNKNOWN_RULE1")>]
            member __.UNKNOWN_RULE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FONT_FACE_RULE)"); CompiledName("FONT_FACE_RULE1")>]
            member __.FONT_FACE_RULE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.CHARSET_RULE)"); CompiledName("CHARSET_RULE1")>]
            member __.CHARSET_RULE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.KEYFRAMES_RULE)"); CompiledName("KEYFRAMES_RULE1")>]
            member __.KEYFRAMES_RULE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.KEYFRAME_RULE)"); CompiledName("KEYFRAME_RULE1")>]
            member __.KEYFRAME_RULE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.VIEWPORT_RULE)"); CompiledName("VIEWPORT_RULE1")>]
            member __.VIEWPORT_RULE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_464 =


    type FunScript.TypeScript.CSSRuleList with 

            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length5")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.item({1}))"); CompiledName("item3")>]
            member __.item(index : float) : FunScript.TypeScript.CSSRule = failwith "never"
            [<FunScript.JSEmitInline("({0}.item = {1})"); CompiledName("item3Aux")>]
            member __.``item <-``(func : System.Func<float, FunScript.TypeScript.CSSRule>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}[{1}])"); CompiledName("Item4")>]
            member __.Item with get(i : int) : FunScript.TypeScript.CSSRule = failwith "never" and set (i : int) (v : FunScript.TypeScript.CSSRule) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_465 =


    type FunScript.TypeScript.CSSStyleDeclaration with 

            [<FunScript.JSEmitInline("({0}.backgroundAttachment)"); CompiledName("backgroundAttachment")>]
            member __.backgroundAttachment with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.visibility)"); CompiledName("visibility")>]
            member __.visibility with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.textAlignLast)"); CompiledName("textAlignLast")>]
            member __.textAlignLast with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderRightStyle)"); CompiledName("borderRightStyle")>]
            member __.borderRightStyle with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.counterIncrement)"); CompiledName("counterIncrement")>]
            member __.counterIncrement with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.orphans)"); CompiledName("orphans")>]
            member __.orphans with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.cssText)"); CompiledName("cssText1")>]
            member __.cssText with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderStyle)"); CompiledName("borderStyle")>]
            member __.borderStyle with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pointerEvents)"); CompiledName("pointerEvents")>]
            member __.pointerEvents with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderTopColor)"); CompiledName("borderTopColor")>]
            member __.borderTopColor with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.markerEnd)"); CompiledName("markerEnd")>]
            member __.markerEnd with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.textIndent)"); CompiledName("textIndent")>]
            member __.textIndent with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.listStyleImage)"); CompiledName("listStyleImage")>]
            member __.listStyleImage with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.cursor)"); CompiledName("cursor")>]
            member __.cursor with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.listStylePosition)"); CompiledName("listStylePosition")>]
            member __.listStylePosition with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.wordWrap)"); CompiledName("wordWrap")>]
            member __.wordWrap with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderTopStyle)"); CompiledName("borderTopStyle")>]
            member __.borderTopStyle with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.alignmentBaseline)"); CompiledName("alignmentBaseline")>]
            member __.alignmentBaseline with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.opacity)"); CompiledName("opacity")>]
            member __.opacity with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.direction)"); CompiledName("direction")>]
            member __.direction with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.strokeMiterlimit)"); CompiledName("strokeMiterlimit")>]
            member __.strokeMiterlimit with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.maxWidth)"); CompiledName("maxWidth")>]
            member __.maxWidth with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.color)"); CompiledName("color")>]
            member __.color with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clip)"); CompiledName("clip")>]
            member __.clip with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderRightWidth)"); CompiledName("borderRightWidth")>]
            member __.borderRightWidth with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.verticalAlign)"); CompiledName("verticalAlign")>]
            member __.verticalAlign with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.overflow)"); CompiledName("overflow")>]
            member __.overflow with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.mask)"); CompiledName("mask")>]
            member __.mask with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderLeftStyle)"); CompiledName("borderLeftStyle")>]
            member __.borderLeftStyle with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.emptyCells)"); CompiledName("emptyCells")>]
            member __.emptyCells with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.stopOpacity)"); CompiledName("stopOpacity")>]
            member __.stopOpacity with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.paddingRight)"); CompiledName("paddingRight")>]
            member __.paddingRight with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.parentRule)"); CompiledName("parentRule1")>]
            member __.parentRule with get() : FunScript.TypeScript.CSSRule = failwith "never" and set (v : FunScript.TypeScript.CSSRule) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.background)"); CompiledName("background")>]
            member __.background with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.boxSizing)"); CompiledName("boxSizing")>]
            member __.boxSizing with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.textJustify)"); CompiledName("textJustify")>]
            member __.textJustify with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.height)"); CompiledName("height")>]
            member __.height with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.paddingTop)"); CompiledName("paddingTop")>]
            member __.paddingTop with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length6")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.right)"); CompiledName("right")>]
            member __.right with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.baselineShift)"); CompiledName("baselineShift")>]
            member __.baselineShift with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderLeft)"); CompiledName("borderLeft")>]
            member __.borderLeft with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.widows)"); CompiledName("widows")>]
            member __.widows with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.lineHeight)"); CompiledName("lineHeight")>]
            member __.lineHeight with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.left)"); CompiledName("left")>]
            member __.left with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.textUnderlinePosition)"); CompiledName("textUnderlinePosition")>]
            member __.textUnderlinePosition with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.glyphOrientationHorizontal)"); CompiledName("glyphOrientationHorizontal")>]
            member __.glyphOrientationHorizontal with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.display)"); CompiledName("display")>]
            member __.display with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.textAnchor)"); CompiledName("textAnchor")>]
            member __.textAnchor with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.cssFloat)"); CompiledName("cssFloat")>]
            member __.cssFloat with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.strokeDasharray)"); CompiledName("strokeDasharray")>]
            member __.strokeDasharray with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.rubyAlign)"); CompiledName("rubyAlign")>]
            member __.rubyAlign with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.fontSizeAdjust)"); CompiledName("fontSizeAdjust")>]
            member __.fontSizeAdjust with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderLeftColor)"); CompiledName("borderLeftColor")>]
            member __.borderLeftColor with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.backgroundImage)"); CompiledName("backgroundImage")>]
            member __.backgroundImage with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.listStyleType)"); CompiledName("listStyleType")>]
            member __.listStyleType with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.strokeWidth)"); CompiledName("strokeWidth")>]
            member __.strokeWidth with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.textOverflow)"); CompiledName("textOverflow")>]
            member __.textOverflow with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.fillRule)"); CompiledName("fillRule")>]
            member __.fillRule with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderBottomColor)"); CompiledName("borderBottomColor")>]
            member __.borderBottomColor with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.zIndex)"); CompiledName("zIndex")>]
            member __.zIndex with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.position)"); CompiledName("position")>]
            member __.position with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.listStyle)"); CompiledName("listStyle")>]
            member __.listStyle with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msTransformOrigin)"); CompiledName("msTransformOrigin")>]
            member __.msTransformOrigin with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.dominantBaseline)"); CompiledName("dominantBaseline")>]
            member __.dominantBaseline with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.overflowY)"); CompiledName("overflowY")>]
            member __.overflowY with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.fill)"); CompiledName("fill")>]
            member __.fill with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.captionSide)"); CompiledName("captionSide")>]
            member __.captionSide with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderCollapse)"); CompiledName("borderCollapse")>]
            member __.borderCollapse with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.boxShadow)"); CompiledName("boxShadow")>]
            member __.boxShadow with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.quotes)"); CompiledName("quotes")>]
            member __.quotes with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.tableLayout)"); CompiledName("tableLayout")>]
            member __.tableLayout with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.unicodeBidi)"); CompiledName("unicodeBidi")>]
            member __.unicodeBidi with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderBottomWidth)"); CompiledName("borderBottomWidth")>]
            member __.borderBottomWidth with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.backgroundSize)"); CompiledName("backgroundSize")>]
            member __.backgroundSize with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.textDecoration)"); CompiledName("textDecoration")>]
            member __.textDecoration with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.strokeDashoffset)"); CompiledName("strokeDashoffset")>]
            member __.strokeDashoffset with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.fontSize)"); CompiledName("fontSize")>]
            member __.fontSize with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.border)"); CompiledName("border")>]
            member __.border with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pageBreakBefore)"); CompiledName("pageBreakBefore")>]
            member __.pageBreakBefore with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderTopRightRadius)"); CompiledName("borderTopRightRadius")>]
            member __.borderTopRightRadius with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msTransform)"); CompiledName("msTransform")>]
            member __.msTransform with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderBottomLeftRadius)"); CompiledName("borderBottomLeftRadius")>]
            member __.borderBottomLeftRadius with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.textTransform)"); CompiledName("textTransform")>]
            member __.textTransform with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.rubyPosition)"); CompiledName("rubyPosition")>]
            member __.rubyPosition with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.strokeLinejoin)"); CompiledName("strokeLinejoin")>]
            member __.strokeLinejoin with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clipPath)"); CompiledName("clipPath")>]
            member __.clipPath with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderRightColor)"); CompiledName("borderRightColor")>]
            member __.borderRightColor with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.fontFamily)"); CompiledName("fontFamily")>]
            member __.fontFamily with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clear)"); CompiledName("clear")>]
            member __.clear with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.content)"); CompiledName("content")>]
            member __.content with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.backgroundClip)"); CompiledName("backgroundClip")>]
            member __.backgroundClip with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.marginBottom)"); CompiledName("marginBottom")>]
            member __.marginBottom with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.counterReset)"); CompiledName("counterReset")>]
            member __.counterReset with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.outlineWidth)"); CompiledName("outlineWidth")>]
            member __.outlineWidth with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.marginRight)"); CompiledName("marginRight")>]
            member __.marginRight with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.paddingLeft)"); CompiledName("paddingLeft")>]
            member __.paddingLeft with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderBottom)"); CompiledName("borderBottom")>]
            member __.borderBottom with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.wordBreak)"); CompiledName("wordBreak")>]
            member __.wordBreak with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.marginTop)"); CompiledName("marginTop")>]
            member __.marginTop with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.top)"); CompiledName("top1")>]
            member __.top with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.fontWeight)"); CompiledName("fontWeight")>]
            member __.fontWeight with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderRight)"); CompiledName("borderRight")>]
            member __.borderRight with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.width)"); CompiledName("width")>]
            member __.width with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.kerning)"); CompiledName("kerning")>]
            member __.kerning with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pageBreakAfter)"); CompiledName("pageBreakAfter")>]
            member __.pageBreakAfter with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderBottomStyle)"); CompiledName("borderBottomStyle")>]
            member __.borderBottomStyle with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.fontStretch)"); CompiledName("fontStretch")>]
            member __.fontStretch with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.padding)"); CompiledName("padding")>]
            member __.padding with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.strokeOpacity)"); CompiledName("strokeOpacity")>]
            member __.strokeOpacity with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.markerStart)"); CompiledName("markerStart")>]
            member __.markerStart with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.bottom)"); CompiledName("bottom")>]
            member __.bottom with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderLeftWidth)"); CompiledName("borderLeftWidth")>]
            member __.borderLeftWidth with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clipRule)"); CompiledName("clipRule")>]
            member __.clipRule with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.backgroundPosition)"); CompiledName("backgroundPosition")>]
            member __.backgroundPosition with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.backgroundColor)"); CompiledName("backgroundColor")>]
            member __.backgroundColor with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pageBreakInside)"); CompiledName("pageBreakInside")>]
            member __.pageBreakInside with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.backgroundOrigin)"); CompiledName("backgroundOrigin")>]
            member __.backgroundOrigin with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.strokeLinecap)"); CompiledName("strokeLinecap")>]
            member __.strokeLinecap with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderTopWidth)"); CompiledName("borderTopWidth")>]
            member __.borderTopWidth with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.outlineStyle)"); CompiledName("outlineStyle")>]
            member __.outlineStyle with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderTop)"); CompiledName("borderTop")>]
            member __.borderTop with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.outlineColor)"); CompiledName("outlineColor")>]
            member __.outlineColor with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.paddingBottom)"); CompiledName("paddingBottom")>]
            member __.paddingBottom with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.marginLeft)"); CompiledName("marginLeft")>]
            member __.marginLeft with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.font)"); CompiledName("font")>]
            member __.font with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.outline)"); CompiledName("outline")>]
            member __.outline with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.wordSpacing)"); CompiledName("wordSpacing")>]
            member __.wordSpacing with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.maxHeight)"); CompiledName("maxHeight")>]
            member __.maxHeight with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.fillOpacity)"); CompiledName("fillOpacity")>]
            member __.fillOpacity with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.letterSpacing)"); CompiledName("letterSpacing")>]
            member __.letterSpacing with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderSpacing)"); CompiledName("borderSpacing")>]
            member __.borderSpacing with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.backgroundRepeat)"); CompiledName("backgroundRepeat")>]
            member __.backgroundRepeat with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderRadius)"); CompiledName("borderRadius")>]
            member __.borderRadius with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderWidth)"); CompiledName("borderWidth")>]
            member __.borderWidth with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderBottomRightRadius)"); CompiledName("borderBottomRightRadius")>]
            member __.borderBottomRightRadius with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.whiteSpace)"); CompiledName("whiteSpace")>]
            member __.whiteSpace with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.fontStyle)"); CompiledName("fontStyle")>]
            member __.fontStyle with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.minWidth)"); CompiledName("minWidth")>]
            member __.minWidth with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.stopColor)"); CompiledName("stopColor")>]
            member __.stopColor with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderTopLeftRadius)"); CompiledName("borderTopLeftRadius")>]
            member __.borderTopLeftRadius with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderColor)"); CompiledName("borderColor")>]
            member __.borderColor with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.marker)"); CompiledName("marker")>]
            member __.marker with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.glyphOrientationVertical)"); CompiledName("glyphOrientationVertical")>]
            member __.glyphOrientationVertical with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.markerMid)"); CompiledName("markerMid")>]
            member __.markerMid with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.fontVariant)"); CompiledName("fontVariant")>]
            member __.fontVariant with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.minHeight)"); CompiledName("minHeight")>]
            member __.minHeight with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.stroke)"); CompiledName("stroke")>]
            member __.stroke with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.rubyOverhang)"); CompiledName("rubyOverhang")>]
            member __.rubyOverhang with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.overflowX)"); CompiledName("overflowX")>]
            member __.overflowX with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.textAlign)"); CompiledName("textAlign")>]
            member __.textAlign with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.margin)"); CompiledName("margin")>]
            member __.margin with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.animationFillMode)"); CompiledName("animationFillMode")>]
            member __.animationFillMode with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.floodColor)"); CompiledName("floodColor")>]
            member __.floodColor with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.animationIterationCount)"); CompiledName("animationIterationCount")>]
            member __.animationIterationCount with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.textShadow)"); CompiledName("textShadow")>]
            member __.textShadow with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.backfaceVisibility)"); CompiledName("backfaceVisibility")>]
            member __.backfaceVisibility with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msAnimationIterationCount)"); CompiledName("msAnimationIterationCount")>]
            member __.msAnimationIterationCount with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.animationDelay)"); CompiledName("animationDelay")>]
            member __.animationDelay with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.animationTimingFunction)"); CompiledName("animationTimingFunction")>]
            member __.animationTimingFunction with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.columnWidth)"); CompiledName("columnWidth")>]
            member __.columnWidth with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msScrollSnapX)"); CompiledName("msScrollSnapX")>]
            member __.msScrollSnapX with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.columnRuleColor)"); CompiledName("columnRuleColor")>]
            member __.columnRuleColor with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.columnRuleWidth)"); CompiledName("columnRuleWidth")>]
            member __.columnRuleWidth with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.transitionDelay)"); CompiledName("transitionDelay")>]
            member __.transitionDelay with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.transition)"); CompiledName("transition")>]
            member __.transition with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msFlowFrom)"); CompiledName("msFlowFrom")>]
            member __.msFlowFrom with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msScrollSnapType)"); CompiledName("msScrollSnapType")>]
            member __.msScrollSnapType with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msContentZoomSnapType)"); CompiledName("msContentZoomSnapType")>]
            member __.msContentZoomSnapType with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msGridColumns)"); CompiledName("msGridColumns")>]
            member __.msGridColumns with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msAnimationName)"); CompiledName("msAnimationName")>]
            member __.msAnimationName with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msGridRowAlign)"); CompiledName("msGridRowAlign")>]
            member __.msGridRowAlign with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msContentZoomChaining)"); CompiledName("msContentZoomChaining")>]
            member __.msContentZoomChaining with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msGridColumn)"); CompiledName("msGridColumn")>]
            member __.msGridColumn with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msHyphenateLimitZone)"); CompiledName("msHyphenateLimitZone")>]
            member __.msHyphenateLimitZone with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msScrollRails)"); CompiledName("msScrollRails")>]
            member __.msScrollRails with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msAnimationDelay)"); CompiledName("msAnimationDelay")>]
            member __.msAnimationDelay with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.enableBackground)"); CompiledName("enableBackground")>]
            member __.enableBackground with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msWrapThrough)"); CompiledName("msWrapThrough")>]
            member __.msWrapThrough with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.columnRuleStyle)"); CompiledName("columnRuleStyle")>]
            member __.columnRuleStyle with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msAnimation)"); CompiledName("msAnimation")>]
            member __.msAnimation with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msFlexFlow)"); CompiledName("msFlexFlow")>]
            member __.msFlexFlow with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msScrollSnapY)"); CompiledName("msScrollSnapY")>]
            member __.msScrollSnapY with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msHyphenateLimitLines)"); CompiledName("msHyphenateLimitLines")>]
            member __.msHyphenateLimitLines with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msTouchAction)"); CompiledName("msTouchAction")>]
            member __.msTouchAction with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msScrollLimit)"); CompiledName("msScrollLimit")>]
            member __.msScrollLimit with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.animation)"); CompiledName("animation")>]
            member __.animation with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.transform)"); CompiledName("transform")>]
            member __.transform with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.filter)"); CompiledName("filter1")>]
            member __.filter with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.colorInterpolationFilters)"); CompiledName("colorInterpolationFilters")>]
            member __.colorInterpolationFilters with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.transitionTimingFunction)"); CompiledName("transitionTimingFunction")>]
            member __.transitionTimingFunction with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msBackfaceVisibility)"); CompiledName("msBackfaceVisibility")>]
            member __.msBackfaceVisibility with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.animationPlayState)"); CompiledName("animationPlayState")>]
            member __.animationPlayState with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.transformOrigin)"); CompiledName("transformOrigin")>]
            member __.transformOrigin with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msScrollLimitYMin)"); CompiledName("msScrollLimitYMin")>]
            member __.msScrollLimitYMin with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msFontFeatureSettings)"); CompiledName("msFontFeatureSettings")>]
            member __.msFontFeatureSettings with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msContentZoomLimitMin)"); CompiledName("msContentZoomLimitMin")>]
            member __.msContentZoomLimitMin with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.columnGap)"); CompiledName("columnGap")>]
            member __.columnGap with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.transitionProperty)"); CompiledName("transitionProperty")>]
            member __.transitionProperty with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msAnimationDuration)"); CompiledName("msAnimationDuration")>]
            member __.msAnimationDuration with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msAnimationFillMode)"); CompiledName("msAnimationFillMode")>]
            member __.msAnimationFillMode with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msFlexDirection)"); CompiledName("msFlexDirection")>]
            member __.msFlexDirection with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msTransitionDuration)"); CompiledName("msTransitionDuration")>]
            member __.msTransitionDuration with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.fontFeatureSettings)"); CompiledName("fontFeatureSettings")>]
            member __.fontFeatureSettings with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.breakBefore)"); CompiledName("breakBefore")>]
            member __.breakBefore with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msFlexWrap)"); CompiledName("msFlexWrap")>]
            member __.msFlexWrap with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.perspective)"); CompiledName("perspective")>]
            member __.perspective with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msFlowInto)"); CompiledName("msFlowInto")>]
            member __.msFlowInto with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msTransformStyle)"); CompiledName("msTransformStyle")>]
            member __.msTransformStyle with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msScrollTranslation)"); CompiledName("msScrollTranslation")>]
            member __.msScrollTranslation with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msTransitionProperty)"); CompiledName("msTransitionProperty")>]
            member __.msTransitionProperty with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msUserSelect)"); CompiledName("msUserSelect")>]
            member __.msUserSelect with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msOverflowStyle)"); CompiledName("msOverflowStyle")>]
            member __.msOverflowStyle with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msScrollSnapPointsY)"); CompiledName("msScrollSnapPointsY")>]
            member __.msScrollSnapPointsY with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.animationDirection)"); CompiledName("animationDirection")>]
            member __.animationDirection with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.animationDuration)"); CompiledName("animationDuration")>]
            member __.animationDuration with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msFlex)"); CompiledName("msFlex")>]
            member __.msFlex with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msTransitionTimingFunction)"); CompiledName("msTransitionTimingFunction")>]
            member __.msTransitionTimingFunction with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.animationName)"); CompiledName("animationName1")>]
            member __.animationName with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.columnRule)"); CompiledName("columnRule")>]
            member __.columnRule with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msGridColumnSpan)"); CompiledName("msGridColumnSpan")>]
            member __.msGridColumnSpan with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msFlexNegative)"); CompiledName("msFlexNegative")>]
            member __.msFlexNegative with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.columnFill)"); CompiledName("columnFill")>]
            member __.columnFill with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msGridRow)"); CompiledName("msGridRow")>]
            member __.msGridRow with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msFlexOrder)"); CompiledName("msFlexOrder")>]
            member __.msFlexOrder with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msFlexItemAlign)"); CompiledName("msFlexItemAlign")>]
            member __.msFlexItemAlign with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msFlexPositive)"); CompiledName("msFlexPositive")>]
            member __.msFlexPositive with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msContentZoomLimitMax)"); CompiledName("msContentZoomLimitMax")>]
            member __.msContentZoomLimitMax with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msScrollLimitYMax)"); CompiledName("msScrollLimitYMax")>]
            member __.msScrollLimitYMax with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msGridColumnAlign)"); CompiledName("msGridColumnAlign")>]
            member __.msGridColumnAlign with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.perspectiveOrigin)"); CompiledName("perspectiveOrigin")>]
            member __.perspectiveOrigin with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.lightingColor)"); CompiledName("lightingColor")>]
            member __.lightingColor with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.columns)"); CompiledName("columns")>]
            member __.columns with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msScrollChaining)"); CompiledName("msScrollChaining")>]
            member __.msScrollChaining with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msHyphenateLimitChars)"); CompiledName("msHyphenateLimitChars")>]
            member __.msHyphenateLimitChars with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msTouchSelect)"); CompiledName("msTouchSelect")>]
            member __.msTouchSelect with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.floodOpacity)"); CompiledName("floodOpacity")>]
            member __.floodOpacity with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msAnimationDirection)"); CompiledName("msAnimationDirection")>]
            member __.msAnimationDirection with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msAnimationPlayState)"); CompiledName("msAnimationPlayState")>]
            member __.msAnimationPlayState with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.columnSpan)"); CompiledName("columnSpan")>]
            member __.columnSpan with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msContentZooming)"); CompiledName("msContentZooming")>]
            member __.msContentZooming with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msPerspective)"); CompiledName("msPerspective")>]
            member __.msPerspective with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msFlexPack)"); CompiledName("msFlexPack")>]
            member __.msFlexPack with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msScrollSnapPointsX)"); CompiledName("msScrollSnapPointsX")>]
            member __.msScrollSnapPointsX with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msContentZoomSnapPoints)"); CompiledName("msContentZoomSnapPoints")>]
            member __.msContentZoomSnapPoints with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msGridRowSpan)"); CompiledName("msGridRowSpan")>]
            member __.msGridRowSpan with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msContentZoomSnap)"); CompiledName("msContentZoomSnap")>]
            member __.msContentZoomSnap with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msScrollLimitXMin)"); CompiledName("msScrollLimitXMin")>]
            member __.msScrollLimitXMin with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.breakInside)"); CompiledName("breakInside")>]
            member __.breakInside with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msHighContrastAdjust)"); CompiledName("msHighContrastAdjust")>]
            member __.msHighContrastAdjust with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msFlexLinePack)"); CompiledName("msFlexLinePack")>]
            member __.msFlexLinePack with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msGridRows)"); CompiledName("msGridRows")>]
            member __.msGridRows with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.transitionDuration)"); CompiledName("transitionDuration")>]
            member __.transitionDuration with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msHyphens)"); CompiledName("msHyphens")>]
            member __.msHyphens with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.breakAfter)"); CompiledName("breakAfter")>]
            member __.breakAfter with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msTransition)"); CompiledName("msTransition")>]
            member __.msTransition with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msPerspectiveOrigin)"); CompiledName("msPerspectiveOrigin")>]
            member __.msPerspectiveOrigin with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msContentZoomLimit)"); CompiledName("msContentZoomLimit")>]
            member __.msContentZoomLimit with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msScrollLimitXMax)"); CompiledName("msScrollLimitXMax")>]
            member __.msScrollLimitXMax with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msFlexAlign)"); CompiledName("msFlexAlign")>]
            member __.msFlexAlign with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msWrapMargin)"); CompiledName("msWrapMargin")>]
            member __.msWrapMargin with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.columnCount)"); CompiledName("columnCount")>]
            member __.columnCount with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msAnimationTimingFunction)"); CompiledName("msAnimationTimingFunction")>]
            member __.msAnimationTimingFunction with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msTransitionDelay)"); CompiledName("msTransitionDelay")>]
            member __.msTransitionDelay with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.transformStyle)"); CompiledName("transformStyle")>]
            member __.transformStyle with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msWrapFlow)"); CompiledName("msWrapFlow")>]
            member __.msWrapFlow with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msFlexPreferredSize)"); CompiledName("msFlexPreferredSize")>]
            member __.msFlexPreferredSize with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.alignItems)"); CompiledName("alignItems")>]
            member __.alignItems with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderImageSource)"); CompiledName("borderImageSource")>]
            member __.borderImageSource with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.flexBasis)"); CompiledName("flexBasis")>]
            member __.flexBasis with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderImageWidth)"); CompiledName("borderImageWidth")>]
            member __.borderImageWidth with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderImageRepeat)"); CompiledName("borderImageRepeat")>]
            member __.borderImageRepeat with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.order)"); CompiledName("order")>]
            member __.order with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.flex)"); CompiledName("flex")>]
            member __.flex with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.alignContent)"); CompiledName("alignContent")>]
            member __.alignContent with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msImeAlign)"); CompiledName("msImeAlign")>]
            member __.msImeAlign with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.flexShrink)"); CompiledName("flexShrink")>]
            member __.flexShrink with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.flexGrow)"); CompiledName("flexGrow")>]
            member __.flexGrow with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderImageSlice)"); CompiledName("borderImageSlice")>]
            member __.borderImageSlice with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.flexWrap)"); CompiledName("flexWrap")>]
            member __.flexWrap with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderImageOutset)"); CompiledName("borderImageOutset")>]
            member __.borderImageOutset with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.flexDirection)"); CompiledName("flexDirection")>]
            member __.flexDirection with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.touchAction)"); CompiledName("touchAction")>]
            member __.touchAction with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.flexFlow)"); CompiledName("flexFlow")>]
            member __.flexFlow with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderImage)"); CompiledName("borderImage")>]
            member __.borderImage with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.justifyContent)"); CompiledName("justifyContent")>]
            member __.justifyContent with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.alignSelf)"); CompiledName("alignSelf")>]
            member __.alignSelf with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msTextCombineHorizontal)"); CompiledName("msTextCombineHorizontal")>]
            member __.msTextCombineHorizontal with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getPropertyPriority({1}))"); CompiledName("getPropertyPriority")>]
            member __.getPropertyPriority(propertyName : string) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.getPropertyPriority = {1})"); CompiledName("getPropertyPriorityAux")>]
            member __.``getPropertyPriority <-``(func : System.Func<string, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getPropertyValue({1}))"); CompiledName("getPropertyValue")>]
            member __.getPropertyValue(propertyName : string) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.getPropertyValue = {1})"); CompiledName("getPropertyValueAux")>]
            member __.``getPropertyValue <-``(func : System.Func<string, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeProperty({1}))"); CompiledName("removeProperty")>]
            member __.removeProperty(propertyName : string) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeProperty = {1})"); CompiledName("removePropertyAux")>]
            member __.``removeProperty <-``(func : System.Func<string, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.item({1}))"); CompiledName("item4")>]
            member __.item(index : float) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.item = {1})"); CompiledName("item4Aux")>]
            member __.``item <-``(func : System.Func<float, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}[{1}])"); CompiledName("Item5")>]
            member __.Item with get(i : int) : string = failwith "never" and set (i : int) (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setProperty({1}, {2}, {?3}))"); CompiledName("setProperty")>]
            member __.setProperty(propertyName : string, value : string, ?priority : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setProperty = {1})"); CompiledName("setPropertyAux")>]
            member __.``setProperty <-``(func : System.Func<string, string, string, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_466 =


    type FunScript.TypeScript.CSSStyleRule with 

            [<FunScript.JSEmitInline("({0}.selectorText)"); CompiledName("selectorText1")>]
            member __.selectorText with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.style)"); CompiledName("style3")>]
            member __.style with get() : FunScript.TypeScript.MSStyleCSSProperties = failwith "never" and set (v : FunScript.TypeScript.MSStyleCSSProperties) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.readOnly)"); CompiledName("readOnly")>]
            member __.readOnly with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_467 =


    type FunScript.TypeScript.CSSStyleSheet with 

            [<FunScript.JSEmitInline("({0}.owningElement)"); CompiledName("owningElement")>]
            member __.owningElement with get() : FunScript.TypeScript.Element = failwith "never" and set (v : FunScript.TypeScript.Element) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.imports)"); CompiledName("imports")>]
            member __.imports with get() : FunScript.TypeScript.StyleSheetList = failwith "never" and set (v : FunScript.TypeScript.StyleSheetList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.isAlternate)"); CompiledName("isAlternate")>]
            member __.isAlternate with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.rules)"); CompiledName("rules")>]
            member __.rules with get() : FunScript.TypeScript.MSCSSRuleList = failwith "never" and set (v : FunScript.TypeScript.MSCSSRuleList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.isPrefAlternate)"); CompiledName("isPrefAlternate")>]
            member __.isPrefAlternate with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.readOnly)"); CompiledName("readOnly1")>]
            member __.readOnly with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.cssText)"); CompiledName("cssText2")>]
            member __.cssText with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ownerRule)"); CompiledName("ownerRule")>]
            member __.ownerRule with get() : FunScript.TypeScript.CSSRule = failwith "never" and set (v : FunScript.TypeScript.CSSRule) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.href)"); CompiledName("href1")>]
            member __.href with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.cssRules)"); CompiledName("cssRules2")>]
            member __.cssRules with get() : FunScript.TypeScript.CSSRuleList = failwith "never" and set (v : FunScript.TypeScript.CSSRuleList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.id)"); CompiledName("id1")>]
            member __.id with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pages)"); CompiledName("pages")>]
            member __.pages with get() : FunScript.TypeScript.StyleSheetPageList = failwith "never" and set (v : FunScript.TypeScript.StyleSheetPageList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addImport({1}, {?2}))"); CompiledName("addImport")>]
            member __.addImport(bstrURL : string, ?lIndex : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.addImport = {1})"); CompiledName("addImportAux")>]
            member __.``addImport <-``(func : System.Func<string, float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addPageRule({1}, {2}, {?3}))"); CompiledName("addPageRule")>]
            member __.addPageRule(bstrSelector : string, bstrStyle : string, ?lIndex : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.addPageRule = {1})"); CompiledName("addPageRuleAux")>]
            member __.``addPageRule <-``(func : System.Func<string, string, float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.insertRule({1}, {?2}))"); CompiledName("insertRule1")>]
            member __.insertRule(rule : string, ?index : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.insertRule = {1})"); CompiledName("insertRule1Aux")>]
            member __.``insertRule <-``(func : System.Func<string, float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeRule({1}))"); CompiledName("removeRule")>]
            member __.removeRule(lIndex : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeRule = {1})"); CompiledName("removeRuleAux")>]
            member __.``removeRule <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteRule({?1}))"); CompiledName("deleteRule2")>]
            member __.deleteRule(?index : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteRule = {1})"); CompiledName("deleteRule2Aux")>]
            member __.``deleteRule <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addRule({1}, {?2}, {?3}))"); CompiledName("addRule")>]
            member __.addRule(bstrSelector : string, ?bstrStyle : string, ?lIndex : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.addRule = {1})"); CompiledName("addRuleAux")>]
            member __.``addRule <-``(func : System.Func<string, string, float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeImport({1}))"); CompiledName("removeImport")>]
            member __.removeImport(lIndex : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeImport = {1})"); CompiledName("removeImportAux")>]
            member __.``removeImport <-``(func : System.Func<float, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_468 =


    type FunScript.TypeScript.CanvasGradient with 

            [<FunScript.JSEmitInline("({0}.addColorStop({1}, {2}))"); CompiledName("addColorStop")>]
            member __.addColorStop(offset : float, color : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addColorStop = {1})"); CompiledName("addColorStopAux")>]
            member __.``addColorStop <-``(func : System.Func<float, string, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_469 =


    type FunScript.TypeScript.CanvasRenderingContext2D with 

            [<FunScript.JSEmitInline("({0}.miterLimit)"); CompiledName("miterLimit")>]
            member __.miterLimit with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.font)"); CompiledName("font1")>]
            member __.font with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.globalCompositeOperation)"); CompiledName("globalCompositeOperation")>]
            member __.globalCompositeOperation with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msFillRule)"); CompiledName("msFillRule")>]
            member __.msFillRule with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.lineCap)"); CompiledName("lineCap")>]
            member __.lineCap with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msImageSmoothingEnabled)"); CompiledName("msImageSmoothingEnabled")>]
            member __.msImageSmoothingEnabled with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.lineDashOffset)"); CompiledName("lineDashOffset")>]
            member __.lineDashOffset with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.shadowColor)"); CompiledName("shadowColor")>]
            member __.shadowColor with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.lineJoin)"); CompiledName("lineJoin")>]
            member __.lineJoin with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.shadowOffsetX)"); CompiledName("shadowOffsetX")>]
            member __.shadowOffsetX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.lineWidth)"); CompiledName("lineWidth")>]
            member __.lineWidth with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.canvas)"); CompiledName("canvas")>]
            member __.canvas with get() : FunScript.TypeScript.HTMLCanvasElement = failwith "never" and set (v : FunScript.TypeScript.HTMLCanvasElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.strokeStyle)"); CompiledName("strokeStyle")>]
            member __.strokeStyle with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.globalAlpha)"); CompiledName("globalAlpha")>]
            member __.globalAlpha with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.shadowOffsetY)"); CompiledName("shadowOffsetY")>]
            member __.shadowOffsetY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.fillStyle)"); CompiledName("fillStyle")>]
            member __.fillStyle with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.shadowBlur)"); CompiledName("shadowBlur")>]
            member __.shadowBlur with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.textAlign)"); CompiledName("textAlign1")>]
            member __.textAlign with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.textBaseline)"); CompiledName("textBaseline")>]
            member __.textBaseline with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.restore())"); CompiledName("restore")>]
            member __.restore() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.restore = {1})"); CompiledName("restoreAux")>]
            member __.``restore <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setTransform({1}, {2}, {3}, {4}, {5}, {6}))"); CompiledName("setTransform")>]
            member __.setTransform(m11 : float, m12 : float, m21 : float, m22 : float, dx : float, dy : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setTransform = {1})"); CompiledName("setTransformAux")>]
            member __.``setTransform <-``(func : System.Func<float, float, float, float, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.save())"); CompiledName("save")>]
            member __.save() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.save = {1})"); CompiledName("saveAux")>]
            member __.``save <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.arc({1}, {2}, {3}, {4}, {5}, {?6}))"); CompiledName("arc")>]
            member __.arc(x : float, y : float, radius : float, startAngle : float, endAngle : float, ?anticlockwise : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.arc = {1})"); CompiledName("arcAux")>]
            member __.``arc <-``(func : System.Func<float, float, float, float, float, bool, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.measureText({1}))"); CompiledName("measureText")>]
            member __.measureText(text : string) : FunScript.TypeScript.TextMetrics = failwith "never"
            [<FunScript.JSEmitInline("({0}.measureText = {1})"); CompiledName("measureTextAux")>]
            member __.``measureText <-``(func : System.Func<string, FunScript.TypeScript.TextMetrics>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.isPointInPath({1}, {2}, {?3}))"); CompiledName("isPointInPath")>]
            member __.isPointInPath(x : float, y : float, ?fillRule : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.isPointInPath = {1})"); CompiledName("isPointInPathAux")>]
            member __.``isPointInPath <-``(func : System.Func<float, float, string, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.quadraticCurveTo({1}, {2}, {3}, {4}))"); CompiledName("quadraticCurveTo")>]
            member __.quadraticCurveTo(cpx : float, cpy : float, x : float, y : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.quadraticCurveTo = {1})"); CompiledName("quadraticCurveToAux")>]
            member __.``quadraticCurveTo <-``(func : System.Func<float, float, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.putImageData({1}, {2}, {3}, {?4}, {?5}, {?6}, {?7}))"); CompiledName("putImageData")>]
            member __.putImageData(imagedata : FunScript.TypeScript.ImageData, dx : float, dy : float, ?dirtyX : float, ?dirtyY : float, ?dirtyWidth : float, ?dirtyHeight : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.putImageData = {1})"); CompiledName("putImageDataAux")>]
            member __.``putImageData <-``(func : System.Func<FunScript.TypeScript.ImageData, float, float, float, float, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.rotate({1}))"); CompiledName("rotate")>]
            member __.rotate(angle : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.rotate = {1})"); CompiledName("rotateAux")>]
            member __.``rotate <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.fillText({1}, {2}, {3}, {?4}))"); CompiledName("fillText")>]
            member __.fillText(text : string, x : float, y : float, ?maxWidth : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.fillText = {1})"); CompiledName("fillTextAux")>]
            member __.``fillText <-``(func : System.Func<string, float, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.translate({1}, {2}))"); CompiledName("translate")>]
            member __.translate(x : float, y : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.translate = {1})"); CompiledName("translateAux")>]
            member __.``translate <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.scale({1}, {2}))"); CompiledName("scale")>]
            member __.scale(x : float, y : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.scale = {1})"); CompiledName("scaleAux")>]
            member __.``scale <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createRadialGradient({1}, {2}, {3}, {4}, {5}, {6}))"); CompiledName("createRadialGradient")>]
            member __.createRadialGradient(x0 : float, y0 : float, r0 : float, x1 : float, y1 : float, r1 : float) : FunScript.TypeScript.CanvasGradient = failwith "never"
            [<FunScript.JSEmitInline("({0}.createRadialGradient = {1})"); CompiledName("createRadialGradientAux")>]
            member __.``createRadialGradient <-``(func : System.Func<float, float, float, float, float, float, FunScript.TypeScript.CanvasGradient>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.lineTo({1}, {2}))"); CompiledName("lineTo")>]
            member __.lineTo(x : float, y : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.lineTo = {1})"); CompiledName("lineToAux")>]
            member __.``lineTo <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getLineDash())"); CompiledName("getLineDash")>]
            member __.getLineDash() : array<float> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getLineDash = {1})"); CompiledName("getLineDashAux")>]
            member __.``getLineDash <-``(func : System.Func<array<float>>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.fill({?1}))"); CompiledName("fill1")>]
            member __.fill(?fillRule : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.fill = {1})"); CompiledName("fill1Aux")>]
            member __.``fill <-``(func : System.Func<string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createImageData({1}, {?2}))"); CompiledName("createImageData")>]
            member __.createImageData(imageDataOrSw : obj, ?sh : float) : FunScript.TypeScript.ImageData = failwith "never"
            [<FunScript.JSEmitInline("({0}.createImageData = {1})"); CompiledName("createImageDataAux")>]
            member __.``createImageData <-``(func : System.Func<obj, float, FunScript.TypeScript.ImageData>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createPattern({1}, {2}))"); CompiledName("createPattern")>]
            member __.createPattern(image : FunScript.TypeScript.HTMLElement, repetition : string) : FunScript.TypeScript.CanvasPattern = failwith "never"
            [<FunScript.JSEmitInline("({0}.createPattern = {1})"); CompiledName("createPatternAux")>]
            member __.``createPattern <-``(func : System.Func<FunScript.TypeScript.HTMLElement, string, FunScript.TypeScript.CanvasPattern>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.closePath())"); CompiledName("closePath")>]
            member __.closePath() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.closePath = {1})"); CompiledName("closePathAux")>]
            member __.``closePath <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.rect({1}, {2}, {3}, {4}))"); CompiledName("rect")>]
            member __.rect(x : float, y : float, w : float, h : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.rect = {1})"); CompiledName("rectAux")>]
            member __.``rect <-``(func : System.Func<float, float, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clip({?1}))"); CompiledName("clip1")>]
            member __.clip(?fillRule : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clip = {1})"); CompiledName("clip1Aux")>]
            member __.``clip <-``(func : System.Func<string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clearRect({1}, {2}, {3}, {4}))"); CompiledName("clearRect")>]
            member __.clearRect(x : float, y : float, w : float, h : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clearRect = {1})"); CompiledName("clearRectAux")>]
            member __.``clearRect <-``(func : System.Func<float, float, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.moveTo({1}, {2}))"); CompiledName("moveTo1")>]
            member __.moveTo(x : float, y : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.moveTo = {1})"); CompiledName("moveTo1Aux")>]
            member __.``moveTo <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getImageData({1}, {2}, {3}, {4}))"); CompiledName("getImageData")>]
            member __.getImageData(sx : float, sy : float, sw : float, sh : float) : FunScript.TypeScript.ImageData = failwith "never"
            [<FunScript.JSEmitInline("({0}.getImageData = {1})"); CompiledName("getImageDataAux")>]
            member __.``getImageData <-``(func : System.Func<float, float, float, float, FunScript.TypeScript.ImageData>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.fillRect({1}, {2}, {3}, {4}))"); CompiledName("fillRect")>]
            member __.fillRect(x : float, y : float, w : float, h : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.fillRect = {1})"); CompiledName("fillRectAux")>]
            member __.``fillRect <-``(func : System.Func<float, float, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.bezierCurveTo({1}, {2}, {3}, {4}, {5}, {6}))"); CompiledName("bezierCurveTo")>]
            member __.bezierCurveTo(cp1x : float, cp1y : float, cp2x : float, cp2y : float, x : float, y : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.bezierCurveTo = {1})"); CompiledName("bezierCurveToAux")>]
            member __.``bezierCurveTo <-``(func : System.Func<float, float, float, float, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.drawImage({1}, {2}, {3}, {?4}, {?5}, {?6}, {?7}, {?8}, {?9}))"); CompiledName("drawImage")>]
            member __.drawImage(image : FunScript.TypeScript.HTMLElement, offsetX : float, offsetY : float, ?width : float, ?height : float, ?canvasOffsetX : float, ?canvasOffsetY : float, ?canvasImageWidth : float, ?canvasImageHeight : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.transform({1}, {2}, {3}, {4}, {5}, {6}))"); CompiledName("transform1")>]
            member __.transform(m11 : float, m12 : float, m21 : float, m22 : float, dx : float, dy : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.transform = {1})"); CompiledName("transform1Aux")>]
            member __.``transform <-``(func : System.Func<float, float, float, float, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.stroke())"); CompiledName("stroke1")>]
            member __.stroke() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.stroke = {1})"); CompiledName("stroke1Aux")>]
            member __.``stroke <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.strokeRect({1}, {2}, {3}, {4}))"); CompiledName("strokeRect")>]
            member __.strokeRect(x : float, y : float, w : float, h : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.strokeRect = {1})"); CompiledName("strokeRectAux")>]
            member __.``strokeRect <-``(func : System.Func<float, float, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setLineDash({1}))"); CompiledName("setLineDash")>]
            member __.setLineDash(segments : array<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setLineDash = {1})"); CompiledName("setLineDashAux")>]
            member __.``setLineDash <-``(func : System.Func<array<float>, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.strokeText({1}, {2}, {3}, {?4}))"); CompiledName("strokeText")>]
            member __.strokeText(text : string, x : float, y : float, ?maxWidth : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.strokeText = {1})"); CompiledName("strokeTextAux")>]
            member __.``strokeText <-``(func : System.Func<string, float, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.beginPath())"); CompiledName("beginPath")>]
            member __.beginPath() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.beginPath = {1})"); CompiledName("beginPathAux")>]
            member __.``beginPath <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.arcTo({1}, {2}, {3}, {4}, {5}))"); CompiledName("arcTo")>]
            member __.arcTo(x1 : float, y1 : float, x2 : float, y2 : float, radius : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.arcTo = {1})"); CompiledName("arcToAux")>]
            member __.``arcTo <-``(func : System.Func<float, float, float, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createLinearGradient({1}, {2}, {3}, {4}))"); CompiledName("createLinearGradient")>]
            member __.createLinearGradient(x0 : float, y0 : float, x1 : float, y1 : float) : FunScript.TypeScript.CanvasGradient = failwith "never"
            [<FunScript.JSEmitInline("({0}.createLinearGradient = {1})"); CompiledName("createLinearGradientAux")>]
            member __.``createLinearGradient <-``(func : System.Func<float, float, float, float, FunScript.TypeScript.CanvasGradient>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_470 =


    type FunScript.TypeScript.CharacterData with 

            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length7")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.data)"); CompiledName("data")>]
            member __.data with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteData({1}, {2}))"); CompiledName("deleteData")>]
            member __.deleteData(offset : float, count : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteData = {1})"); CompiledName("deleteDataAux")>]
            member __.``deleteData <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.replaceData({1}, {2}, {3}))"); CompiledName("replaceData")>]
            member __.replaceData(offset : float, count : float, arg : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.replaceData = {1})"); CompiledName("replaceDataAux")>]
            member __.``replaceData <-``(func : System.Func<float, float, string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.appendData({1}))"); CompiledName("appendData")>]
            member __.appendData(arg : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.appendData = {1})"); CompiledName("appendDataAux")>]
            member __.``appendData <-``(func : System.Func<string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.insertData({1}, {2}))"); CompiledName("insertData")>]
            member __.insertData(offset : float, arg : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.insertData = {1})"); CompiledName("insertDataAux")>]
            member __.``insertData <-``(func : System.Func<float, string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.substringData({1}, {2}))"); CompiledName("substringData")>]
            member __.substringData(offset : float, count : float) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.substringData = {1})"); CompiledName("substringDataAux")>]
            member __.``substringData <-``(func : System.Func<float, float, string>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_471 =


    type FunScript.TypeScript.ClientRect with 

            [<FunScript.JSEmitInline("({0}.left)"); CompiledName("left1")>]
            member __.left with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.width)"); CompiledName("width1")>]
            member __.width with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.right)"); CompiledName("right1")>]
            member __.right with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.top)"); CompiledName("top2")>]
            member __.top with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.bottom)"); CompiledName("bottom1")>]
            member __.bottom with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.height)"); CompiledName("height1")>]
            member __.height with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_472 =


    type FunScript.TypeScript.ClientRectList with 

            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length8")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.item({1}))"); CompiledName("item5")>]
            member __.item(index : float) : FunScript.TypeScript.ClientRect = failwith "never"
            [<FunScript.JSEmitInline("({0}.item = {1})"); CompiledName("item5Aux")>]
            member __.``item <-``(func : System.Func<float, FunScript.TypeScript.ClientRect>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}[{1}])"); CompiledName("Item6")>]
            member __.Item with get(i : int) : FunScript.TypeScript.ClientRect = failwith "never" and set (i : int) (v : FunScript.TypeScript.ClientRect) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_473 =


    type FunScript.TypeScript.CloseEvent with 

            [<FunScript.JSEmitInline("({0}.wasClean)"); CompiledName("wasClean")>]
            member __.wasClean with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.reason)"); CompiledName("reason")>]
            member __.reason with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.code)"); CompiledName("code")>]
            member __.code with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initCloseEvent({1}, {2}, {3}, {4}, {5}, {6}))"); CompiledName("initCloseEvent")>]
            member __.initCloseEvent(typeArg : string, canBubbleArg : bool, cancelableArg : bool, wasCleanArg : bool, codeArg : float, reasonArg : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initCloseEvent = {1})"); CompiledName("initCloseEventAux")>]
            member __.``initCloseEvent <-``(func : System.Func<string, bool, bool, bool, float, string, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_474 =


    type FunScript.TypeScript.Intl.Collator with 

            [<FunScript.JSEmitInline("({0}.compare({1}, {2}))"); CompiledName("compare")>]
            member __.compare(x : string, y : string) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.compare = {1})"); CompiledName("compareAux")>]
            member __.``compare <-``(func : System.Func<string, string, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.resolvedOptions())"); CompiledName("resolvedOptions")>]
            member __.resolvedOptions() : FunScript.TypeScript.Intl.ResolvedCollatorOptions = failwith "never"
            [<FunScript.JSEmitInline("({0}.resolvedOptions = {1})"); CompiledName("resolvedOptionsAux")>]
            member __.``resolvedOptions <-``(func : System.Func<FunScript.TypeScript.Intl.ResolvedCollatorOptions>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_475 =


    type FunScript.TypeScript.Intl.CollatorOptions with 

            [<FunScript.JSEmitInline("({0}.usage)"); CompiledName("usage")>]
            member __.usage with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.localeMatcher)"); CompiledName("localeMatcher")>]
            member __.localeMatcher with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.numeric)"); CompiledName("numeric")>]
            member __.numeric with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.caseFirst)"); CompiledName("caseFirst")>]
            member __.caseFirst with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.sensitivity)"); CompiledName("sensitivity")>]
            member __.sensitivity with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ignorePunctuation)"); CompiledName("ignorePunctuation")>]
            member __.ignorePunctuation with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_476 =


    type FunScript.TypeScript.Comment with 

            [<FunScript.JSEmitInline("({0}.text)"); CompiledName("text")>]
            member __.text with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_477 =


    type FunScript.TypeScript.CompositionEvent with 

            [<FunScript.JSEmitInline("({0}.data)"); CompiledName("data1")>]
            member __.data with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.locale)"); CompiledName("locale")>]
            member __.locale with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initCompositionEvent({1}, {2}, {3}, {4}, {5}, {6}))"); CompiledName("initCompositionEvent")>]
            member __.initCompositionEvent(typeArg : string, canBubbleArg : bool, cancelableArg : bool, viewArg : FunScript.TypeScript.Window, dataArg : string, locale : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initCompositionEvent = {1})"); CompiledName("initCompositionEventAux")>]
            member __.``initCompositionEvent <-``(func : System.Func<string, bool, bool, FunScript.TypeScript.Window, string, string, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_478 =


    type FunScript.TypeScript.ConfirmSiteSpecificExceptionsInformation with 

            [<FunScript.JSEmitInline("({0}.arrayOfDomainStrings)"); CompiledName("arrayOfDomainStrings")>]
            member __.arrayOfDomainStrings with get() : array<string> = failwith "never" and set (v : array<string>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_479 =


    type FunScript.TypeScript.Console with 

            [<FunScript.JSEmitInline("({0}.info({?1}))"); CompiledName("info")>]
            member __.info(?message : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.info = {1})"); CompiledName("infoAux")>]
            member __.``info <-``(func : System.Func<obj, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.info({1}, {2...}))"); CompiledName("info1")>]
            member __.info(message : obj, [<System.ParamArray>] optionalParams : array<obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.warn({?1}))"); CompiledName("warn")>]
            member __.warn(?message : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.warn = {1})"); CompiledName("warnAux")>]
            member __.``warn <-``(func : System.Func<obj, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.warn({1}, {2...}))"); CompiledName("warn1")>]
            member __.warn(message : obj, [<System.ParamArray>] optionalParams : array<obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.error({?1}))"); CompiledName("error")>]
            member __.error(?message : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.error = {1})"); CompiledName("errorAux")>]
            member __.``error <-``(func : System.Func<obj, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.error({1}, {2...}))"); CompiledName("error1")>]
            member __.error(message : obj, [<System.ParamArray>] optionalParams : array<obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.log({?1}))"); CompiledName("log")>]
            member __.log(?message : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.log = {1})"); CompiledName("logAux")>]
            member __.``log <-``(func : System.Func<obj, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.log({1}, {2...}))"); CompiledName("log1")>]
            member __.log(message : obj, [<System.ParamArray>] optionalParams : array<obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.profile({?1}))"); CompiledName("profile")>]
            member __.profile(?reportName : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.profile = {1})"); CompiledName("profileAux")>]
            member __.``profile <-``(func : System.Func<string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.assert({?1}, {?2}))"); CompiledName("_assert")>]
            member __._assert(?test : bool, ?message : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.assert = {1})"); CompiledName("_assertAux")>]
            member __.``_assert <-``(func : System.Func<bool, string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.assert({1}, {2}, {3...}))"); CompiledName("_assert1")>]
            member __._assert(test : bool, message : string, [<System.ParamArray>] optionalParams : array<obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msIsIndependentlyComposed({1}))"); CompiledName("msIsIndependentlyComposed")>]
            member __.msIsIndependentlyComposed(element : FunScript.TypeScript.Element) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.msIsIndependentlyComposed = {1})"); CompiledName("msIsIndependentlyComposedAux")>]
            member __.``msIsIndependentlyComposed <-``(func : System.Func<FunScript.TypeScript.Element, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clear())"); CompiledName("clear1")>]
            member __.clear() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clear = {1})"); CompiledName("clear1Aux")>]
            member __.``clear <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.dir({?1}))"); CompiledName("dir")>]
            member __.dir(?value : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.dir = {1})"); CompiledName("dirAux")>]
            member __.``dir <-``(func : System.Func<obj, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.dir({1}, {2...}))"); CompiledName("dir1")>]
            member __.dir(value : obj, [<System.ParamArray>] optionalParams : array<obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.profileEnd())"); CompiledName("profileEnd")>]
            member __.profileEnd() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.profileEnd = {1})"); CompiledName("profileEndAux")>]
            member __.``profileEnd <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.count({?1}))"); CompiledName("count")>]
            member __.count(?countTitle : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.count = {1})"); CompiledName("countAux")>]
            member __.``count <-``(func : System.Func<string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.groupEnd())"); CompiledName("groupEnd")>]
            member __.groupEnd() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.groupEnd = {1})"); CompiledName("groupEndAux")>]
            member __.``groupEnd <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.time({?1}))"); CompiledName("time")>]
            member __.time(?timerName : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.time = {1})"); CompiledName("timeAux")>]
            member __.``time <-``(func : System.Func<string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.timeEnd({?1}))"); CompiledName("timeEnd")>]
            member __.timeEnd(?timerName : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.timeEnd = {1})"); CompiledName("timeEndAux")>]
            member __.``timeEnd <-``(func : System.Func<string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.trace())"); CompiledName("trace")>]
            member __.trace() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.trace = {1})"); CompiledName("traceAux")>]
            member __.``trace <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.group({?1}))"); CompiledName("group")>]
            member __.group(?groupTitle : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.group = {1})"); CompiledName("groupAux")>]
            member __.``group <-``(func : System.Func<string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.dirxml({1}))"); CompiledName("dirxml")>]
            member __.dirxml(value : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.dirxml = {1})"); CompiledName("dirxmlAux")>]
            member __.``dirxml <-``(func : System.Func<obj, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.debug({?1}))"); CompiledName("debug")>]
            member __.debug(?message : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.debug = {1})"); CompiledName("debugAux")>]
            member __.``debug <-``(func : System.Func<string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.debug({1}, {2...}))"); CompiledName("debug1")>]
            member __.debug(message : string, [<System.ParamArray>] optionalParams : array<obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.groupCollapsed({?1}))"); CompiledName("groupCollapsed")>]
            member __.groupCollapsed(?groupTitle : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.groupCollapsed = {1})"); CompiledName("groupCollapsedAux")>]
            member __.``groupCollapsed <-``(func : System.Func<string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.select({1}))"); CompiledName("select")>]
            member __.select(element : FunScript.TypeScript.Element) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.select = {1})"); CompiledName("selectAux")>]
            member __.``select <-``(func : System.Func<FunScript.TypeScript.Element, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_480 =


    type FunScript.TypeScript.ControlRangeCollection with 

            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length9")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.queryCommandValue({1}))"); CompiledName("queryCommandValue")>]
            member __.queryCommandValue(cmdID : string) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.queryCommandValue = {1})"); CompiledName("queryCommandValueAux")>]
            member __.``queryCommandValue <-``(func : System.Func<string, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.remove({1}))"); CompiledName("remove")>]
            member __.remove(index : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.remove = {1})"); CompiledName("removeAux")>]
            member __.``remove <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.add({1}))"); CompiledName("add")>]
            member __.add(item : FunScript.TypeScript.Element) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.add = {1})"); CompiledName("addAux")>]
            member __.``add <-``(func : System.Func<FunScript.TypeScript.Element, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.queryCommandIndeterm({1}))"); CompiledName("queryCommandIndeterm")>]
            member __.queryCommandIndeterm(cmdID : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.queryCommandIndeterm = {1})"); CompiledName("queryCommandIndetermAux")>]
            member __.``queryCommandIndeterm <-``(func : System.Func<string, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.scrollIntoView({?1}))"); CompiledName("scrollIntoView")>]
            member __.scrollIntoView(?varargStart : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.scrollIntoView = {1})"); CompiledName("scrollIntoViewAux")>]
            member __.``scrollIntoView <-``(func : System.Func<obj, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.item({1}))"); CompiledName("item6")>]
            member __.item(index : float) : FunScript.TypeScript.Element = failwith "never"
            [<FunScript.JSEmitInline("({0}.item = {1})"); CompiledName("item6Aux")>]
            member __.``item <-``(func : System.Func<float, FunScript.TypeScript.Element>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}[{1}])"); CompiledName("Item7")>]
            member __.Item with get(i : int) : FunScript.TypeScript.Element = failwith "never" and set (i : int) (v : FunScript.TypeScript.Element) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.execCommand({1}, {?2}, {?3}))"); CompiledName("execCommand")>]
            member __.execCommand(cmdID : string, ?showUI : bool, ?value : obj) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.execCommand = {1})"); CompiledName("execCommandAux")>]
            member __.``execCommand <-``(func : System.Func<string, bool, obj, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addElement({1}))"); CompiledName("addElement")>]
            member __.addElement(item : FunScript.TypeScript.Element) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addElement = {1})"); CompiledName("addElementAux")>]
            member __.``addElement <-``(func : System.Func<FunScript.TypeScript.Element, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.queryCommandState({1}))"); CompiledName("queryCommandState")>]
            member __.queryCommandState(cmdID : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.queryCommandState = {1})"); CompiledName("queryCommandStateAux")>]
            member __.``queryCommandState <-``(func : System.Func<string, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.queryCommandSupported({1}))"); CompiledName("queryCommandSupported")>]
            member __.queryCommandSupported(cmdID : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.queryCommandSupported = {1})"); CompiledName("queryCommandSupportedAux")>]
            member __.``queryCommandSupported <-``(func : System.Func<string, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.queryCommandEnabled({1}))"); CompiledName("queryCommandEnabled")>]
            member __.queryCommandEnabled(cmdID : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.queryCommandEnabled = {1})"); CompiledName("queryCommandEnabledAux")>]
            member __.``queryCommandEnabled <-``(func : System.Func<string, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.queryCommandText({1}))"); CompiledName("queryCommandText")>]
            member __.queryCommandText(cmdID : string) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.queryCommandText = {1})"); CompiledName("queryCommandTextAux")>]
            member __.``queryCommandText <-``(func : System.Func<string, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.select())"); CompiledName("select1")>]
            member __.select() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.select = {1})"); CompiledName("select1Aux")>]
            member __.``select <-``(func : System.Func<unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_481 =


    type FunScript.TypeScript.Coordinates with 

            [<FunScript.JSEmitInline("({0}.altitudeAccuracy)"); CompiledName("altitudeAccuracy")>]
            member __.altitudeAccuracy with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.longitude)"); CompiledName("longitude")>]
            member __.longitude with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.latitude)"); CompiledName("latitude")>]
            member __.latitude with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.speed)"); CompiledName("speed")>]
            member __.speed with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.heading)"); CompiledName("heading")>]
            member __.heading with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.altitude)"); CompiledName("altitude")>]
            member __.altitude with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.accuracy)"); CompiledName("accuracy")>]
            member __.accuracy with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_482 =


    type FunScript.TypeScript.Crypto with 

            [<FunScript.JSEmitInline("({0}.subtle)"); CompiledName("subtle")>]
            member __.subtle with get() : FunScript.TypeScript.SubtleCrypto = failwith "never" and set (v : FunScript.TypeScript.SubtleCrypto) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_483 =


    type FunScript.TypeScript.CryptoOperation with 

            [<FunScript.JSEmitInline("({0}.algorithm)"); CompiledName("algorithm")>]
            member __.algorithm with get() : FunScript.TypeScript.Algorithm = failwith "never" and set (v : FunScript.TypeScript.Algorithm) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.oncomplete)"); CompiledName("oncomplete")>]
            member __.oncomplete with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onerror)"); CompiledName("onerror3")>]
            member __.onerror with get() : System.Func<FunScript.TypeScript.ErrorEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.ErrorEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onprogress)"); CompiledName("onprogress2")>]
            member __.onprogress with get() : System.Func<FunScript.TypeScript.ProgressEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.ProgressEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onabort)"); CompiledName("onabort1")>]
            member __.onabort with get() : System.Func<FunScript.TypeScript.UIEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.UIEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.key)"); CompiledName("key")>]
            member __.key with get() : FunScript.TypeScript.Key = failwith "never" and set (v : FunScript.TypeScript.Key) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.result)"); CompiledName("result")>]
            member __.result with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.abort())"); CompiledName("abort1")>]
            member __.abort() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.abort = {1})"); CompiledName("abort1Aux")>]
            member __.``abort <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.finish())"); CompiledName("finish")>]
            member __.finish() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.finish = {1})"); CompiledName("finishAux")>]
            member __.``finish <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.process({1}))"); CompiledName("_process")>]
            member __._process(buffer : FunScript.TypeScript.ArrayBufferView) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.process = {1})"); CompiledName("_processAux")>]
            member __.``_process <-``(func : System.Func<FunScript.TypeScript.ArrayBufferView, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"complete\", {1}, {?2}))"); CompiledName("addEventListener110")>]
            member __.addEventListener_complete(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"error\", {1}, {?2}))"); CompiledName("addEventListener111")>]
            member __.addEventListener_error(listener : System.Func<FunScript.TypeScript.ErrorEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"progress\", {1}, {?2}))"); CompiledName("addEventListener112")>]
            member __.addEventListener_progress(listener : System.Func<FunScript.TypeScript.ProgressEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"abort\", {1}, {?2}))"); CompiledName("addEventListener113")>]
            member __.addEventListener_abort(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener({1}, {2}, {?3}))"); CompiledName("addEventListener114")>]
            member __.addEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener = {1})"); CompiledName("addEventListener114Aux")>]
            member __.``addEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_484 =


    type FunScript.TypeScript.CustomEvent with 

            [<FunScript.JSEmitInline("({0}.detail)"); CompiledName("detail")>]
            member __.detail with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initCustomEvent({1}, {2}, {3}, {4}))"); CompiledName("initCustomEvent")>]
            member __.initCustomEvent(typeArg : string, canBubbleArg : bool, cancelableArg : bool, detailArg : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initCustomEvent = {1})"); CompiledName("initCustomEventAux")>]
            member __.``initCustomEvent <-``(func : System.Func<string, bool, bool, obj, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_485 =


    type FunScript.TypeScript.DOMError with 

            [<FunScript.JSEmitInline("({0}.name)"); CompiledName("name4")>]
            member __.name with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toString())"); CompiledName("toString2")>]
            member __.toString() : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toString = {1})"); CompiledName("toString2Aux")>]
            member __.``toString <-``(func : System.Func<string>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_486 =


    type FunScript.TypeScript.DOMException with 

            [<FunScript.JSEmitInline("({0}.code)"); CompiledName("code1")>]
            member __.code with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.message)"); CompiledName("message")>]
            member __.message with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.name)"); CompiledName("name5")>]
            member __.name with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toString())"); CompiledName("toString3")>]
            member __.toString() : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toString = {1})"); CompiledName("toString3Aux")>]
            member __.``toString <-``(func : System.Func<string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.HIERARCHY_REQUEST_ERR)"); CompiledName("HIERARCHY_REQUEST_ERR1")>]
            member __.HIERARCHY_REQUEST_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NO_MODIFICATION_ALLOWED_ERR)"); CompiledName("NO_MODIFICATION_ALLOWED_ERR1")>]
            member __.NO_MODIFICATION_ALLOWED_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.INVALID_MODIFICATION_ERR)"); CompiledName("INVALID_MODIFICATION_ERR1")>]
            member __.INVALID_MODIFICATION_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NAMESPACE_ERR)"); CompiledName("NAMESPACE_ERR1")>]
            member __.NAMESPACE_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.INVALID_CHARACTER_ERR)"); CompiledName("INVALID_CHARACTER_ERR1")>]
            member __.INVALID_CHARACTER_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TYPE_MISMATCH_ERR)"); CompiledName("TYPE_MISMATCH_ERR1")>]
            member __.TYPE_MISMATCH_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ABORT_ERR)"); CompiledName("ABORT_ERR1")>]
            member __.ABORT_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.INVALID_STATE_ERR)"); CompiledName("INVALID_STATE_ERR1")>]
            member __.INVALID_STATE_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SECURITY_ERR)"); CompiledName("SECURITY_ERR1")>]
            member __.SECURITY_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NETWORK_ERR)"); CompiledName("NETWORK_ERR1")>]
            member __.NETWORK_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.WRONG_DOCUMENT_ERR)"); CompiledName("WRONG_DOCUMENT_ERR1")>]
            member __.WRONG_DOCUMENT_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.QUOTA_EXCEEDED_ERR)"); CompiledName("QUOTA_EXCEEDED_ERR1")>]
            member __.QUOTA_EXCEEDED_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.INDEX_SIZE_ERR)"); CompiledName("INDEX_SIZE_ERR1")>]
            member __.INDEX_SIZE_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOMSTRING_SIZE_ERR)"); CompiledName("DOMSTRING_SIZE_ERR1")>]
            member __.DOMSTRING_SIZE_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SYNTAX_ERR)"); CompiledName("SYNTAX_ERR1")>]
            member __.SYNTAX_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SERIALIZE_ERR)"); CompiledName("SERIALIZE_ERR1")>]
            member __.SERIALIZE_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.VALIDATION_ERR)"); CompiledName("VALIDATION_ERR1")>]
            member __.VALIDATION_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NOT_FOUND_ERR)"); CompiledName("NOT_FOUND_ERR1")>]
            member __.NOT_FOUND_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.URL_MISMATCH_ERR)"); CompiledName("URL_MISMATCH_ERR1")>]
            member __.URL_MISMATCH_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PARSE_ERR)"); CompiledName("PARSE_ERR1")>]
            member __.PARSE_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NO_DATA_ALLOWED_ERR)"); CompiledName("NO_DATA_ALLOWED_ERR1")>]
            member __.NO_DATA_ALLOWED_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NOT_SUPPORTED_ERR)"); CompiledName("NOT_SUPPORTED_ERR1")>]
            member __.NOT_SUPPORTED_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.INVALID_ACCESS_ERR)"); CompiledName("INVALID_ACCESS_ERR1")>]
            member __.INVALID_ACCESS_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.INUSE_ATTRIBUTE_ERR)"); CompiledName("INUSE_ATTRIBUTE_ERR1")>]
            member __.INUSE_ATTRIBUTE_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.INVALID_NODE_TYPE_ERR)"); CompiledName("INVALID_NODE_TYPE_ERR2")>]
            member __.INVALID_NODE_TYPE_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DATA_CLONE_ERR)"); CompiledName("DATA_CLONE_ERR1")>]
            member __.DATA_CLONE_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TIMEOUT_ERR)"); CompiledName("TIMEOUT_ERR1")>]
            member __.TIMEOUT_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_487 =


    type FunScript.TypeScript.DOMImplementation with 

            [<FunScript.JSEmitInline("({0}.createDocumentType({1}, {2}, {3}))"); CompiledName("createDocumentType")>]
            member __.createDocumentType(qualifiedName : string, publicId : string, systemId : string) : FunScript.TypeScript.DocumentType = failwith "never"
            [<FunScript.JSEmitInline("({0}.createDocumentType = {1})"); CompiledName("createDocumentTypeAux")>]
            member __.``createDocumentType <-``(func : System.Func<string, string, string, FunScript.TypeScript.DocumentType>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createDocument({1}, {2}, {3}))"); CompiledName("createDocument")>]
            member __.createDocument(namespaceURI : string, qualifiedName : string, doctype : FunScript.TypeScript.DocumentType) : FunScript.TypeScript.Document = failwith "never"
            [<FunScript.JSEmitInline("({0}.createDocument = {1})"); CompiledName("createDocumentAux")>]
            member __.``createDocument <-``(func : System.Func<string, string, FunScript.TypeScript.DocumentType, FunScript.TypeScript.Document>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.hasFeature({1}, {?2}))"); CompiledName("hasFeature")>]
            member __.hasFeature(feature : string, ?version : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.hasFeature = {1})"); CompiledName("hasFeatureAux")>]
            member __.``hasFeature <-``(func : System.Func<string, string, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createHTMLDocument({1}))"); CompiledName("createHTMLDocument")>]
            member __.createHTMLDocument(title : string) : FunScript.TypeScript.Document = failwith "never"
            [<FunScript.JSEmitInline("({0}.createHTMLDocument = {1})"); CompiledName("createHTMLDocumentAux")>]
            member __.``createHTMLDocument <-``(func : System.Func<string, FunScript.TypeScript.Document>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_488 =


    type FunScript.TypeScript.DOML2DeprecatedAlignmentStyle with 

            [<FunScript.JSEmitInline("({0}.align)"); CompiledName("align")>]
            member __.align with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_489 =


    type FunScript.TypeScript.DOML2DeprecatedBackgroundColorStyle with 

            [<FunScript.JSEmitInline("({0}.bgColor)"); CompiledName("bgColor")>]
            member __.bgColor with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_490 =


    type FunScript.TypeScript.DOML2DeprecatedBackgroundStyle with 

            [<FunScript.JSEmitInline("({0}.background)"); CompiledName("background1")>]
            member __.background with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_491 =


    type FunScript.TypeScript.DOML2DeprecatedBorderStyle with 

            [<FunScript.JSEmitInline("({0}.border)"); CompiledName("border1")>]
            member __.border with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_492 =


    type FunScript.TypeScript.DOML2DeprecatedColorProperty with 

            [<FunScript.JSEmitInline("({0}.color)"); CompiledName("color1")>]
            member __.color with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_493 =


    type FunScript.TypeScript.DOML2DeprecatedListNumberingAndBulletStyle with 

            [<FunScript.JSEmitInline("({0}.type)"); CompiledName("_type3")>]
            member __._type with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_494 =


    type FunScript.TypeScript.DOML2DeprecatedListSpaceReduction with 

            [<FunScript.JSEmitInline("({0}.compact)"); CompiledName("compact")>]
            member __.compact with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_495 =


    type FunScript.TypeScript.DOML2DeprecatedMarginStyle with 

            [<FunScript.JSEmitInline("({0}.vspace)"); CompiledName("vspace")>]
            member __.vspace with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.hspace)"); CompiledName("hspace")>]
            member __.hspace with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_496 =


    type FunScript.TypeScript.DOML2DeprecatedSizeProperty with 

            [<FunScript.JSEmitInline("({0}.size)"); CompiledName("size1")>]
            member __.size with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_497 =


    type FunScript.TypeScript.DOML2DeprecatedTextFlowControl with 

            [<FunScript.JSEmitInline("({0}.clear)"); CompiledName("clear2")>]
            member __.clear with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_498 =


    type FunScript.TypeScript.DOMParser with 

            [<FunScript.JSEmitInline("({0}.parseFromString({1}, {2}))"); CompiledName("parseFromString")>]
            member __.parseFromString(source : string, mimeType : string) : FunScript.TypeScript.Document = failwith "never"
            [<FunScript.JSEmitInline("({0}.parseFromString = {1})"); CompiledName("parseFromStringAux")>]
            member __.``parseFromString <-``(func : System.Func<string, string, FunScript.TypeScript.Document>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_499 =


    type FunScript.TypeScript.DOMSettableTokenList with 

            [<FunScript.JSEmitInline("({0}.value)"); CompiledName("value1")>]
            member __.value with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_500 =


    type FunScript.TypeScript.DOMStringList with 

            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length10")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.contains({1}))"); CompiledName("contains")>]
            member __.contains(str : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.contains = {1})"); CompiledName("containsAux")>]
            member __.``contains <-``(func : System.Func<string, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.item({1}))"); CompiledName("item7")>]
            member __.item(index : float) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.item = {1})"); CompiledName("item7Aux")>]
            member __.``item <-``(func : System.Func<float, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}[{1}])"); CompiledName("Item8")>]
            member __.Item with get(i : int) : string = failwith "never" and set (i : int) (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_501 =


    type FunScript.TypeScript.DOMTokenList with 

            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length11")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.contains({1}))"); CompiledName("contains1")>]
            member __.contains(token : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.contains = {1})"); CompiledName("contains1Aux")>]
            member __.``contains <-``(func : System.Func<string, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.remove({1}))"); CompiledName("remove1")>]
            member __.remove(token : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.remove = {1})"); CompiledName("remove1Aux")>]
            member __.``remove <-``(func : System.Func<string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toggle({1}))"); CompiledName("toggle")>]
            member __.toggle(token : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.toggle = {1})"); CompiledName("toggleAux")>]
            member __.``toggle <-``(func : System.Func<string, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.add({1}))"); CompiledName("add1")>]
            member __.add(token : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.add = {1})"); CompiledName("add1Aux")>]
            member __.``add <-``(func : System.Func<string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.item({1}))"); CompiledName("item8")>]
            member __.item(index : float) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.item = {1})"); CompiledName("item8Aux")>]
            member __.``item <-``(func : System.Func<float, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}[{1}])"); CompiledName("Item9")>]
            member __.Item with get(i : int) : string = failwith "never" and set (i : int) (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toString())"); CompiledName("toString4")>]
            member __.toString() : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toString = {1})"); CompiledName("toString4Aux")>]
            member __.``toString <-``(func : System.Func<string>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_502 =


    type FunScript.TypeScript.DataTransfer with 

            [<FunScript.JSEmitInline("({0}.effectAllowed)"); CompiledName("effectAllowed")>]
            member __.effectAllowed with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.dropEffect)"); CompiledName("dropEffect")>]
            member __.dropEffect with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.types)"); CompiledName("types")>]
            member __.types with get() : FunScript.TypeScript.DOMStringList = failwith "never" and set (v : FunScript.TypeScript.DOMStringList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.files)"); CompiledName("files")>]
            member __.files with get() : FunScript.TypeScript.FileList = failwith "never" and set (v : FunScript.TypeScript.FileList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clearData({?1}))"); CompiledName("clearData")>]
            member __.clearData(?format : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.clearData = {1})"); CompiledName("clearDataAux")>]
            member __.``clearData <-``(func : System.Func<string, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setData({1}, {2}))"); CompiledName("setData")>]
            member __.setData(format : string, data : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.setData = {1})"); CompiledName("setDataAux")>]
            member __.``setData <-``(func : System.Func<string, string, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getData({1}))"); CompiledName("getData")>]
            member __.getData(format : string) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.getData = {1})"); CompiledName("getDataAux")>]
            member __.``getData <-``(func : System.Func<string, string>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_503 =


    type FunScript.TypeScript.DataView with 

            [<FunScript.JSEmitInline("({0}.getInt8({1}))"); CompiledName("getInt8")>]
            member __.getInt8(byteOffset : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.getInt8 = {1})"); CompiledName("getInt8Aux")>]
            member __.``getInt8 <-``(func : System.Func<float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getUint8({1}))"); CompiledName("getUint8")>]
            member __.getUint8(byteOffset : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.getUint8 = {1})"); CompiledName("getUint8Aux")>]
            member __.``getUint8 <-``(func : System.Func<float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getInt16({1}, {?2}))"); CompiledName("getInt16")>]
            member __.getInt16(byteOffset : float, ?littleEndian : bool) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.getInt16 = {1})"); CompiledName("getInt16Aux")>]
            member __.``getInt16 <-``(func : System.Func<float, bool, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getUint16({1}, {?2}))"); CompiledName("getUint16")>]
            member __.getUint16(byteOffset : float, ?littleEndian : bool) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.getUint16 = {1})"); CompiledName("getUint16Aux")>]
            member __.``getUint16 <-``(func : System.Func<float, bool, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getInt32({1}, {?2}))"); CompiledName("getInt32")>]
            member __.getInt32(byteOffset : float, ?littleEndian : bool) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.getInt32 = {1})"); CompiledName("getInt32Aux")>]
            member __.``getInt32 <-``(func : System.Func<float, bool, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getUint32({1}, {?2}))"); CompiledName("getUint32")>]
            member __.getUint32(byteOffset : float, ?littleEndian : bool) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.getUint32 = {1})"); CompiledName("getUint32Aux")>]
            member __.``getUint32 <-``(func : System.Func<float, bool, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getFloat32({1}, {?2}))"); CompiledName("getFloat32")>]
            member __.getFloat32(byteOffset : float, ?littleEndian : bool) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.getFloat32 = {1})"); CompiledName("getFloat32Aux")>]
            member __.``getFloat32 <-``(func : System.Func<float, bool, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getFloat64({1}, {?2}))"); CompiledName("getFloat64")>]
            member __.getFloat64(byteOffset : float, ?littleEndian : bool) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.getFloat64 = {1})"); CompiledName("getFloat64Aux")>]
            member __.``getFloat64 <-``(func : System.Func<float, bool, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setInt8({1}, {2}))"); CompiledName("setInt8")>]
            member __.setInt8(byteOffset : float, value : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setInt8 = {1})"); CompiledName("setInt8Aux")>]
            member __.``setInt8 <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setUint8({1}, {2}))"); CompiledName("setUint8")>]
            member __.setUint8(byteOffset : float, value : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setUint8 = {1})"); CompiledName("setUint8Aux")>]
            member __.``setUint8 <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setInt16({1}, {2}, {?3}))"); CompiledName("setInt16")>]
            member __.setInt16(byteOffset : float, value : float, ?littleEndian : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setInt16 = {1})"); CompiledName("setInt16Aux")>]
            member __.``setInt16 <-``(func : System.Func<float, float, bool, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setUint16({1}, {2}, {?3}))"); CompiledName("setUint16")>]
            member __.setUint16(byteOffset : float, value : float, ?littleEndian : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setUint16 = {1})"); CompiledName("setUint16Aux")>]
            member __.``setUint16 <-``(func : System.Func<float, float, bool, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setInt32({1}, {2}, {?3}))"); CompiledName("setInt32")>]
            member __.setInt32(byteOffset : float, value : float, ?littleEndian : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setInt32 = {1})"); CompiledName("setInt32Aux")>]
            member __.``setInt32 <-``(func : System.Func<float, float, bool, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setUint32({1}, {2}, {?3}))"); CompiledName("setUint32")>]
            member __.setUint32(byteOffset : float, value : float, ?littleEndian : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setUint32 = {1})"); CompiledName("setUint32Aux")>]
            member __.``setUint32 <-``(func : System.Func<float, float, bool, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setFloat32({1}, {2}, {?3}))"); CompiledName("setFloat32")>]
            member __.setFloat32(byteOffset : float, value : float, ?littleEndian : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setFloat32 = {1})"); CompiledName("setFloat32Aux")>]
            member __.``setFloat32 <-``(func : System.Func<float, float, bool, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setFloat64({1}, {2}, {?3}))"); CompiledName("setFloat64")>]
            member __.setFloat64(byteOffset : float, value : float, ?littleEndian : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setFloat64 = {1})"); CompiledName("setFloat64Aux")>]
            member __.``setFloat64 <-``(func : System.Func<float, float, bool, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_504 =


    type FunScript.TypeScript.Date with 

            [<FunScript.JSEmitInline("({0}.toString())"); CompiledName("toString5")>]
            member __.toString() : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toString = {1})"); CompiledName("toString5Aux")>]
            member __.``toString <-``(func : System.Func<string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toDateString())"); CompiledName("toDateString")>]
            member __.toDateString() : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toDateString = {1})"); CompiledName("toDateStringAux")>]
            member __.``toDateString <-``(func : System.Func<string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toTimeString())"); CompiledName("toTimeString")>]
            member __.toTimeString() : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toTimeString = {1})"); CompiledName("toTimeStringAux")>]
            member __.``toTimeString <-``(func : System.Func<string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toLocaleString())"); CompiledName("toLocaleString1")>]
            member __.toLocaleString() : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toLocaleString = {1})"); CompiledName("toLocaleString1Aux")>]
            member __.``toLocaleString <-``(func : System.Func<string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toLocaleDateString())"); CompiledName("toLocaleDateString")>]
            member __.toLocaleDateString() : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toLocaleDateString = {1})"); CompiledName("toLocaleDateStringAux")>]
            member __.``toLocaleDateString <-``(func : System.Func<string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toLocaleTimeString())"); CompiledName("toLocaleTimeString")>]
            member __.toLocaleTimeString() : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toLocaleTimeString = {1})"); CompiledName("toLocaleTimeStringAux")>]
            member __.``toLocaleTimeString <-``(func : System.Func<string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.valueOf())"); CompiledName("valueOf")>]
            member __.valueOf() : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.valueOf = {1})"); CompiledName("valueOfAux")>]
            member __.``valueOf <-``(func : System.Func<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getTime())"); CompiledName("getTime")>]
            member __.getTime() : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.getTime = {1})"); CompiledName("getTimeAux")>]
            member __.``getTime <-``(func : System.Func<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getFullYear())"); CompiledName("getFullYear")>]
            member __.getFullYear() : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.getFullYear = {1})"); CompiledName("getFullYearAux")>]
            member __.``getFullYear <-``(func : System.Func<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getUTCFullYear())"); CompiledName("getUTCFullYear")>]
            member __.getUTCFullYear() : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.getUTCFullYear = {1})"); CompiledName("getUTCFullYearAux")>]
            member __.``getUTCFullYear <-``(func : System.Func<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getMonth())"); CompiledName("getMonth")>]
            member __.getMonth() : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.getMonth = {1})"); CompiledName("getMonthAux")>]
            member __.``getMonth <-``(func : System.Func<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getUTCMonth())"); CompiledName("getUTCMonth")>]
            member __.getUTCMonth() : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.getUTCMonth = {1})"); CompiledName("getUTCMonthAux")>]
            member __.``getUTCMonth <-``(func : System.Func<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getDate())"); CompiledName("getDate")>]
            member __.getDate() : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.getDate = {1})"); CompiledName("getDateAux")>]
            member __.``getDate <-``(func : System.Func<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getUTCDate())"); CompiledName("getUTCDate")>]
            member __.getUTCDate() : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.getUTCDate = {1})"); CompiledName("getUTCDateAux")>]
            member __.``getUTCDate <-``(func : System.Func<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getDay())"); CompiledName("getDay")>]
            member __.getDay() : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.getDay = {1})"); CompiledName("getDayAux")>]
            member __.``getDay <-``(func : System.Func<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getUTCDay())"); CompiledName("getUTCDay")>]
            member __.getUTCDay() : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.getUTCDay = {1})"); CompiledName("getUTCDayAux")>]
            member __.``getUTCDay <-``(func : System.Func<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getHours())"); CompiledName("getHours")>]
            member __.getHours() : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.getHours = {1})"); CompiledName("getHoursAux")>]
            member __.``getHours <-``(func : System.Func<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getUTCHours())"); CompiledName("getUTCHours")>]
            member __.getUTCHours() : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.getUTCHours = {1})"); CompiledName("getUTCHoursAux")>]
            member __.``getUTCHours <-``(func : System.Func<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getMinutes())"); CompiledName("getMinutes")>]
            member __.getMinutes() : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.getMinutes = {1})"); CompiledName("getMinutesAux")>]
            member __.``getMinutes <-``(func : System.Func<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getUTCMinutes())"); CompiledName("getUTCMinutes")>]
            member __.getUTCMinutes() : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.getUTCMinutes = {1})"); CompiledName("getUTCMinutesAux")>]
            member __.``getUTCMinutes <-``(func : System.Func<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getSeconds())"); CompiledName("getSeconds")>]
            member __.getSeconds() : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.getSeconds = {1})"); CompiledName("getSecondsAux")>]
            member __.``getSeconds <-``(func : System.Func<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getUTCSeconds())"); CompiledName("getUTCSeconds")>]
            member __.getUTCSeconds() : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.getUTCSeconds = {1})"); CompiledName("getUTCSecondsAux")>]
            member __.``getUTCSeconds <-``(func : System.Func<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getMilliseconds())"); CompiledName("getMilliseconds")>]
            member __.getMilliseconds() : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.getMilliseconds = {1})"); CompiledName("getMillisecondsAux")>]
            member __.``getMilliseconds <-``(func : System.Func<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getUTCMilliseconds())"); CompiledName("getUTCMilliseconds")>]
            member __.getUTCMilliseconds() : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.getUTCMilliseconds = {1})"); CompiledName("getUTCMillisecondsAux")>]
            member __.``getUTCMilliseconds <-``(func : System.Func<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getTimezoneOffset())"); CompiledName("getTimezoneOffset")>]
            member __.getTimezoneOffset() : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.getTimezoneOffset = {1})"); CompiledName("getTimezoneOffsetAux")>]
            member __.``getTimezoneOffset <-``(func : System.Func<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setTime({1}))"); CompiledName("setTime")>]
            member __.setTime(time : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.setTime = {1})"); CompiledName("setTimeAux")>]
            member __.``setTime <-``(func : System.Func<float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setMilliseconds({1}))"); CompiledName("setMilliseconds")>]
            member __.setMilliseconds(ms : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.setMilliseconds = {1})"); CompiledName("setMillisecondsAux")>]
            member __.``setMilliseconds <-``(func : System.Func<float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setUTCMilliseconds({1}))"); CompiledName("setUTCMilliseconds")>]
            member __.setUTCMilliseconds(ms : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.setUTCMilliseconds = {1})"); CompiledName("setUTCMillisecondsAux")>]
            member __.``setUTCMilliseconds <-``(func : System.Func<float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setSeconds({1}, {?2}))"); CompiledName("setSeconds")>]
            member __.setSeconds(sec : float, ?ms : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.setSeconds = {1})"); CompiledName("setSecondsAux")>]
            member __.``setSeconds <-``(func : System.Func<float, float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setUTCSeconds({1}, {?2}))"); CompiledName("setUTCSeconds")>]
            member __.setUTCSeconds(sec : float, ?ms : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.setUTCSeconds = {1})"); CompiledName("setUTCSecondsAux")>]
            member __.``setUTCSeconds <-``(func : System.Func<float, float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setMinutes({1}, {?2}, {?3}))"); CompiledName("setMinutes")>]
            member __.setMinutes(min : float, ?sec : float, ?ms : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.setMinutes = {1})"); CompiledName("setMinutesAux")>]
            member __.``setMinutes <-``(func : System.Func<float, float, float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setUTCMinutes({1}, {?2}, {?3}))"); CompiledName("setUTCMinutes")>]
            member __.setUTCMinutes(min : float, ?sec : float, ?ms : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.setUTCMinutes = {1})"); CompiledName("setUTCMinutesAux")>]
            member __.``setUTCMinutes <-``(func : System.Func<float, float, float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setHours({1}, {?2}, {?3}, {?4}))"); CompiledName("setHours")>]
            member __.setHours(hours : float, ?min : float, ?sec : float, ?ms : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.setHours = {1})"); CompiledName("setHoursAux")>]
            member __.``setHours <-``(func : System.Func<float, float, float, float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setUTCHours({1}, {?2}, {?3}, {?4}))"); CompiledName("setUTCHours")>]
            member __.setUTCHours(hours : float, ?min : float, ?sec : float, ?ms : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.setUTCHours = {1})"); CompiledName("setUTCHoursAux")>]
            member __.``setUTCHours <-``(func : System.Func<float, float, float, float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setDate({1}))"); CompiledName("setDate")>]
            member __.setDate(date : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.setDate = {1})"); CompiledName("setDateAux")>]
            member __.``setDate <-``(func : System.Func<float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setUTCDate({1}))"); CompiledName("setUTCDate")>]
            member __.setUTCDate(date : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.setUTCDate = {1})"); CompiledName("setUTCDateAux")>]
            member __.``setUTCDate <-``(func : System.Func<float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setMonth({1}, {?2}))"); CompiledName("setMonth")>]
            member __.setMonth(month : float, ?date : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.setMonth = {1})"); CompiledName("setMonthAux")>]
            member __.``setMonth <-``(func : System.Func<float, float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setUTCMonth({1}, {?2}))"); CompiledName("setUTCMonth")>]
            member __.setUTCMonth(month : float, ?date : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.setUTCMonth = {1})"); CompiledName("setUTCMonthAux")>]
            member __.``setUTCMonth <-``(func : System.Func<float, float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setFullYear({1}, {?2}, {?3}))"); CompiledName("setFullYear")>]
            member __.setFullYear(year : float, ?month : float, ?date : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.setFullYear = {1})"); CompiledName("setFullYearAux")>]
            member __.``setFullYear <-``(func : System.Func<float, float, float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setUTCFullYear({1}, {?2}, {?3}))"); CompiledName("setUTCFullYear")>]
            member __.setUTCFullYear(year : float, ?month : float, ?date : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.setUTCFullYear = {1})"); CompiledName("setUTCFullYearAux")>]
            member __.``setUTCFullYear <-``(func : System.Func<float, float, float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toUTCString())"); CompiledName("toUTCString")>]
            member __.toUTCString() : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toUTCString = {1})"); CompiledName("toUTCStringAux")>]
            member __.``toUTCString <-``(func : System.Func<string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toISOString())"); CompiledName("toISOString")>]
            member __.toISOString() : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toISOString = {1})"); CompiledName("toISOStringAux")>]
            member __.``toISOString <-``(func : System.Func<string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toJSON({?1}))"); CompiledName("toJSON")>]
            member __.toJSON(?key : obj) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toJSON = {1})"); CompiledName("toJSONAux")>]
            member __.``toJSON <-``(func : System.Func<obj, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toLocaleString({?1}, {?2}))"); CompiledName("toLocaleString2")>]
            member __.toLocaleStringOverload2(?locales : array<string>, ?options : FunScript.TypeScript.Intl.DateTimeFormatOptions) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toLocaleString = {1})"); CompiledName("toLocaleString2Aux")>]
            member __.``toLocaleStringOverload2 <-``(func : System.Func<array<string>, FunScript.TypeScript.Intl.DateTimeFormatOptions, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toLocaleString({?1}, {?2}))"); CompiledName("toLocaleString3")>]
            member __.toLocaleStringOverload3(?locale : string, ?options : FunScript.TypeScript.Intl.DateTimeFormatOptions) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toLocaleString = {1})"); CompiledName("toLocaleString3Aux")>]
            member __.``toLocaleStringOverload3 <-``(func : System.Func<string, FunScript.TypeScript.Intl.DateTimeFormatOptions, string>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_505 =


    type FunScript.TypeScript.Intl.DateTimeFormat with 

            [<FunScript.JSEmitInline("({0}.format({1}))"); CompiledName("format")>]
            member __.format(date : float) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.format = {1})"); CompiledName("formatAux")>]
            member __.``format <-``(func : System.Func<float, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.resolvedOptions())"); CompiledName("resolvedOptions1")>]
            member __.resolvedOptions() : FunScript.TypeScript.Intl.ResolvedDateTimeFormatOptions = failwith "never"
            [<FunScript.JSEmitInline("({0}.resolvedOptions = {1})"); CompiledName("resolvedOptions1Aux")>]
            member __.``resolvedOptions <-``(func : System.Func<FunScript.TypeScript.Intl.ResolvedDateTimeFormatOptions>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_506 =


    type FunScript.TypeScript.Intl.DateTimeFormatOptions with 

            [<FunScript.JSEmitInline("({0}.localeMatcher)"); CompiledName("localeMatcher1")>]
            member __.localeMatcher with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.weekday)"); CompiledName("weekday")>]
            member __.weekday with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.era)"); CompiledName("era")>]
            member __.era with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.year)"); CompiledName("year")>]
            member __.year with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.month)"); CompiledName("month")>]
            member __.month with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.day)"); CompiledName("day")>]
            member __.day with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.hour)"); CompiledName("hour")>]
            member __.hour with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.minute)"); CompiledName("minute")>]
            member __.minute with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.second)"); CompiledName("second")>]
            member __.second with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.timeZoneName)"); CompiledName("timeZoneName")>]
            member __.timeZoneName with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.formatMatcher)"); CompiledName("formatMatcher")>]
            member __.formatMatcher with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.hour12)"); CompiledName("hour12")>]
            member __.hour12 with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_507 =


    type FunScript.TypeScript.DeviceAcceleration with 

            [<FunScript.JSEmitInline("({0}.y)"); CompiledName("y")>]
            member __.y with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x)"); CompiledName("x")>]
            member __.x with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.z)"); CompiledName("z")>]
            member __.z with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_508 =


    type FunScript.TypeScript.DeviceAccelerationDict with 

            [<FunScript.JSEmitInline("({0}.x)"); CompiledName("x1")>]
            member __.x with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.y)"); CompiledName("y1")>]
            member __.y with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.z)"); CompiledName("z1")>]
            member __.z with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_509 =


    type FunScript.TypeScript.DeviceMotionEvent with 

            [<FunScript.JSEmitInline("({0}.rotationRate)"); CompiledName("rotationRate")>]
            member __.rotationRate with get() : FunScript.TypeScript.DeviceRotationRate = failwith "never" and set (v : FunScript.TypeScript.DeviceRotationRate) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.acceleration)"); CompiledName("acceleration")>]
            member __.acceleration with get() : FunScript.TypeScript.DeviceAcceleration = failwith "never" and set (v : FunScript.TypeScript.DeviceAcceleration) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.interval)"); CompiledName("interval")>]
            member __.interval with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.accelerationIncludingGravity)"); CompiledName("accelerationIncludingGravity")>]
            member __.accelerationIncludingGravity with get() : FunScript.TypeScript.DeviceAcceleration = failwith "never" and set (v : FunScript.TypeScript.DeviceAcceleration) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initDeviceMotionEvent({1}, {2}, {3}, {4}, {5}, {6}, {7}))"); CompiledName("initDeviceMotionEvent")>]
            member __.initDeviceMotionEvent(_type : string, bubbles : bool, cancelable : bool, acceleration : FunScript.TypeScript.DeviceAccelerationDict, accelerationIncludingGravity : FunScript.TypeScript.DeviceAccelerationDict, rotationRate : FunScript.TypeScript.DeviceRotationRateDict, interval : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initDeviceMotionEvent = {1})"); CompiledName("initDeviceMotionEventAux")>]
            member __.``initDeviceMotionEvent <-``(func : System.Func<string, bool, bool, FunScript.TypeScript.DeviceAccelerationDict, FunScript.TypeScript.DeviceAccelerationDict, FunScript.TypeScript.DeviceRotationRateDict, float, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_510 =


    type FunScript.TypeScript.DeviceOrientationEvent with 

            [<FunScript.JSEmitInline("({0}.gamma)"); CompiledName("gamma")>]
            member __.gamma with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.alpha)"); CompiledName("alpha")>]
            member __.alpha with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.absolute)"); CompiledName("absolute")>]
            member __.absolute with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.beta)"); CompiledName("beta")>]
            member __.beta with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initDeviceOrientationEvent({1}, {2}, {3}, {4}, {5}, {6}, {7}))"); CompiledName("initDeviceOrientationEvent")>]
            member __.initDeviceOrientationEvent(_type : string, bubbles : bool, cancelable : bool, alpha : float, beta : float, gamma : float, absolute : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initDeviceOrientationEvent = {1})"); CompiledName("initDeviceOrientationEventAux")>]
            member __.``initDeviceOrientationEvent <-``(func : System.Func<string, bool, bool, float, float, float, bool, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_511 =


    type FunScript.TypeScript.DeviceRotationRate with 

            [<FunScript.JSEmitInline("({0}.gamma)"); CompiledName("gamma1")>]
            member __.gamma with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.alpha)"); CompiledName("alpha1")>]
            member __.alpha with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.beta)"); CompiledName("beta1")>]
            member __.beta with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_512 =


    type FunScript.TypeScript.DeviceRotationRateDict with 

            [<FunScript.JSEmitInline("({0}.alpha)"); CompiledName("alpha2")>]
            member __.alpha with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.beta)"); CompiledName("beta2")>]
            member __.beta with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.gamma)"); CompiledName("gamma2")>]
            member __.gamma with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_513 =


    type FunScript.TypeScript.Document with 

            [<FunScript.JSEmitInline("({0}.documentElement)"); CompiledName("documentElement")>]
            member __.documentElement with get() : FunScript.TypeScript.HTMLElement = failwith "never" and set (v : FunScript.TypeScript.HTMLElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.compatible)"); CompiledName("compatible")>]
            member __.compatible with get() : FunScript.TypeScript.MSCompatibleInfoCollection = failwith "never" and set (v : FunScript.TypeScript.MSCompatibleInfoCollection) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onkeydown)"); CompiledName("onkeydown1")>]
            member __.onkeydown with get() : System.Func<FunScript.TypeScript.KeyboardEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.KeyboardEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onkeyup)"); CompiledName("onkeyup1")>]
            member __.onkeyup with get() : System.Func<FunScript.TypeScript.KeyboardEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.KeyboardEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.implementation)"); CompiledName("implementation")>]
            member __.implementation with get() : FunScript.TypeScript.DOMImplementation = failwith "never" and set (v : FunScript.TypeScript.DOMImplementation) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onreset)"); CompiledName("onreset1")>]
            member __.onreset with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.scripts)"); CompiledName("scripts")>]
            member __.scripts with get() : FunScript.TypeScript.HTMLCollection = failwith "never" and set (v : FunScript.TypeScript.HTMLCollection) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onhelp)"); CompiledName("onhelp1")>]
            member __.onhelp with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ondragleave)"); CompiledName("ondragleave1")>]
            member __.ondragleave with get() : System.Func<FunScript.TypeScript.DragEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.DragEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.charset)"); CompiledName("charset")>]
            member __.charset with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onfocusin)"); CompiledName("onfocusin1")>]
            member __.onfocusin with get() : System.Func<FunScript.TypeScript.FocusEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.FocusEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.vlinkColor)"); CompiledName("vlinkColor")>]
            member __.vlinkColor with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onseeked)"); CompiledName("onseeked1")>]
            member __.onseeked with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.security)"); CompiledName("security")>]
            member __.security with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.title)"); CompiledName("title")>]
            member __.title with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.namespaces)"); CompiledName("namespaces")>]
            member __.namespaces with get() : FunScript.TypeScript.MSNamespaceInfoCollection = failwith "never" and set (v : FunScript.TypeScript.MSNamespaceInfoCollection) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.defaultCharset)"); CompiledName("defaultCharset")>]
            member __.defaultCharset with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.embeds)"); CompiledName("embeds")>]
            member __.embeds with get() : FunScript.TypeScript.HTMLCollection = failwith "never" and set (v : FunScript.TypeScript.HTMLCollection) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.styleSheets)"); CompiledName("styleSheets")>]
            member __.styleSheets with get() : FunScript.TypeScript.StyleSheetList = failwith "never" and set (v : FunScript.TypeScript.StyleSheetList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.frames)"); CompiledName("frames1")>]
            member __.frames with get() : FunScript.TypeScript.Window = failwith "never" and set (v : FunScript.TypeScript.Window) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ondurationchange)"); CompiledName("ondurationchange1")>]
            member __.ondurationchange with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.all)"); CompiledName("all")>]
            member __.all with get() : FunScript.TypeScript.HTMLCollection = failwith "never" and set (v : FunScript.TypeScript.HTMLCollection) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.forms)"); CompiledName("forms")>]
            member __.forms with get() : FunScript.TypeScript.HTMLCollection = failwith "never" and set (v : FunScript.TypeScript.HTMLCollection) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onblur)"); CompiledName("onblur1")>]
            member __.onblur with get() : System.Func<FunScript.TypeScript.FocusEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.FocusEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.dir)"); CompiledName("dir2")>]
            member __.dir with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onemptied)"); CompiledName("onemptied1")>]
            member __.onemptied with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.designMode)"); CompiledName("designMode")>]
            member __.designMode with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onseeking)"); CompiledName("onseeking1")>]
            member __.onseeking with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ondeactivate)"); CompiledName("ondeactivate")>]
            member __.ondeactivate with get() : System.Func<FunScript.TypeScript.UIEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.UIEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.oncanplay)"); CompiledName("oncanplay1")>]
            member __.oncanplay with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ondatasetchanged)"); CompiledName("ondatasetchanged")>]
            member __.ondatasetchanged with get() : System.Func<FunScript.TypeScript.MSEventObj, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MSEventObj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onrowsdelete)"); CompiledName("onrowsdelete")>]
            member __.onrowsdelete with get() : System.Func<FunScript.TypeScript.MSEventObj, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MSEventObj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.Script)"); CompiledName("Script")>]
            member __.Script with get() : FunScript.TypeScript.MSScriptHost = failwith "never" and set (v : FunScript.TypeScript.MSScriptHost) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onloadstart)"); CompiledName("onloadstart1")>]
            member __.onloadstart with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.URLUnencoded)"); CompiledName("URLUnencoded")>]
            member __.URLUnencoded with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.defaultView)"); CompiledName("defaultView")>]
            member __.defaultView with get() : FunScript.TypeScript.Window = failwith "never" and set (v : FunScript.TypeScript.Window) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.oncontrolselect)"); CompiledName("oncontrolselect")>]
            member __.oncontrolselect with get() : System.Func<FunScript.TypeScript.MSEventObj, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MSEventObj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ondragenter)"); CompiledName("ondragenter1")>]
            member __.ondragenter with get() : System.Func<FunScript.TypeScript.DragEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.DragEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onsubmit)"); CompiledName("onsubmit1")>]
            member __.onsubmit with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.inputEncoding)"); CompiledName("inputEncoding")>]
            member __.inputEncoding with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.activeElement)"); CompiledName("activeElement")>]
            member __.activeElement with get() : FunScript.TypeScript.Element = failwith "never" and set (v : FunScript.TypeScript.Element) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onchange)"); CompiledName("onchange2")>]
            member __.onchange with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.links)"); CompiledName("links")>]
            member __.links with get() : FunScript.TypeScript.HTMLCollection = failwith "never" and set (v : FunScript.TypeScript.HTMLCollection) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniqueID)"); CompiledName("uniqueID")>]
            member __.uniqueID with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.URL)"); CompiledName("URL1")>]
            member __.URL with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onbeforeactivate)"); CompiledName("onbeforeactivate")>]
            member __.onbeforeactivate with get() : System.Func<FunScript.TypeScript.UIEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.UIEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.head)"); CompiledName("head")>]
            member __.head with get() : FunScript.TypeScript.HTMLHeadElement = failwith "never" and set (v : FunScript.TypeScript.HTMLHeadElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.cookie)"); CompiledName("cookie")>]
            member __.cookie with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.xmlEncoding)"); CompiledName("xmlEncoding")>]
            member __.xmlEncoding with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.oncanplaythrough)"); CompiledName("oncanplaythrough1")>]
            member __.oncanplaythrough with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.documentMode)"); CompiledName("documentMode")>]
            member __.documentMode with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.characterSet)"); CompiledName("characterSet")>]
            member __.characterSet with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.anchors)"); CompiledName("anchors")>]
            member __.anchors with get() : FunScript.TypeScript.HTMLCollection = failwith "never" and set (v : FunScript.TypeScript.HTMLCollection) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onbeforeupdate)"); CompiledName("onbeforeupdate")>]
            member __.onbeforeupdate with get() : System.Func<FunScript.TypeScript.MSEventObj, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MSEventObj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ondatasetcomplete)"); CompiledName("ondatasetcomplete")>]
            member __.ondatasetcomplete with get() : System.Func<FunScript.TypeScript.MSEventObj, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MSEventObj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.plugins)"); CompiledName("plugins")>]
            member __.plugins with get() : FunScript.TypeScript.HTMLCollection = failwith "never" and set (v : FunScript.TypeScript.HTMLCollection) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onsuspend)"); CompiledName("onsuspend1")>]
            member __.onsuspend with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.rootElement)"); CompiledName("rootElement")>]
            member __.rootElement with get() : FunScript.TypeScript.SVGSVGElement = failwith "never" and set (v : FunScript.TypeScript.SVGSVGElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.readyState)"); CompiledName("readyState")>]
            member __.readyState with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.referrer)"); CompiledName("referrer")>]
            member __.referrer with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.alinkColor)"); CompiledName("alinkColor")>]
            member __.alinkColor with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onerrorupdate)"); CompiledName("onerrorupdate")>]
            member __.onerrorupdate with get() : System.Func<FunScript.TypeScript.MSEventObj, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MSEventObj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.parentWindow)"); CompiledName("parentWindow")>]
            member __.parentWindow with get() : FunScript.TypeScript.Window = failwith "never" and set (v : FunScript.TypeScript.Window) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmouseout)"); CompiledName("onmouseout1")>]
            member __.onmouseout with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmsthumbnailclick)"); CompiledName("onmsthumbnailclick")>]
            member __.onmsthumbnailclick with get() : System.Func<FunScript.TypeScript.MSSiteModeEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MSSiteModeEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmousewheel)"); CompiledName("onmousewheel1")>]
            member __.onmousewheel with get() : System.Func<FunScript.TypeScript.MouseWheelEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseWheelEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onvolumechange)"); CompiledName("onvolumechange1")>]
            member __.onvolumechange with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.oncellchange)"); CompiledName("oncellchange")>]
            member __.oncellchange with get() : System.Func<FunScript.TypeScript.MSEventObj, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MSEventObj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onrowexit)"); CompiledName("onrowexit")>]
            member __.onrowexit with get() : System.Func<FunScript.TypeScript.MSEventObj, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MSEventObj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onrowsinserted)"); CompiledName("onrowsinserted")>]
            member __.onrowsinserted with get() : System.Func<FunScript.TypeScript.MSEventObj, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MSEventObj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.xmlVersion)"); CompiledName("xmlVersion")>]
            member __.xmlVersion with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msCapsLockWarningOff)"); CompiledName("msCapsLockWarningOff")>]
            member __.msCapsLockWarningOff with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onpropertychange)"); CompiledName("onpropertychange")>]
            member __.onpropertychange with get() : System.Func<FunScript.TypeScript.MSEventObj, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MSEventObj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ondragend)"); CompiledName("ondragend1")>]
            member __.ondragend with get() : System.Func<FunScript.TypeScript.DragEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.DragEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.doctype)"); CompiledName("doctype")>]
            member __.doctype with get() : FunScript.TypeScript.DocumentType = failwith "never" and set (v : FunScript.TypeScript.DocumentType) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ondragover)"); CompiledName("ondragover1")>]
            member __.ondragover with get() : System.Func<FunScript.TypeScript.DragEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.DragEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.bgColor)"); CompiledName("bgColor1")>]
            member __.bgColor with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ondragstart)"); CompiledName("ondragstart1")>]
            member __.ondragstart with get() : System.Func<FunScript.TypeScript.DragEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.DragEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmouseup)"); CompiledName("onmouseup1")>]
            member __.onmouseup with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ondrag)"); CompiledName("ondrag1")>]
            member __.ondrag with get() : System.Func<FunScript.TypeScript.DragEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.DragEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmouseover)"); CompiledName("onmouseover1")>]
            member __.onmouseover with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.linkColor)"); CompiledName("linkColor")>]
            member __.linkColor with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onpause)"); CompiledName("onpause1")>]
            member __.onpause with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmousedown)"); CompiledName("onmousedown1")>]
            member __.onmousedown with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onclick)"); CompiledName("onclick1")>]
            member __.onclick with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onwaiting)"); CompiledName("onwaiting1")>]
            member __.onwaiting with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onstop)"); CompiledName("onstop")>]
            member __.onstop with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmssitemodejumplistitemremoved)"); CompiledName("onmssitemodejumplistitemremoved")>]
            member __.onmssitemodejumplistitemremoved with get() : System.Func<FunScript.TypeScript.MSSiteModeEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MSSiteModeEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.applets)"); CompiledName("applets")>]
            member __.applets with get() : FunScript.TypeScript.HTMLCollection = failwith "never" and set (v : FunScript.TypeScript.HTMLCollection) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.body)"); CompiledName("body")>]
            member __.body with get() : FunScript.TypeScript.HTMLElement = failwith "never" and set (v : FunScript.TypeScript.HTMLElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.domain)"); CompiledName("domain")>]
            member __.domain with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.xmlStandalone)"); CompiledName("xmlStandalone")>]
            member __.xmlStandalone with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.selection)"); CompiledName("selection")>]
            member __.selection with get() : FunScript.TypeScript.MSSelection = failwith "never" and set (v : FunScript.TypeScript.MSSelection) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onstalled)"); CompiledName("onstalled1")>]
            member __.onstalled with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmousemove)"); CompiledName("onmousemove1")>]
            member __.onmousemove with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onbeforeeditfocus)"); CompiledName("onbeforeeditfocus")>]
            member __.onbeforeeditfocus with get() : System.Func<FunScript.TypeScript.MSEventObj, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MSEventObj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onratechange)"); CompiledName("onratechange1")>]
            member __.onratechange with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onprogress)"); CompiledName("onprogress3")>]
            member __.onprogress with get() : System.Func<FunScript.TypeScript.ProgressEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.ProgressEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ondblclick)"); CompiledName("ondblclick1")>]
            member __.ondblclick with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.oncontextmenu)"); CompiledName("oncontextmenu1")>]
            member __.oncontextmenu with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onloadedmetadata)"); CompiledName("onloadedmetadata1")>]
            member __.onloadedmetadata with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.media)"); CompiledName("media2")>]
            member __.media with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onerror)"); CompiledName("onerror4")>]
            member __.onerror with get() : System.Func<FunScript.TypeScript.ErrorEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.ErrorEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onplay)"); CompiledName("onplay1")>]
            member __.onplay with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onafterupdate)"); CompiledName("onafterupdate")>]
            member __.onafterupdate with get() : System.Func<FunScript.TypeScript.MSEventObj, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MSEventObj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onplaying)"); CompiledName("onplaying1")>]
            member __.onplaying with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.images)"); CompiledName("images")>]
            member __.images with get() : FunScript.TypeScript.HTMLCollection = failwith "never" and set (v : FunScript.TypeScript.HTMLCollection) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.location)"); CompiledName("location1")>]
            member __.location with get() : FunScript.TypeScript.Location = failwith "never" and set (v : FunScript.TypeScript.Location) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onabort)"); CompiledName("onabort2")>]
            member __.onabort with get() : System.Func<FunScript.TypeScript.UIEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.UIEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onfocusout)"); CompiledName("onfocusout1")>]
            member __.onfocusout with get() : System.Func<FunScript.TypeScript.FocusEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.FocusEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onselectionchange)"); CompiledName("onselectionchange")>]
            member __.onselectionchange with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onstoragecommit)"); CompiledName("onstoragecommit")>]
            member __.onstoragecommit with get() : System.Func<FunScript.TypeScript.StorageEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.StorageEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ondataavailable)"); CompiledName("ondataavailable")>]
            member __.ondataavailable with get() : System.Func<FunScript.TypeScript.MSEventObj, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MSEventObj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onreadystatechange)"); CompiledName("onreadystatechange1")>]
            member __.onreadystatechange with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.lastModified)"); CompiledName("lastModified")>]
            member __.lastModified with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onkeypress)"); CompiledName("onkeypress1")>]
            member __.onkeypress with get() : System.Func<FunScript.TypeScript.KeyboardEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.KeyboardEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onloadeddata)"); CompiledName("onloadeddata1")>]
            member __.onloadeddata with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onbeforedeactivate)"); CompiledName("onbeforedeactivate")>]
            member __.onbeforedeactivate with get() : System.Func<FunScript.TypeScript.UIEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.UIEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onactivate)"); CompiledName("onactivate")>]
            member __.onactivate with get() : System.Func<FunScript.TypeScript.UIEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.UIEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onselectstart)"); CompiledName("onselectstart")>]
            member __.onselectstart with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onfocus)"); CompiledName("onfocus1")>]
            member __.onfocus with get() : System.Func<FunScript.TypeScript.FocusEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.FocusEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.fgColor)"); CompiledName("fgColor")>]
            member __.fgColor with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ontimeupdate)"); CompiledName("ontimeupdate1")>]
            member __.ontimeupdate with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onselect)"); CompiledName("onselect1")>]
            member __.onselect with get() : System.Func<FunScript.TypeScript.UIEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.UIEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ondrop)"); CompiledName("ondrop1")>]
            member __.ondrop with get() : System.Func<FunScript.TypeScript.DragEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.DragEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onended)"); CompiledName("onended1")>]
            member __.onended with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.compatMode)"); CompiledName("compatMode")>]
            member __.compatMode with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onscroll)"); CompiledName("onscroll1")>]
            member __.onscroll with get() : System.Func<FunScript.TypeScript.UIEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.UIEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onrowenter)"); CompiledName("onrowenter")>]
            member __.onrowenter with get() : System.Func<FunScript.TypeScript.MSEventObj, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MSEventObj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onload)"); CompiledName("onload1")>]
            member __.onload with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.oninput)"); CompiledName("oninput1")>]
            member __.oninput with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmspointerdown)"); CompiledName("onmspointerdown1")>]
            member __.onmspointerdown with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msHidden)"); CompiledName("msHidden")>]
            member __.msHidden with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msVisibilityState)"); CompiledName("msVisibilityState")>]
            member __.msVisibilityState with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmsgesturedoubletap)"); CompiledName("onmsgesturedoubletap1")>]
            member __.onmsgesturedoubletap with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.visibilityState)"); CompiledName("visibilityState")>]
            member __.visibilityState with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmsmanipulationstatechanged)"); CompiledName("onmsmanipulationstatechanged")>]
            member __.onmsmanipulationstatechanged with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmspointerhover)"); CompiledName("onmspointerhover1")>]
            member __.onmspointerhover with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmscontentzoom)"); CompiledName("onmscontentzoom")>]
            member __.onmscontentzoom with get() : System.Func<FunScript.TypeScript.MSEventObj, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MSEventObj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmspointermove)"); CompiledName("onmspointermove1")>]
            member __.onmspointermove with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmsgesturehold)"); CompiledName("onmsgesturehold1")>]
            member __.onmsgesturehold with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmsgesturechange)"); CompiledName("onmsgesturechange1")>]
            member __.onmsgesturechange with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmsgesturestart)"); CompiledName("onmsgesturestart1")>]
            member __.onmsgesturestart with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmspointercancel)"); CompiledName("onmspointercancel1")>]
            member __.onmspointercancel with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmsgestureend)"); CompiledName("onmsgestureend1")>]
            member __.onmsgestureend with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmsgesturetap)"); CompiledName("onmsgesturetap1")>]
            member __.onmsgesturetap with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmspointerout)"); CompiledName("onmspointerout1")>]
            member __.onmspointerout with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmsinertiastart)"); CompiledName("onmsinertiastart1")>]
            member __.onmsinertiastart with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msCSSOMElementFloatMetrics)"); CompiledName("msCSSOMElementFloatMetrics")>]
            member __.msCSSOMElementFloatMetrics with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmspointerover)"); CompiledName("onmspointerover1")>]
            member __.onmspointerover with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.hidden)"); CompiledName("hidden")>]
            member __.hidden with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmspointerup)"); CompiledName("onmspointerup1")>]
            member __.onmspointerup with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msFullscreenEnabled)"); CompiledName("msFullscreenEnabled")>]
            member __.msFullscreenEnabled with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmsfullscreenerror)"); CompiledName("onmsfullscreenerror")>]
            member __.onmsfullscreenerror with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmspointerenter)"); CompiledName("onmspointerenter1")>]
            member __.onmspointerenter with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msFullscreenElement)"); CompiledName("msFullscreenElement")>]
            member __.msFullscreenElement with get() : FunScript.TypeScript.Element = failwith "never" and set (v : FunScript.TypeScript.Element) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmsfullscreenchange)"); CompiledName("onmsfullscreenchange")>]
            member __.onmsfullscreenchange with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmspointerleave)"); CompiledName("onmspointerleave1")>]
            member __.onmspointerleave with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementById({1}))"); CompiledName("getElementById")>]
            member __.getElementById(elementId : string) : FunScript.TypeScript.HTMLElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementById = {1})"); CompiledName("getElementByIdAux")>]
            member __.``getElementById <-``(func : System.Func<string, FunScript.TypeScript.HTMLElement>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.queryCommandValue({1}))"); CompiledName("queryCommandValue1")>]
            member __.queryCommandValue(commandId : string) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.queryCommandValue = {1})"); CompiledName("queryCommandValue1Aux")>]
            member __.``queryCommandValue <-``(func : System.Func<string, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.adoptNode({1}))"); CompiledName("adoptNode")>]
            member __.adoptNode(source : FunScript.TypeScript.Node) : FunScript.TypeScript.Node = failwith "never"
            [<FunScript.JSEmitInline("({0}.adoptNode = {1})"); CompiledName("adoptNodeAux")>]
            member __.``adoptNode <-``(func : System.Func<FunScript.TypeScript.Node, FunScript.TypeScript.Node>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.queryCommandIndeterm({1}))"); CompiledName("queryCommandIndeterm1")>]
            member __.queryCommandIndeterm(commandId : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.queryCommandIndeterm = {1})"); CompiledName("queryCommandIndeterm1Aux")>]
            member __.``queryCommandIndeterm <-``(func : System.Func<string, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagNameNS({1}, {2}))"); CompiledName("getElementsByTagNameNS")>]
            member __.getElementsByTagNameNS(namespaceURI : string, localName : string) : FunScript.TypeScript.NodeList = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagNameNS = {1})"); CompiledName("getElementsByTagNameNSAux")>]
            member __.``getElementsByTagNameNS <-``(func : System.Func<string, string, FunScript.TypeScript.NodeList>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createProcessingInstruction({1}, {2}))"); CompiledName("createProcessingInstruction")>]
            member __.createProcessingInstruction(target : string, data : string) : FunScript.TypeScript.ProcessingInstruction = failwith "never"
            [<FunScript.JSEmitInline("({0}.createProcessingInstruction = {1})"); CompiledName("createProcessingInstructionAux")>]
            member __.``createProcessingInstruction <-``(func : System.Func<string, string, FunScript.TypeScript.ProcessingInstruction>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.execCommand({1}, {?2}, {?3}))"); CompiledName("execCommand1")>]
            member __.execCommand(commandId : string, ?showUI : bool, ?value : obj) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.execCommand = {1})"); CompiledName("execCommand1Aux")>]
            member __.``execCommand <-``(func : System.Func<string, bool, obj, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.elementFromPoint({1}, {2}))"); CompiledName("elementFromPoint")>]
            member __.elementFromPoint(x : float, y : float) : FunScript.TypeScript.Element = failwith "never"
            [<FunScript.JSEmitInline("({0}.elementFromPoint = {1})"); CompiledName("elementFromPointAux")>]
            member __.``elementFromPoint <-``(func : System.Func<float, float, FunScript.TypeScript.Element>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createCDATASection({1}))"); CompiledName("createCDATASection")>]
            member __.createCDATASection(data : string) : FunScript.TypeScript.CDATASection = failwith "never"
            [<FunScript.JSEmitInline("({0}.createCDATASection = {1})"); CompiledName("createCDATASectionAux")>]
            member __.``createCDATASection <-``(func : System.Func<string, FunScript.TypeScript.CDATASection>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.queryCommandText({1}))"); CompiledName("queryCommandText1")>]
            member __.queryCommandText(commandId : string) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.queryCommandText = {1})"); CompiledName("queryCommandText1Aux")>]
            member __.``queryCommandText <-``(func : System.Func<string, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.write())"); CompiledName("write")>]
            member __.write() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.write = {1})"); CompiledName("writeAux")>]
            member __.``write <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.write({1...}))"); CompiledName("write1")>]
            member __.writeOverload2([<System.ParamArray>] content : array<string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.updateSettings())"); CompiledName("updateSettings")>]
            member __.updateSettings() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.updateSettings = {1})"); CompiledName("updateSettingsAux")>]
            member __.``updateSettings <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"a\"))"); CompiledName("createElement")>]
            member __.createElement_a() : FunScript.TypeScript.HTMLAnchorElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"abbr\"))"); CompiledName("createElement1")>]
            member __.createElement_abbr() : FunScript.TypeScript.HTMLPhraseElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"acronym\"))"); CompiledName("createElement2")>]
            member __.createElement_acronym() : FunScript.TypeScript.HTMLPhraseElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"address\"))"); CompiledName("createElement3")>]
            member __.createElement_address() : FunScript.TypeScript.HTMLBlockElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"applet\"))"); CompiledName("createElement4")>]
            member __.createElement_applet() : FunScript.TypeScript.HTMLAppletElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"area\"))"); CompiledName("createElement5")>]
            member __.createElement_area() : FunScript.TypeScript.HTMLAreaElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"article\"))"); CompiledName("createElement6")>]
            member __.createElement_article() : FunScript.TypeScript.HTMLElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"aside\"))"); CompiledName("createElement7")>]
            member __.createElement_aside() : FunScript.TypeScript.HTMLElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"audio\"))"); CompiledName("createElement8")>]
            member __.createElement_audio() : FunScript.TypeScript.HTMLAudioElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"b\"))"); CompiledName("createElement9")>]
            member __.createElement_b() : FunScript.TypeScript.HTMLPhraseElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"base\"))"); CompiledName("createElement10")>]
            member __.createElement_base() : FunScript.TypeScript.HTMLBaseElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"basefont\"))"); CompiledName("createElement11")>]
            member __.createElement_basefont() : FunScript.TypeScript.HTMLBaseFontElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"bdo\"))"); CompiledName("createElement12")>]
            member __.createElement_bdo() : FunScript.TypeScript.HTMLPhraseElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"bgsound\"))"); CompiledName("createElement13")>]
            member __.createElement_bgsound() : FunScript.TypeScript.HTMLBGSoundElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"big\"))"); CompiledName("createElement14")>]
            member __.createElement_big() : FunScript.TypeScript.HTMLPhraseElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"blockquote\"))"); CompiledName("createElement15")>]
            member __.createElement_blockquote() : FunScript.TypeScript.HTMLBlockElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"body\"))"); CompiledName("createElement16")>]
            member __.createElement_body() : FunScript.TypeScript.HTMLBodyElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"br\"))"); CompiledName("createElement17")>]
            member __.createElement_br() : FunScript.TypeScript.HTMLBRElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"button\"))"); CompiledName("createElement18")>]
            member __.createElement_button() : FunScript.TypeScript.HTMLButtonElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"canvas\"))"); CompiledName("createElement19")>]
            member __.createElement_canvas() : FunScript.TypeScript.HTMLCanvasElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"caption\"))"); CompiledName("createElement20")>]
            member __.createElement_caption() : FunScript.TypeScript.HTMLTableCaptionElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"center\"))"); CompiledName("createElement21")>]
            member __.createElement_center() : FunScript.TypeScript.HTMLBlockElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"cite\"))"); CompiledName("createElement22")>]
            member __.createElement_cite() : FunScript.TypeScript.HTMLPhraseElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"code\"))"); CompiledName("createElement23")>]
            member __.createElement_code() : FunScript.TypeScript.HTMLPhraseElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"col\"))"); CompiledName("createElement24")>]
            member __.createElement_col() : FunScript.TypeScript.HTMLTableColElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"colgroup\"))"); CompiledName("createElement25")>]
            member __.createElement_colgroup() : FunScript.TypeScript.HTMLTableColElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"datalist\"))"); CompiledName("createElement26")>]
            member __.createElement_datalist() : FunScript.TypeScript.HTMLDataListElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"dd\"))"); CompiledName("createElement27")>]
            member __.createElement_dd() : FunScript.TypeScript.HTMLDDElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"del\"))"); CompiledName("createElement28")>]
            member __.createElement_del() : FunScript.TypeScript.HTMLModElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"dfn\"))"); CompiledName("createElement29")>]
            member __.createElement_dfn() : FunScript.TypeScript.HTMLPhraseElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"dir\"))"); CompiledName("createElement30")>]
            member __.createElement_dir() : FunScript.TypeScript.HTMLDirectoryElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"div\"))"); CompiledName("createElement31")>]
            member __.createElement_div() : FunScript.TypeScript.HTMLDivElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"dl\"))"); CompiledName("createElement32")>]
            member __.createElement_dl() : FunScript.TypeScript.HTMLDListElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"dt\"))"); CompiledName("createElement33")>]
            member __.createElement_dt() : FunScript.TypeScript.HTMLDTElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"em\"))"); CompiledName("createElement34")>]
            member __.createElement_em() : FunScript.TypeScript.HTMLPhraseElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"embed\"))"); CompiledName("createElement35")>]
            member __.createElement_embed() : FunScript.TypeScript.HTMLEmbedElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"fieldset\"))"); CompiledName("createElement36")>]
            member __.createElement_fieldset() : FunScript.TypeScript.HTMLFieldSetElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"figcaption\"))"); CompiledName("createElement37")>]
            member __.createElement_figcaption() : FunScript.TypeScript.HTMLElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"figure\"))"); CompiledName("createElement38")>]
            member __.createElement_figure() : FunScript.TypeScript.HTMLElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"font\"))"); CompiledName("createElement39")>]
            member __.createElement_font() : FunScript.TypeScript.HTMLFontElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"footer\"))"); CompiledName("createElement40")>]
            member __.createElement_footer() : FunScript.TypeScript.HTMLElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"form\"))"); CompiledName("createElement41")>]
            member __.createElement_form() : FunScript.TypeScript.HTMLFormElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"frame\"))"); CompiledName("createElement42")>]
            member __.createElement_frame() : FunScript.TypeScript.HTMLFrameElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"frameset\"))"); CompiledName("createElement43")>]
            member __.createElement_frameset() : FunScript.TypeScript.HTMLFrameSetElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"h1\"))"); CompiledName("createElement44")>]
            member __.createElement_h1() : FunScript.TypeScript.HTMLHeadingElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"h2\"))"); CompiledName("createElement45")>]
            member __.createElement_h2() : FunScript.TypeScript.HTMLHeadingElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"h3\"))"); CompiledName("createElement46")>]
            member __.createElement_h3() : FunScript.TypeScript.HTMLHeadingElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"h4\"))"); CompiledName("createElement47")>]
            member __.createElement_h4() : FunScript.TypeScript.HTMLHeadingElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"h5\"))"); CompiledName("createElement48")>]
            member __.createElement_h5() : FunScript.TypeScript.HTMLHeadingElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"h6\"))"); CompiledName("createElement49")>]
            member __.createElement_h6() : FunScript.TypeScript.HTMLHeadingElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"head\"))"); CompiledName("createElement50")>]
            member __.createElement_head() : FunScript.TypeScript.HTMLHeadElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"header\"))"); CompiledName("createElement51")>]
            member __.createElement_header() : FunScript.TypeScript.HTMLElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"hgroup\"))"); CompiledName("createElement52")>]
            member __.createElement_hgroup() : FunScript.TypeScript.HTMLElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"hr\"))"); CompiledName("createElement53")>]
            member __.createElement_hr() : FunScript.TypeScript.HTMLHRElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"html\"))"); CompiledName("createElement54")>]
            member __.createElement_html() : FunScript.TypeScript.HTMLHtmlElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"i\"))"); CompiledName("createElement55")>]
            member __.createElement_i() : FunScript.TypeScript.HTMLPhraseElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"iframe\"))"); CompiledName("createElement56")>]
            member __.createElement_iframe() : FunScript.TypeScript.HTMLIFrameElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"img\"))"); CompiledName("createElement57")>]
            member __.createElement_img() : FunScript.TypeScript.HTMLImageElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"input\"))"); CompiledName("createElement58")>]
            member __.createElement_input() : FunScript.TypeScript.HTMLInputElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"ins\"))"); CompiledName("createElement59")>]
            member __.createElement_ins() : FunScript.TypeScript.HTMLModElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"isindex\"))"); CompiledName("createElement60")>]
            member __.createElement_isindex() : FunScript.TypeScript.HTMLIsIndexElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"kbd\"))"); CompiledName("createElement61")>]
            member __.createElement_kbd() : FunScript.TypeScript.HTMLPhraseElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"keygen\"))"); CompiledName("createElement62")>]
            member __.createElement_keygen() : FunScript.TypeScript.HTMLBlockElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"label\"))"); CompiledName("createElement63")>]
            member __.createElement_label() : FunScript.TypeScript.HTMLLabelElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"legend\"))"); CompiledName("createElement64")>]
            member __.createElement_legend() : FunScript.TypeScript.HTMLLegendElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"li\"))"); CompiledName("createElement65")>]
            member __.createElement_li() : FunScript.TypeScript.HTMLLIElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"link\"))"); CompiledName("createElement66")>]
            member __.createElement_link() : FunScript.TypeScript.HTMLLinkElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"listing\"))"); CompiledName("createElement67")>]
            member __.createElement_listing() : FunScript.TypeScript.HTMLBlockElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"map\"))"); CompiledName("createElement68")>]
            member __.createElement_map() : FunScript.TypeScript.HTMLMapElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"mark\"))"); CompiledName("createElement69")>]
            member __.createElement_mark() : FunScript.TypeScript.HTMLElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"marquee\"))"); CompiledName("createElement70")>]
            member __.createElement_marquee() : FunScript.TypeScript.HTMLMarqueeElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"menu\"))"); CompiledName("createElement71")>]
            member __.createElement_menu() : FunScript.TypeScript.HTMLMenuElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"meta\"))"); CompiledName("createElement72")>]
            member __.createElement_meta() : FunScript.TypeScript.HTMLMetaElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"nav\"))"); CompiledName("createElement73")>]
            member __.createElement_nav() : FunScript.TypeScript.HTMLElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"nextid\"))"); CompiledName("createElement74")>]
            member __.createElement_nextid() : FunScript.TypeScript.HTMLNextIdElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"nobr\"))"); CompiledName("createElement75")>]
            member __.createElement_nobr() : FunScript.TypeScript.HTMLPhraseElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"noframes\"))"); CompiledName("createElement76")>]
            member __.createElement_noframes() : FunScript.TypeScript.HTMLElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"noscript\"))"); CompiledName("createElement77")>]
            member __.createElement_noscript() : FunScript.TypeScript.HTMLElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"object\"))"); CompiledName("createElement78")>]
            member __.createElement_object() : FunScript.TypeScript.HTMLObjectElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"ol\"))"); CompiledName("createElement79")>]
            member __.createElement_ol() : FunScript.TypeScript.HTMLOListElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"optgroup\"))"); CompiledName("createElement80")>]
            member __.createElement_optgroup() : FunScript.TypeScript.HTMLOptGroupElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"option\"))"); CompiledName("createElement81")>]
            member __.createElement_option() : FunScript.TypeScript.HTMLOptionElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"p\"))"); CompiledName("createElement82")>]
            member __.createElement_p() : FunScript.TypeScript.HTMLParagraphElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"param\"))"); CompiledName("createElement83")>]
            member __.createElement_param() : FunScript.TypeScript.HTMLParamElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"plaintext\"))"); CompiledName("createElement84")>]
            member __.createElement_plaintext() : FunScript.TypeScript.HTMLBlockElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"pre\"))"); CompiledName("createElement85")>]
            member __.createElement_pre() : FunScript.TypeScript.HTMLPreElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"progress\"))"); CompiledName("createElement86")>]
            member __.createElement_progress() : FunScript.TypeScript.HTMLProgressElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"q\"))"); CompiledName("createElement87")>]
            member __.createElement_q() : FunScript.TypeScript.HTMLQuoteElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"rt\"))"); CompiledName("createElement88")>]
            member __.createElement_rt() : FunScript.TypeScript.HTMLPhraseElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"ruby\"))"); CompiledName("createElement89")>]
            member __.createElement_ruby() : FunScript.TypeScript.HTMLPhraseElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"s\"))"); CompiledName("createElement90")>]
            member __.createElement_s() : FunScript.TypeScript.HTMLPhraseElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"samp\"))"); CompiledName("createElement91")>]
            member __.createElement_samp() : FunScript.TypeScript.HTMLPhraseElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"script\"))"); CompiledName("createElement92")>]
            member __.createElement_script() : FunScript.TypeScript.HTMLScriptElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"section\"))"); CompiledName("createElement93")>]
            member __.createElement_section() : FunScript.TypeScript.HTMLElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"select\"))"); CompiledName("createElement94")>]
            member __.createElement_select() : FunScript.TypeScript.HTMLSelectElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"small\"))"); CompiledName("createElement95")>]
            member __.createElement_small() : FunScript.TypeScript.HTMLPhraseElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"SOURCE\"))"); CompiledName("createElement96")>]
            member __.createElement_SOURCE() : FunScript.TypeScript.HTMLSourceElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"span\"))"); CompiledName("createElement97")>]
            member __.createElement_span() : FunScript.TypeScript.HTMLSpanElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"strike\"))"); CompiledName("createElement98")>]
            member __.createElement_strike() : FunScript.TypeScript.HTMLPhraseElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"strong\"))"); CompiledName("createElement99")>]
            member __.createElement_strong() : FunScript.TypeScript.HTMLPhraseElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"style\"))"); CompiledName("createElement100")>]
            member __.createElement_style() : FunScript.TypeScript.HTMLStyleElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"sub\"))"); CompiledName("createElement101")>]
            member __.createElement_sub() : FunScript.TypeScript.HTMLPhraseElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"sup\"))"); CompiledName("createElement102")>]
            member __.createElement_sup() : FunScript.TypeScript.HTMLPhraseElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"table\"))"); CompiledName("createElement103")>]
            member __.createElement_table() : FunScript.TypeScript.HTMLTableElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"tbody\"))"); CompiledName("createElement104")>]
            member __.createElement_tbody() : FunScript.TypeScript.HTMLTableSectionElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"td\"))"); CompiledName("createElement105")>]
            member __.createElement_td() : FunScript.TypeScript.HTMLTableDataCellElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"textarea\"))"); CompiledName("createElement106")>]
            member __.createElement_textarea() : FunScript.TypeScript.HTMLTextAreaElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"tfoot\"))"); CompiledName("createElement107")>]
            member __.createElement_tfoot() : FunScript.TypeScript.HTMLTableSectionElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"th\"))"); CompiledName("createElement108")>]
            member __.createElement_th() : FunScript.TypeScript.HTMLTableHeaderCellElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"thead\"))"); CompiledName("createElement109")>]
            member __.createElement_thead() : FunScript.TypeScript.HTMLTableSectionElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"title\"))"); CompiledName("createElement110")>]
            member __.createElement_title() : FunScript.TypeScript.HTMLTitleElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"tr\"))"); CompiledName("createElement111")>]
            member __.createElement_tr() : FunScript.TypeScript.HTMLTableRowElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"track\"))"); CompiledName("createElement112")>]
            member __.createElement_track() : FunScript.TypeScript.HTMLTrackElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"tt\"))"); CompiledName("createElement113")>]
            member __.createElement_tt() : FunScript.TypeScript.HTMLPhraseElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"u\"))"); CompiledName("createElement114")>]
            member __.createElement_u() : FunScript.TypeScript.HTMLPhraseElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"ul\"))"); CompiledName("createElement115")>]
            member __.createElement_ul() : FunScript.TypeScript.HTMLUListElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"var\"))"); CompiledName("createElement116")>]
            member __.createElement_var() : FunScript.TypeScript.HTMLPhraseElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"video\"))"); CompiledName("createElement117")>]
            member __.createElement_video() : FunScript.TypeScript.HTMLVideoElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"wbr\"))"); CompiledName("createElement118")>]
            member __.createElement_wbr() : FunScript.TypeScript.HTMLElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"x-ms-webview\"))"); CompiledName("createElement119")>]
            member __.createElement_x_ms_webview() : FunScript.TypeScript.MSHTMLWebViewElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement(\"xmp\"))"); CompiledName("createElement120")>]
            member __.createElement_xmp() : FunScript.TypeScript.HTMLBlockElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement({1}))"); CompiledName("createElement121")>]
            member __.createElement(tagName : string) : FunScript.TypeScript.HTMLElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElement = {1})"); CompiledName("createElement121Aux")>]
            member __.``createElement <-``(func : System.Func<string, FunScript.TypeScript.HTMLElement>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.releaseCapture())"); CompiledName("releaseCapture")>]
            member __.releaseCapture() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.releaseCapture = {1})"); CompiledName("releaseCaptureAux")>]
            member __.``releaseCapture <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.writeln())"); CompiledName("writeln")>]
            member __.writeln() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.writeln = {1})"); CompiledName("writelnAux")>]
            member __.``writeln <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.writeln({1...}))"); CompiledName("writeln1")>]
            member __.writelnOverload2([<System.ParamArray>] content : array<string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElementNS({1}, {2}))"); CompiledName("createElementNS")>]
            member __.createElementNS(namespaceURI : string, qualifiedName : string) : FunScript.TypeScript.Element = failwith "never"
            [<FunScript.JSEmitInline("({0}.createElementNS = {1})"); CompiledName("createElementNSAux")>]
            member __.``createElementNS <-``(func : System.Func<string, string, FunScript.TypeScript.Element>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.open({?1}, {?2}, {?3}, {?4}))"); CompiledName("_open1")>]
            member __._open(?url : string, ?name : string, ?features : string, ?replace : bool) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.open = {1})"); CompiledName("_open1Aux")>]
            member __.``_open <-``(func : System.Func<string, string, string, bool, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.queryCommandSupported({1}))"); CompiledName("queryCommandSupported1")>]
            member __.queryCommandSupported(commandId : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.queryCommandSupported = {1})"); CompiledName("queryCommandSupported1Aux")>]
            member __.``queryCommandSupported <-``(func : System.Func<string, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createTreeWalker({1}, {2}, {3}, {4}))"); CompiledName("createTreeWalker")>]
            member __.createTreeWalker(root : FunScript.TypeScript.Node, whatToShow : float, filter : FunScript.TypeScript.NodeFilter, entityReferenceExpansion : bool) : FunScript.TypeScript.TreeWalker = failwith "never"
            [<FunScript.JSEmitInline("({0}.createTreeWalker = {1})"); CompiledName("createTreeWalkerAux")>]
            member __.``createTreeWalker <-``(func : System.Func<FunScript.TypeScript.Node, float, FunScript.TypeScript.NodeFilter, bool, FunScript.TypeScript.TreeWalker>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createAttributeNS({1}, {2}))"); CompiledName("createAttributeNS")>]
            member __.createAttributeNS(namespaceURI : string, qualifiedName : string) : FunScript.TypeScript.Attr = failwith "never"
            [<FunScript.JSEmitInline("({0}.createAttributeNS = {1})"); CompiledName("createAttributeNSAux")>]
            member __.``createAttributeNS <-``(func : System.Func<string, string, FunScript.TypeScript.Attr>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.queryCommandEnabled({1}))"); CompiledName("queryCommandEnabled1")>]
            member __.queryCommandEnabled(commandId : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.queryCommandEnabled = {1})"); CompiledName("queryCommandEnabled1Aux")>]
            member __.``queryCommandEnabled <-``(func : System.Func<string, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.focus())"); CompiledName("focus1")>]
            member __.focus() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.focus = {1})"); CompiledName("focus1Aux")>]
            member __.``focus <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.close())"); CompiledName("close1")>]
            member __.close() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.close = {1})"); CompiledName("close1Aux")>]
            member __.``close <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByClassName({1}))"); CompiledName("getElementsByClassName")>]
            member __.getElementsByClassName(classNames : string) : FunScript.TypeScript.NodeList = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByClassName = {1})"); CompiledName("getElementsByClassNameAux")>]
            member __.``getElementsByClassName <-``(func : System.Func<string, FunScript.TypeScript.NodeList>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.importNode({1}, {2}))"); CompiledName("importNode")>]
            member __.importNode(importedNode : FunScript.TypeScript.Node, deep : bool) : FunScript.TypeScript.Node = failwith "never"
            [<FunScript.JSEmitInline("({0}.importNode = {1})"); CompiledName("importNodeAux")>]
            member __.``importNode <-``(func : System.Func<FunScript.TypeScript.Node, bool, FunScript.TypeScript.Node>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createRange())"); CompiledName("createRange")>]
            member __.createRange() : FunScript.TypeScript.Range = failwith "never"
            [<FunScript.JSEmitInline("({0}.createRange = {1})"); CompiledName("createRangeAux")>]
            member __.``createRange <-``(func : System.Func<FunScript.TypeScript.Range>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.fireEvent({1}, {?2}))"); CompiledName("fireEvent")>]
            member __.fireEvent(eventName : string, ?eventObj : obj) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.fireEvent = {1})"); CompiledName("fireEventAux")>]
            member __.``fireEvent <-``(func : System.Func<string, obj, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createComment({1}))"); CompiledName("createComment")>]
            member __.createComment(data : string) : FunScript.TypeScript.Comment = failwith "never"
            [<FunScript.JSEmitInline("({0}.createComment = {1})"); CompiledName("createCommentAux")>]
            member __.``createComment <-``(func : System.Func<string, FunScript.TypeScript.Comment>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"a\"))"); CompiledName("getElementsByTagName")>]
            member __.getElementsByTagName_a() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLAnchorElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"abbr\"))"); CompiledName("getElementsByTagName1")>]
            member __.getElementsByTagName_abbr() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"acronym\"))"); CompiledName("getElementsByTagName2")>]
            member __.getElementsByTagName_acronym() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"address\"))"); CompiledName("getElementsByTagName3")>]
            member __.getElementsByTagName_address() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLBlockElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"applet\"))"); CompiledName("getElementsByTagName4")>]
            member __.getElementsByTagName_applet() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLAppletElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"area\"))"); CompiledName("getElementsByTagName5")>]
            member __.getElementsByTagName_area() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLAreaElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"article\"))"); CompiledName("getElementsByTagName6")>]
            member __.getElementsByTagName_article() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"aside\"))"); CompiledName("getElementsByTagName7")>]
            member __.getElementsByTagName_aside() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"audio\"))"); CompiledName("getElementsByTagName8")>]
            member __.getElementsByTagName_audio() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLAudioElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"b\"))"); CompiledName("getElementsByTagName9")>]
            member __.getElementsByTagName_b() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"base\"))"); CompiledName("getElementsByTagName10")>]
            member __.getElementsByTagName_base() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLBaseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"basefont\"))"); CompiledName("getElementsByTagName11")>]
            member __.getElementsByTagName_basefont() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLBaseFontElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"bdo\"))"); CompiledName("getElementsByTagName12")>]
            member __.getElementsByTagName_bdo() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"bgsound\"))"); CompiledName("getElementsByTagName13")>]
            member __.getElementsByTagName_bgsound() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLBGSoundElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"big\"))"); CompiledName("getElementsByTagName14")>]
            member __.getElementsByTagName_big() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"blockquote\"))"); CompiledName("getElementsByTagName15")>]
            member __.getElementsByTagName_blockquote() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLBlockElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"body\"))"); CompiledName("getElementsByTagName16")>]
            member __.getElementsByTagName_body() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLBodyElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"br\"))"); CompiledName("getElementsByTagName17")>]
            member __.getElementsByTagName_br() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLBRElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"button\"))"); CompiledName("getElementsByTagName18")>]
            member __.getElementsByTagName_button() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLButtonElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"canvas\"))"); CompiledName("getElementsByTagName19")>]
            member __.getElementsByTagName_canvas() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLCanvasElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"caption\"))"); CompiledName("getElementsByTagName20")>]
            member __.getElementsByTagName_caption() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLTableCaptionElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"center\"))"); CompiledName("getElementsByTagName21")>]
            member __.getElementsByTagName_center() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLBlockElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"cite\"))"); CompiledName("getElementsByTagName22")>]
            member __.getElementsByTagName_cite() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"code\"))"); CompiledName("getElementsByTagName23")>]
            member __.getElementsByTagName_code() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"col\"))"); CompiledName("getElementsByTagName24")>]
            member __.getElementsByTagName_col() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLTableColElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"colgroup\"))"); CompiledName("getElementsByTagName25")>]
            member __.getElementsByTagName_colgroup() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLTableColElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"datalist\"))"); CompiledName("getElementsByTagName26")>]
            member __.getElementsByTagName_datalist() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLDataListElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"dd\"))"); CompiledName("getElementsByTagName27")>]
            member __.getElementsByTagName_dd() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLDDElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"del\"))"); CompiledName("getElementsByTagName28")>]
            member __.getElementsByTagName_del() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLModElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"dfn\"))"); CompiledName("getElementsByTagName29")>]
            member __.getElementsByTagName_dfn() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"dir\"))"); CompiledName("getElementsByTagName30")>]
            member __.getElementsByTagName_dir() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLDirectoryElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"div\"))"); CompiledName("getElementsByTagName31")>]
            member __.getElementsByTagName_div() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLDivElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"dl\"))"); CompiledName("getElementsByTagName32")>]
            member __.getElementsByTagName_dl() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLDListElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"dt\"))"); CompiledName("getElementsByTagName33")>]
            member __.getElementsByTagName_dt() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLDTElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"em\"))"); CompiledName("getElementsByTagName34")>]
            member __.getElementsByTagName_em() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"embed\"))"); CompiledName("getElementsByTagName35")>]
            member __.getElementsByTagName_embed() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLEmbedElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"fieldset\"))"); CompiledName("getElementsByTagName36")>]
            member __.getElementsByTagName_fieldset() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLFieldSetElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"figcaption\"))"); CompiledName("getElementsByTagName37")>]
            member __.getElementsByTagName_figcaption() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"figure\"))"); CompiledName("getElementsByTagName38")>]
            member __.getElementsByTagName_figure() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"font\"))"); CompiledName("getElementsByTagName39")>]
            member __.getElementsByTagName_font() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLFontElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"footer\"))"); CompiledName("getElementsByTagName40")>]
            member __.getElementsByTagName_footer() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"form\"))"); CompiledName("getElementsByTagName41")>]
            member __.getElementsByTagName_form() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLFormElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"frame\"))"); CompiledName("getElementsByTagName42")>]
            member __.getElementsByTagName_frame() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLFrameElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"frameset\"))"); CompiledName("getElementsByTagName43")>]
            member __.getElementsByTagName_frameset() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLFrameSetElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"h1\"))"); CompiledName("getElementsByTagName44")>]
            member __.getElementsByTagName_h1() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLHeadingElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"h2\"))"); CompiledName("getElementsByTagName45")>]
            member __.getElementsByTagName_h2() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLHeadingElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"h3\"))"); CompiledName("getElementsByTagName46")>]
            member __.getElementsByTagName_h3() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLHeadingElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"h4\"))"); CompiledName("getElementsByTagName47")>]
            member __.getElementsByTagName_h4() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLHeadingElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"h5\"))"); CompiledName("getElementsByTagName48")>]
            member __.getElementsByTagName_h5() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLHeadingElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"h6\"))"); CompiledName("getElementsByTagName49")>]
            member __.getElementsByTagName_h6() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLHeadingElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"head\"))"); CompiledName("getElementsByTagName50")>]
            member __.getElementsByTagName_head() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLHeadElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"header\"))"); CompiledName("getElementsByTagName51")>]
            member __.getElementsByTagName_header() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"hgroup\"))"); CompiledName("getElementsByTagName52")>]
            member __.getElementsByTagName_hgroup() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"hr\"))"); CompiledName("getElementsByTagName53")>]
            member __.getElementsByTagName_hr() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLHRElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"html\"))"); CompiledName("getElementsByTagName54")>]
            member __.getElementsByTagName_html() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLHtmlElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"i\"))"); CompiledName("getElementsByTagName55")>]
            member __.getElementsByTagName_i() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"iframe\"))"); CompiledName("getElementsByTagName56")>]
            member __.getElementsByTagName_iframe() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLIFrameElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"img\"))"); CompiledName("getElementsByTagName57")>]
            member __.getElementsByTagName_img() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLImageElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"input\"))"); CompiledName("getElementsByTagName58")>]
            member __.getElementsByTagName_input() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLInputElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"ins\"))"); CompiledName("getElementsByTagName59")>]
            member __.getElementsByTagName_ins() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLModElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"isindex\"))"); CompiledName("getElementsByTagName60")>]
            member __.getElementsByTagName_isindex() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLIsIndexElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"kbd\"))"); CompiledName("getElementsByTagName61")>]
            member __.getElementsByTagName_kbd() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"keygen\"))"); CompiledName("getElementsByTagName62")>]
            member __.getElementsByTagName_keygen() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLBlockElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"label\"))"); CompiledName("getElementsByTagName63")>]
            member __.getElementsByTagName_label() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLLabelElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"legend\"))"); CompiledName("getElementsByTagName64")>]
            member __.getElementsByTagName_legend() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLLegendElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"li\"))"); CompiledName("getElementsByTagName65")>]
            member __.getElementsByTagName_li() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLLIElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"link\"))"); CompiledName("getElementsByTagName66")>]
            member __.getElementsByTagName_link() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLLinkElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"listing\"))"); CompiledName("getElementsByTagName67")>]
            member __.getElementsByTagName_listing() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLBlockElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"map\"))"); CompiledName("getElementsByTagName68")>]
            member __.getElementsByTagName_map() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLMapElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"mark\"))"); CompiledName("getElementsByTagName69")>]
            member __.getElementsByTagName_mark() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"marquee\"))"); CompiledName("getElementsByTagName70")>]
            member __.getElementsByTagName_marquee() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLMarqueeElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"menu\"))"); CompiledName("getElementsByTagName71")>]
            member __.getElementsByTagName_menu() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLMenuElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"meta\"))"); CompiledName("getElementsByTagName72")>]
            member __.getElementsByTagName_meta() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLMetaElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"nav\"))"); CompiledName("getElementsByTagName73")>]
            member __.getElementsByTagName_nav() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"nextid\"))"); CompiledName("getElementsByTagName74")>]
            member __.getElementsByTagName_nextid() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLNextIdElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"nobr\"))"); CompiledName("getElementsByTagName75")>]
            member __.getElementsByTagName_nobr() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"noframes\"))"); CompiledName("getElementsByTagName76")>]
            member __.getElementsByTagName_noframes() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"noscript\"))"); CompiledName("getElementsByTagName77")>]
            member __.getElementsByTagName_noscript() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"object\"))"); CompiledName("getElementsByTagName78")>]
            member __.getElementsByTagName_object() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLObjectElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"ol\"))"); CompiledName("getElementsByTagName79")>]
            member __.getElementsByTagName_ol() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLOListElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"optgroup\"))"); CompiledName("getElementsByTagName80")>]
            member __.getElementsByTagName_optgroup() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLOptGroupElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"option\"))"); CompiledName("getElementsByTagName81")>]
            member __.getElementsByTagName_option() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLOptionElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"p\"))"); CompiledName("getElementsByTagName82")>]
            member __.getElementsByTagName_p() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLParagraphElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"param\"))"); CompiledName("getElementsByTagName83")>]
            member __.getElementsByTagName_param() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLParamElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"plaintext\"))"); CompiledName("getElementsByTagName84")>]
            member __.getElementsByTagName_plaintext() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLBlockElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"pre\"))"); CompiledName("getElementsByTagName85")>]
            member __.getElementsByTagName_pre() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPreElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"progress\"))"); CompiledName("getElementsByTagName86")>]
            member __.getElementsByTagName_progress() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLProgressElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"q\"))"); CompiledName("getElementsByTagName87")>]
            member __.getElementsByTagName_q() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLQuoteElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"rt\"))"); CompiledName("getElementsByTagName88")>]
            member __.getElementsByTagName_rt() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"ruby\"))"); CompiledName("getElementsByTagName89")>]
            member __.getElementsByTagName_ruby() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"s\"))"); CompiledName("getElementsByTagName90")>]
            member __.getElementsByTagName_s() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"samp\"))"); CompiledName("getElementsByTagName91")>]
            member __.getElementsByTagName_samp() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"script\"))"); CompiledName("getElementsByTagName92")>]
            member __.getElementsByTagName_script() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLScriptElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"section\"))"); CompiledName("getElementsByTagName93")>]
            member __.getElementsByTagName_section() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"select\"))"); CompiledName("getElementsByTagName94")>]
            member __.getElementsByTagName_select() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLSelectElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"small\"))"); CompiledName("getElementsByTagName95")>]
            member __.getElementsByTagName_small() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"SOURCE\"))"); CompiledName("getElementsByTagName96")>]
            member __.getElementsByTagName_SOURCE() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLSourceElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"span\"))"); CompiledName("getElementsByTagName97")>]
            member __.getElementsByTagName_span() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLSpanElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"strike\"))"); CompiledName("getElementsByTagName98")>]
            member __.getElementsByTagName_strike() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"strong\"))"); CompiledName("getElementsByTagName99")>]
            member __.getElementsByTagName_strong() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"style\"))"); CompiledName("getElementsByTagName100")>]
            member __.getElementsByTagName_style() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLStyleElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"sub\"))"); CompiledName("getElementsByTagName101")>]
            member __.getElementsByTagName_sub() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"sup\"))"); CompiledName("getElementsByTagName102")>]
            member __.getElementsByTagName_sup() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"table\"))"); CompiledName("getElementsByTagName103")>]
            member __.getElementsByTagName_table() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLTableElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"tbody\"))"); CompiledName("getElementsByTagName104")>]
            member __.getElementsByTagName_tbody() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLTableSectionElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"td\"))"); CompiledName("getElementsByTagName105")>]
            member __.getElementsByTagName_td() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLTableDataCellElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"textarea\"))"); CompiledName("getElementsByTagName106")>]
            member __.getElementsByTagName_textarea() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLTextAreaElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"tfoot\"))"); CompiledName("getElementsByTagName107")>]
            member __.getElementsByTagName_tfoot() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLTableSectionElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"th\"))"); CompiledName("getElementsByTagName108")>]
            member __.getElementsByTagName_th() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLTableHeaderCellElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"thead\"))"); CompiledName("getElementsByTagName109")>]
            member __.getElementsByTagName_thead() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLTableSectionElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"title\"))"); CompiledName("getElementsByTagName110")>]
            member __.getElementsByTagName_title() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLTitleElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"tr\"))"); CompiledName("getElementsByTagName111")>]
            member __.getElementsByTagName_tr() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLTableRowElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"track\"))"); CompiledName("getElementsByTagName112")>]
            member __.getElementsByTagName_track() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLTrackElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"tt\"))"); CompiledName("getElementsByTagName113")>]
            member __.getElementsByTagName_tt() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"u\"))"); CompiledName("getElementsByTagName114")>]
            member __.getElementsByTagName_u() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"ul\"))"); CompiledName("getElementsByTagName115")>]
            member __.getElementsByTagName_ul() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLUListElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"var\"))"); CompiledName("getElementsByTagName116")>]
            member __.getElementsByTagName_var() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"video\"))"); CompiledName("getElementsByTagName117")>]
            member __.getElementsByTagName_video() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLVideoElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"wbr\"))"); CompiledName("getElementsByTagName118")>]
            member __.getElementsByTagName_wbr() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"x-ms-webview\"))"); CompiledName("getElementsByTagName119")>]
            member __.getElementsByTagName_x_ms_webview() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.MSHTMLWebViewElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"xmp\"))"); CompiledName("getElementsByTagName120")>]
            member __.getElementsByTagName_xmp() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLBlockElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName({1}))"); CompiledName("getElementsByTagName121")>]
            member __.getElementsByTagName(name : string) : FunScript.TypeScript.NodeList = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName = {1})"); CompiledName("getElementsByTagName121Aux")>]
            member __.``getElementsByTagName <-``(func : System.Func<string, FunScript.TypeScript.NodeList>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createDocumentFragment())"); CompiledName("createDocumentFragment")>]
            member __.createDocumentFragment() : FunScript.TypeScript.DocumentFragment = failwith "never"
            [<FunScript.JSEmitInline("({0}.createDocumentFragment = {1})"); CompiledName("createDocumentFragmentAux")>]
            member __.``createDocumentFragment <-``(func : System.Func<FunScript.TypeScript.DocumentFragment>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createStyleSheet({?1}, {?2}))"); CompiledName("createStyleSheet")>]
            member __.createStyleSheet(?href : string, ?index : float) : FunScript.TypeScript.CSSStyleSheet = failwith "never"
            [<FunScript.JSEmitInline("({0}.createStyleSheet = {1})"); CompiledName("createStyleSheetAux")>]
            member __.``createStyleSheet <-``(func : System.Func<string, float, FunScript.TypeScript.CSSStyleSheet>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByName({1}))"); CompiledName("getElementsByName")>]
            member __.getElementsByName(elementName : string) : FunScript.TypeScript.NodeList = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByName = {1})"); CompiledName("getElementsByNameAux")>]
            member __.``getElementsByName <-``(func : System.Func<string, FunScript.TypeScript.NodeList>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.queryCommandState({1}))"); CompiledName("queryCommandState1")>]
            member __.queryCommandState(commandId : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.queryCommandState = {1})"); CompiledName("queryCommandState1Aux")>]
            member __.``queryCommandState <-``(func : System.Func<string, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.hasFocus())"); CompiledName("hasFocus")>]
            member __.hasFocus() : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.hasFocus = {1})"); CompiledName("hasFocusAux")>]
            member __.``hasFocus <-``(func : System.Func<bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.execCommandShowHelp({1}))"); CompiledName("execCommandShowHelp")>]
            member __.execCommandShowHelp(commandId : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.execCommandShowHelp = {1})"); CompiledName("execCommandShowHelpAux")>]
            member __.``execCommandShowHelp <-``(func : System.Func<string, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createAttribute({1}))"); CompiledName("createAttribute")>]
            member __.createAttribute(name : string) : FunScript.TypeScript.Attr = failwith "never"
            [<FunScript.JSEmitInline("({0}.createAttribute = {1})"); CompiledName("createAttributeAux")>]
            member __.``createAttribute <-``(func : System.Func<string, FunScript.TypeScript.Attr>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createTextNode({1}))"); CompiledName("createTextNode")>]
            member __.createTextNode(data : string) : FunScript.TypeScript.Text = failwith "never"
            [<FunScript.JSEmitInline("({0}.createTextNode = {1})"); CompiledName("createTextNodeAux")>]
            member __.``createTextNode <-``(func : System.Func<string, FunScript.TypeScript.Text>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createNodeIterator({1}, {2}, {3}, {4}))"); CompiledName("createNodeIterator")>]
            member __.createNodeIterator(root : FunScript.TypeScript.Node, whatToShow : float, filter : FunScript.TypeScript.NodeFilter, entityReferenceExpansion : bool) : FunScript.TypeScript.NodeIterator = failwith "never"
            [<FunScript.JSEmitInline("({0}.createNodeIterator = {1})"); CompiledName("createNodeIteratorAux")>]
            member __.``createNodeIterator <-``(func : System.Func<FunScript.TypeScript.Node, float, FunScript.TypeScript.NodeFilter, bool, FunScript.TypeScript.NodeIterator>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEventObject({?1}))"); CompiledName("createEventObject")>]
            member __.createEventObject(?eventObj : obj) : FunScript.TypeScript.MSEventObj = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEventObject = {1})"); CompiledName("createEventObjectAux")>]
            member __.``createEventObject <-``(func : System.Func<obj, FunScript.TypeScript.MSEventObj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getSelection())"); CompiledName("getSelection1")>]
            member __.getSelection() : FunScript.TypeScript.Selection = failwith "never"
            [<FunScript.JSEmitInline("({0}.getSelection = {1})"); CompiledName("getSelection1Aux")>]
            member __.``getSelection <-``(func : System.Func<FunScript.TypeScript.Selection>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msElementsFromPoint({1}, {2}))"); CompiledName("msElementsFromPoint")>]
            member __.msElementsFromPoint(x : float, y : float) : FunScript.TypeScript.NodeList = failwith "never"
            [<FunScript.JSEmitInline("({0}.msElementsFromPoint = {1})"); CompiledName("msElementsFromPointAux")>]
            member __.``msElementsFromPoint <-``(func : System.Func<float, float, FunScript.TypeScript.NodeList>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msElementsFromRect({1}, {2}, {3}, {4}))"); CompiledName("msElementsFromRect")>]
            member __.msElementsFromRect(left : float, top : float, width : float, height : float) : FunScript.TypeScript.NodeList = failwith "never"
            [<FunScript.JSEmitInline("({0}.msElementsFromRect = {1})"); CompiledName("msElementsFromRectAux")>]
            member __.``msElementsFromRect <-``(func : System.Func<float, float, float, float, FunScript.TypeScript.NodeList>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clear())"); CompiledName("clear3")>]
            member __.clear() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clear = {1})"); CompiledName("clear3Aux")>]
            member __.``clear <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msExitFullscreen())"); CompiledName("msExitFullscreen")>]
            member __.msExitFullscreen() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msExitFullscreen = {1})"); CompiledName("msExitFullscreenAux")>]
            member __.``msExitFullscreen <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerenter\", {1}, {?2}))"); CompiledName("addEventListener115")>]
            member __.addEventListener_pointerenter(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerout\", {1}, {?2}))"); CompiledName("addEventListener116")>]
            member __.addEventListener_pointerout(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerdown\", {1}, {?2}))"); CompiledName("addEventListener117")>]
            member __.addEventListener_pointerdown(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerup\", {1}, {?2}))"); CompiledName("addEventListener118")>]
            member __.addEventListener_pointerup(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointercancel\", {1}, {?2}))"); CompiledName("addEventListener119")>]
            member __.addEventListener_pointercancel(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerover\", {1}, {?2}))"); CompiledName("addEventListener120")>]
            member __.addEventListener_pointerover(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointermove\", {1}, {?2}))"); CompiledName("addEventListener121")>]
            member __.addEventListener_pointermove(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerleave\", {1}, {?2}))"); CompiledName("addEventListener122")>]
            member __.addEventListener_pointerleave(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"keydown\", {1}, {?2}))"); CompiledName("addEventListener123")>]
            member __.addEventListener_keydown(listener : System.Func<FunScript.TypeScript.KeyboardEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"keyup\", {1}, {?2}))"); CompiledName("addEventListener124")>]
            member __.addEventListener_keyup(listener : System.Func<FunScript.TypeScript.KeyboardEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"reset\", {1}, {?2}))"); CompiledName("addEventListener125")>]
            member __.addEventListener_reset(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"help\", {1}, {?2}))"); CompiledName("addEventListener126")>]
            member __.addEventListener_help(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragleave\", {1}, {?2}))"); CompiledName("addEventListener127")>]
            member __.addEventListener_dragleave(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"focusin\", {1}, {?2}))"); CompiledName("addEventListener128")>]
            member __.addEventListener_focusin(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"seeked\", {1}, {?2}))"); CompiledName("addEventListener129")>]
            member __.addEventListener_seeked(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"durationchange\", {1}, {?2}))"); CompiledName("addEventListener130")>]
            member __.addEventListener_durationchange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"blur\", {1}, {?2}))"); CompiledName("addEventListener131")>]
            member __.addEventListener_blur(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"emptied\", {1}, {?2}))"); CompiledName("addEventListener132")>]
            member __.addEventListener_emptied(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"seeking\", {1}, {?2}))"); CompiledName("addEventListener133")>]
            member __.addEventListener_seeking(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"deactivate\", {1}, {?2}))"); CompiledName("addEventListener134")>]
            member __.addEventListener_deactivate(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"canplay\", {1}, {?2}))"); CompiledName("addEventListener135")>]
            member __.addEventListener_canplay(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"datasetchanged\", {1}, {?2}))"); CompiledName("addEventListener136")>]
            member __.addEventListener_datasetchanged(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"rowsdelete\", {1}, {?2}))"); CompiledName("addEventListener137")>]
            member __.addEventListener_rowsdelete(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"loadstart\", {1}, {?2}))"); CompiledName("addEventListener138")>]
            member __.addEventListener_loadstart(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"controlselect\", {1}, {?2}))"); CompiledName("addEventListener139")>]
            member __.addEventListener_controlselect(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragenter\", {1}, {?2}))"); CompiledName("addEventListener140")>]
            member __.addEventListener_dragenter(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"submit\", {1}, {?2}))"); CompiledName("addEventListener141")>]
            member __.addEventListener_submit(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"change\", {1}, {?2}))"); CompiledName("addEventListener142")>]
            member __.addEventListener_change(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforeactivate\", {1}, {?2}))"); CompiledName("addEventListener143")>]
            member __.addEventListener_beforeactivate(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"canplaythrough\", {1}, {?2}))"); CompiledName("addEventListener144")>]
            member __.addEventListener_canplaythrough(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforeupdate\", {1}, {?2}))"); CompiledName("addEventListener145")>]
            member __.addEventListener_beforeupdate(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"datasetcomplete\", {1}, {?2}))"); CompiledName("addEventListener146")>]
            member __.addEventListener_datasetcomplete(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"suspend\", {1}, {?2}))"); CompiledName("addEventListener147")>]
            member __.addEventListener_suspend(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"errorupdate\", {1}, {?2}))"); CompiledName("addEventListener148")>]
            member __.addEventListener_errorupdate(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseout\", {1}, {?2}))"); CompiledName("addEventListener149")>]
            member __.addEventListener_mouseout(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msthumbnailclick\", {1}, {?2}))"); CompiledName("addEventListener150")>]
            member __.addEventListener_msthumbnailclick(listener : System.Func<FunScript.TypeScript.MSSiteModeEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mousewheel\", {1}, {?2}))"); CompiledName("addEventListener151")>]
            member __.addEventListener_mousewheel(listener : System.Func<FunScript.TypeScript.MouseWheelEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"volumechange\", {1}, {?2}))"); CompiledName("addEventListener152")>]
            member __.addEventListener_volumechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"cellchange\", {1}, {?2}))"); CompiledName("addEventListener153")>]
            member __.addEventListener_cellchange(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"rowexit\", {1}, {?2}))"); CompiledName("addEventListener154")>]
            member __.addEventListener_rowexit(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"rowsinserted\", {1}, {?2}))"); CompiledName("addEventListener155")>]
            member __.addEventListener_rowsinserted(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"propertychange\", {1}, {?2}))"); CompiledName("addEventListener156")>]
            member __.addEventListener_propertychange(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragend\", {1}, {?2}))"); CompiledName("addEventListener157")>]
            member __.addEventListener_dragend(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragover\", {1}, {?2}))"); CompiledName("addEventListener158")>]
            member __.addEventListener_dragover(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragstart\", {1}, {?2}))"); CompiledName("addEventListener159")>]
            member __.addEventListener_dragstart(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseup\", {1}, {?2}))"); CompiledName("addEventListener160")>]
            member __.addEventListener_mouseup(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"drag\", {1}, {?2}))"); CompiledName("addEventListener161")>]
            member __.addEventListener_drag(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseover\", {1}, {?2}))"); CompiledName("addEventListener162")>]
            member __.addEventListener_mouseover(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pause\", {1}, {?2}))"); CompiledName("addEventListener163")>]
            member __.addEventListener_pause(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mousedown\", {1}, {?2}))"); CompiledName("addEventListener164")>]
            member __.addEventListener_mousedown(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"click\", {1}, {?2}))"); CompiledName("addEventListener165")>]
            member __.addEventListener_click(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"waiting\", {1}, {?2}))"); CompiledName("addEventListener166")>]
            member __.addEventListener_waiting(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"stop\", {1}, {?2}))"); CompiledName("addEventListener167")>]
            member __.addEventListener_stop(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mssitemodejumplistitemremoved\", {1}, {?2}))"); CompiledName("addEventListener168")>]
            member __.addEventListener_mssitemodejumplistitemremoved(listener : System.Func<FunScript.TypeScript.MSSiteModeEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"stalled\", {1}, {?2}))"); CompiledName("addEventListener169")>]
            member __.addEventListener_stalled(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mousemove\", {1}, {?2}))"); CompiledName("addEventListener170")>]
            member __.addEventListener_mousemove(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforeeditfocus\", {1}, {?2}))"); CompiledName("addEventListener171")>]
            member __.addEventListener_beforeeditfocus(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"ratechange\", {1}, {?2}))"); CompiledName("addEventListener172")>]
            member __.addEventListener_ratechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"progress\", {1}, {?2}))"); CompiledName("addEventListener173")>]
            member __.addEventListener_progress(listener : System.Func<FunScript.TypeScript.ProgressEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dblclick\", {1}, {?2}))"); CompiledName("addEventListener174")>]
            member __.addEventListener_dblclick(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"contextmenu\", {1}, {?2}))"); CompiledName("addEventListener175")>]
            member __.addEventListener_contextmenu(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"loadedmetadata\", {1}, {?2}))"); CompiledName("addEventListener176")>]
            member __.addEventListener_loadedmetadata(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"error\", {1}, {?2}))"); CompiledName("addEventListener177")>]
            member __.addEventListener_error(listener : System.Func<FunScript.TypeScript.ErrorEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"play\", {1}, {?2}))"); CompiledName("addEventListener178")>]
            member __.addEventListener_play(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"afterupdate\", {1}, {?2}))"); CompiledName("addEventListener179")>]
            member __.addEventListener_afterupdate(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"playing\", {1}, {?2}))"); CompiledName("addEventListener180")>]
            member __.addEventListener_playing(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"abort\", {1}, {?2}))"); CompiledName("addEventListener181")>]
            member __.addEventListener_abort(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"focusout\", {1}, {?2}))"); CompiledName("addEventListener182")>]
            member __.addEventListener_focusout(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"selectionchange\", {1}, {?2}))"); CompiledName("addEventListener183")>]
            member __.addEventListener_selectionchange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"storagecommit\", {1}, {?2}))"); CompiledName("addEventListener184")>]
            member __.addEventListener_storagecommit(listener : System.Func<FunScript.TypeScript.StorageEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dataavailable\", {1}, {?2}))"); CompiledName("addEventListener185")>]
            member __.addEventListener_dataavailable(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"readystatechange\", {1}, {?2}))"); CompiledName("addEventListener186")>]
            member __.addEventListener_readystatechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"keypress\", {1}, {?2}))"); CompiledName("addEventListener187")>]
            member __.addEventListener_keypress(listener : System.Func<FunScript.TypeScript.KeyboardEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"loadeddata\", {1}, {?2}))"); CompiledName("addEventListener188")>]
            member __.addEventListener_loadeddata(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforedeactivate\", {1}, {?2}))"); CompiledName("addEventListener189")>]
            member __.addEventListener_beforedeactivate(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"activate\", {1}, {?2}))"); CompiledName("addEventListener190")>]
            member __.addEventListener_activate(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"selectstart\", {1}, {?2}))"); CompiledName("addEventListener191")>]
            member __.addEventListener_selectstart(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"focus\", {1}, {?2}))"); CompiledName("addEventListener192")>]
            member __.addEventListener_focus(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"timeupdate\", {1}, {?2}))"); CompiledName("addEventListener193")>]
            member __.addEventListener_timeupdate(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"select\", {1}, {?2}))"); CompiledName("addEventListener194")>]
            member __.addEventListener_select(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"drop\", {1}, {?2}))"); CompiledName("addEventListener195")>]
            member __.addEventListener_drop(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"ended\", {1}, {?2}))"); CompiledName("addEventListener196")>]
            member __.addEventListener_ended(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"scroll\", {1}, {?2}))"); CompiledName("addEventListener197")>]
            member __.addEventListener_scroll(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"rowenter\", {1}, {?2}))"); CompiledName("addEventListener198")>]
            member __.addEventListener_rowenter(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"load\", {1}, {?2}))"); CompiledName("addEventListener199")>]
            member __.addEventListener_load(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"input\", {1}, {?2}))"); CompiledName("addEventListener200")>]
            member __.addEventListener_input(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerdown\", {1}, {?2}))"); CompiledName("addEventListener201")>]
            member __.addEventListener_mspointerdown(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturedoubletap\", {1}, {?2}))"); CompiledName("addEventListener202")>]
            member __.addEventListener_msgesturedoubletap(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msmanipulationstatechanged\", {1}, {?2}))"); CompiledName("addEventListener203")>]
            member __.addEventListener_msmanipulationstatechanged(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerhover\", {1}, {?2}))"); CompiledName("addEventListener204")>]
            member __.addEventListener_mspointerhover(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mscontentzoom\", {1}, {?2}))"); CompiledName("addEventListener205")>]
            member __.addEventListener_mscontentzoom(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointermove\", {1}, {?2}))"); CompiledName("addEventListener206")>]
            member __.addEventListener_mspointermove(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturehold\", {1}, {?2}))"); CompiledName("addEventListener207")>]
            member __.addEventListener_msgesturehold(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturechange\", {1}, {?2}))"); CompiledName("addEventListener208")>]
            member __.addEventListener_msgesturechange(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturestart\", {1}, {?2}))"); CompiledName("addEventListener209")>]
            member __.addEventListener_msgesturestart(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointercancel\", {1}, {?2}))"); CompiledName("addEventListener210")>]
            member __.addEventListener_mspointercancel(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgestureend\", {1}, {?2}))"); CompiledName("addEventListener211")>]
            member __.addEventListener_msgestureend(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturetap\", {1}, {?2}))"); CompiledName("addEventListener212")>]
            member __.addEventListener_msgesturetap(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerout\", {1}, {?2}))"); CompiledName("addEventListener213")>]
            member __.addEventListener_mspointerout(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msinertiastart\", {1}, {?2}))"); CompiledName("addEventListener214")>]
            member __.addEventListener_msinertiastart(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerover\", {1}, {?2}))"); CompiledName("addEventListener215")>]
            member __.addEventListener_mspointerover(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerup\", {1}, {?2}))"); CompiledName("addEventListener216")>]
            member __.addEventListener_mspointerup(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msfullscreenerror\", {1}, {?2}))"); CompiledName("addEventListener217")>]
            member __.addEventListener_msfullscreenerror(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerenter\", {1}, {?2}))"); CompiledName("addEventListener218")>]
            member __.addEventListener_mspointerenter(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msfullscreenchange\", {1}, {?2}))"); CompiledName("addEventListener219")>]
            member __.addEventListener_msfullscreenchange(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerleave\", {1}, {?2}))"); CompiledName("addEventListener220")>]
            member __.addEventListener_mspointerleave(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener({1}, {2}, {?3}))"); CompiledName("addEventListener221")>]
            member __.addEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener = {1})"); CompiledName("addEventListener221Aux")>]
            member __.``addEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_514 =


    type FunScript.TypeScript.DocumentEvent with 

            [<FunScript.JSEmitInline("({0}.createEvent(\"AnimationEvent\"))"); CompiledName("createEvent")>]
            member __.createEvent_AnimationEvent() : FunScript.TypeScript.AnimationEvent = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEvent(\"CloseEvent\"))"); CompiledName("createEvent1")>]
            member __.createEvent_CloseEvent() : FunScript.TypeScript.CloseEvent = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEvent(\"CompositionEvent\"))"); CompiledName("createEvent2")>]
            member __.createEvent_CompositionEvent() : FunScript.TypeScript.CompositionEvent = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEvent(\"CustomEvent\"))"); CompiledName("createEvent3")>]
            member __.createEvent_CustomEvent() : FunScript.TypeScript.CustomEvent = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEvent(\"DeviceMotionEvent\"))"); CompiledName("createEvent4")>]
            member __.createEvent_DeviceMotionEvent() : FunScript.TypeScript.DeviceMotionEvent = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEvent(\"DeviceOrientationEvent\"))"); CompiledName("createEvent5")>]
            member __.createEvent_DeviceOrientationEvent() : FunScript.TypeScript.DeviceOrientationEvent = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEvent(\"DragEvent\"))"); CompiledName("createEvent6")>]
            member __.createEvent_DragEvent() : FunScript.TypeScript.DragEvent = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEvent(\"ErrorEvent\"))"); CompiledName("createEvent7")>]
            member __.createEvent_ErrorEvent() : FunScript.TypeScript.ErrorEvent = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEvent(\"Event\"))"); CompiledName("createEvent8")>]
            member __.createEvent_Event() : FunScript.TypeScript.Event = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEvent(\"Events\"))"); CompiledName("createEvent9")>]
            member __.createEvent_Events() : FunScript.TypeScript.Event = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEvent(\"FocusEvent\"))"); CompiledName("createEvent10")>]
            member __.createEvent_FocusEvent() : FunScript.TypeScript.FocusEvent = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEvent(\"HTMLEvents\"))"); CompiledName("createEvent11")>]
            member __.createEvent_HTMLEvents() : FunScript.TypeScript.Event = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEvent(\"IDBVersionChangeEvent\"))"); CompiledName("createEvent12")>]
            member __.createEvent_IDBVersionChangeEvent() : FunScript.TypeScript.IDBVersionChangeEvent = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEvent(\"KeyboardEvent\"))"); CompiledName("createEvent13")>]
            member __.createEvent_KeyboardEvent() : FunScript.TypeScript.KeyboardEvent = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEvent(\"LongRunningScriptDetectedEvent\"))"); CompiledName("createEvent14")>]
            member __.createEvent_LongRunningScriptDetectedEvent() : FunScript.TypeScript.LongRunningScriptDetectedEvent = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEvent(\"MessageEvent\"))"); CompiledName("createEvent15")>]
            member __.createEvent_MessageEvent() : FunScript.TypeScript.MessageEvent = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEvent(\"MouseEvent\"))"); CompiledName("createEvent16")>]
            member __.createEvent_MouseEvent() : FunScript.TypeScript.MouseEvent = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEvent(\"MouseEvents\"))"); CompiledName("createEvent17")>]
            member __.createEvent_MouseEvents() : FunScript.TypeScript.MouseEvent = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEvent(\"MouseWheelEvent\"))"); CompiledName("createEvent18")>]
            member __.createEvent_MouseWheelEvent() : FunScript.TypeScript.MouseWheelEvent = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEvent(\"MSGestureEvent\"))"); CompiledName("createEvent19")>]
            member __.createEvent_MSGestureEvent() : FunScript.TypeScript.MSGestureEvent = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEvent(\"MSPointerEvent\"))"); CompiledName("createEvent20")>]
            member __.createEvent_MSPointerEvent() : FunScript.TypeScript.MSPointerEvent = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEvent(\"MutationEvent\"))"); CompiledName("createEvent21")>]
            member __.createEvent_MutationEvent() : FunScript.TypeScript.MutationEvent = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEvent(\"MutationEvents\"))"); CompiledName("createEvent22")>]
            member __.createEvent_MutationEvents() : FunScript.TypeScript.MutationEvent = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEvent(\"NavigationCompletedEvent\"))"); CompiledName("createEvent23")>]
            member __.createEvent_NavigationCompletedEvent() : FunScript.TypeScript.NavigationCompletedEvent = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEvent(\"NavigationEvent\"))"); CompiledName("createEvent24")>]
            member __.createEvent_NavigationEvent() : FunScript.TypeScript.NavigationEvent = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEvent(\"PageTransitionEvent\"))"); CompiledName("createEvent25")>]
            member __.createEvent_PageTransitionEvent() : FunScript.TypeScript.PageTransitionEvent = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEvent(\"PointerEvent\"))"); CompiledName("createEvent26")>]
            member __.createEvent_PointerEvent() : FunScript.TypeScript.MSPointerEvent = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEvent(\"PopStateEvent\"))"); CompiledName("createEvent27")>]
            member __.createEvent_PopStateEvent() : FunScript.TypeScript.PopStateEvent = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEvent(\"ProgressEvent\"))"); CompiledName("createEvent28")>]
            member __.createEvent_ProgressEvent() : FunScript.TypeScript.ProgressEvent = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEvent(\"StorageEvent\"))"); CompiledName("createEvent29")>]
            member __.createEvent_StorageEvent() : FunScript.TypeScript.StorageEvent = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEvent(\"SVGZoomEvents\"))"); CompiledName("createEvent30")>]
            member __.createEvent_SVGZoomEvents() : FunScript.TypeScript.SVGZoomEvent = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEvent(\"TextEvent\"))"); CompiledName("createEvent31")>]
            member __.createEvent_TextEvent() : FunScript.TypeScript.TextEvent = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEvent(\"TrackEvent\"))"); CompiledName("createEvent32")>]
            member __.createEvent_TrackEvent() : FunScript.TypeScript.TrackEvent = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEvent(\"TransitionEvent\"))"); CompiledName("createEvent33")>]
            member __.createEvent_TransitionEvent() : FunScript.TypeScript.TransitionEvent = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEvent(\"UIEvent\"))"); CompiledName("createEvent34")>]
            member __.createEvent_UIEvent() : FunScript.TypeScript.UIEvent = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEvent(\"UIEvents\"))"); CompiledName("createEvent35")>]
            member __.createEvent_UIEvents() : FunScript.TypeScript.UIEvent = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEvent(\"UnviewableContentIdentifiedEvent\"))"); CompiledName("createEvent36")>]
            member __.createEvent_UnviewableContentIdentifiedEvent() : FunScript.TypeScript.UnviewableContentIdentifiedEvent = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEvent(\"WebGLContextEvent\"))"); CompiledName("createEvent37")>]
            member __.createEvent_WebGLContextEvent() : FunScript.TypeScript.WebGLContextEvent = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEvent(\"WheelEvent\"))"); CompiledName("createEvent38")>]
            member __.createEvent_WheelEvent() : FunScript.TypeScript.WheelEvent = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEvent({1}))"); CompiledName("createEvent39")>]
            member __.createEvent(eventInterface : string) : FunScript.TypeScript.Event = failwith "never"
            [<FunScript.JSEmitInline("({0}.createEvent = {1})"); CompiledName("createEvent39Aux")>]
            member __.``createEvent <-``(func : System.Func<string, FunScript.TypeScript.Event>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_515 =


    type FunScript.TypeScript.DocumentType with 

            [<FunScript.JSEmitInline("({0}.name)"); CompiledName("name6")>]
            member __.name with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.notations)"); CompiledName("notations")>]
            member __.notations with get() : FunScript.TypeScript.NamedNodeMap = failwith "never" and set (v : FunScript.TypeScript.NamedNodeMap) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.systemId)"); CompiledName("systemId")>]
            member __.systemId with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.internalSubset)"); CompiledName("internalSubset")>]
            member __.internalSubset with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.entities)"); CompiledName("entities")>]
            member __.entities with get() : FunScript.TypeScript.NamedNodeMap = failwith "never" and set (v : FunScript.TypeScript.NamedNodeMap) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.publicId)"); CompiledName("publicId")>]
            member __.publicId with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_516 =


    type FunScript.TypeScript.DragEvent with 

            [<FunScript.JSEmitInline("({0}.dataTransfer)"); CompiledName("dataTransfer")>]
            member __.dataTransfer with get() : FunScript.TypeScript.DataTransfer = failwith "never" and set (v : FunScript.TypeScript.DataTransfer) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initDragEvent({1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16}))"); CompiledName("initDragEvent")>]
            member __.initDragEvent(typeArg : string, canBubbleArg : bool, cancelableArg : bool, viewArg : FunScript.TypeScript.Window, detailArg : float, screenXArg : float, screenYArg : float, clientXArg : float, clientYArg : float, ctrlKeyArg : bool, altKeyArg : bool, shiftKeyArg : bool, metaKeyArg : bool, buttonArg : float, relatedTargetArg : FunScript.TypeScript.EventTarget, dataTransferArg : FunScript.TypeScript.DataTransfer) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msConvertURL({1}, {2}, {?3}))"); CompiledName("msConvertURL")>]
            member __.msConvertURL(file : FunScript.TypeScript.File, targetType : string, ?targetURL : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msConvertURL = {1})"); CompiledName("msConvertURLAux")>]
            member __.``msConvertURL <-``(func : System.Func<FunScript.TypeScript.File, string, string, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_517 =


    type FunScript.TypeScript.EXT_texture_filter_anisotropic with 

            [<FunScript.JSEmitInline("({0}.TEXTURE_MAX_ANISOTROPY_EXT)"); CompiledName("TEXTURE_MAX_ANISOTROPY_EXT1")>]
            member __.TEXTURE_MAX_ANISOTROPY_EXT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MAX_TEXTURE_MAX_ANISOTROPY_EXT)"); CompiledName("MAX_TEXTURE_MAX_ANISOTROPY_EXT1")>]
            member __.MAX_TEXTURE_MAX_ANISOTROPY_EXT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_518 =


    type FunScript.TypeScript.Element with 

            [<FunScript.JSEmitInline("({0}.scrollTop)"); CompiledName("scrollTop")>]
            member __.scrollTop with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clientLeft)"); CompiledName("clientLeft")>]
            member __.clientLeft with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.scrollLeft)"); CompiledName("scrollLeft")>]
            member __.scrollLeft with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.tagName)"); CompiledName("tagName")>]
            member __.tagName with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clientWidth)"); CompiledName("clientWidth")>]
            member __.clientWidth with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.scrollWidth)"); CompiledName("scrollWidth")>]
            member __.scrollWidth with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clientHeight)"); CompiledName("clientHeight")>]
            member __.clientHeight with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clientTop)"); CompiledName("clientTop")>]
            member __.clientTop with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.scrollHeight)"); CompiledName("scrollHeight")>]
            member __.scrollHeight with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msRegionOverflow)"); CompiledName("msRegionOverflow")>]
            member __.msRegionOverflow with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmspointerdown)"); CompiledName("onmspointerdown2")>]
            member __.onmspointerdown with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmsgotpointercapture)"); CompiledName("onmsgotpointercapture")>]
            member __.onmsgotpointercapture with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmsgesturedoubletap)"); CompiledName("onmsgesturedoubletap2")>]
            member __.onmsgesturedoubletap with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmspointerhover)"); CompiledName("onmspointerhover2")>]
            member __.onmspointerhover with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmsgesturehold)"); CompiledName("onmsgesturehold2")>]
            member __.onmsgesturehold with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmspointermove)"); CompiledName("onmspointermove2")>]
            member __.onmspointermove with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmsgesturechange)"); CompiledName("onmsgesturechange2")>]
            member __.onmsgesturechange with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmsgesturestart)"); CompiledName("onmsgesturestart2")>]
            member __.onmsgesturestart with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmspointercancel)"); CompiledName("onmspointercancel2")>]
            member __.onmspointercancel with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmsgestureend)"); CompiledName("onmsgestureend2")>]
            member __.onmsgestureend with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmsgesturetap)"); CompiledName("onmsgesturetap2")>]
            member __.onmsgesturetap with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmspointerout)"); CompiledName("onmspointerout2")>]
            member __.onmspointerout with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmsinertiastart)"); CompiledName("onmsinertiastart2")>]
            member __.onmsinertiastart with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmslostpointercapture)"); CompiledName("onmslostpointercapture")>]
            member __.onmslostpointercapture with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmspointerover)"); CompiledName("onmspointerover2")>]
            member __.onmspointerover with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msContentZoomFactor)"); CompiledName("msContentZoomFactor")>]
            member __.msContentZoomFactor with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmspointerup)"); CompiledName("onmspointerup2")>]
            member __.onmspointerup with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onlostpointercapture)"); CompiledName("onlostpointercapture")>]
            member __.onlostpointercapture with get() : System.Func<FunScript.TypeScript.PointerEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.PointerEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmspointerenter)"); CompiledName("onmspointerenter2")>]
            member __.onmspointerenter with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ongotpointercapture)"); CompiledName("ongotpointercapture")>]
            member __.ongotpointercapture with get() : System.Func<FunScript.TypeScript.PointerEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.PointerEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmspointerleave)"); CompiledName("onmspointerleave2")>]
            member __.onmspointerleave with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getAttribute({?1}))"); CompiledName("getAttribute")>]
            member __.getAttribute(?name : string) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.getAttribute = {1})"); CompiledName("getAttributeAux")>]
            member __.``getAttribute <-``(func : System.Func<string, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagNameNS({1}, {2}))"); CompiledName("getElementsByTagNameNS1")>]
            member __.getElementsByTagNameNS(namespaceURI : string, localName : string) : FunScript.TypeScript.NodeList = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagNameNS = {1})"); CompiledName("getElementsByTagNameNS1Aux")>]
            member __.``getElementsByTagNameNS <-``(func : System.Func<string, string, FunScript.TypeScript.NodeList>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.hasAttributeNS({1}, {2}))"); CompiledName("hasAttributeNS")>]
            member __.hasAttributeNS(namespaceURI : string, localName : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.hasAttributeNS = {1})"); CompiledName("hasAttributeNSAux")>]
            member __.``hasAttributeNS <-``(func : System.Func<string, string, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getBoundingClientRect())"); CompiledName("getBoundingClientRect")>]
            member __.getBoundingClientRect() : FunScript.TypeScript.ClientRect = failwith "never"
            [<FunScript.JSEmitInline("({0}.getBoundingClientRect = {1})"); CompiledName("getBoundingClientRectAux")>]
            member __.``getBoundingClientRect <-``(func : System.Func<FunScript.TypeScript.ClientRect>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getAttributeNS({1}, {2}))"); CompiledName("getAttributeNS")>]
            member __.getAttributeNS(namespaceURI : string, localName : string) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.getAttributeNS = {1})"); CompiledName("getAttributeNSAux")>]
            member __.``getAttributeNS <-``(func : System.Func<string, string, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getAttributeNodeNS({1}, {2}))"); CompiledName("getAttributeNodeNS")>]
            member __.getAttributeNodeNS(namespaceURI : string, localName : string) : FunScript.TypeScript.Attr = failwith "never"
            [<FunScript.JSEmitInline("({0}.getAttributeNodeNS = {1})"); CompiledName("getAttributeNodeNSAux")>]
            member __.``getAttributeNodeNS <-``(func : System.Func<string, string, FunScript.TypeScript.Attr>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setAttributeNodeNS({1}))"); CompiledName("setAttributeNodeNS")>]
            member __.setAttributeNodeNS(newAttr : FunScript.TypeScript.Attr) : FunScript.TypeScript.Attr = failwith "never"
            [<FunScript.JSEmitInline("({0}.setAttributeNodeNS = {1})"); CompiledName("setAttributeNodeNSAux")>]
            member __.``setAttributeNodeNS <-``(func : System.Func<FunScript.TypeScript.Attr, FunScript.TypeScript.Attr>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msMatchesSelector({1}))"); CompiledName("msMatchesSelector")>]
            member __.msMatchesSelector(selectors : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.msMatchesSelector = {1})"); CompiledName("msMatchesSelectorAux")>]
            member __.``msMatchesSelector <-``(func : System.Func<string, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.hasAttribute({1}))"); CompiledName("hasAttribute")>]
            member __.hasAttribute(name : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.hasAttribute = {1})"); CompiledName("hasAttributeAux")>]
            member __.``hasAttribute <-``(func : System.Func<string, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeAttribute({?1}))"); CompiledName("removeAttribute")>]
            member __.removeAttribute(?name : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeAttribute = {1})"); CompiledName("removeAttributeAux")>]
            member __.``removeAttribute <-``(func : System.Func<string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setAttributeNS({1}, {2}, {3}))"); CompiledName("setAttributeNS")>]
            member __.setAttributeNS(namespaceURI : string, qualifiedName : string, value : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setAttributeNS = {1})"); CompiledName("setAttributeNSAux")>]
            member __.``setAttributeNS <-``(func : System.Func<string, string, string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getAttributeNode({1}))"); CompiledName("getAttributeNode")>]
            member __.getAttributeNode(name : string) : FunScript.TypeScript.Attr = failwith "never"
            [<FunScript.JSEmitInline("({0}.getAttributeNode = {1})"); CompiledName("getAttributeNodeAux")>]
            member __.``getAttributeNode <-``(func : System.Func<string, FunScript.TypeScript.Attr>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.fireEvent({1}, {?2}))"); CompiledName("fireEvent1")>]
            member __.fireEvent(eventName : string, ?eventObj : obj) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.fireEvent = {1})"); CompiledName("fireEvent1Aux")>]
            member __.``fireEvent <-``(func : System.Func<string, obj, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"a\"))"); CompiledName("getElementsByTagName122")>]
            member __.getElementsByTagName_a() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLAnchorElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"abbr\"))"); CompiledName("getElementsByTagName123")>]
            member __.getElementsByTagName_abbr() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"acronym\"))"); CompiledName("getElementsByTagName124")>]
            member __.getElementsByTagName_acronym() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"address\"))"); CompiledName("getElementsByTagName125")>]
            member __.getElementsByTagName_address() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLBlockElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"applet\"))"); CompiledName("getElementsByTagName126")>]
            member __.getElementsByTagName_applet() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLAppletElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"area\"))"); CompiledName("getElementsByTagName127")>]
            member __.getElementsByTagName_area() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLAreaElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"article\"))"); CompiledName("getElementsByTagName128")>]
            member __.getElementsByTagName_article() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"aside\"))"); CompiledName("getElementsByTagName129")>]
            member __.getElementsByTagName_aside() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"audio\"))"); CompiledName("getElementsByTagName130")>]
            member __.getElementsByTagName_audio() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLAudioElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"b\"))"); CompiledName("getElementsByTagName131")>]
            member __.getElementsByTagName_b() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"base\"))"); CompiledName("getElementsByTagName132")>]
            member __.getElementsByTagName_base() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLBaseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"basefont\"))"); CompiledName("getElementsByTagName133")>]
            member __.getElementsByTagName_basefont() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLBaseFontElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"bdo\"))"); CompiledName("getElementsByTagName134")>]
            member __.getElementsByTagName_bdo() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"bgsound\"))"); CompiledName("getElementsByTagName135")>]
            member __.getElementsByTagName_bgsound() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLBGSoundElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"big\"))"); CompiledName("getElementsByTagName136")>]
            member __.getElementsByTagName_big() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"blockquote\"))"); CompiledName("getElementsByTagName137")>]
            member __.getElementsByTagName_blockquote() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLBlockElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"body\"))"); CompiledName("getElementsByTagName138")>]
            member __.getElementsByTagName_body() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLBodyElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"br\"))"); CompiledName("getElementsByTagName139")>]
            member __.getElementsByTagName_br() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLBRElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"button\"))"); CompiledName("getElementsByTagName140")>]
            member __.getElementsByTagName_button() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLButtonElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"canvas\"))"); CompiledName("getElementsByTagName141")>]
            member __.getElementsByTagName_canvas() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLCanvasElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"caption\"))"); CompiledName("getElementsByTagName142")>]
            member __.getElementsByTagName_caption() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLTableCaptionElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"center\"))"); CompiledName("getElementsByTagName143")>]
            member __.getElementsByTagName_center() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLBlockElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"cite\"))"); CompiledName("getElementsByTagName144")>]
            member __.getElementsByTagName_cite() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"code\"))"); CompiledName("getElementsByTagName145")>]
            member __.getElementsByTagName_code() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"col\"))"); CompiledName("getElementsByTagName146")>]
            member __.getElementsByTagName_col() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLTableColElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"colgroup\"))"); CompiledName("getElementsByTagName147")>]
            member __.getElementsByTagName_colgroup() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLTableColElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"datalist\"))"); CompiledName("getElementsByTagName148")>]
            member __.getElementsByTagName_datalist() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLDataListElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"dd\"))"); CompiledName("getElementsByTagName149")>]
            member __.getElementsByTagName_dd() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLDDElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"del\"))"); CompiledName("getElementsByTagName150")>]
            member __.getElementsByTagName_del() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLModElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"dfn\"))"); CompiledName("getElementsByTagName151")>]
            member __.getElementsByTagName_dfn() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"dir\"))"); CompiledName("getElementsByTagName152")>]
            member __.getElementsByTagName_dir() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLDirectoryElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"div\"))"); CompiledName("getElementsByTagName153")>]
            member __.getElementsByTagName_div() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLDivElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"dl\"))"); CompiledName("getElementsByTagName154")>]
            member __.getElementsByTagName_dl() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLDListElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"dt\"))"); CompiledName("getElementsByTagName155")>]
            member __.getElementsByTagName_dt() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLDTElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"em\"))"); CompiledName("getElementsByTagName156")>]
            member __.getElementsByTagName_em() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"embed\"))"); CompiledName("getElementsByTagName157")>]
            member __.getElementsByTagName_embed() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLEmbedElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"fieldset\"))"); CompiledName("getElementsByTagName158")>]
            member __.getElementsByTagName_fieldset() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLFieldSetElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"figcaption\"))"); CompiledName("getElementsByTagName159")>]
            member __.getElementsByTagName_figcaption() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"figure\"))"); CompiledName("getElementsByTagName160")>]
            member __.getElementsByTagName_figure() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"font\"))"); CompiledName("getElementsByTagName161")>]
            member __.getElementsByTagName_font() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLFontElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"footer\"))"); CompiledName("getElementsByTagName162")>]
            member __.getElementsByTagName_footer() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"form\"))"); CompiledName("getElementsByTagName163")>]
            member __.getElementsByTagName_form() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLFormElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"frame\"))"); CompiledName("getElementsByTagName164")>]
            member __.getElementsByTagName_frame() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLFrameElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"frameset\"))"); CompiledName("getElementsByTagName165")>]
            member __.getElementsByTagName_frameset() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLFrameSetElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"h1\"))"); CompiledName("getElementsByTagName166")>]
            member __.getElementsByTagName_h1() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLHeadingElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"h2\"))"); CompiledName("getElementsByTagName167")>]
            member __.getElementsByTagName_h2() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLHeadingElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"h3\"))"); CompiledName("getElementsByTagName168")>]
            member __.getElementsByTagName_h3() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLHeadingElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"h4\"))"); CompiledName("getElementsByTagName169")>]
            member __.getElementsByTagName_h4() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLHeadingElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"h5\"))"); CompiledName("getElementsByTagName170")>]
            member __.getElementsByTagName_h5() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLHeadingElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"h6\"))"); CompiledName("getElementsByTagName171")>]
            member __.getElementsByTagName_h6() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLHeadingElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"head\"))"); CompiledName("getElementsByTagName172")>]
            member __.getElementsByTagName_head() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLHeadElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"header\"))"); CompiledName("getElementsByTagName173")>]
            member __.getElementsByTagName_header() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"hgroup\"))"); CompiledName("getElementsByTagName174")>]
            member __.getElementsByTagName_hgroup() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"hr\"))"); CompiledName("getElementsByTagName175")>]
            member __.getElementsByTagName_hr() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLHRElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"html\"))"); CompiledName("getElementsByTagName176")>]
            member __.getElementsByTagName_html() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLHtmlElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"i\"))"); CompiledName("getElementsByTagName177")>]
            member __.getElementsByTagName_i() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"iframe\"))"); CompiledName("getElementsByTagName178")>]
            member __.getElementsByTagName_iframe() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLIFrameElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"img\"))"); CompiledName("getElementsByTagName179")>]
            member __.getElementsByTagName_img() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLImageElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"input\"))"); CompiledName("getElementsByTagName180")>]
            member __.getElementsByTagName_input() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLInputElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"ins\"))"); CompiledName("getElementsByTagName181")>]
            member __.getElementsByTagName_ins() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLModElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"isindex\"))"); CompiledName("getElementsByTagName182")>]
            member __.getElementsByTagName_isindex() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLIsIndexElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"kbd\"))"); CompiledName("getElementsByTagName183")>]
            member __.getElementsByTagName_kbd() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"keygen\"))"); CompiledName("getElementsByTagName184")>]
            member __.getElementsByTagName_keygen() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLBlockElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"label\"))"); CompiledName("getElementsByTagName185")>]
            member __.getElementsByTagName_label() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLLabelElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"legend\"))"); CompiledName("getElementsByTagName186")>]
            member __.getElementsByTagName_legend() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLLegendElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"li\"))"); CompiledName("getElementsByTagName187")>]
            member __.getElementsByTagName_li() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLLIElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"link\"))"); CompiledName("getElementsByTagName188")>]
            member __.getElementsByTagName_link() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLLinkElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"listing\"))"); CompiledName("getElementsByTagName189")>]
            member __.getElementsByTagName_listing() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLBlockElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"map\"))"); CompiledName("getElementsByTagName190")>]
            member __.getElementsByTagName_map() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLMapElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"mark\"))"); CompiledName("getElementsByTagName191")>]
            member __.getElementsByTagName_mark() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"marquee\"))"); CompiledName("getElementsByTagName192")>]
            member __.getElementsByTagName_marquee() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLMarqueeElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"menu\"))"); CompiledName("getElementsByTagName193")>]
            member __.getElementsByTagName_menu() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLMenuElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"meta\"))"); CompiledName("getElementsByTagName194")>]
            member __.getElementsByTagName_meta() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLMetaElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"nav\"))"); CompiledName("getElementsByTagName195")>]
            member __.getElementsByTagName_nav() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"nextid\"))"); CompiledName("getElementsByTagName196")>]
            member __.getElementsByTagName_nextid() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLNextIdElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"nobr\"))"); CompiledName("getElementsByTagName197")>]
            member __.getElementsByTagName_nobr() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"noframes\"))"); CompiledName("getElementsByTagName198")>]
            member __.getElementsByTagName_noframes() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"noscript\"))"); CompiledName("getElementsByTagName199")>]
            member __.getElementsByTagName_noscript() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"object\"))"); CompiledName("getElementsByTagName200")>]
            member __.getElementsByTagName_object() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLObjectElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"ol\"))"); CompiledName("getElementsByTagName201")>]
            member __.getElementsByTagName_ol() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLOListElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"optgroup\"))"); CompiledName("getElementsByTagName202")>]
            member __.getElementsByTagName_optgroup() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLOptGroupElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"option\"))"); CompiledName("getElementsByTagName203")>]
            member __.getElementsByTagName_option() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLOptionElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"p\"))"); CompiledName("getElementsByTagName204")>]
            member __.getElementsByTagName_p() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLParagraphElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"param\"))"); CompiledName("getElementsByTagName205")>]
            member __.getElementsByTagName_param() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLParamElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"plaintext\"))"); CompiledName("getElementsByTagName206")>]
            member __.getElementsByTagName_plaintext() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLBlockElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"pre\"))"); CompiledName("getElementsByTagName207")>]
            member __.getElementsByTagName_pre() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPreElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"progress\"))"); CompiledName("getElementsByTagName208")>]
            member __.getElementsByTagName_progress() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLProgressElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"q\"))"); CompiledName("getElementsByTagName209")>]
            member __.getElementsByTagName_q() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLQuoteElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"rt\"))"); CompiledName("getElementsByTagName210")>]
            member __.getElementsByTagName_rt() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"ruby\"))"); CompiledName("getElementsByTagName211")>]
            member __.getElementsByTagName_ruby() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"s\"))"); CompiledName("getElementsByTagName212")>]
            member __.getElementsByTagName_s() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"samp\"))"); CompiledName("getElementsByTagName213")>]
            member __.getElementsByTagName_samp() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"script\"))"); CompiledName("getElementsByTagName214")>]
            member __.getElementsByTagName_script() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLScriptElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"section\"))"); CompiledName("getElementsByTagName215")>]
            member __.getElementsByTagName_section() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"select\"))"); CompiledName("getElementsByTagName216")>]
            member __.getElementsByTagName_select() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLSelectElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"small\"))"); CompiledName("getElementsByTagName217")>]
            member __.getElementsByTagName_small() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"SOURCE\"))"); CompiledName("getElementsByTagName218")>]
            member __.getElementsByTagName_SOURCE() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLSourceElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"span\"))"); CompiledName("getElementsByTagName219")>]
            member __.getElementsByTagName_span() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLSpanElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"strike\"))"); CompiledName("getElementsByTagName220")>]
            member __.getElementsByTagName_strike() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"strong\"))"); CompiledName("getElementsByTagName221")>]
            member __.getElementsByTagName_strong() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"style\"))"); CompiledName("getElementsByTagName222")>]
            member __.getElementsByTagName_style() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLStyleElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"sub\"))"); CompiledName("getElementsByTagName223")>]
            member __.getElementsByTagName_sub() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"sup\"))"); CompiledName("getElementsByTagName224")>]
            member __.getElementsByTagName_sup() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"table\"))"); CompiledName("getElementsByTagName225")>]
            member __.getElementsByTagName_table() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLTableElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"tbody\"))"); CompiledName("getElementsByTagName226")>]
            member __.getElementsByTagName_tbody() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLTableSectionElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"td\"))"); CompiledName("getElementsByTagName227")>]
            member __.getElementsByTagName_td() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLTableDataCellElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"textarea\"))"); CompiledName("getElementsByTagName228")>]
            member __.getElementsByTagName_textarea() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLTextAreaElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"tfoot\"))"); CompiledName("getElementsByTagName229")>]
            member __.getElementsByTagName_tfoot() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLTableSectionElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"th\"))"); CompiledName("getElementsByTagName230")>]
            member __.getElementsByTagName_th() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLTableHeaderCellElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"thead\"))"); CompiledName("getElementsByTagName231")>]
            member __.getElementsByTagName_thead() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLTableSectionElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"title\"))"); CompiledName("getElementsByTagName232")>]
            member __.getElementsByTagName_title() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLTitleElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"tr\"))"); CompiledName("getElementsByTagName233")>]
            member __.getElementsByTagName_tr() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLTableRowElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"track\"))"); CompiledName("getElementsByTagName234")>]
            member __.getElementsByTagName_track() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLTrackElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"tt\"))"); CompiledName("getElementsByTagName235")>]
            member __.getElementsByTagName_tt() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"u\"))"); CompiledName("getElementsByTagName236")>]
            member __.getElementsByTagName_u() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"ul\"))"); CompiledName("getElementsByTagName237")>]
            member __.getElementsByTagName_ul() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLUListElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"var\"))"); CompiledName("getElementsByTagName238")>]
            member __.getElementsByTagName_var() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLPhraseElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"video\"))"); CompiledName("getElementsByTagName239")>]
            member __.getElementsByTagName_video() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLVideoElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"wbr\"))"); CompiledName("getElementsByTagName240")>]
            member __.getElementsByTagName_wbr() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"x-ms-webview\"))"); CompiledName("getElementsByTagName241")>]
            member __.getElementsByTagName_x_ms_webview() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.MSHTMLWebViewElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName(\"xmp\"))"); CompiledName("getElementsByTagName242")>]
            member __.getElementsByTagName_xmp() : FunScript.TypeScript.NodeListOf<FunScript.TypeScript.HTMLBlockElement> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName({1}))"); CompiledName("getElementsByTagName243")>]
            member __.getElementsByTagName(name : string) : FunScript.TypeScript.NodeList = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByTagName = {1})"); CompiledName("getElementsByTagName243Aux")>]
            member __.``getElementsByTagName <-``(func : System.Func<string, FunScript.TypeScript.NodeList>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getClientRects())"); CompiledName("getClientRects")>]
            member __.getClientRects() : FunScript.TypeScript.ClientRectList = failwith "never"
            [<FunScript.JSEmitInline("({0}.getClientRects = {1})"); CompiledName("getClientRectsAux")>]
            member __.``getClientRects <-``(func : System.Func<FunScript.TypeScript.ClientRectList>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setAttributeNode({1}))"); CompiledName("setAttributeNode")>]
            member __.setAttributeNode(newAttr : FunScript.TypeScript.Attr) : FunScript.TypeScript.Attr = failwith "never"
            [<FunScript.JSEmitInline("({0}.setAttributeNode = {1})"); CompiledName("setAttributeNodeAux")>]
            member __.``setAttributeNode <-``(func : System.Func<FunScript.TypeScript.Attr, FunScript.TypeScript.Attr>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeAttributeNode({1}))"); CompiledName("removeAttributeNode")>]
            member __.removeAttributeNode(oldAttr : FunScript.TypeScript.Attr) : FunScript.TypeScript.Attr = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeAttributeNode = {1})"); CompiledName("removeAttributeNodeAux")>]
            member __.``removeAttributeNode <-``(func : System.Func<FunScript.TypeScript.Attr, FunScript.TypeScript.Attr>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setAttribute({?1}, {?2}))"); CompiledName("setAttribute")>]
            member __.setAttribute(?name : string, ?value : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setAttribute = {1})"); CompiledName("setAttributeAux")>]
            member __.``setAttribute <-``(func : System.Func<string, string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeAttributeNS({1}, {2}))"); CompiledName("removeAttributeNS")>]
            member __.removeAttributeNS(namespaceURI : string, localName : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeAttributeNS = {1})"); CompiledName("removeAttributeNSAux")>]
            member __.``removeAttributeNS <-``(func : System.Func<string, string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msGetRegionContent())"); CompiledName("msGetRegionContent")>]
            member __.msGetRegionContent() : FunScript.TypeScript.MSRangeCollection = failwith "never"
            [<FunScript.JSEmitInline("({0}.msGetRegionContent = {1})"); CompiledName("msGetRegionContentAux")>]
            member __.``msGetRegionContent <-``(func : System.Func<FunScript.TypeScript.MSRangeCollection>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msReleasePointerCapture({1}))"); CompiledName("msReleasePointerCapture")>]
            member __.msReleasePointerCapture(pointerId : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msReleasePointerCapture = {1})"); CompiledName("msReleasePointerCaptureAux")>]
            member __.``msReleasePointerCapture <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msSetPointerCapture({1}))"); CompiledName("msSetPointerCapture")>]
            member __.msSetPointerCapture(pointerId : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msSetPointerCapture = {1})"); CompiledName("msSetPointerCaptureAux")>]
            member __.``msSetPointerCapture <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msZoomTo({1}))"); CompiledName("msZoomTo")>]
            member __.msZoomTo(args : FunScript.TypeScript.MsZoomToOptions) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msZoomTo = {1})"); CompiledName("msZoomToAux")>]
            member __.``msZoomTo <-``(func : System.Func<FunScript.TypeScript.MsZoomToOptions, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setPointerCapture({1}))"); CompiledName("setPointerCapture")>]
            member __.setPointerCapture(pointerId : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setPointerCapture = {1})"); CompiledName("setPointerCaptureAux")>]
            member __.``setPointerCapture <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msGetUntransformedBounds())"); CompiledName("msGetUntransformedBounds")>]
            member __.msGetUntransformedBounds() : FunScript.TypeScript.ClientRect = failwith "never"
            [<FunScript.JSEmitInline("({0}.msGetUntransformedBounds = {1})"); CompiledName("msGetUntransformedBoundsAux")>]
            member __.``msGetUntransformedBounds <-``(func : System.Func<FunScript.TypeScript.ClientRect>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.releasePointerCapture({1}))"); CompiledName("releasePointerCapture")>]
            member __.releasePointerCapture(pointerId : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.releasePointerCapture = {1})"); CompiledName("releasePointerCaptureAux")>]
            member __.``releasePointerCapture <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msRequestFullscreen())"); CompiledName("msRequestFullscreen")>]
            member __.msRequestFullscreen() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msRequestFullscreen = {1})"); CompiledName("msRequestFullscreenAux")>]
            member __.``msRequestFullscreen <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerenter\", {1}, {?2}))"); CompiledName("addEventListener222")>]
            member __.addEventListener_pointerenter(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerout\", {1}, {?2}))"); CompiledName("addEventListener223")>]
            member __.addEventListener_pointerout(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerdown\", {1}, {?2}))"); CompiledName("addEventListener224")>]
            member __.addEventListener_pointerdown(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerup\", {1}, {?2}))"); CompiledName("addEventListener225")>]
            member __.addEventListener_pointerup(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointercancel\", {1}, {?2}))"); CompiledName("addEventListener226")>]
            member __.addEventListener_pointercancel(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerover\", {1}, {?2}))"); CompiledName("addEventListener227")>]
            member __.addEventListener_pointerover(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointermove\", {1}, {?2}))"); CompiledName("addEventListener228")>]
            member __.addEventListener_pointermove(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerleave\", {1}, {?2}))"); CompiledName("addEventListener229")>]
            member __.addEventListener_pointerleave(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerdown\", {1}, {?2}))"); CompiledName("addEventListener230")>]
            member __.addEventListener_mspointerdown(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgotpointercapture\", {1}, {?2}))"); CompiledName("addEventListener231")>]
            member __.addEventListener_msgotpointercapture(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturedoubletap\", {1}, {?2}))"); CompiledName("addEventListener232")>]
            member __.addEventListener_msgesturedoubletap(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerhover\", {1}, {?2}))"); CompiledName("addEventListener233")>]
            member __.addEventListener_mspointerhover(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturehold\", {1}, {?2}))"); CompiledName("addEventListener234")>]
            member __.addEventListener_msgesturehold(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointermove\", {1}, {?2}))"); CompiledName("addEventListener235")>]
            member __.addEventListener_mspointermove(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturechange\", {1}, {?2}))"); CompiledName("addEventListener236")>]
            member __.addEventListener_msgesturechange(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturestart\", {1}, {?2}))"); CompiledName("addEventListener237")>]
            member __.addEventListener_msgesturestart(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointercancel\", {1}, {?2}))"); CompiledName("addEventListener238")>]
            member __.addEventListener_mspointercancel(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgestureend\", {1}, {?2}))"); CompiledName("addEventListener239")>]
            member __.addEventListener_msgestureend(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturetap\", {1}, {?2}))"); CompiledName("addEventListener240")>]
            member __.addEventListener_msgesturetap(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerout\", {1}, {?2}))"); CompiledName("addEventListener241")>]
            member __.addEventListener_mspointerout(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msinertiastart\", {1}, {?2}))"); CompiledName("addEventListener242")>]
            member __.addEventListener_msinertiastart(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mslostpointercapture\", {1}, {?2}))"); CompiledName("addEventListener243")>]
            member __.addEventListener_mslostpointercapture(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerover\", {1}, {?2}))"); CompiledName("addEventListener244")>]
            member __.addEventListener_mspointerover(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerup\", {1}, {?2}))"); CompiledName("addEventListener245")>]
            member __.addEventListener_mspointerup(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"lostpointercapture\", {1}, {?2}))"); CompiledName("addEventListener246")>]
            member __.addEventListener_lostpointercapture(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerenter\", {1}, {?2}))"); CompiledName("addEventListener247")>]
            member __.addEventListener_mspointerenter(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"gotpointercapture\", {1}, {?2}))"); CompiledName("addEventListener248")>]
            member __.addEventListener_gotpointercapture(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerleave\", {1}, {?2}))"); CompiledName("addEventListener249")>]
            member __.addEventListener_mspointerleave(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener({1}, {2}, {?3}))"); CompiledName("addEventListener250")>]
            member __.addEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener = {1})"); CompiledName("addEventListener250Aux")>]
            member __.``addEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_519 =


    type FunScript.TypeScript.ElementCSSInlineStyle with 

            [<FunScript.JSEmitInline("({0}.runtimeStyle)"); CompiledName("runtimeStyle")>]
            member __.runtimeStyle with get() : FunScript.TypeScript.MSStyleCSSProperties = failwith "never" and set (v : FunScript.TypeScript.MSStyleCSSProperties) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.currentStyle)"); CompiledName("currentStyle")>]
            member __.currentStyle with get() : FunScript.TypeScript.MSCurrentStyleCSSProperties = failwith "never" and set (v : FunScript.TypeScript.MSCurrentStyleCSSProperties) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.doScroll({?1}))"); CompiledName("doScroll")>]
            member __.doScroll(?_component : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.doScroll = {1})"); CompiledName("doScrollAux")>]
            member __.``doScroll <-``(func : System.Func<obj, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.componentFromPoint({1}, {2}))"); CompiledName("componentFromPoint")>]
            member __.componentFromPoint(x : float, y : float) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.componentFromPoint = {1})"); CompiledName("componentFromPointAux")>]
            member __.``componentFromPoint <-``(func : System.Func<float, float, string>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_520 =


    type FunScript.TypeScript.ElementTraversal with 

            [<FunScript.JSEmitInline("({0}.childElementCount)"); CompiledName("childElementCount")>]
            member __.childElementCount with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.previousElementSibling)"); CompiledName("previousElementSibling")>]
            member __.previousElementSibling with get() : FunScript.TypeScript.Element = failwith "never" and set (v : FunScript.TypeScript.Element) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.lastElementChild)"); CompiledName("lastElementChild")>]
            member __.lastElementChild with get() : FunScript.TypeScript.Element = failwith "never" and set (v : FunScript.TypeScript.Element) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.nextElementSibling)"); CompiledName("nextElementSibling")>]
            member __.nextElementSibling with get() : FunScript.TypeScript.Element = failwith "never" and set (v : FunScript.TypeScript.Element) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.firstElementChild)"); CompiledName("firstElementChild")>]
            member __.firstElementChild with get() : FunScript.TypeScript.Element = failwith "never" and set (v : FunScript.TypeScript.Element) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_521 =


    type FunScript.TypeScript.Error with 

            [<FunScript.JSEmitInline("({0}.name)"); CompiledName("name7")>]
            member __.name with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.message)"); CompiledName("message1")>]
            member __.message with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_522 =


    type FunScript.TypeScript.ErrorEvent with 

            [<FunScript.JSEmitInline("({0}.colno)"); CompiledName("colno")>]
            member __.colno with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.filename)"); CompiledName("filename")>]
            member __.filename with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.error)"); CompiledName("error2")>]
            member __.error with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.lineno)"); CompiledName("lineno")>]
            member __.lineno with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.message)"); CompiledName("message2")>]
            member __.message with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initErrorEvent({1}, {2}, {3}, {4}, {5}, {6}))"); CompiledName("initErrorEvent")>]
            member __.initErrorEvent(typeArg : string, canBubbleArg : bool, cancelableArg : bool, messageArg : string, filenameArg : string, linenoArg : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initErrorEvent = {1})"); CompiledName("initErrorEventAux")>]
            member __.``initErrorEvent <-``(func : System.Func<string, bool, bool, string, string, float, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_523 =


    type FunScript.TypeScript.ErrorEventHandler with 

            [<FunScript.JSEmitInline("({0}({1}, {2}, {3}, {4}))"); CompiledName("Invoke26")>]
            member __.Invoke(_event : FunScript.TypeScript.Event, source : string, fileno : float, columnNumber : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0} = {1})"); CompiledName("Invoke26Aux")>]
            member __.``Invoke <-``(func : System.Func<FunScript.TypeScript.Event, string, float, float, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_524 =


    type FunScript.TypeScript.Event with 

            [<FunScript.JSEmitInline("({0}.timeStamp)"); CompiledName("timeStamp")>]
            member __.timeStamp with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.defaultPrevented)"); CompiledName("defaultPrevented")>]
            member __.defaultPrevented with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.isTrusted)"); CompiledName("isTrusted")>]
            member __.isTrusted with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.currentTarget)"); CompiledName("currentTarget")>]
            member __.currentTarget with get() : FunScript.TypeScript.EventTarget = failwith "never" and set (v : FunScript.TypeScript.EventTarget) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.cancelBubble)"); CompiledName("cancelBubble")>]
            member __.cancelBubble with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.target)"); CompiledName("target")>]
            member __.target with get() : FunScript.TypeScript.EventTarget = failwith "never" and set (v : FunScript.TypeScript.EventTarget) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.eventPhase)"); CompiledName("eventPhase")>]
            member __.eventPhase with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.cancelable)"); CompiledName("cancelable")>]
            member __.cancelable with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.type)"); CompiledName("_type4")>]
            member __._type with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.srcElement)"); CompiledName("srcElement")>]
            member __.srcElement with get() : FunScript.TypeScript.Element = failwith "never" and set (v : FunScript.TypeScript.Element) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.bubbles)"); CompiledName("bubbles")>]
            member __.bubbles with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initEvent({1}, {2}, {3}))"); CompiledName("initEvent")>]
            member __.initEvent(eventTypeArg : string, canBubbleArg : bool, cancelableArg : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initEvent = {1})"); CompiledName("initEventAux")>]
            member __.``initEvent <-``(func : System.Func<string, bool, bool, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.stopPropagation())"); CompiledName("stopPropagation")>]
            member __.stopPropagation() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.stopPropagation = {1})"); CompiledName("stopPropagationAux")>]
            member __.``stopPropagation <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.stopImmediatePropagation())"); CompiledName("stopImmediatePropagation")>]
            member __.stopImmediatePropagation() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.stopImmediatePropagation = {1})"); CompiledName("stopImmediatePropagationAux")>]
            member __.``stopImmediatePropagation <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.preventDefault())"); CompiledName("preventDefault")>]
            member __.preventDefault() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.preventDefault = {1})"); CompiledName("preventDefaultAux")>]
            member __.``preventDefault <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.CAPTURING_PHASE)"); CompiledName("CAPTURING_PHASE1")>]
            member __.CAPTURING_PHASE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.AT_TARGET)"); CompiledName("AT_TARGET1")>]
            member __.AT_TARGET with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BUBBLING_PHASE)"); CompiledName("BUBBLING_PHASE1")>]
            member __.BUBBLING_PHASE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_525 =


    type FunScript.TypeScript.EventException with 

            [<FunScript.JSEmitInline("({0}.code)"); CompiledName("code2")>]
            member __.code with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.message)"); CompiledName("message3")>]
            member __.message with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.name)"); CompiledName("name8")>]
            member __.name with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toString())"); CompiledName("toString6")>]
            member __.toString() : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toString = {1})"); CompiledName("toString6Aux")>]
            member __.``toString <-``(func : System.Func<string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DISPATCH_REQUEST_ERR)"); CompiledName("DISPATCH_REQUEST_ERR1")>]
            member __.DISPATCH_REQUEST_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.UNSPECIFIED_EVENT_TYPE_ERR)"); CompiledName("UNSPECIFIED_EVENT_TYPE_ERR1")>]
            member __.UNSPECIFIED_EVENT_TYPE_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_526 =


    type FunScript.TypeScript.EventListener with 

            [<FunScript.JSEmitInline("({0}({1}))"); CompiledName("Invoke27")>]
            member __.Invoke(evt : FunScript.TypeScript.Event) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0} = {1})"); CompiledName("Invoke27Aux")>]
            member __.``Invoke <-``(func : System.Func<FunScript.TypeScript.Event, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_527 =


    type FunScript.TypeScript.EventTarget with 

            [<FunScript.JSEmitInline("({0}.removeEventListener({1}, {2}, {?3}))"); CompiledName("removeEventListener1")>]
            member __.removeEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeEventListener = {1})"); CompiledName("removeEventListener1Aux")>]
            member __.``removeEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener({1}, {2}, {?3}))"); CompiledName("addEventListener251")>]
            member __.addEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener = {1})"); CompiledName("addEventListener251Aux")>]
            member __.``addEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.dispatchEvent({1}))"); CompiledName("dispatchEvent1")>]
            member __.dispatchEvent(evt : FunScript.TypeScript.Event) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.dispatchEvent = {1})"); CompiledName("dispatchEvent1Aux")>]
            member __.``dispatchEvent <-``(func : System.Func<FunScript.TypeScript.Event, bool>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_528 =


    type FunScript.TypeScript.ExceptionInformation with 

            [<FunScript.JSEmitInline("({0}.domain)"); CompiledName("domain1")>]
            member __.domain with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_529 =


    type FunScript.TypeScript.File with 

            [<FunScript.JSEmitInline("({0}.lastModifiedDate)"); CompiledName("lastModifiedDate")>]
            member __.lastModifiedDate with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.name)"); CompiledName("name9")>]
            member __.name with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_530 =


    type FunScript.TypeScript.FileList with 

            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length12")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.item({1}))"); CompiledName("item9")>]
            member __.item(index : float) : FunScript.TypeScript.File = failwith "never"
            [<FunScript.JSEmitInline("({0}.item = {1})"); CompiledName("item9Aux")>]
            member __.``item <-``(func : System.Func<float, FunScript.TypeScript.File>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}[{1}])"); CompiledName("Item10")>]
            member __.Item with get(i : int) : FunScript.TypeScript.File = failwith "never" and set (i : int) (v : FunScript.TypeScript.File) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_531 =


    type FunScript.TypeScript.FileReader with 

            [<FunScript.JSEmitInline("({0}.error)"); CompiledName("error3")>]
            member __.error with get() : FunScript.TypeScript.DOMError = failwith "never" and set (v : FunScript.TypeScript.DOMError) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.readAsArrayBuffer({1}))"); CompiledName("readAsArrayBuffer")>]
            member __.readAsArrayBuffer(blob : FunScript.TypeScript.Blob) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.readAsArrayBuffer = {1})"); CompiledName("readAsArrayBufferAux")>]
            member __.``readAsArrayBuffer <-``(func : System.Func<FunScript.TypeScript.Blob, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.readAsDataURL({1}))"); CompiledName("readAsDataURL")>]
            member __.readAsDataURL(blob : FunScript.TypeScript.Blob) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.readAsDataURL = {1})"); CompiledName("readAsDataURLAux")>]
            member __.``readAsDataURL <-``(func : System.Func<FunScript.TypeScript.Blob, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.readAsText({1}, {?2}))"); CompiledName("readAsText")>]
            member __.readAsText(blob : FunScript.TypeScript.Blob, ?encoding : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.readAsText = {1})"); CompiledName("readAsTextAux")>]
            member __.``readAsText <-``(func : System.Func<FunScript.TypeScript.Blob, string, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_532 =


    type FunScript.TypeScript.Float32Array with 

            [<FunScript.JSEmitInline("({0}.BYTES_PER_ELEMENT)"); CompiledName("BYTES_PER_ELEMENT8")>]
            member __.BYTES_PER_ELEMENT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length13")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}[{1}])"); CompiledName("Item11")>]
            member __.Item with get(i : int) : float = failwith "never" and set (i : int) (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.get({1}))"); CompiledName("get")>]
            member __.get(index : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.get = {1})"); CompiledName("getAux")>]
            member __.``get <-``(func : System.Func<float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set({1}, {2}))"); CompiledName("set")>]
            member __.set(index : float, value : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set = {1})"); CompiledName("setAux")>]
            member __.``set <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set({1}, {?2}))"); CompiledName("set1")>]
            member __.set(array : FunScript.TypeScript.Float32Array, ?offset : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set = {1})"); CompiledName("set1Aux")>]
            member __.``set <-``(func : System.Func<FunScript.TypeScript.Float32Array, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set({1}, {?2}))"); CompiledName("set2")>]
            member __.set(array : array<float>, ?offset : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set = {1})"); CompiledName("set2Aux")>]
            member __.``set <-``(func : System.Func<array<float>, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.subarray({1}, {?2}))"); CompiledName("subarray")>]
            member __.subarray(_begin : float, ?_end : float) : FunScript.TypeScript.Float32Array = failwith "never"
            [<FunScript.JSEmitInline("({0}.subarray = {1})"); CompiledName("subarrayAux")>]
            member __.``subarray <-``(func : System.Func<float, float, FunScript.TypeScript.Float32Array>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_533 =


    type FunScript.TypeScript.Float64Array with 

            [<FunScript.JSEmitInline("({0}.BYTES_PER_ELEMENT)"); CompiledName("BYTES_PER_ELEMENT9")>]
            member __.BYTES_PER_ELEMENT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length14")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}[{1}])"); CompiledName("Item12")>]
            member __.Item with get(i : int) : float = failwith "never" and set (i : int) (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.get({1}))"); CompiledName("get1")>]
            member __.get(index : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.get = {1})"); CompiledName("get1Aux")>]
            member __.``get <-``(func : System.Func<float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set({1}, {2}))"); CompiledName("set3")>]
            member __.set(index : float, value : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set = {1})"); CompiledName("set3Aux")>]
            member __.``set <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set({1}, {?2}))"); CompiledName("set4")>]
            member __.set(array : FunScript.TypeScript.Float64Array, ?offset : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set = {1})"); CompiledName("set4Aux")>]
            member __.``set <-``(func : System.Func<FunScript.TypeScript.Float64Array, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set({1}, {?2}))"); CompiledName("set5")>]
            member __.set(array : array<float>, ?offset : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set = {1})"); CompiledName("set5Aux")>]
            member __.``set <-``(func : System.Func<array<float>, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.subarray({1}, {?2}))"); CompiledName("subarray1")>]
            member __.subarray(_begin : float, ?_end : float) : FunScript.TypeScript.Float64Array = failwith "never"
            [<FunScript.JSEmitInline("({0}.subarray = {1})"); CompiledName("subarray1Aux")>]
            member __.``subarray <-``(func : System.Func<float, float, FunScript.TypeScript.Float64Array>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_534 =


    type FunScript.TypeScript.FocusEvent with 

            [<FunScript.JSEmitInline("({0}.relatedTarget)"); CompiledName("relatedTarget")>]
            member __.relatedTarget with get() : FunScript.TypeScript.EventTarget = failwith "never" and set (v : FunScript.TypeScript.EventTarget) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initFocusEvent({1}, {2}, {3}, {4}, {5}, {6}))"); CompiledName("initFocusEvent")>]
            member __.initFocusEvent(typeArg : string, canBubbleArg : bool, cancelableArg : bool, viewArg : FunScript.TypeScript.Window, detailArg : float, relatedTargetArg : FunScript.TypeScript.EventTarget) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initFocusEvent = {1})"); CompiledName("initFocusEventAux")>]
            member __.``initFocusEvent <-``(func : System.Func<string, bool, bool, FunScript.TypeScript.Window, float, FunScript.TypeScript.EventTarget, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_535 =


    type FunScript.TypeScript.FormData with 

            [<FunScript.JSEmitInline("({0}.append({1}, {2}, {?3}))"); CompiledName("append")>]
            member __.append(name : obj, value : obj, ?blobName : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.append = {1})"); CompiledName("appendAux")>]
            member __.``append <-``(func : System.Func<obj, obj, string, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_536 =


    type FunScript.TypeScript.FrameRequestCallback with 

            [<FunScript.JSEmitInline("({0}({1}))"); CompiledName("Invoke28")>]
            member __.Invoke(time : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0} = {1})"); CompiledName("Invoke28Aux")>]
            member __.``Invoke <-``(func : System.Func<float, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_537 =


    type FunScript.TypeScript.Function with 

            [<FunScript.JSEmitInline("({0}.apply({1}, {?2}))"); CompiledName("apply")>]
            member __.apply(thisArg : obj, ?argArray : obj) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.apply = {1})"); CompiledName("applyAux")>]
            member __.``apply <-``(func : System.Func<obj, obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.call({1}))"); CompiledName("call")>]
            member __.call(thisArg : obj) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.call = {1})"); CompiledName("callAux")>]
            member __.``call <-``(func : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.call({1}, {2...}))"); CompiledName("call1")>]
            member __.callOverload2(thisArg : obj, [<System.ParamArray>] argArray : array<obj>) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.bind({1}))"); CompiledName("bind")>]
            member __.bind(thisArg : obj) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.bind = {1})"); CompiledName("bindAux")>]
            member __.``bind <-``(func : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.bind({1}, {2...}))"); CompiledName("bind1")>]
            member __.bindOverload2(thisArg : obj, [<System.ParamArray>] argArray : array<obj>) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.prototype)"); CompiledName("prototype427")>]
            member __.prototype with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length15")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.arguments)"); CompiledName("arguments")>]
            member __.arguments with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.caller)"); CompiledName("caller")>]
            member __.caller with get() : FunScript.TypeScript.Function = failwith "never" and set (v : FunScript.TypeScript.Function) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_538 =


    type FunScript.TypeScript.Geolocation with 

            [<FunScript.JSEmitInline("({0}.clearWatch({1}))"); CompiledName("clearWatch")>]
            member __.clearWatch(watchId : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clearWatch = {1})"); CompiledName("clearWatchAux")>]
            member __.``clearWatch <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getCurrentPosition({1}, {?2}, {?3}))"); CompiledName("getCurrentPosition")>]
            member __.getCurrentPosition(successCallback : FunScript.TypeScript.PositionCallbackDelegate, ?errorCallback : FunScript.TypeScript.PositionErrorCallbackDelegate, ?options : FunScript.TypeScript.PositionOptions) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getCurrentPosition = {1})"); CompiledName("getCurrentPositionAux")>]
            member __.``getCurrentPosition <-``(func : System.Func<FunScript.TypeScript.PositionCallbackDelegate, FunScript.TypeScript.PositionErrorCallbackDelegate, FunScript.TypeScript.PositionOptions, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.watchPosition({1}, {?2}, {?3}))"); CompiledName("watchPosition")>]
            member __.watchPosition(successCallback : FunScript.TypeScript.PositionCallbackDelegate, ?errorCallback : FunScript.TypeScript.PositionErrorCallbackDelegate, ?options : FunScript.TypeScript.PositionOptions) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.watchPosition = {1})"); CompiledName("watchPositionAux")>]
            member __.``watchPosition <-``(func : System.Func<FunScript.TypeScript.PositionCallbackDelegate, FunScript.TypeScript.PositionErrorCallbackDelegate, FunScript.TypeScript.PositionOptions, float>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_539 =


    type FunScript.TypeScript.GetSVGDocument with 

            [<FunScript.JSEmitInline("({0}.getSVGDocument())"); CompiledName("getSVGDocument")>]
            member __.getSVGDocument() : FunScript.TypeScript.Document = failwith "never"
            [<FunScript.JSEmitInline("({0}.getSVGDocument = {1})"); CompiledName("getSVGDocumentAux")>]
            member __.``getSVGDocument <-``(func : System.Func<FunScript.TypeScript.Document>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_540 =


    type FunScript.TypeScript.GlobalEventHandlers with 

            [<FunScript.JSEmitInline("({0}.onpointerenter)"); CompiledName("onpointerenter1")>]
            member __.onpointerenter with get() : System.Func<FunScript.TypeScript.PointerEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.PointerEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onpointerout)"); CompiledName("onpointerout1")>]
            member __.onpointerout with get() : System.Func<FunScript.TypeScript.PointerEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.PointerEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onpointerdown)"); CompiledName("onpointerdown1")>]
            member __.onpointerdown with get() : System.Func<FunScript.TypeScript.PointerEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.PointerEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onpointerup)"); CompiledName("onpointerup1")>]
            member __.onpointerup with get() : System.Func<FunScript.TypeScript.PointerEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.PointerEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onpointercancel)"); CompiledName("onpointercancel1")>]
            member __.onpointercancel with get() : System.Func<FunScript.TypeScript.PointerEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.PointerEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onpointerover)"); CompiledName("onpointerover1")>]
            member __.onpointerover with get() : System.Func<FunScript.TypeScript.PointerEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.PointerEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onpointermove)"); CompiledName("onpointermove1")>]
            member __.onpointermove with get() : System.Func<FunScript.TypeScript.PointerEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.PointerEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onpointerleave)"); CompiledName("onpointerleave1")>]
            member __.onpointerleave with get() : System.Func<FunScript.TypeScript.PointerEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.PointerEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerenter\", {1}, {?2}))"); CompiledName("addEventListener252")>]
            member __.addEventListener_pointerenter(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerout\", {1}, {?2}))"); CompiledName("addEventListener253")>]
            member __.addEventListener_pointerout(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerdown\", {1}, {?2}))"); CompiledName("addEventListener254")>]
            member __.addEventListener_pointerdown(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerup\", {1}, {?2}))"); CompiledName("addEventListener255")>]
            member __.addEventListener_pointerup(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointercancel\", {1}, {?2}))"); CompiledName("addEventListener256")>]
            member __.addEventListener_pointercancel(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerover\", {1}, {?2}))"); CompiledName("addEventListener257")>]
            member __.addEventListener_pointerover(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointermove\", {1}, {?2}))"); CompiledName("addEventListener258")>]
            member __.addEventListener_pointermove(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerleave\", {1}, {?2}))"); CompiledName("addEventListener259")>]
            member __.addEventListener_pointerleave(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener({1}, {2}, {?3}))"); CompiledName("addEventListener260")>]
            member __.addEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener = {1})"); CompiledName("addEventListener260Aux")>]
            member __.``addEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_541 =


    type FunScript.TypeScript.HTMLAllCollection with 

            [<FunScript.JSEmitInline("({0}.namedItem({1}))"); CompiledName("namedItem")>]
            member __.namedItem(name : string) : FunScript.TypeScript.Element = failwith "never"
            [<FunScript.JSEmitInline("({0}.namedItem = {1})"); CompiledName("namedItemAux")>]
            member __.``namedItem <-``(func : System.Func<string, FunScript.TypeScript.Element>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_542 =


    type FunScript.TypeScript.HTMLAnchorElement with 

            [<FunScript.JSEmitInline("({0}.rel)"); CompiledName("rel")>]
            member __.rel with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.protocol)"); CompiledName("protocol")>]
            member __.protocol with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.search)"); CompiledName("search")>]
            member __.search with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.coords)"); CompiledName("coords")>]
            member __.coords with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.hostname)"); CompiledName("hostname")>]
            member __.hostname with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pathname)"); CompiledName("pathname")>]
            member __.pathname with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.Methods)"); CompiledName("Methods")>]
            member __.Methods with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.target)"); CompiledName("target1")>]
            member __.target with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.protocolLong)"); CompiledName("protocolLong")>]
            member __.protocolLong with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.href)"); CompiledName("href2")>]
            member __.href with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.name)"); CompiledName("name10")>]
            member __.name with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.charset)"); CompiledName("charset1")>]
            member __.charset with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.hreflang)"); CompiledName("hreflang")>]
            member __.hreflang with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.port)"); CompiledName("port")>]
            member __.port with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.host)"); CompiledName("host")>]
            member __.host with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.hash)"); CompiledName("hash")>]
            member __.hash with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.nameProp)"); CompiledName("nameProp")>]
            member __.nameProp with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.urn)"); CompiledName("urn")>]
            member __.urn with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.rev)"); CompiledName("rev")>]
            member __.rev with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.shape)"); CompiledName("shape")>]
            member __.shape with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.type)"); CompiledName("_type5")>]
            member __._type with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.mimeType)"); CompiledName("mimeType")>]
            member __.mimeType with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.text)"); CompiledName("text1")>]
            member __.text with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toString())"); CompiledName("toString7")>]
            member __.toString() : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toString = {1})"); CompiledName("toString7Aux")>]
            member __.``toString <-``(func : System.Func<string>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_543 =


    type FunScript.TypeScript.HTMLAppletElement with 

            [<FunScript.JSEmitInline("({0}.width)"); CompiledName("width2")>]
            member __.width with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.codeType)"); CompiledName("codeType")>]
            member __.codeType with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.object)"); CompiledName("_object")>]
            member __._object with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.form)"); CompiledName("form")>]
            member __.form with get() : FunScript.TypeScript.HTMLFormElement = failwith "never" and set (v : FunScript.TypeScript.HTMLFormElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.code)"); CompiledName("code3")>]
            member __.code with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.archive)"); CompiledName("archive")>]
            member __.archive with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.alt)"); CompiledName("alt")>]
            member __.alt with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.standby)"); CompiledName("standby")>]
            member __.standby with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.classid)"); CompiledName("classid")>]
            member __.classid with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.name)"); CompiledName("name11")>]
            member __.name with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.useMap)"); CompiledName("useMap")>]
            member __.useMap with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.data)"); CompiledName("data2")>]
            member __.data with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.height)"); CompiledName("height2")>]
            member __.height with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.altHtml)"); CompiledName("altHtml")>]
            member __.altHtml with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.contentDocument)"); CompiledName("contentDocument")>]
            member __.contentDocument with get() : FunScript.TypeScript.Document = failwith "never" and set (v : FunScript.TypeScript.Document) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.codeBase)"); CompiledName("codeBase")>]
            member __.codeBase with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.declare)"); CompiledName("declare")>]
            member __.declare with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.type)"); CompiledName("_type6")>]
            member __._type with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BaseHref)"); CompiledName("BaseHref")>]
            member __.BaseHref with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_544 =


    type FunScript.TypeScript.HTMLAreaElement with 

            [<FunScript.JSEmitInline("({0}.protocol)"); CompiledName("protocol1")>]
            member __.protocol with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.search)"); CompiledName("search1")>]
            member __.search with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.alt)"); CompiledName("alt1")>]
            member __.alt with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.coords)"); CompiledName("coords1")>]
            member __.coords with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.hostname)"); CompiledName("hostname1")>]
            member __.hostname with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.port)"); CompiledName("port1")>]
            member __.port with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pathname)"); CompiledName("pathname1")>]
            member __.pathname with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.host)"); CompiledName("host1")>]
            member __.host with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.hash)"); CompiledName("hash1")>]
            member __.hash with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.target)"); CompiledName("target2")>]
            member __.target with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.href)"); CompiledName("href3")>]
            member __.href with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.noHref)"); CompiledName("noHref")>]
            member __.noHref with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.shape)"); CompiledName("shape1")>]
            member __.shape with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toString())"); CompiledName("toString8")>]
            member __.toString() : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toString = {1})"); CompiledName("toString8Aux")>]
            member __.``toString <-``(func : System.Func<string>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_545 =


    type FunScript.TypeScript.HTMLAreasCollection with 

            [<FunScript.JSEmitInline("({0}.remove({?1}))"); CompiledName("remove2")>]
            member __.remove(?index : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.remove = {1})"); CompiledName("remove2Aux")>]
            member __.``remove <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.add({1}, {?2}))"); CompiledName("add2")>]
            member __.add(element : FunScript.TypeScript.HTMLElement, ?before : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.add = {1})"); CompiledName("add2Aux")>]
            member __.``add <-``(func : System.Func<FunScript.TypeScript.HTMLElement, obj, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_546 =


    type FunScript.TypeScript.HTMLBGSoundElement with 

            [<FunScript.JSEmitInline("({0}.balance)"); CompiledName("balance")>]
            member __.balance with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.volume)"); CompiledName("volume")>]
            member __.volume with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.src)"); CompiledName("src")>]
            member __.src with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.loop)"); CompiledName("loop")>]
            member __.loop with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_547 =


    type FunScript.TypeScript.HTMLBRElement with 

            [<FunScript.JSEmitInline("({0}.clear)"); CompiledName("clear4")>]
            member __.clear with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_548 =


    type FunScript.TypeScript.HTMLBaseElement with 

            [<FunScript.JSEmitInline("({0}.target)"); CompiledName("target3")>]
            member __.target with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.href)"); CompiledName("href4")>]
            member __.href with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_549 =


    type FunScript.TypeScript.HTMLBaseFontElement with 

            [<FunScript.JSEmitInline("({0}.face)"); CompiledName("face")>]
            member __.face with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.size)"); CompiledName("size2")>]
            member __.size with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_550 =


    type FunScript.TypeScript.HTMLBlockElement with 

            [<FunScript.JSEmitInline("({0}.width)"); CompiledName("width3")>]
            member __.width with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.cite)"); CompiledName("cite")>]
            member __.cite with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_551 =


    type FunScript.TypeScript.HTMLBodyElement with 

            [<FunScript.JSEmitInline("({0}.scroll)"); CompiledName("scroll1")>]
            member __.scroll with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ononline)"); CompiledName("ononline1")>]
            member __.ononline with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onblur)"); CompiledName("onblur2")>]
            member __.onblur with get() : System.Func<FunScript.TypeScript.FocusEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.FocusEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.noWrap)"); CompiledName("noWrap")>]
            member __.noWrap with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onfocus)"); CompiledName("onfocus2")>]
            member __.onfocus with get() : System.Func<FunScript.TypeScript.FocusEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.FocusEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmessage)"); CompiledName("onmessage1")>]
            member __.onmessage with get() : System.Func<FunScript.TypeScript.MessageEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MessageEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.text)"); CompiledName("text2")>]
            member __.text with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onerror)"); CompiledName("onerror5")>]
            member __.onerror with get() : System.Func<FunScript.TypeScript.ErrorEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.ErrorEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.bgProperties)"); CompiledName("bgProperties")>]
            member __.bgProperties with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onresize)"); CompiledName("onresize1")>]
            member __.onresize with get() : System.Func<FunScript.TypeScript.UIEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.UIEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.link)"); CompiledName("link")>]
            member __.link with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.aLink)"); CompiledName("aLink")>]
            member __.aLink with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.bottomMargin)"); CompiledName("bottomMargin")>]
            member __.bottomMargin with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.topMargin)"); CompiledName("topMargin")>]
            member __.topMargin with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onafterprint)"); CompiledName("onafterprint1")>]
            member __.onafterprint with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.vLink)"); CompiledName("vLink")>]
            member __.vLink with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onbeforeprint)"); CompiledName("onbeforeprint1")>]
            member __.onbeforeprint with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onoffline)"); CompiledName("onoffline1")>]
            member __.onoffline with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onunload)"); CompiledName("onunload1")>]
            member __.onunload with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onhashchange)"); CompiledName("onhashchange1")>]
            member __.onhashchange with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onload)"); CompiledName("onload2")>]
            member __.onload with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.rightMargin)"); CompiledName("rightMargin")>]
            member __.rightMargin with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onbeforeunload)"); CompiledName("onbeforeunload1")>]
            member __.onbeforeunload with get() : System.Func<FunScript.TypeScript.BeforeUnloadEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.BeforeUnloadEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.leftMargin)"); CompiledName("leftMargin")>]
            member __.leftMargin with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onstorage)"); CompiledName("onstorage1")>]
            member __.onstorage with get() : System.Func<FunScript.TypeScript.StorageEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.StorageEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onpopstate)"); CompiledName("onpopstate1")>]
            member __.onpopstate with get() : System.Func<FunScript.TypeScript.PopStateEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.PopStateEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onpageshow)"); CompiledName("onpageshow1")>]
            member __.onpageshow with get() : System.Func<FunScript.TypeScript.PageTransitionEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.PageTransitionEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onpagehide)"); CompiledName("onpagehide1")>]
            member __.onpagehide with get() : System.Func<FunScript.TypeScript.PageTransitionEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.PageTransitionEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createTextRange())"); CompiledName("createTextRange")>]
            member __.createTextRange() : FunScript.TypeScript.TextRange = failwith "never"
            [<FunScript.JSEmitInline("({0}.createTextRange = {1})"); CompiledName("createTextRangeAux")>]
            member __.``createTextRange <-``(func : System.Func<FunScript.TypeScript.TextRange>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerenter\", {1}, {?2}))"); CompiledName("addEventListener261")>]
            member __.addEventListener_pointerenter(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerout\", {1}, {?2}))"); CompiledName("addEventListener262")>]
            member __.addEventListener_pointerout(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerdown\", {1}, {?2}))"); CompiledName("addEventListener263")>]
            member __.addEventListener_pointerdown(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerup\", {1}, {?2}))"); CompiledName("addEventListener264")>]
            member __.addEventListener_pointerup(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointercancel\", {1}, {?2}))"); CompiledName("addEventListener265")>]
            member __.addEventListener_pointercancel(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerover\", {1}, {?2}))"); CompiledName("addEventListener266")>]
            member __.addEventListener_pointerover(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointermove\", {1}, {?2}))"); CompiledName("addEventListener267")>]
            member __.addEventListener_pointermove(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerleave\", {1}, {?2}))"); CompiledName("addEventListener268")>]
            member __.addEventListener_pointerleave(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerdown\", {1}, {?2}))"); CompiledName("addEventListener269")>]
            member __.addEventListener_mspointerdown(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgotpointercapture\", {1}, {?2}))"); CompiledName("addEventListener270")>]
            member __.addEventListener_msgotpointercapture(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturedoubletap\", {1}, {?2}))"); CompiledName("addEventListener271")>]
            member __.addEventListener_msgesturedoubletap(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerhover\", {1}, {?2}))"); CompiledName("addEventListener272")>]
            member __.addEventListener_mspointerhover(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturehold\", {1}, {?2}))"); CompiledName("addEventListener273")>]
            member __.addEventListener_msgesturehold(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointermove\", {1}, {?2}))"); CompiledName("addEventListener274")>]
            member __.addEventListener_mspointermove(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturechange\", {1}, {?2}))"); CompiledName("addEventListener275")>]
            member __.addEventListener_msgesturechange(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturestart\", {1}, {?2}))"); CompiledName("addEventListener276")>]
            member __.addEventListener_msgesturestart(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointercancel\", {1}, {?2}))"); CompiledName("addEventListener277")>]
            member __.addEventListener_mspointercancel(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgestureend\", {1}, {?2}))"); CompiledName("addEventListener278")>]
            member __.addEventListener_msgestureend(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturetap\", {1}, {?2}))"); CompiledName("addEventListener279")>]
            member __.addEventListener_msgesturetap(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerout\", {1}, {?2}))"); CompiledName("addEventListener280")>]
            member __.addEventListener_mspointerout(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msinertiastart\", {1}, {?2}))"); CompiledName("addEventListener281")>]
            member __.addEventListener_msinertiastart(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mslostpointercapture\", {1}, {?2}))"); CompiledName("addEventListener282")>]
            member __.addEventListener_mslostpointercapture(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerover\", {1}, {?2}))"); CompiledName("addEventListener283")>]
            member __.addEventListener_mspointerover(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerup\", {1}, {?2}))"); CompiledName("addEventListener284")>]
            member __.addEventListener_mspointerup(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"lostpointercapture\", {1}, {?2}))"); CompiledName("addEventListener285")>]
            member __.addEventListener_lostpointercapture(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerenter\", {1}, {?2}))"); CompiledName("addEventListener286")>]
            member __.addEventListener_mspointerenter(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"gotpointercapture\", {1}, {?2}))"); CompiledName("addEventListener287")>]
            member __.addEventListener_gotpointercapture(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerleave\", {1}, {?2}))"); CompiledName("addEventListener288")>]
            member __.addEventListener_mspointerleave(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseleave\", {1}, {?2}))"); CompiledName("addEventListener289")>]
            member __.addEventListener_mouseleave(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforecut\", {1}, {?2}))"); CompiledName("addEventListener290")>]
            member __.addEventListener_beforecut(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"keydown\", {1}, {?2}))"); CompiledName("addEventListener291")>]
            member __.addEventListener_keydown(listener : System.Func<FunScript.TypeScript.KeyboardEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"move\", {1}, {?2}))"); CompiledName("addEventListener292")>]
            member __.addEventListener_move(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"keyup\", {1}, {?2}))"); CompiledName("addEventListener293")>]
            member __.addEventListener_keyup(listener : System.Func<FunScript.TypeScript.KeyboardEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"reset\", {1}, {?2}))"); CompiledName("addEventListener294")>]
            member __.addEventListener_reset(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"help\", {1}, {?2}))"); CompiledName("addEventListener295")>]
            member __.addEventListener_help(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragleave\", {1}, {?2}))"); CompiledName("addEventListener296")>]
            member __.addEventListener_dragleave(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"focusin\", {1}, {?2}))"); CompiledName("addEventListener297")>]
            member __.addEventListener_focusin(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"seeked\", {1}, {?2}))"); CompiledName("addEventListener298")>]
            member __.addEventListener_seeked(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"durationchange\", {1}, {?2}))"); CompiledName("addEventListener299")>]
            member __.addEventListener_durationchange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"blur\", {1}, {?2}))"); CompiledName("addEventListener300")>]
            member __.addEventListener_blur(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"emptied\", {1}, {?2}))"); CompiledName("addEventListener301")>]
            member __.addEventListener_emptied(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"seeking\", {1}, {?2}))"); CompiledName("addEventListener302")>]
            member __.addEventListener_seeking(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"canplay\", {1}, {?2}))"); CompiledName("addEventListener303")>]
            member __.addEventListener_canplay(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"deactivate\", {1}, {?2}))"); CompiledName("addEventListener304")>]
            member __.addEventListener_deactivate(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"datasetchanged\", {1}, {?2}))"); CompiledName("addEventListener305")>]
            member __.addEventListener_datasetchanged(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"rowsdelete\", {1}, {?2}))"); CompiledName("addEventListener306")>]
            member __.addEventListener_rowsdelete(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"loadstart\", {1}, {?2}))"); CompiledName("addEventListener307")>]
            member __.addEventListener_loadstart(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"losecapture\", {1}, {?2}))"); CompiledName("addEventListener308")>]
            member __.addEventListener_losecapture(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragenter\", {1}, {?2}))"); CompiledName("addEventListener309")>]
            member __.addEventListener_dragenter(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"controlselect\", {1}, {?2}))"); CompiledName("addEventListener310")>]
            member __.addEventListener_controlselect(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"submit\", {1}, {?2}))"); CompiledName("addEventListener311")>]
            member __.addEventListener_submit(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"change\", {1}, {?2}))"); CompiledName("addEventListener312")>]
            member __.addEventListener_change(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"layoutcomplete\", {1}, {?2}))"); CompiledName("addEventListener313")>]
            member __.addEventListener_layoutcomplete(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforeactivate\", {1}, {?2}))"); CompiledName("addEventListener314")>]
            member __.addEventListener_beforeactivate(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"canplaythrough\", {1}, {?2}))"); CompiledName("addEventListener315")>]
            member __.addEventListener_canplaythrough(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforeupdate\", {1}, {?2}))"); CompiledName("addEventListener316")>]
            member __.addEventListener_beforeupdate(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"filterchange\", {1}, {?2}))"); CompiledName("addEventListener317")>]
            member __.addEventListener_filterchange(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"datasetcomplete\", {1}, {?2}))"); CompiledName("addEventListener318")>]
            member __.addEventListener_datasetcomplete(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"suspend\", {1}, {?2}))"); CompiledName("addEventListener319")>]
            member __.addEventListener_suspend(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseenter\", {1}, {?2}))"); CompiledName("addEventListener320")>]
            member __.addEventListener_mouseenter(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"errorupdate\", {1}, {?2}))"); CompiledName("addEventListener321")>]
            member __.addEventListener_errorupdate(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseout\", {1}, {?2}))"); CompiledName("addEventListener322")>]
            member __.addEventListener_mouseout(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mousewheel\", {1}, {?2}))"); CompiledName("addEventListener323")>]
            member __.addEventListener_mousewheel(listener : System.Func<FunScript.TypeScript.MouseWheelEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"volumechange\", {1}, {?2}))"); CompiledName("addEventListener324")>]
            member __.addEventListener_volumechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"cellchange\", {1}, {?2}))"); CompiledName("addEventListener325")>]
            member __.addEventListener_cellchange(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"rowexit\", {1}, {?2}))"); CompiledName("addEventListener326")>]
            member __.addEventListener_rowexit(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"rowsinserted\", {1}, {?2}))"); CompiledName("addEventListener327")>]
            member __.addEventListener_rowsinserted(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"propertychange\", {1}, {?2}))"); CompiledName("addEventListener328")>]
            member __.addEventListener_propertychange(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragend\", {1}, {?2}))"); CompiledName("addEventListener329")>]
            member __.addEventListener_dragend(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforepaste\", {1}, {?2}))"); CompiledName("addEventListener330")>]
            member __.addEventListener_beforepaste(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragover\", {1}, {?2}))"); CompiledName("addEventListener331")>]
            member __.addEventListener_dragover(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseup\", {1}, {?2}))"); CompiledName("addEventListener332")>]
            member __.addEventListener_mouseup(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragstart\", {1}, {?2}))"); CompiledName("addEventListener333")>]
            member __.addEventListener_dragstart(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforecopy\", {1}, {?2}))"); CompiledName("addEventListener334")>]
            member __.addEventListener_beforecopy(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"drag\", {1}, {?2}))"); CompiledName("addEventListener335")>]
            member __.addEventListener_drag(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseover\", {1}, {?2}))"); CompiledName("addEventListener336")>]
            member __.addEventListener_mouseover(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pause\", {1}, {?2}))"); CompiledName("addEventListener337")>]
            member __.addEventListener_pause(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mousedown\", {1}, {?2}))"); CompiledName("addEventListener338")>]
            member __.addEventListener_mousedown(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"click\", {1}, {?2}))"); CompiledName("addEventListener339")>]
            member __.addEventListener_click(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"waiting\", {1}, {?2}))"); CompiledName("addEventListener340")>]
            member __.addEventListener_waiting(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"resizestart\", {1}, {?2}))"); CompiledName("addEventListener341")>]
            member __.addEventListener_resizestart(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"paste\", {1}, {?2}))"); CompiledName("addEventListener342")>]
            member __.addEventListener_paste(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"moveend\", {1}, {?2}))"); CompiledName("addEventListener343")>]
            member __.addEventListener_moveend(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"stalled\", {1}, {?2}))"); CompiledName("addEventListener344")>]
            member __.addEventListener_stalled(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mousemove\", {1}, {?2}))"); CompiledName("addEventListener345")>]
            member __.addEventListener_mousemove(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforeeditfocus\", {1}, {?2}))"); CompiledName("addEventListener346")>]
            member __.addEventListener_beforeeditfocus(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"ratechange\", {1}, {?2}))"); CompiledName("addEventListener347")>]
            member __.addEventListener_ratechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"progress\", {1}, {?2}))"); CompiledName("addEventListener348")>]
            member __.addEventListener_progress(listener : System.Func<FunScript.TypeScript.ProgressEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dblclick\", {1}, {?2}))"); CompiledName("addEventListener349")>]
            member __.addEventListener_dblclick(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"contextmenu\", {1}, {?2}))"); CompiledName("addEventListener350")>]
            member __.addEventListener_contextmenu(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"loadedmetadata\", {1}, {?2}))"); CompiledName("addEventListener351")>]
            member __.addEventListener_loadedmetadata(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"afterupdate\", {1}, {?2}))"); CompiledName("addEventListener352")>]
            member __.addEventListener_afterupdate(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"error\", {1}, {?2}))"); CompiledName("addEventListener353")>]
            member __.addEventListener_error(listener : System.Func<FunScript.TypeScript.ErrorEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"play\", {1}, {?2}))"); CompiledName("addEventListener354")>]
            member __.addEventListener_play(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"resizeend\", {1}, {?2}))"); CompiledName("addEventListener355")>]
            member __.addEventListener_resizeend(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"playing\", {1}, {?2}))"); CompiledName("addEventListener356")>]
            member __.addEventListener_playing(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"focusout\", {1}, {?2}))"); CompiledName("addEventListener357")>]
            member __.addEventListener_focusout(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"abort\", {1}, {?2}))"); CompiledName("addEventListener358")>]
            member __.addEventListener_abort(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dataavailable\", {1}, {?2}))"); CompiledName("addEventListener359")>]
            member __.addEventListener_dataavailable(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"readystatechange\", {1}, {?2}))"); CompiledName("addEventListener360")>]
            member __.addEventListener_readystatechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"keypress\", {1}, {?2}))"); CompiledName("addEventListener361")>]
            member __.addEventListener_keypress(listener : System.Func<FunScript.TypeScript.KeyboardEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"loadeddata\", {1}, {?2}))"); CompiledName("addEventListener362")>]
            member __.addEventListener_loadeddata(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforedeactivate\", {1}, {?2}))"); CompiledName("addEventListener363")>]
            member __.addEventListener_beforedeactivate(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"activate\", {1}, {?2}))"); CompiledName("addEventListener364")>]
            member __.addEventListener_activate(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"movestart\", {1}, {?2}))"); CompiledName("addEventListener365")>]
            member __.addEventListener_movestart(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"selectstart\", {1}, {?2}))"); CompiledName("addEventListener366")>]
            member __.addEventListener_selectstart(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"focus\", {1}, {?2}))"); CompiledName("addEventListener367")>]
            member __.addEventListener_focus(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"timeupdate\", {1}, {?2}))"); CompiledName("addEventListener368")>]
            member __.addEventListener_timeupdate(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"resize\", {1}, {?2}))"); CompiledName("addEventListener369")>]
            member __.addEventListener_resize(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"cut\", {1}, {?2}))"); CompiledName("addEventListener370")>]
            member __.addEventListener_cut(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"select\", {1}, {?2}))"); CompiledName("addEventListener371")>]
            member __.addEventListener_select(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"drop\", {1}, {?2}))"); CompiledName("addEventListener372")>]
            member __.addEventListener_drop(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"copy\", {1}, {?2}))"); CompiledName("addEventListener373")>]
            member __.addEventListener_copy(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"ended\", {1}, {?2}))"); CompiledName("addEventListener374")>]
            member __.addEventListener_ended(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"scroll\", {1}, {?2}))"); CompiledName("addEventListener375")>]
            member __.addEventListener_scroll(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"rowenter\", {1}, {?2}))"); CompiledName("addEventListener376")>]
            member __.addEventListener_rowenter(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"load\", {1}, {?2}))"); CompiledName("addEventListener377")>]
            member __.addEventListener_load(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"input\", {1}, {?2}))"); CompiledName("addEventListener378")>]
            member __.addEventListener_input(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mscontentzoom\", {1}, {?2}))"); CompiledName("addEventListener379")>]
            member __.addEventListener_mscontentzoom(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"cuechange\", {1}, {?2}))"); CompiledName("addEventListener380")>]
            member __.addEventListener_cuechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msmanipulationstatechanged\", {1}, {?2}))"); CompiledName("addEventListener381")>]
            member __.addEventListener_msmanipulationstatechanged(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"online\", {1}, {?2}))"); CompiledName("addEventListener382")>]
            member __.addEventListener_online(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"message\", {1}, {?2}))"); CompiledName("addEventListener383")>]
            member __.addEventListener_message(listener : System.Func<FunScript.TypeScript.MessageEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"afterprint\", {1}, {?2}))"); CompiledName("addEventListener384")>]
            member __.addEventListener_afterprint(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforeprint\", {1}, {?2}))"); CompiledName("addEventListener385")>]
            member __.addEventListener_beforeprint(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"offline\", {1}, {?2}))"); CompiledName("addEventListener386")>]
            member __.addEventListener_offline(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"unload\", {1}, {?2}))"); CompiledName("addEventListener387")>]
            member __.addEventListener_unload(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"hashchange\", {1}, {?2}))"); CompiledName("addEventListener388")>]
            member __.addEventListener_hashchange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforeunload\", {1}, {?2}))"); CompiledName("addEventListener389")>]
            member __.addEventListener_beforeunload(listener : System.Func<FunScript.TypeScript.BeforeUnloadEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"storage\", {1}, {?2}))"); CompiledName("addEventListener390")>]
            member __.addEventListener_storage(listener : System.Func<FunScript.TypeScript.StorageEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"popstate\", {1}, {?2}))"); CompiledName("addEventListener391")>]
            member __.addEventListener_popstate(listener : System.Func<FunScript.TypeScript.PopStateEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pageshow\", {1}, {?2}))"); CompiledName("addEventListener392")>]
            member __.addEventListener_pageshow(listener : System.Func<FunScript.TypeScript.PageTransitionEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pagehide\", {1}, {?2}))"); CompiledName("addEventListener393")>]
            member __.addEventListener_pagehide(listener : System.Func<FunScript.TypeScript.PageTransitionEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener({1}, {2}, {?3}))"); CompiledName("addEventListener394")>]
            member __.addEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener = {1})"); CompiledName("addEventListener394Aux")>]
            member __.``addEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_552 =


    type FunScript.TypeScript.HTMLButtonElement with 

            [<FunScript.JSEmitInline("({0}.value)"); CompiledName("value2")>]
            member __.value with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.status)"); CompiledName("status2")>]
            member __.status with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.form)"); CompiledName("form1")>]
            member __.form with get() : FunScript.TypeScript.HTMLFormElement = failwith "never" and set (v : FunScript.TypeScript.HTMLFormElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.name)"); CompiledName("name12")>]
            member __.name with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.type)"); CompiledName("_type7")>]
            member __._type with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.validationMessage)"); CompiledName("validationMessage")>]
            member __.validationMessage with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.formTarget)"); CompiledName("formTarget")>]
            member __.formTarget with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.willValidate)"); CompiledName("willValidate")>]
            member __.willValidate with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.formAction)"); CompiledName("formAction")>]
            member __.formAction with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.autofocus)"); CompiledName("autofocus")>]
            member __.autofocus with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.validity)"); CompiledName("validity")>]
            member __.validity with get() : FunScript.TypeScript.ValidityState = failwith "never" and set (v : FunScript.TypeScript.ValidityState) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.formNoValidate)"); CompiledName("formNoValidate")>]
            member __.formNoValidate with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.formEnctype)"); CompiledName("formEnctype")>]
            member __.formEnctype with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.formMethod)"); CompiledName("formMethod")>]
            member __.formMethod with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createTextRange())"); CompiledName("createTextRange1")>]
            member __.createTextRange() : FunScript.TypeScript.TextRange = failwith "never"
            [<FunScript.JSEmitInline("({0}.createTextRange = {1})"); CompiledName("createTextRange1Aux")>]
            member __.``createTextRange <-``(func : System.Func<FunScript.TypeScript.TextRange>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.checkValidity())"); CompiledName("checkValidity")>]
            member __.checkValidity() : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.checkValidity = {1})"); CompiledName("checkValidityAux")>]
            member __.``checkValidity <-``(func : System.Func<bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setCustomValidity({1}))"); CompiledName("setCustomValidity")>]
            member __.setCustomValidity(error : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setCustomValidity = {1})"); CompiledName("setCustomValidityAux")>]
            member __.``setCustomValidity <-``(func : System.Func<string, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_553 =


    type FunScript.TypeScript.HTMLCanvasElement with 

            [<FunScript.JSEmitInline("({0}.width)"); CompiledName("width4")>]
            member __.width with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.height)"); CompiledName("height3")>]
            member __.height with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getContext(\"2d\"))"); CompiledName("getContext")>]
            member __.getContext_2d() : FunScript.TypeScript.CanvasRenderingContext2D = failwith "never"
            [<FunScript.JSEmitInline("({0}.getContext(\"experimental-webgl\"))"); CompiledName("getContext1")>]
            member __.getContext_experimental_webgl() : FunScript.TypeScript.WebGLRenderingContext = failwith "never"
            [<FunScript.JSEmitInline("({0}.getContext({1}))"); CompiledName("getContext2")>]
            member __.getContext(contextId : string) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.getContext = {1})"); CompiledName("getContext2Aux")>]
            member __.``getContext <-``(func : System.Func<string, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getContext({1}, {2...}))"); CompiledName("getContext3")>]
            member __.getContextOverload2(contextId : string, [<System.ParamArray>] args : array<obj>) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.toDataURL({?1}))"); CompiledName("toDataURL")>]
            member __.toDataURL(?_type : string) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toDataURL = {1})"); CompiledName("toDataURLAux")>]
            member __.``toDataURL <-``(func : System.Func<string, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toDataURL({1}, {2...}))"); CompiledName("toDataURL1")>]
            member __.toDataURL(_type : string, [<System.ParamArray>] args : array<obj>) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.msToBlob())"); CompiledName("msToBlob")>]
            member __.msToBlob() : FunScript.TypeScript.Blob = failwith "never"
            [<FunScript.JSEmitInline("({0}.msToBlob = {1})"); CompiledName("msToBlobAux")>]
            member __.``msToBlob <-``(func : System.Func<FunScript.TypeScript.Blob>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_554 =


    type FunScript.TypeScript.HTMLCollection with 

            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length16")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.item({?1}, {?2}))"); CompiledName("item10")>]
            member __.item(?nameOrIndex : obj, ?optionalIndex : obj) : FunScript.TypeScript.Element = failwith "never"
            [<FunScript.JSEmitInline("({0}.item = {1})"); CompiledName("item10Aux")>]
            member __.``item <-``(func : System.Func<obj, obj, FunScript.TypeScript.Element>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.namedItem({1}))"); CompiledName("namedItem1")>]
            member __.namedItem(name : string) : FunScript.TypeScript.Element = failwith "never"
            [<FunScript.JSEmitInline("({0}.namedItem = {1})"); CompiledName("namedItem1Aux")>]
            member __.``namedItem <-``(func : System.Func<string, FunScript.TypeScript.Element>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}[{1}])"); CompiledName("Item13")>]
            member __.Item with get(i : int) : FunScript.TypeScript.Element = failwith "never" and set (i : int) (v : FunScript.TypeScript.Element) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_555 =


    type FunScript.TypeScript.HTMLDDElement with 

            [<FunScript.JSEmitInline("({0}.noWrap)"); CompiledName("noWrap1")>]
            member __.noWrap with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_556 =


    type FunScript.TypeScript.HTMLDTElement with 

            [<FunScript.JSEmitInline("({0}.noWrap)"); CompiledName("noWrap2")>]
            member __.noWrap with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_557 =


    type FunScript.TypeScript.HTMLDataListElement with 

            [<FunScript.JSEmitInline("({0}.options)"); CompiledName("options")>]
            member __.options with get() : FunScript.TypeScript.HTMLCollection = failwith "never" and set (v : FunScript.TypeScript.HTMLCollection) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_558 =


    type FunScript.TypeScript.HTMLDivElement with 

            [<FunScript.JSEmitInline("({0}.align)"); CompiledName("align1")>]
            member __.align with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.noWrap)"); CompiledName("noWrap3")>]
            member __.noWrap with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_559 =


    type FunScript.TypeScript.HTMLElement with 

            [<FunScript.JSEmitInline("({0}.hidden)"); CompiledName("hidden1")>]
            member __.hidden with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.readyState)"); CompiledName("readyState1")>]
            member __.readyState with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmouseleave)"); CompiledName("onmouseleave1")>]
            member __.onmouseleave with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onbeforecut)"); CompiledName("onbeforecut")>]
            member __.onbeforecut with get() : System.Func<FunScript.TypeScript.DragEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.DragEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onkeydown)"); CompiledName("onkeydown2")>]
            member __.onkeydown with get() : System.Func<FunScript.TypeScript.KeyboardEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.KeyboardEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmove)"); CompiledName("onmove")>]
            member __.onmove with get() : System.Func<FunScript.TypeScript.MSEventObj, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MSEventObj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onkeyup)"); CompiledName("onkeyup2")>]
            member __.onkeyup with get() : System.Func<FunScript.TypeScript.KeyboardEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.KeyboardEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onreset)"); CompiledName("onreset2")>]
            member __.onreset with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onhelp)"); CompiledName("onhelp2")>]
            member __.onhelp with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ondragleave)"); CompiledName("ondragleave2")>]
            member __.ondragleave with get() : System.Func<FunScript.TypeScript.DragEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.DragEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.className)"); CompiledName("className")>]
            member __.className with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onfocusin)"); CompiledName("onfocusin2")>]
            member __.onfocusin with get() : System.Func<FunScript.TypeScript.FocusEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.FocusEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onseeked)"); CompiledName("onseeked2")>]
            member __.onseeked with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.recordNumber)"); CompiledName("recordNumber")>]
            member __.recordNumber with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.title)"); CompiledName("title1")>]
            member __.title with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.parentTextEdit)"); CompiledName("parentTextEdit")>]
            member __.parentTextEdit with get() : FunScript.TypeScript.Element = failwith "never" and set (v : FunScript.TypeScript.Element) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.outerHTML)"); CompiledName("outerHTML")>]
            member __.outerHTML with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ondurationchange)"); CompiledName("ondurationchange2")>]
            member __.ondurationchange with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.offsetHeight)"); CompiledName("offsetHeight")>]
            member __.offsetHeight with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.all)"); CompiledName("all1")>]
            member __.all with get() : FunScript.TypeScript.HTMLCollection = failwith "never" and set (v : FunScript.TypeScript.HTMLCollection) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onblur)"); CompiledName("onblur3")>]
            member __.onblur with get() : System.Func<FunScript.TypeScript.FocusEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.FocusEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.dir)"); CompiledName("dir3")>]
            member __.dir with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onemptied)"); CompiledName("onemptied2")>]
            member __.onemptied with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onseeking)"); CompiledName("onseeking2")>]
            member __.onseeking with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.oncanplay)"); CompiledName("oncanplay2")>]
            member __.oncanplay with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ondeactivate)"); CompiledName("ondeactivate1")>]
            member __.ondeactivate with get() : System.Func<FunScript.TypeScript.UIEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.UIEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ondatasetchanged)"); CompiledName("ondatasetchanged1")>]
            member __.ondatasetchanged with get() : System.Func<FunScript.TypeScript.MSEventObj, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MSEventObj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onrowsdelete)"); CompiledName("onrowsdelete1")>]
            member __.onrowsdelete with get() : System.Func<FunScript.TypeScript.MSEventObj, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MSEventObj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.sourceIndex)"); CompiledName("sourceIndex")>]
            member __.sourceIndex with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onloadstart)"); CompiledName("onloadstart2")>]
            member __.onloadstart with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onlosecapture)"); CompiledName("onlosecapture")>]
            member __.onlosecapture with get() : System.Func<FunScript.TypeScript.MSEventObj, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MSEventObj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ondragenter)"); CompiledName("ondragenter2")>]
            member __.ondragenter with get() : System.Func<FunScript.TypeScript.DragEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.DragEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.oncontrolselect)"); CompiledName("oncontrolselect1")>]
            member __.oncontrolselect with get() : System.Func<FunScript.TypeScript.MSEventObj, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MSEventObj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onsubmit)"); CompiledName("onsubmit2")>]
            member __.onsubmit with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.behaviorUrns)"); CompiledName("behaviorUrns")>]
            member __.behaviorUrns with get() : FunScript.TypeScript.MSBehaviorUrnsCollection = failwith "never" and set (v : FunScript.TypeScript.MSBehaviorUrnsCollection) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.scopeName)"); CompiledName("scopeName")>]
            member __.scopeName with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onchange)"); CompiledName("onchange3")>]
            member __.onchange with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.id)"); CompiledName("id2")>]
            member __.id with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onlayoutcomplete)"); CompiledName("onlayoutcomplete")>]
            member __.onlayoutcomplete with get() : System.Func<FunScript.TypeScript.MSEventObj, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MSEventObj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniqueID)"); CompiledName("uniqueID1")>]
            member __.uniqueID with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onbeforeactivate)"); CompiledName("onbeforeactivate1")>]
            member __.onbeforeactivate with get() : System.Func<FunScript.TypeScript.UIEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.UIEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.oncanplaythrough)"); CompiledName("oncanplaythrough2")>]
            member __.oncanplaythrough with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onbeforeupdate)"); CompiledName("onbeforeupdate1")>]
            member __.onbeforeupdate with get() : System.Func<FunScript.TypeScript.MSEventObj, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MSEventObj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onfilterchange)"); CompiledName("onfilterchange")>]
            member __.onfilterchange with get() : System.Func<FunScript.TypeScript.MSEventObj, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MSEventObj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.offsetParent)"); CompiledName("offsetParent")>]
            member __.offsetParent with get() : FunScript.TypeScript.Element = failwith "never" and set (v : FunScript.TypeScript.Element) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ondatasetcomplete)"); CompiledName("ondatasetcomplete1")>]
            member __.ondatasetcomplete with get() : System.Func<FunScript.TypeScript.MSEventObj, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MSEventObj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onsuspend)"); CompiledName("onsuspend2")>]
            member __.onsuspend with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmouseenter)"); CompiledName("onmouseenter1")>]
            member __.onmouseenter with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.innerText)"); CompiledName("innerText")>]
            member __.innerText with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onerrorupdate)"); CompiledName("onerrorupdate1")>]
            member __.onerrorupdate with get() : System.Func<FunScript.TypeScript.MSEventObj, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MSEventObj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmouseout)"); CompiledName("onmouseout2")>]
            member __.onmouseout with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.parentElement)"); CompiledName("parentElement")>]
            member __.parentElement with get() : FunScript.TypeScript.HTMLElement = failwith "never" and set (v : FunScript.TypeScript.HTMLElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmousewheel)"); CompiledName("onmousewheel2")>]
            member __.onmousewheel with get() : System.Func<FunScript.TypeScript.MouseWheelEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseWheelEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onvolumechange)"); CompiledName("onvolumechange2")>]
            member __.onvolumechange with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.oncellchange)"); CompiledName("oncellchange1")>]
            member __.oncellchange with get() : System.Func<FunScript.TypeScript.MSEventObj, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MSEventObj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onrowexit)"); CompiledName("onrowexit1")>]
            member __.onrowexit with get() : System.Func<FunScript.TypeScript.MSEventObj, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MSEventObj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onrowsinserted)"); CompiledName("onrowsinserted1")>]
            member __.onrowsinserted with get() : System.Func<FunScript.TypeScript.MSEventObj, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MSEventObj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onpropertychange)"); CompiledName("onpropertychange1")>]
            member __.onpropertychange with get() : System.Func<FunScript.TypeScript.MSEventObj, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MSEventObj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.filters)"); CompiledName("filters")>]
            member __.filters with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.children)"); CompiledName("children")>]
            member __.children with get() : FunScript.TypeScript.HTMLCollection = failwith "never" and set (v : FunScript.TypeScript.HTMLCollection) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ondragend)"); CompiledName("ondragend2")>]
            member __.ondragend with get() : System.Func<FunScript.TypeScript.DragEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.DragEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onbeforepaste)"); CompiledName("onbeforepaste")>]
            member __.onbeforepaste with get() : System.Func<FunScript.TypeScript.DragEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.DragEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ondragover)"); CompiledName("ondragover2")>]
            member __.ondragover with get() : System.Func<FunScript.TypeScript.DragEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.DragEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.offsetTop)"); CompiledName("offsetTop")>]
            member __.offsetTop with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmouseup)"); CompiledName("onmouseup2")>]
            member __.onmouseup with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ondragstart)"); CompiledName("ondragstart2")>]
            member __.ondragstart with get() : System.Func<FunScript.TypeScript.DragEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.DragEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onbeforecopy)"); CompiledName("onbeforecopy")>]
            member __.onbeforecopy with get() : System.Func<FunScript.TypeScript.DragEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.DragEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ondrag)"); CompiledName("ondrag2")>]
            member __.ondrag with get() : System.Func<FunScript.TypeScript.DragEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.DragEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.innerHTML)"); CompiledName("innerHTML")>]
            member __.innerHTML with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmouseover)"); CompiledName("onmouseover2")>]
            member __.onmouseover with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.lang)"); CompiledName("lang")>]
            member __.lang with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniqueNumber)"); CompiledName("uniqueNumber")>]
            member __.uniqueNumber with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onpause)"); CompiledName("onpause2")>]
            member __.onpause with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.tagUrn)"); CompiledName("tagUrn")>]
            member __.tagUrn with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmousedown)"); CompiledName("onmousedown2")>]
            member __.onmousedown with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onclick)"); CompiledName("onclick2")>]
            member __.onclick with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onwaiting)"); CompiledName("onwaiting2")>]
            member __.onwaiting with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onresizestart)"); CompiledName("onresizestart")>]
            member __.onresizestart with get() : System.Func<FunScript.TypeScript.MSEventObj, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MSEventObj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.offsetLeft)"); CompiledName("offsetLeft")>]
            member __.offsetLeft with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.isTextEdit)"); CompiledName("isTextEdit")>]
            member __.isTextEdit with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.isDisabled)"); CompiledName("isDisabled")>]
            member __.isDisabled with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onpaste)"); CompiledName("onpaste")>]
            member __.onpaste with get() : System.Func<FunScript.TypeScript.DragEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.DragEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.canHaveHTML)"); CompiledName("canHaveHTML")>]
            member __.canHaveHTML with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmoveend)"); CompiledName("onmoveend")>]
            member __.onmoveend with get() : System.Func<FunScript.TypeScript.MSEventObj, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MSEventObj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.language)"); CompiledName("language1")>]
            member __.language with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onstalled)"); CompiledName("onstalled2")>]
            member __.onstalled with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmousemove)"); CompiledName("onmousemove2")>]
            member __.onmousemove with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.style)"); CompiledName("style4")>]
            member __.style with get() : FunScript.TypeScript.MSStyleCSSProperties = failwith "never" and set (v : FunScript.TypeScript.MSStyleCSSProperties) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.isContentEditable)"); CompiledName("isContentEditable")>]
            member __.isContentEditable with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onbeforeeditfocus)"); CompiledName("onbeforeeditfocus1")>]
            member __.onbeforeeditfocus with get() : System.Func<FunScript.TypeScript.MSEventObj, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MSEventObj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onratechange)"); CompiledName("onratechange2")>]
            member __.onratechange with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.contentEditable)"); CompiledName("contentEditable")>]
            member __.contentEditable with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.tabIndex)"); CompiledName("tabIndex")>]
            member __.tabIndex with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.document)"); CompiledName("document1")>]
            member __.document with get() : FunScript.TypeScript.Document = failwith "never" and set (v : FunScript.TypeScript.Document) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onprogress)"); CompiledName("onprogress4")>]
            member __.onprogress with get() : System.Func<FunScript.TypeScript.ProgressEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.ProgressEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ondblclick)"); CompiledName("ondblclick2")>]
            member __.ondblclick with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.oncontextmenu)"); CompiledName("oncontextmenu2")>]
            member __.oncontextmenu with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onloadedmetadata)"); CompiledName("onloadedmetadata2")>]
            member __.onloadedmetadata with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onafterupdate)"); CompiledName("onafterupdate1")>]
            member __.onafterupdate with get() : System.Func<FunScript.TypeScript.MSEventObj, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MSEventObj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onerror)"); CompiledName("onerror6")>]
            member __.onerror with get() : System.Func<FunScript.TypeScript.ErrorEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.ErrorEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onplay)"); CompiledName("onplay2")>]
            member __.onplay with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onresizeend)"); CompiledName("onresizeend")>]
            member __.onresizeend with get() : System.Func<FunScript.TypeScript.MSEventObj, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MSEventObj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onplaying)"); CompiledName("onplaying2")>]
            member __.onplaying with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.isMultiLine)"); CompiledName("isMultiLine")>]
            member __.isMultiLine with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onfocusout)"); CompiledName("onfocusout2")>]
            member __.onfocusout with get() : System.Func<FunScript.TypeScript.FocusEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.FocusEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onabort)"); CompiledName("onabort3")>]
            member __.onabort with get() : System.Func<FunScript.TypeScript.UIEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.UIEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ondataavailable)"); CompiledName("ondataavailable1")>]
            member __.ondataavailable with get() : System.Func<FunScript.TypeScript.MSEventObj, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MSEventObj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.hideFocus)"); CompiledName("hideFocus")>]
            member __.hideFocus with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onreadystatechange)"); CompiledName("onreadystatechange2")>]
            member __.onreadystatechange with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onkeypress)"); CompiledName("onkeypress2")>]
            member __.onkeypress with get() : System.Func<FunScript.TypeScript.KeyboardEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.KeyboardEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onloadeddata)"); CompiledName("onloadeddata2")>]
            member __.onloadeddata with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onbeforedeactivate)"); CompiledName("onbeforedeactivate1")>]
            member __.onbeforedeactivate with get() : System.Func<FunScript.TypeScript.UIEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.UIEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.outerText)"); CompiledName("outerText")>]
            member __.outerText with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.disabled)"); CompiledName("disabled")>]
            member __.disabled with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onactivate)"); CompiledName("onactivate1")>]
            member __.onactivate with get() : System.Func<FunScript.TypeScript.UIEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.UIEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.accessKey)"); CompiledName("accessKey")>]
            member __.accessKey with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmovestart)"); CompiledName("onmovestart")>]
            member __.onmovestart with get() : System.Func<FunScript.TypeScript.MSEventObj, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MSEventObj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onselectstart)"); CompiledName("onselectstart1")>]
            member __.onselectstart with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onfocus)"); CompiledName("onfocus3")>]
            member __.onfocus with get() : System.Func<FunScript.TypeScript.FocusEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.FocusEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ontimeupdate)"); CompiledName("ontimeupdate2")>]
            member __.ontimeupdate with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onresize)"); CompiledName("onresize2")>]
            member __.onresize with get() : System.Func<FunScript.TypeScript.UIEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.UIEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.oncut)"); CompiledName("oncut")>]
            member __.oncut with get() : System.Func<FunScript.TypeScript.DragEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.DragEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onselect)"); CompiledName("onselect2")>]
            member __.onselect with get() : System.Func<FunScript.TypeScript.UIEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.UIEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ondrop)"); CompiledName("ondrop2")>]
            member __.ondrop with get() : System.Func<FunScript.TypeScript.DragEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.DragEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.offsetWidth)"); CompiledName("offsetWidth")>]
            member __.offsetWidth with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.oncopy)"); CompiledName("oncopy")>]
            member __.oncopy with get() : System.Func<FunScript.TypeScript.DragEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.DragEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onended)"); CompiledName("onended2")>]
            member __.onended with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onscroll)"); CompiledName("onscroll2")>]
            member __.onscroll with get() : System.Func<FunScript.TypeScript.UIEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.UIEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onrowenter)"); CompiledName("onrowenter1")>]
            member __.onrowenter with get() : System.Func<FunScript.TypeScript.MSEventObj, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MSEventObj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onload)"); CompiledName("onload3")>]
            member __.onload with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.canHaveChildren)"); CompiledName("canHaveChildren")>]
            member __.canHaveChildren with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.oninput)"); CompiledName("oninput2")>]
            member __.oninput with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmscontentzoom)"); CompiledName("onmscontentzoom1")>]
            member __.onmscontentzoom with get() : System.Func<FunScript.TypeScript.MSEventObj, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MSEventObj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.oncuechange)"); CompiledName("oncuechange")>]
            member __.oncuechange with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.spellcheck)"); CompiledName("spellcheck")>]
            member __.spellcheck with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.classList)"); CompiledName("classList")>]
            member __.classList with get() : FunScript.TypeScript.DOMTokenList = failwith "never" and set (v : FunScript.TypeScript.DOMTokenList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmsmanipulationstatechanged)"); CompiledName("onmsmanipulationstatechanged1")>]
            member __.onmsmanipulationstatechanged with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.draggable)"); CompiledName("draggable")>]
            member __.draggable with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.dataset)"); CompiledName("dataset")>]
            member __.dataset with get() : FunScript.TypeScript.DOMStringMap = failwith "never" and set (v : FunScript.TypeScript.DOMStringMap) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.dragDrop())"); CompiledName("dragDrop")>]
            member __.dragDrop() : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.dragDrop = {1})"); CompiledName("dragDropAux")>]
            member __.``dragDrop <-``(func : System.Func<bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.scrollIntoView({?1}))"); CompiledName("scrollIntoView1")>]
            member __.scrollIntoView(?top : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.scrollIntoView = {1})"); CompiledName("scrollIntoView1Aux")>]
            member __.``scrollIntoView <-``(func : System.Func<bool, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addFilter({1}))"); CompiledName("addFilter")>]
            member __.addFilter(filter : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addFilter = {1})"); CompiledName("addFilterAux")>]
            member __.``addFilter <-``(func : System.Func<obj, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setCapture({?1}))"); CompiledName("setCapture")>]
            member __.setCapture(?containerCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setCapture = {1})"); CompiledName("setCaptureAux")>]
            member __.``setCapture <-``(func : System.Func<bool, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.focus())"); CompiledName("focus2")>]
            member __.focus() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.focus = {1})"); CompiledName("focus2Aux")>]
            member __.``focus <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getAdjacentText({1}))"); CompiledName("getAdjacentText")>]
            member __.getAdjacentText(_where : string) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.getAdjacentText = {1})"); CompiledName("getAdjacentTextAux")>]
            member __.``getAdjacentText <-``(func : System.Func<string, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.insertAdjacentText({1}, {2}))"); CompiledName("insertAdjacentText")>]
            member __.insertAdjacentText(_where : string, text : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.insertAdjacentText = {1})"); CompiledName("insertAdjacentTextAux")>]
            member __.``insertAdjacentText <-``(func : System.Func<string, string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByClassName({1}))"); CompiledName("getElementsByClassName1")>]
            member __.getElementsByClassName(classNames : string) : FunScript.TypeScript.NodeList = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementsByClassName = {1})"); CompiledName("getElementsByClassName1Aux")>]
            member __.``getElementsByClassName <-``(func : System.Func<string, FunScript.TypeScript.NodeList>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setActive())"); CompiledName("setActive")>]
            member __.setActive() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setActive = {1})"); CompiledName("setActiveAux")>]
            member __.``setActive <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeFilter({1}))"); CompiledName("removeFilter")>]
            member __.removeFilter(filter : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeFilter = {1})"); CompiledName("removeFilterAux")>]
            member __.``removeFilter <-``(func : System.Func<obj, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.blur())"); CompiledName("blur1")>]
            member __.blur() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.blur = {1})"); CompiledName("blur1Aux")>]
            member __.``blur <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clearAttributes())"); CompiledName("clearAttributes")>]
            member __.clearAttributes() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clearAttributes = {1})"); CompiledName("clearAttributesAux")>]
            member __.``clearAttributes <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.releaseCapture())"); CompiledName("releaseCapture1")>]
            member __.releaseCapture() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.releaseCapture = {1})"); CompiledName("releaseCapture1Aux")>]
            member __.``releaseCapture <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createControlRange())"); CompiledName("createControlRange")>]
            member __.createControlRange() : FunScript.TypeScript.ControlRangeCollection = failwith "never"
            [<FunScript.JSEmitInline("({0}.createControlRange = {1})"); CompiledName("createControlRangeAux")>]
            member __.``createControlRange <-``(func : System.Func<FunScript.TypeScript.ControlRangeCollection>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeBehavior({1}))"); CompiledName("removeBehavior")>]
            member __.removeBehavior(cookie : float) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeBehavior = {1})"); CompiledName("removeBehaviorAux")>]
            member __.``removeBehavior <-``(func : System.Func<float, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.contains({1}))"); CompiledName("contains2")>]
            member __.contains(child : FunScript.TypeScript.HTMLElement) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.contains = {1})"); CompiledName("contains2Aux")>]
            member __.``contains <-``(func : System.Func<FunScript.TypeScript.HTMLElement, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.click())"); CompiledName("click")>]
            member __.click() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.click = {1})"); CompiledName("clickAux")>]
            member __.``click <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.insertAdjacentElement({1}, {2}))"); CompiledName("insertAdjacentElement")>]
            member __.insertAdjacentElement(position : string, insertedElement : FunScript.TypeScript.Element) : FunScript.TypeScript.Element = failwith "never"
            [<FunScript.JSEmitInline("({0}.insertAdjacentElement = {1})"); CompiledName("insertAdjacentElementAux")>]
            member __.``insertAdjacentElement <-``(func : System.Func<string, FunScript.TypeScript.Element, FunScript.TypeScript.Element>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.mergeAttributes({1}, {?2}))"); CompiledName("mergeAttributes")>]
            member __.mergeAttributes(source : FunScript.TypeScript.HTMLElement, ?preserveIdentity : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.mergeAttributes = {1})"); CompiledName("mergeAttributesAux")>]
            member __.``mergeAttributes <-``(func : System.Func<FunScript.TypeScript.HTMLElement, bool, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.replaceAdjacentText({1}, {2}))"); CompiledName("replaceAdjacentText")>]
            member __.replaceAdjacentText(_where : string, newText : string) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.replaceAdjacentText = {1})"); CompiledName("replaceAdjacentTextAux")>]
            member __.``replaceAdjacentText <-``(func : System.Func<string, string, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.applyElement({1}, {?2}))"); CompiledName("applyElement")>]
            member __.applyElement(apply : FunScript.TypeScript.Element, ?_where : string) : FunScript.TypeScript.Element = failwith "never"
            [<FunScript.JSEmitInline("({0}.applyElement = {1})"); CompiledName("applyElementAux")>]
            member __.``applyElement <-``(func : System.Func<FunScript.TypeScript.Element, string, FunScript.TypeScript.Element>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addBehavior({1}, {?2}))"); CompiledName("addBehavior")>]
            member __.addBehavior(bstrUrl : string, ?factory : obj) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.addBehavior = {1})"); CompiledName("addBehaviorAux")>]
            member __.``addBehavior <-``(func : System.Func<string, obj, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.insertAdjacentHTML({1}, {2}))"); CompiledName("insertAdjacentHTML")>]
            member __.insertAdjacentHTML(_where : string, html : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.insertAdjacentHTML = {1})"); CompiledName("insertAdjacentHTMLAux")>]
            member __.``insertAdjacentHTML <-``(func : System.Func<string, string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msGetInputContext())"); CompiledName("msGetInputContext")>]
            member __.msGetInputContext() : FunScript.TypeScript.MSInputMethodContext = failwith "never"
            [<FunScript.JSEmitInline("({0}.msGetInputContext = {1})"); CompiledName("msGetInputContextAux")>]
            member __.``msGetInputContext <-``(func : System.Func<FunScript.TypeScript.MSInputMethodContext>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerenter\", {1}, {?2}))"); CompiledName("addEventListener395")>]
            member __.addEventListener_pointerenter(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerout\", {1}, {?2}))"); CompiledName("addEventListener396")>]
            member __.addEventListener_pointerout(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerdown\", {1}, {?2}))"); CompiledName("addEventListener397")>]
            member __.addEventListener_pointerdown(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerup\", {1}, {?2}))"); CompiledName("addEventListener398")>]
            member __.addEventListener_pointerup(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointercancel\", {1}, {?2}))"); CompiledName("addEventListener399")>]
            member __.addEventListener_pointercancel(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerover\", {1}, {?2}))"); CompiledName("addEventListener400")>]
            member __.addEventListener_pointerover(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointermove\", {1}, {?2}))"); CompiledName("addEventListener401")>]
            member __.addEventListener_pointermove(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerleave\", {1}, {?2}))"); CompiledName("addEventListener402")>]
            member __.addEventListener_pointerleave(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerdown\", {1}, {?2}))"); CompiledName("addEventListener403")>]
            member __.addEventListener_mspointerdown(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgotpointercapture\", {1}, {?2}))"); CompiledName("addEventListener404")>]
            member __.addEventListener_msgotpointercapture(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturedoubletap\", {1}, {?2}))"); CompiledName("addEventListener405")>]
            member __.addEventListener_msgesturedoubletap(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerhover\", {1}, {?2}))"); CompiledName("addEventListener406")>]
            member __.addEventListener_mspointerhover(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturehold\", {1}, {?2}))"); CompiledName("addEventListener407")>]
            member __.addEventListener_msgesturehold(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointermove\", {1}, {?2}))"); CompiledName("addEventListener408")>]
            member __.addEventListener_mspointermove(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturechange\", {1}, {?2}))"); CompiledName("addEventListener409")>]
            member __.addEventListener_msgesturechange(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturestart\", {1}, {?2}))"); CompiledName("addEventListener410")>]
            member __.addEventListener_msgesturestart(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointercancel\", {1}, {?2}))"); CompiledName("addEventListener411")>]
            member __.addEventListener_mspointercancel(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgestureend\", {1}, {?2}))"); CompiledName("addEventListener412")>]
            member __.addEventListener_msgestureend(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturetap\", {1}, {?2}))"); CompiledName("addEventListener413")>]
            member __.addEventListener_msgesturetap(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerout\", {1}, {?2}))"); CompiledName("addEventListener414")>]
            member __.addEventListener_mspointerout(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msinertiastart\", {1}, {?2}))"); CompiledName("addEventListener415")>]
            member __.addEventListener_msinertiastart(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mslostpointercapture\", {1}, {?2}))"); CompiledName("addEventListener416")>]
            member __.addEventListener_mslostpointercapture(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerover\", {1}, {?2}))"); CompiledName("addEventListener417")>]
            member __.addEventListener_mspointerover(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerup\", {1}, {?2}))"); CompiledName("addEventListener418")>]
            member __.addEventListener_mspointerup(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"lostpointercapture\", {1}, {?2}))"); CompiledName("addEventListener419")>]
            member __.addEventListener_lostpointercapture(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerenter\", {1}, {?2}))"); CompiledName("addEventListener420")>]
            member __.addEventListener_mspointerenter(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"gotpointercapture\", {1}, {?2}))"); CompiledName("addEventListener421")>]
            member __.addEventListener_gotpointercapture(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerleave\", {1}, {?2}))"); CompiledName("addEventListener422")>]
            member __.addEventListener_mspointerleave(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseleave\", {1}, {?2}))"); CompiledName("addEventListener423")>]
            member __.addEventListener_mouseleave(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforecut\", {1}, {?2}))"); CompiledName("addEventListener424")>]
            member __.addEventListener_beforecut(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"keydown\", {1}, {?2}))"); CompiledName("addEventListener425")>]
            member __.addEventListener_keydown(listener : System.Func<FunScript.TypeScript.KeyboardEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"move\", {1}, {?2}))"); CompiledName("addEventListener426")>]
            member __.addEventListener_move(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"keyup\", {1}, {?2}))"); CompiledName("addEventListener427")>]
            member __.addEventListener_keyup(listener : System.Func<FunScript.TypeScript.KeyboardEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"reset\", {1}, {?2}))"); CompiledName("addEventListener428")>]
            member __.addEventListener_reset(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"help\", {1}, {?2}))"); CompiledName("addEventListener429")>]
            member __.addEventListener_help(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragleave\", {1}, {?2}))"); CompiledName("addEventListener430")>]
            member __.addEventListener_dragleave(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"focusin\", {1}, {?2}))"); CompiledName("addEventListener431")>]
            member __.addEventListener_focusin(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"seeked\", {1}, {?2}))"); CompiledName("addEventListener432")>]
            member __.addEventListener_seeked(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"durationchange\", {1}, {?2}))"); CompiledName("addEventListener433")>]
            member __.addEventListener_durationchange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"blur\", {1}, {?2}))"); CompiledName("addEventListener434")>]
            member __.addEventListener_blur(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"emptied\", {1}, {?2}))"); CompiledName("addEventListener435")>]
            member __.addEventListener_emptied(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"seeking\", {1}, {?2}))"); CompiledName("addEventListener436")>]
            member __.addEventListener_seeking(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"canplay\", {1}, {?2}))"); CompiledName("addEventListener437")>]
            member __.addEventListener_canplay(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"deactivate\", {1}, {?2}))"); CompiledName("addEventListener438")>]
            member __.addEventListener_deactivate(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"datasetchanged\", {1}, {?2}))"); CompiledName("addEventListener439")>]
            member __.addEventListener_datasetchanged(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"rowsdelete\", {1}, {?2}))"); CompiledName("addEventListener440")>]
            member __.addEventListener_rowsdelete(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"loadstart\", {1}, {?2}))"); CompiledName("addEventListener441")>]
            member __.addEventListener_loadstart(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"losecapture\", {1}, {?2}))"); CompiledName("addEventListener442")>]
            member __.addEventListener_losecapture(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragenter\", {1}, {?2}))"); CompiledName("addEventListener443")>]
            member __.addEventListener_dragenter(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"controlselect\", {1}, {?2}))"); CompiledName("addEventListener444")>]
            member __.addEventListener_controlselect(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"submit\", {1}, {?2}))"); CompiledName("addEventListener445")>]
            member __.addEventListener_submit(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"change\", {1}, {?2}))"); CompiledName("addEventListener446")>]
            member __.addEventListener_change(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"layoutcomplete\", {1}, {?2}))"); CompiledName("addEventListener447")>]
            member __.addEventListener_layoutcomplete(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforeactivate\", {1}, {?2}))"); CompiledName("addEventListener448")>]
            member __.addEventListener_beforeactivate(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"canplaythrough\", {1}, {?2}))"); CompiledName("addEventListener449")>]
            member __.addEventListener_canplaythrough(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforeupdate\", {1}, {?2}))"); CompiledName("addEventListener450")>]
            member __.addEventListener_beforeupdate(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"filterchange\", {1}, {?2}))"); CompiledName("addEventListener451")>]
            member __.addEventListener_filterchange(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"datasetcomplete\", {1}, {?2}))"); CompiledName("addEventListener452")>]
            member __.addEventListener_datasetcomplete(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"suspend\", {1}, {?2}))"); CompiledName("addEventListener453")>]
            member __.addEventListener_suspend(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseenter\", {1}, {?2}))"); CompiledName("addEventListener454")>]
            member __.addEventListener_mouseenter(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"errorupdate\", {1}, {?2}))"); CompiledName("addEventListener455")>]
            member __.addEventListener_errorupdate(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseout\", {1}, {?2}))"); CompiledName("addEventListener456")>]
            member __.addEventListener_mouseout(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mousewheel\", {1}, {?2}))"); CompiledName("addEventListener457")>]
            member __.addEventListener_mousewheel(listener : System.Func<FunScript.TypeScript.MouseWheelEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"volumechange\", {1}, {?2}))"); CompiledName("addEventListener458")>]
            member __.addEventListener_volumechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"cellchange\", {1}, {?2}))"); CompiledName("addEventListener459")>]
            member __.addEventListener_cellchange(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"rowexit\", {1}, {?2}))"); CompiledName("addEventListener460")>]
            member __.addEventListener_rowexit(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"rowsinserted\", {1}, {?2}))"); CompiledName("addEventListener461")>]
            member __.addEventListener_rowsinserted(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"propertychange\", {1}, {?2}))"); CompiledName("addEventListener462")>]
            member __.addEventListener_propertychange(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragend\", {1}, {?2}))"); CompiledName("addEventListener463")>]
            member __.addEventListener_dragend(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforepaste\", {1}, {?2}))"); CompiledName("addEventListener464")>]
            member __.addEventListener_beforepaste(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragover\", {1}, {?2}))"); CompiledName("addEventListener465")>]
            member __.addEventListener_dragover(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseup\", {1}, {?2}))"); CompiledName("addEventListener466")>]
            member __.addEventListener_mouseup(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragstart\", {1}, {?2}))"); CompiledName("addEventListener467")>]
            member __.addEventListener_dragstart(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforecopy\", {1}, {?2}))"); CompiledName("addEventListener468")>]
            member __.addEventListener_beforecopy(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"drag\", {1}, {?2}))"); CompiledName("addEventListener469")>]
            member __.addEventListener_drag(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseover\", {1}, {?2}))"); CompiledName("addEventListener470")>]
            member __.addEventListener_mouseover(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pause\", {1}, {?2}))"); CompiledName("addEventListener471")>]
            member __.addEventListener_pause(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mousedown\", {1}, {?2}))"); CompiledName("addEventListener472")>]
            member __.addEventListener_mousedown(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"click\", {1}, {?2}))"); CompiledName("addEventListener473")>]
            member __.addEventListener_click(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"waiting\", {1}, {?2}))"); CompiledName("addEventListener474")>]
            member __.addEventListener_waiting(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"resizestart\", {1}, {?2}))"); CompiledName("addEventListener475")>]
            member __.addEventListener_resizestart(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"paste\", {1}, {?2}))"); CompiledName("addEventListener476")>]
            member __.addEventListener_paste(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"moveend\", {1}, {?2}))"); CompiledName("addEventListener477")>]
            member __.addEventListener_moveend(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"stalled\", {1}, {?2}))"); CompiledName("addEventListener478")>]
            member __.addEventListener_stalled(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mousemove\", {1}, {?2}))"); CompiledName("addEventListener479")>]
            member __.addEventListener_mousemove(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforeeditfocus\", {1}, {?2}))"); CompiledName("addEventListener480")>]
            member __.addEventListener_beforeeditfocus(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"ratechange\", {1}, {?2}))"); CompiledName("addEventListener481")>]
            member __.addEventListener_ratechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"progress\", {1}, {?2}))"); CompiledName("addEventListener482")>]
            member __.addEventListener_progress(listener : System.Func<FunScript.TypeScript.ProgressEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dblclick\", {1}, {?2}))"); CompiledName("addEventListener483")>]
            member __.addEventListener_dblclick(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"contextmenu\", {1}, {?2}))"); CompiledName("addEventListener484")>]
            member __.addEventListener_contextmenu(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"loadedmetadata\", {1}, {?2}))"); CompiledName("addEventListener485")>]
            member __.addEventListener_loadedmetadata(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"afterupdate\", {1}, {?2}))"); CompiledName("addEventListener486")>]
            member __.addEventListener_afterupdate(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"error\", {1}, {?2}))"); CompiledName("addEventListener487")>]
            member __.addEventListener_error(listener : System.Func<FunScript.TypeScript.ErrorEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"play\", {1}, {?2}))"); CompiledName("addEventListener488")>]
            member __.addEventListener_play(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"resizeend\", {1}, {?2}))"); CompiledName("addEventListener489")>]
            member __.addEventListener_resizeend(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"playing\", {1}, {?2}))"); CompiledName("addEventListener490")>]
            member __.addEventListener_playing(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"focusout\", {1}, {?2}))"); CompiledName("addEventListener491")>]
            member __.addEventListener_focusout(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"abort\", {1}, {?2}))"); CompiledName("addEventListener492")>]
            member __.addEventListener_abort(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dataavailable\", {1}, {?2}))"); CompiledName("addEventListener493")>]
            member __.addEventListener_dataavailable(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"readystatechange\", {1}, {?2}))"); CompiledName("addEventListener494")>]
            member __.addEventListener_readystatechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"keypress\", {1}, {?2}))"); CompiledName("addEventListener495")>]
            member __.addEventListener_keypress(listener : System.Func<FunScript.TypeScript.KeyboardEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"loadeddata\", {1}, {?2}))"); CompiledName("addEventListener496")>]
            member __.addEventListener_loadeddata(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforedeactivate\", {1}, {?2}))"); CompiledName("addEventListener497")>]
            member __.addEventListener_beforedeactivate(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"activate\", {1}, {?2}))"); CompiledName("addEventListener498")>]
            member __.addEventListener_activate(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"movestart\", {1}, {?2}))"); CompiledName("addEventListener499")>]
            member __.addEventListener_movestart(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"selectstart\", {1}, {?2}))"); CompiledName("addEventListener500")>]
            member __.addEventListener_selectstart(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"focus\", {1}, {?2}))"); CompiledName("addEventListener501")>]
            member __.addEventListener_focus(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"timeupdate\", {1}, {?2}))"); CompiledName("addEventListener502")>]
            member __.addEventListener_timeupdate(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"resize\", {1}, {?2}))"); CompiledName("addEventListener503")>]
            member __.addEventListener_resize(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"cut\", {1}, {?2}))"); CompiledName("addEventListener504")>]
            member __.addEventListener_cut(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"select\", {1}, {?2}))"); CompiledName("addEventListener505")>]
            member __.addEventListener_select(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"drop\", {1}, {?2}))"); CompiledName("addEventListener506")>]
            member __.addEventListener_drop(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"copy\", {1}, {?2}))"); CompiledName("addEventListener507")>]
            member __.addEventListener_copy(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"ended\", {1}, {?2}))"); CompiledName("addEventListener508")>]
            member __.addEventListener_ended(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"scroll\", {1}, {?2}))"); CompiledName("addEventListener509")>]
            member __.addEventListener_scroll(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"rowenter\", {1}, {?2}))"); CompiledName("addEventListener510")>]
            member __.addEventListener_rowenter(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"load\", {1}, {?2}))"); CompiledName("addEventListener511")>]
            member __.addEventListener_load(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"input\", {1}, {?2}))"); CompiledName("addEventListener512")>]
            member __.addEventListener_input(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mscontentzoom\", {1}, {?2}))"); CompiledName("addEventListener513")>]
            member __.addEventListener_mscontentzoom(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"cuechange\", {1}, {?2}))"); CompiledName("addEventListener514")>]
            member __.addEventListener_cuechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msmanipulationstatechanged\", {1}, {?2}))"); CompiledName("addEventListener515")>]
            member __.addEventListener_msmanipulationstatechanged(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener({1}, {2}, {?3}))"); CompiledName("addEventListener516")>]
            member __.addEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener = {1})"); CompiledName("addEventListener516Aux")>]
            member __.``addEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_560 =


    type FunScript.TypeScript.HTMLEmbedElement with 

            [<FunScript.JSEmitInline("({0}.width)"); CompiledName("width5")>]
            member __.width with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.palette)"); CompiledName("palette")>]
            member __.palette with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.src)"); CompiledName("src1")>]
            member __.src with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.name)"); CompiledName("name13")>]
            member __.name with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.hidden)"); CompiledName("hidden2")>]
            member __.hidden with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pluginspage)"); CompiledName("pluginspage")>]
            member __.pluginspage with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.height)"); CompiledName("height4")>]
            member __.height with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.units)"); CompiledName("units")>]
            member __.units with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msPlayToPreferredSourceUri)"); CompiledName("msPlayToPreferredSourceUri")>]
            member __.msPlayToPreferredSourceUri with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msPlayToPrimary)"); CompiledName("msPlayToPrimary")>]
            member __.msPlayToPrimary with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msPlayToDisabled)"); CompiledName("msPlayToDisabled")>]
            member __.msPlayToDisabled with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.readyState)"); CompiledName("readyState2")>]
            member __.readyState with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msPlayToSource)"); CompiledName("msPlayToSource")>]
            member __.msPlayToSource with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_561 =


    type FunScript.TypeScript.HTMLFieldSetElement with 

            [<FunScript.JSEmitInline("({0}.align)"); CompiledName("align2")>]
            member __.align with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.form)"); CompiledName("form2")>]
            member __.form with get() : FunScript.TypeScript.HTMLFormElement = failwith "never" and set (v : FunScript.TypeScript.HTMLFormElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.validationMessage)"); CompiledName("validationMessage1")>]
            member __.validationMessage with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.validity)"); CompiledName("validity1")>]
            member __.validity with get() : FunScript.TypeScript.ValidityState = failwith "never" and set (v : FunScript.TypeScript.ValidityState) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.willValidate)"); CompiledName("willValidate1")>]
            member __.willValidate with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.checkValidity())"); CompiledName("checkValidity1")>]
            member __.checkValidity() : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.checkValidity = {1})"); CompiledName("checkValidity1Aux")>]
            member __.``checkValidity <-``(func : System.Func<bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setCustomValidity({1}))"); CompiledName("setCustomValidity1")>]
            member __.setCustomValidity(error : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setCustomValidity = {1})"); CompiledName("setCustomValidity1Aux")>]
            member __.``setCustomValidity <-``(func : System.Func<string, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_562 =


    type FunScript.TypeScript.HTMLFontElement with 

            [<FunScript.JSEmitInline("({0}.face)"); CompiledName("face1")>]
            member __.face with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_563 =


    type FunScript.TypeScript.HTMLFormElement with 

            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length17")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.target)"); CompiledName("target4")>]
            member __.target with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.acceptCharset)"); CompiledName("acceptCharset")>]
            member __.acceptCharset with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.enctype)"); CompiledName("enctype")>]
            member __.enctype with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.elements)"); CompiledName("elements")>]
            member __.elements with get() : FunScript.TypeScript.HTMLCollection = failwith "never" and set (v : FunScript.TypeScript.HTMLCollection) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.action)"); CompiledName("action")>]
            member __.action with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.name)"); CompiledName("name14")>]
            member __.name with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.method)"); CompiledName("_method")>]
            member __._method with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.encoding)"); CompiledName("encoding")>]
            member __.encoding with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.autocomplete)"); CompiledName("autocomplete")>]
            member __.autocomplete with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.noValidate)"); CompiledName("noValidate")>]
            member __.noValidate with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.reset())"); CompiledName("reset")>]
            member __.reset() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.reset = {1})"); CompiledName("resetAux")>]
            member __.``reset <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.item({?1}, {?2}))"); CompiledName("item11")>]
            member __.item(?name : obj, ?index : obj) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.item = {1})"); CompiledName("item11Aux")>]
            member __.``item <-``(func : System.Func<obj, obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.submit())"); CompiledName("submit")>]
            member __.submit() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.submit = {1})"); CompiledName("submitAux")>]
            member __.``submit <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.namedItem({1}))"); CompiledName("namedItem2")>]
            member __.namedItem(name : string) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.namedItem = {1})"); CompiledName("namedItem2Aux")>]
            member __.``namedItem <-``(func : System.Func<string, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}[{1}])"); CompiledName("Item14")>]
            member __.Item with get(i : string) : obj = failwith "never" and set (i : string) (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.checkValidity())"); CompiledName("checkValidity2")>]
            member __.checkValidity() : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.checkValidity = {1})"); CompiledName("checkValidity2Aux")>]
            member __.``checkValidity <-``(func : System.Func<bool>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_564 =


    type FunScript.TypeScript.HTMLFrameElement with 

            [<FunScript.JSEmitInline("({0}.width)"); CompiledName("width6")>]
            member __.width with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.scrolling)"); CompiledName("scrolling")>]
            member __.scrolling with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.marginHeight)"); CompiledName("marginHeight")>]
            member __.marginHeight with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.marginWidth)"); CompiledName("marginWidth")>]
            member __.marginWidth with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderColor)"); CompiledName("borderColor1")>]
            member __.borderColor with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.frameSpacing)"); CompiledName("frameSpacing")>]
            member __.frameSpacing with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.frameBorder)"); CompiledName("frameBorder")>]
            member __.frameBorder with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.noResize)"); CompiledName("noResize")>]
            member __.noResize with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.contentWindow)"); CompiledName("contentWindow")>]
            member __.contentWindow with get() : FunScript.TypeScript.Window = failwith "never" and set (v : FunScript.TypeScript.Window) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.src)"); CompiledName("src2")>]
            member __.src with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.name)"); CompiledName("name15")>]
            member __.name with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.height)"); CompiledName("height5")>]
            member __.height with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.contentDocument)"); CompiledName("contentDocument1")>]
            member __.contentDocument with get() : FunScript.TypeScript.Document = failwith "never" and set (v : FunScript.TypeScript.Document) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.border)"); CompiledName("border2")>]
            member __.border with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.longDesc)"); CompiledName("longDesc")>]
            member __.longDesc with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onload)"); CompiledName("onload4")>]
            member __.onload with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.security)"); CompiledName("security1")>]
            member __.security with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerenter\", {1}, {?2}))"); CompiledName("addEventListener517")>]
            member __.addEventListener_pointerenter(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerout\", {1}, {?2}))"); CompiledName("addEventListener518")>]
            member __.addEventListener_pointerout(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerdown\", {1}, {?2}))"); CompiledName("addEventListener519")>]
            member __.addEventListener_pointerdown(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerup\", {1}, {?2}))"); CompiledName("addEventListener520")>]
            member __.addEventListener_pointerup(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointercancel\", {1}, {?2}))"); CompiledName("addEventListener521")>]
            member __.addEventListener_pointercancel(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerover\", {1}, {?2}))"); CompiledName("addEventListener522")>]
            member __.addEventListener_pointerover(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointermove\", {1}, {?2}))"); CompiledName("addEventListener523")>]
            member __.addEventListener_pointermove(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerleave\", {1}, {?2}))"); CompiledName("addEventListener524")>]
            member __.addEventListener_pointerleave(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerdown\", {1}, {?2}))"); CompiledName("addEventListener525")>]
            member __.addEventListener_mspointerdown(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgotpointercapture\", {1}, {?2}))"); CompiledName("addEventListener526")>]
            member __.addEventListener_msgotpointercapture(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturedoubletap\", {1}, {?2}))"); CompiledName("addEventListener527")>]
            member __.addEventListener_msgesturedoubletap(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerhover\", {1}, {?2}))"); CompiledName("addEventListener528")>]
            member __.addEventListener_mspointerhover(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturehold\", {1}, {?2}))"); CompiledName("addEventListener529")>]
            member __.addEventListener_msgesturehold(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointermove\", {1}, {?2}))"); CompiledName("addEventListener530")>]
            member __.addEventListener_mspointermove(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturechange\", {1}, {?2}))"); CompiledName("addEventListener531")>]
            member __.addEventListener_msgesturechange(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturestart\", {1}, {?2}))"); CompiledName("addEventListener532")>]
            member __.addEventListener_msgesturestart(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointercancel\", {1}, {?2}))"); CompiledName("addEventListener533")>]
            member __.addEventListener_mspointercancel(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgestureend\", {1}, {?2}))"); CompiledName("addEventListener534")>]
            member __.addEventListener_msgestureend(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturetap\", {1}, {?2}))"); CompiledName("addEventListener535")>]
            member __.addEventListener_msgesturetap(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerout\", {1}, {?2}))"); CompiledName("addEventListener536")>]
            member __.addEventListener_mspointerout(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msinertiastart\", {1}, {?2}))"); CompiledName("addEventListener537")>]
            member __.addEventListener_msinertiastart(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mslostpointercapture\", {1}, {?2}))"); CompiledName("addEventListener538")>]
            member __.addEventListener_mslostpointercapture(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerover\", {1}, {?2}))"); CompiledName("addEventListener539")>]
            member __.addEventListener_mspointerover(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerup\", {1}, {?2}))"); CompiledName("addEventListener540")>]
            member __.addEventListener_mspointerup(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"lostpointercapture\", {1}, {?2}))"); CompiledName("addEventListener541")>]
            member __.addEventListener_lostpointercapture(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerenter\", {1}, {?2}))"); CompiledName("addEventListener542")>]
            member __.addEventListener_mspointerenter(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"gotpointercapture\", {1}, {?2}))"); CompiledName("addEventListener543")>]
            member __.addEventListener_gotpointercapture(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerleave\", {1}, {?2}))"); CompiledName("addEventListener544")>]
            member __.addEventListener_mspointerleave(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseleave\", {1}, {?2}))"); CompiledName("addEventListener545")>]
            member __.addEventListener_mouseleave(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforecut\", {1}, {?2}))"); CompiledName("addEventListener546")>]
            member __.addEventListener_beforecut(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"keydown\", {1}, {?2}))"); CompiledName("addEventListener547")>]
            member __.addEventListener_keydown(listener : System.Func<FunScript.TypeScript.KeyboardEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"move\", {1}, {?2}))"); CompiledName("addEventListener548")>]
            member __.addEventListener_move(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"keyup\", {1}, {?2}))"); CompiledName("addEventListener549")>]
            member __.addEventListener_keyup(listener : System.Func<FunScript.TypeScript.KeyboardEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"reset\", {1}, {?2}))"); CompiledName("addEventListener550")>]
            member __.addEventListener_reset(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"help\", {1}, {?2}))"); CompiledName("addEventListener551")>]
            member __.addEventListener_help(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragleave\", {1}, {?2}))"); CompiledName("addEventListener552")>]
            member __.addEventListener_dragleave(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"focusin\", {1}, {?2}))"); CompiledName("addEventListener553")>]
            member __.addEventListener_focusin(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"seeked\", {1}, {?2}))"); CompiledName("addEventListener554")>]
            member __.addEventListener_seeked(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"durationchange\", {1}, {?2}))"); CompiledName("addEventListener555")>]
            member __.addEventListener_durationchange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"blur\", {1}, {?2}))"); CompiledName("addEventListener556")>]
            member __.addEventListener_blur(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"emptied\", {1}, {?2}))"); CompiledName("addEventListener557")>]
            member __.addEventListener_emptied(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"seeking\", {1}, {?2}))"); CompiledName("addEventListener558")>]
            member __.addEventListener_seeking(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"canplay\", {1}, {?2}))"); CompiledName("addEventListener559")>]
            member __.addEventListener_canplay(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"deactivate\", {1}, {?2}))"); CompiledName("addEventListener560")>]
            member __.addEventListener_deactivate(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"datasetchanged\", {1}, {?2}))"); CompiledName("addEventListener561")>]
            member __.addEventListener_datasetchanged(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"rowsdelete\", {1}, {?2}))"); CompiledName("addEventListener562")>]
            member __.addEventListener_rowsdelete(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"loadstart\", {1}, {?2}))"); CompiledName("addEventListener563")>]
            member __.addEventListener_loadstart(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"losecapture\", {1}, {?2}))"); CompiledName("addEventListener564")>]
            member __.addEventListener_losecapture(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragenter\", {1}, {?2}))"); CompiledName("addEventListener565")>]
            member __.addEventListener_dragenter(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"controlselect\", {1}, {?2}))"); CompiledName("addEventListener566")>]
            member __.addEventListener_controlselect(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"submit\", {1}, {?2}))"); CompiledName("addEventListener567")>]
            member __.addEventListener_submit(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"change\", {1}, {?2}))"); CompiledName("addEventListener568")>]
            member __.addEventListener_change(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"layoutcomplete\", {1}, {?2}))"); CompiledName("addEventListener569")>]
            member __.addEventListener_layoutcomplete(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforeactivate\", {1}, {?2}))"); CompiledName("addEventListener570")>]
            member __.addEventListener_beforeactivate(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"canplaythrough\", {1}, {?2}))"); CompiledName("addEventListener571")>]
            member __.addEventListener_canplaythrough(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforeupdate\", {1}, {?2}))"); CompiledName("addEventListener572")>]
            member __.addEventListener_beforeupdate(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"filterchange\", {1}, {?2}))"); CompiledName("addEventListener573")>]
            member __.addEventListener_filterchange(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"datasetcomplete\", {1}, {?2}))"); CompiledName("addEventListener574")>]
            member __.addEventListener_datasetcomplete(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"suspend\", {1}, {?2}))"); CompiledName("addEventListener575")>]
            member __.addEventListener_suspend(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseenter\", {1}, {?2}))"); CompiledName("addEventListener576")>]
            member __.addEventListener_mouseenter(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"errorupdate\", {1}, {?2}))"); CompiledName("addEventListener577")>]
            member __.addEventListener_errorupdate(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseout\", {1}, {?2}))"); CompiledName("addEventListener578")>]
            member __.addEventListener_mouseout(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mousewheel\", {1}, {?2}))"); CompiledName("addEventListener579")>]
            member __.addEventListener_mousewheel(listener : System.Func<FunScript.TypeScript.MouseWheelEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"volumechange\", {1}, {?2}))"); CompiledName("addEventListener580")>]
            member __.addEventListener_volumechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"cellchange\", {1}, {?2}))"); CompiledName("addEventListener581")>]
            member __.addEventListener_cellchange(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"rowexit\", {1}, {?2}))"); CompiledName("addEventListener582")>]
            member __.addEventListener_rowexit(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"rowsinserted\", {1}, {?2}))"); CompiledName("addEventListener583")>]
            member __.addEventListener_rowsinserted(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"propertychange\", {1}, {?2}))"); CompiledName("addEventListener584")>]
            member __.addEventListener_propertychange(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragend\", {1}, {?2}))"); CompiledName("addEventListener585")>]
            member __.addEventListener_dragend(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforepaste\", {1}, {?2}))"); CompiledName("addEventListener586")>]
            member __.addEventListener_beforepaste(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragover\", {1}, {?2}))"); CompiledName("addEventListener587")>]
            member __.addEventListener_dragover(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseup\", {1}, {?2}))"); CompiledName("addEventListener588")>]
            member __.addEventListener_mouseup(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragstart\", {1}, {?2}))"); CompiledName("addEventListener589")>]
            member __.addEventListener_dragstart(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforecopy\", {1}, {?2}))"); CompiledName("addEventListener590")>]
            member __.addEventListener_beforecopy(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"drag\", {1}, {?2}))"); CompiledName("addEventListener591")>]
            member __.addEventListener_drag(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseover\", {1}, {?2}))"); CompiledName("addEventListener592")>]
            member __.addEventListener_mouseover(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pause\", {1}, {?2}))"); CompiledName("addEventListener593")>]
            member __.addEventListener_pause(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mousedown\", {1}, {?2}))"); CompiledName("addEventListener594")>]
            member __.addEventListener_mousedown(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"click\", {1}, {?2}))"); CompiledName("addEventListener595")>]
            member __.addEventListener_click(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"waiting\", {1}, {?2}))"); CompiledName("addEventListener596")>]
            member __.addEventListener_waiting(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"resizestart\", {1}, {?2}))"); CompiledName("addEventListener597")>]
            member __.addEventListener_resizestart(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"paste\", {1}, {?2}))"); CompiledName("addEventListener598")>]
            member __.addEventListener_paste(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"moveend\", {1}, {?2}))"); CompiledName("addEventListener599")>]
            member __.addEventListener_moveend(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"stalled\", {1}, {?2}))"); CompiledName("addEventListener600")>]
            member __.addEventListener_stalled(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mousemove\", {1}, {?2}))"); CompiledName("addEventListener601")>]
            member __.addEventListener_mousemove(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforeeditfocus\", {1}, {?2}))"); CompiledName("addEventListener602")>]
            member __.addEventListener_beforeeditfocus(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"ratechange\", {1}, {?2}))"); CompiledName("addEventListener603")>]
            member __.addEventListener_ratechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"progress\", {1}, {?2}))"); CompiledName("addEventListener604")>]
            member __.addEventListener_progress(listener : System.Func<FunScript.TypeScript.ProgressEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dblclick\", {1}, {?2}))"); CompiledName("addEventListener605")>]
            member __.addEventListener_dblclick(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"contextmenu\", {1}, {?2}))"); CompiledName("addEventListener606")>]
            member __.addEventListener_contextmenu(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"loadedmetadata\", {1}, {?2}))"); CompiledName("addEventListener607")>]
            member __.addEventListener_loadedmetadata(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"afterupdate\", {1}, {?2}))"); CompiledName("addEventListener608")>]
            member __.addEventListener_afterupdate(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"error\", {1}, {?2}))"); CompiledName("addEventListener609")>]
            member __.addEventListener_error(listener : System.Func<FunScript.TypeScript.ErrorEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"play\", {1}, {?2}))"); CompiledName("addEventListener610")>]
            member __.addEventListener_play(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"resizeend\", {1}, {?2}))"); CompiledName("addEventListener611")>]
            member __.addEventListener_resizeend(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"playing\", {1}, {?2}))"); CompiledName("addEventListener612")>]
            member __.addEventListener_playing(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"focusout\", {1}, {?2}))"); CompiledName("addEventListener613")>]
            member __.addEventListener_focusout(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"abort\", {1}, {?2}))"); CompiledName("addEventListener614")>]
            member __.addEventListener_abort(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dataavailable\", {1}, {?2}))"); CompiledName("addEventListener615")>]
            member __.addEventListener_dataavailable(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"readystatechange\", {1}, {?2}))"); CompiledName("addEventListener616")>]
            member __.addEventListener_readystatechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"keypress\", {1}, {?2}))"); CompiledName("addEventListener617")>]
            member __.addEventListener_keypress(listener : System.Func<FunScript.TypeScript.KeyboardEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"loadeddata\", {1}, {?2}))"); CompiledName("addEventListener618")>]
            member __.addEventListener_loadeddata(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforedeactivate\", {1}, {?2}))"); CompiledName("addEventListener619")>]
            member __.addEventListener_beforedeactivate(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"activate\", {1}, {?2}))"); CompiledName("addEventListener620")>]
            member __.addEventListener_activate(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"movestart\", {1}, {?2}))"); CompiledName("addEventListener621")>]
            member __.addEventListener_movestart(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"selectstart\", {1}, {?2}))"); CompiledName("addEventListener622")>]
            member __.addEventListener_selectstart(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"focus\", {1}, {?2}))"); CompiledName("addEventListener623")>]
            member __.addEventListener_focus(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"timeupdate\", {1}, {?2}))"); CompiledName("addEventListener624")>]
            member __.addEventListener_timeupdate(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"resize\", {1}, {?2}))"); CompiledName("addEventListener625")>]
            member __.addEventListener_resize(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"cut\", {1}, {?2}))"); CompiledName("addEventListener626")>]
            member __.addEventListener_cut(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"select\", {1}, {?2}))"); CompiledName("addEventListener627")>]
            member __.addEventListener_select(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"drop\", {1}, {?2}))"); CompiledName("addEventListener628")>]
            member __.addEventListener_drop(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"copy\", {1}, {?2}))"); CompiledName("addEventListener629")>]
            member __.addEventListener_copy(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"ended\", {1}, {?2}))"); CompiledName("addEventListener630")>]
            member __.addEventListener_ended(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"scroll\", {1}, {?2}))"); CompiledName("addEventListener631")>]
            member __.addEventListener_scroll(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"rowenter\", {1}, {?2}))"); CompiledName("addEventListener632")>]
            member __.addEventListener_rowenter(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"load\", {1}, {?2}))"); CompiledName("addEventListener633")>]
            member __.addEventListener_load(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"input\", {1}, {?2}))"); CompiledName("addEventListener634")>]
            member __.addEventListener_input(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mscontentzoom\", {1}, {?2}))"); CompiledName("addEventListener635")>]
            member __.addEventListener_mscontentzoom(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"cuechange\", {1}, {?2}))"); CompiledName("addEventListener636")>]
            member __.addEventListener_cuechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msmanipulationstatechanged\", {1}, {?2}))"); CompiledName("addEventListener637")>]
            member __.addEventListener_msmanipulationstatechanged(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener({1}, {2}, {?3}))"); CompiledName("addEventListener638")>]
            member __.addEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener = {1})"); CompiledName("addEventListener638Aux")>]
            member __.``addEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_565 =


    type FunScript.TypeScript.HTMLFrameSetElement with 

            [<FunScript.JSEmitInline("({0}.ononline)"); CompiledName("ononline2")>]
            member __.ononline with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderColor)"); CompiledName("borderColor2")>]
            member __.borderColor with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.rows)"); CompiledName("rows")>]
            member __.rows with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.cols)"); CompiledName("cols")>]
            member __.cols with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onblur)"); CompiledName("onblur4")>]
            member __.onblur with get() : System.Func<FunScript.TypeScript.FocusEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.FocusEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.frameSpacing)"); CompiledName("frameSpacing1")>]
            member __.frameSpacing with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onfocus)"); CompiledName("onfocus4")>]
            member __.onfocus with get() : System.Func<FunScript.TypeScript.FocusEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.FocusEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmessage)"); CompiledName("onmessage2")>]
            member __.onmessage with get() : System.Func<FunScript.TypeScript.MessageEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MessageEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onerror)"); CompiledName("onerror7")>]
            member __.onerror with get() : System.Func<FunScript.TypeScript.ErrorEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.ErrorEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.frameBorder)"); CompiledName("frameBorder1")>]
            member __.frameBorder with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onresize)"); CompiledName("onresize3")>]
            member __.onresize with get() : System.Func<FunScript.TypeScript.UIEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.UIEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.name)"); CompiledName("name16")>]
            member __.name with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onafterprint)"); CompiledName("onafterprint2")>]
            member __.onafterprint with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onbeforeprint)"); CompiledName("onbeforeprint2")>]
            member __.onbeforeprint with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onoffline)"); CompiledName("onoffline2")>]
            member __.onoffline with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.border)"); CompiledName("border3")>]
            member __.border with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onunload)"); CompiledName("onunload2")>]
            member __.onunload with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onhashchange)"); CompiledName("onhashchange2")>]
            member __.onhashchange with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onload)"); CompiledName("onload5")>]
            member __.onload with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onbeforeunload)"); CompiledName("onbeforeunload2")>]
            member __.onbeforeunload with get() : System.Func<FunScript.TypeScript.BeforeUnloadEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.BeforeUnloadEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onstorage)"); CompiledName("onstorage2")>]
            member __.onstorage with get() : System.Func<FunScript.TypeScript.StorageEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.StorageEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onpageshow)"); CompiledName("onpageshow2")>]
            member __.onpageshow with get() : System.Func<FunScript.TypeScript.PageTransitionEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.PageTransitionEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onpagehide)"); CompiledName("onpagehide2")>]
            member __.onpagehide with get() : System.Func<FunScript.TypeScript.PageTransitionEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.PageTransitionEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerenter\", {1}, {?2}))"); CompiledName("addEventListener639")>]
            member __.addEventListener_pointerenter(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerout\", {1}, {?2}))"); CompiledName("addEventListener640")>]
            member __.addEventListener_pointerout(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerdown\", {1}, {?2}))"); CompiledName("addEventListener641")>]
            member __.addEventListener_pointerdown(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerup\", {1}, {?2}))"); CompiledName("addEventListener642")>]
            member __.addEventListener_pointerup(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointercancel\", {1}, {?2}))"); CompiledName("addEventListener643")>]
            member __.addEventListener_pointercancel(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerover\", {1}, {?2}))"); CompiledName("addEventListener644")>]
            member __.addEventListener_pointerover(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointermove\", {1}, {?2}))"); CompiledName("addEventListener645")>]
            member __.addEventListener_pointermove(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerleave\", {1}, {?2}))"); CompiledName("addEventListener646")>]
            member __.addEventListener_pointerleave(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerdown\", {1}, {?2}))"); CompiledName("addEventListener647")>]
            member __.addEventListener_mspointerdown(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgotpointercapture\", {1}, {?2}))"); CompiledName("addEventListener648")>]
            member __.addEventListener_msgotpointercapture(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturedoubletap\", {1}, {?2}))"); CompiledName("addEventListener649")>]
            member __.addEventListener_msgesturedoubletap(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerhover\", {1}, {?2}))"); CompiledName("addEventListener650")>]
            member __.addEventListener_mspointerhover(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturehold\", {1}, {?2}))"); CompiledName("addEventListener651")>]
            member __.addEventListener_msgesturehold(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointermove\", {1}, {?2}))"); CompiledName("addEventListener652")>]
            member __.addEventListener_mspointermove(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturechange\", {1}, {?2}))"); CompiledName("addEventListener653")>]
            member __.addEventListener_msgesturechange(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturestart\", {1}, {?2}))"); CompiledName("addEventListener654")>]
            member __.addEventListener_msgesturestart(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointercancel\", {1}, {?2}))"); CompiledName("addEventListener655")>]
            member __.addEventListener_mspointercancel(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgestureend\", {1}, {?2}))"); CompiledName("addEventListener656")>]
            member __.addEventListener_msgestureend(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturetap\", {1}, {?2}))"); CompiledName("addEventListener657")>]
            member __.addEventListener_msgesturetap(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerout\", {1}, {?2}))"); CompiledName("addEventListener658")>]
            member __.addEventListener_mspointerout(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msinertiastart\", {1}, {?2}))"); CompiledName("addEventListener659")>]
            member __.addEventListener_msinertiastart(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mslostpointercapture\", {1}, {?2}))"); CompiledName("addEventListener660")>]
            member __.addEventListener_mslostpointercapture(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerover\", {1}, {?2}))"); CompiledName("addEventListener661")>]
            member __.addEventListener_mspointerover(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerup\", {1}, {?2}))"); CompiledName("addEventListener662")>]
            member __.addEventListener_mspointerup(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"lostpointercapture\", {1}, {?2}))"); CompiledName("addEventListener663")>]
            member __.addEventListener_lostpointercapture(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerenter\", {1}, {?2}))"); CompiledName("addEventListener664")>]
            member __.addEventListener_mspointerenter(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"gotpointercapture\", {1}, {?2}))"); CompiledName("addEventListener665")>]
            member __.addEventListener_gotpointercapture(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerleave\", {1}, {?2}))"); CompiledName("addEventListener666")>]
            member __.addEventListener_mspointerleave(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseleave\", {1}, {?2}))"); CompiledName("addEventListener667")>]
            member __.addEventListener_mouseleave(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforecut\", {1}, {?2}))"); CompiledName("addEventListener668")>]
            member __.addEventListener_beforecut(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"keydown\", {1}, {?2}))"); CompiledName("addEventListener669")>]
            member __.addEventListener_keydown(listener : System.Func<FunScript.TypeScript.KeyboardEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"move\", {1}, {?2}))"); CompiledName("addEventListener670")>]
            member __.addEventListener_move(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"keyup\", {1}, {?2}))"); CompiledName("addEventListener671")>]
            member __.addEventListener_keyup(listener : System.Func<FunScript.TypeScript.KeyboardEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"reset\", {1}, {?2}))"); CompiledName("addEventListener672")>]
            member __.addEventListener_reset(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"help\", {1}, {?2}))"); CompiledName("addEventListener673")>]
            member __.addEventListener_help(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragleave\", {1}, {?2}))"); CompiledName("addEventListener674")>]
            member __.addEventListener_dragleave(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"focusin\", {1}, {?2}))"); CompiledName("addEventListener675")>]
            member __.addEventListener_focusin(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"seeked\", {1}, {?2}))"); CompiledName("addEventListener676")>]
            member __.addEventListener_seeked(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"durationchange\", {1}, {?2}))"); CompiledName("addEventListener677")>]
            member __.addEventListener_durationchange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"blur\", {1}, {?2}))"); CompiledName("addEventListener678")>]
            member __.addEventListener_blur(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"emptied\", {1}, {?2}))"); CompiledName("addEventListener679")>]
            member __.addEventListener_emptied(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"seeking\", {1}, {?2}))"); CompiledName("addEventListener680")>]
            member __.addEventListener_seeking(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"canplay\", {1}, {?2}))"); CompiledName("addEventListener681")>]
            member __.addEventListener_canplay(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"deactivate\", {1}, {?2}))"); CompiledName("addEventListener682")>]
            member __.addEventListener_deactivate(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"datasetchanged\", {1}, {?2}))"); CompiledName("addEventListener683")>]
            member __.addEventListener_datasetchanged(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"rowsdelete\", {1}, {?2}))"); CompiledName("addEventListener684")>]
            member __.addEventListener_rowsdelete(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"loadstart\", {1}, {?2}))"); CompiledName("addEventListener685")>]
            member __.addEventListener_loadstart(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"losecapture\", {1}, {?2}))"); CompiledName("addEventListener686")>]
            member __.addEventListener_losecapture(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragenter\", {1}, {?2}))"); CompiledName("addEventListener687")>]
            member __.addEventListener_dragenter(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"controlselect\", {1}, {?2}))"); CompiledName("addEventListener688")>]
            member __.addEventListener_controlselect(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"submit\", {1}, {?2}))"); CompiledName("addEventListener689")>]
            member __.addEventListener_submit(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"change\", {1}, {?2}))"); CompiledName("addEventListener690")>]
            member __.addEventListener_change(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"layoutcomplete\", {1}, {?2}))"); CompiledName("addEventListener691")>]
            member __.addEventListener_layoutcomplete(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforeactivate\", {1}, {?2}))"); CompiledName("addEventListener692")>]
            member __.addEventListener_beforeactivate(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"canplaythrough\", {1}, {?2}))"); CompiledName("addEventListener693")>]
            member __.addEventListener_canplaythrough(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforeupdate\", {1}, {?2}))"); CompiledName("addEventListener694")>]
            member __.addEventListener_beforeupdate(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"filterchange\", {1}, {?2}))"); CompiledName("addEventListener695")>]
            member __.addEventListener_filterchange(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"datasetcomplete\", {1}, {?2}))"); CompiledName("addEventListener696")>]
            member __.addEventListener_datasetcomplete(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"suspend\", {1}, {?2}))"); CompiledName("addEventListener697")>]
            member __.addEventListener_suspend(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseenter\", {1}, {?2}))"); CompiledName("addEventListener698")>]
            member __.addEventListener_mouseenter(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"errorupdate\", {1}, {?2}))"); CompiledName("addEventListener699")>]
            member __.addEventListener_errorupdate(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseout\", {1}, {?2}))"); CompiledName("addEventListener700")>]
            member __.addEventListener_mouseout(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mousewheel\", {1}, {?2}))"); CompiledName("addEventListener701")>]
            member __.addEventListener_mousewheel(listener : System.Func<FunScript.TypeScript.MouseWheelEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"volumechange\", {1}, {?2}))"); CompiledName("addEventListener702")>]
            member __.addEventListener_volumechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"cellchange\", {1}, {?2}))"); CompiledName("addEventListener703")>]
            member __.addEventListener_cellchange(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"rowexit\", {1}, {?2}))"); CompiledName("addEventListener704")>]
            member __.addEventListener_rowexit(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"rowsinserted\", {1}, {?2}))"); CompiledName("addEventListener705")>]
            member __.addEventListener_rowsinserted(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"propertychange\", {1}, {?2}))"); CompiledName("addEventListener706")>]
            member __.addEventListener_propertychange(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragend\", {1}, {?2}))"); CompiledName("addEventListener707")>]
            member __.addEventListener_dragend(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforepaste\", {1}, {?2}))"); CompiledName("addEventListener708")>]
            member __.addEventListener_beforepaste(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragover\", {1}, {?2}))"); CompiledName("addEventListener709")>]
            member __.addEventListener_dragover(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseup\", {1}, {?2}))"); CompiledName("addEventListener710")>]
            member __.addEventListener_mouseup(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragstart\", {1}, {?2}))"); CompiledName("addEventListener711")>]
            member __.addEventListener_dragstart(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforecopy\", {1}, {?2}))"); CompiledName("addEventListener712")>]
            member __.addEventListener_beforecopy(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"drag\", {1}, {?2}))"); CompiledName("addEventListener713")>]
            member __.addEventListener_drag(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseover\", {1}, {?2}))"); CompiledName("addEventListener714")>]
            member __.addEventListener_mouseover(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pause\", {1}, {?2}))"); CompiledName("addEventListener715")>]
            member __.addEventListener_pause(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mousedown\", {1}, {?2}))"); CompiledName("addEventListener716")>]
            member __.addEventListener_mousedown(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"click\", {1}, {?2}))"); CompiledName("addEventListener717")>]
            member __.addEventListener_click(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"waiting\", {1}, {?2}))"); CompiledName("addEventListener718")>]
            member __.addEventListener_waiting(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"resizestart\", {1}, {?2}))"); CompiledName("addEventListener719")>]
            member __.addEventListener_resizestart(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"paste\", {1}, {?2}))"); CompiledName("addEventListener720")>]
            member __.addEventListener_paste(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"moveend\", {1}, {?2}))"); CompiledName("addEventListener721")>]
            member __.addEventListener_moveend(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"stalled\", {1}, {?2}))"); CompiledName("addEventListener722")>]
            member __.addEventListener_stalled(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mousemove\", {1}, {?2}))"); CompiledName("addEventListener723")>]
            member __.addEventListener_mousemove(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforeeditfocus\", {1}, {?2}))"); CompiledName("addEventListener724")>]
            member __.addEventListener_beforeeditfocus(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"ratechange\", {1}, {?2}))"); CompiledName("addEventListener725")>]
            member __.addEventListener_ratechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"progress\", {1}, {?2}))"); CompiledName("addEventListener726")>]
            member __.addEventListener_progress(listener : System.Func<FunScript.TypeScript.ProgressEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dblclick\", {1}, {?2}))"); CompiledName("addEventListener727")>]
            member __.addEventListener_dblclick(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"contextmenu\", {1}, {?2}))"); CompiledName("addEventListener728")>]
            member __.addEventListener_contextmenu(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"loadedmetadata\", {1}, {?2}))"); CompiledName("addEventListener729")>]
            member __.addEventListener_loadedmetadata(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"afterupdate\", {1}, {?2}))"); CompiledName("addEventListener730")>]
            member __.addEventListener_afterupdate(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"error\", {1}, {?2}))"); CompiledName("addEventListener731")>]
            member __.addEventListener_error(listener : System.Func<FunScript.TypeScript.ErrorEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"play\", {1}, {?2}))"); CompiledName("addEventListener732")>]
            member __.addEventListener_play(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"resizeend\", {1}, {?2}))"); CompiledName("addEventListener733")>]
            member __.addEventListener_resizeend(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"playing\", {1}, {?2}))"); CompiledName("addEventListener734")>]
            member __.addEventListener_playing(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"focusout\", {1}, {?2}))"); CompiledName("addEventListener735")>]
            member __.addEventListener_focusout(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"abort\", {1}, {?2}))"); CompiledName("addEventListener736")>]
            member __.addEventListener_abort(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dataavailable\", {1}, {?2}))"); CompiledName("addEventListener737")>]
            member __.addEventListener_dataavailable(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"readystatechange\", {1}, {?2}))"); CompiledName("addEventListener738")>]
            member __.addEventListener_readystatechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"keypress\", {1}, {?2}))"); CompiledName("addEventListener739")>]
            member __.addEventListener_keypress(listener : System.Func<FunScript.TypeScript.KeyboardEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"loadeddata\", {1}, {?2}))"); CompiledName("addEventListener740")>]
            member __.addEventListener_loadeddata(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforedeactivate\", {1}, {?2}))"); CompiledName("addEventListener741")>]
            member __.addEventListener_beforedeactivate(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"activate\", {1}, {?2}))"); CompiledName("addEventListener742")>]
            member __.addEventListener_activate(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"movestart\", {1}, {?2}))"); CompiledName("addEventListener743")>]
            member __.addEventListener_movestart(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"selectstart\", {1}, {?2}))"); CompiledName("addEventListener744")>]
            member __.addEventListener_selectstart(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"focus\", {1}, {?2}))"); CompiledName("addEventListener745")>]
            member __.addEventListener_focus(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"timeupdate\", {1}, {?2}))"); CompiledName("addEventListener746")>]
            member __.addEventListener_timeupdate(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"resize\", {1}, {?2}))"); CompiledName("addEventListener747")>]
            member __.addEventListener_resize(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"cut\", {1}, {?2}))"); CompiledName("addEventListener748")>]
            member __.addEventListener_cut(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"select\", {1}, {?2}))"); CompiledName("addEventListener749")>]
            member __.addEventListener_select(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"drop\", {1}, {?2}))"); CompiledName("addEventListener750")>]
            member __.addEventListener_drop(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"copy\", {1}, {?2}))"); CompiledName("addEventListener751")>]
            member __.addEventListener_copy(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"ended\", {1}, {?2}))"); CompiledName("addEventListener752")>]
            member __.addEventListener_ended(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"scroll\", {1}, {?2}))"); CompiledName("addEventListener753")>]
            member __.addEventListener_scroll(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"rowenter\", {1}, {?2}))"); CompiledName("addEventListener754")>]
            member __.addEventListener_rowenter(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"load\", {1}, {?2}))"); CompiledName("addEventListener755")>]
            member __.addEventListener_load(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"input\", {1}, {?2}))"); CompiledName("addEventListener756")>]
            member __.addEventListener_input(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mscontentzoom\", {1}, {?2}))"); CompiledName("addEventListener757")>]
            member __.addEventListener_mscontentzoom(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"cuechange\", {1}, {?2}))"); CompiledName("addEventListener758")>]
            member __.addEventListener_cuechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msmanipulationstatechanged\", {1}, {?2}))"); CompiledName("addEventListener759")>]
            member __.addEventListener_msmanipulationstatechanged(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"online\", {1}, {?2}))"); CompiledName("addEventListener760")>]
            member __.addEventListener_online(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"message\", {1}, {?2}))"); CompiledName("addEventListener761")>]
            member __.addEventListener_message(listener : System.Func<FunScript.TypeScript.MessageEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"afterprint\", {1}, {?2}))"); CompiledName("addEventListener762")>]
            member __.addEventListener_afterprint(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforeprint\", {1}, {?2}))"); CompiledName("addEventListener763")>]
            member __.addEventListener_beforeprint(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"offline\", {1}, {?2}))"); CompiledName("addEventListener764")>]
            member __.addEventListener_offline(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"unload\", {1}, {?2}))"); CompiledName("addEventListener765")>]
            member __.addEventListener_unload(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"hashchange\", {1}, {?2}))"); CompiledName("addEventListener766")>]
            member __.addEventListener_hashchange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforeunload\", {1}, {?2}))"); CompiledName("addEventListener767")>]
            member __.addEventListener_beforeunload(listener : System.Func<FunScript.TypeScript.BeforeUnloadEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"storage\", {1}, {?2}))"); CompiledName("addEventListener768")>]
            member __.addEventListener_storage(listener : System.Func<FunScript.TypeScript.StorageEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pageshow\", {1}, {?2}))"); CompiledName("addEventListener769")>]
            member __.addEventListener_pageshow(listener : System.Func<FunScript.TypeScript.PageTransitionEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pagehide\", {1}, {?2}))"); CompiledName("addEventListener770")>]
            member __.addEventListener_pagehide(listener : System.Func<FunScript.TypeScript.PageTransitionEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener({1}, {2}, {?3}))"); CompiledName("addEventListener771")>]
            member __.addEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener = {1})"); CompiledName("addEventListener771Aux")>]
            member __.``addEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_566 =


    type FunScript.TypeScript.HTMLHRElement with 

            [<FunScript.JSEmitInline("({0}.width)"); CompiledName("width7")>]
            member __.width with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.align)"); CompiledName("align3")>]
            member __.align with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.noShade)"); CompiledName("noShade")>]
            member __.noShade with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_567 =


    type FunScript.TypeScript.HTMLHeadElement with 

            [<FunScript.JSEmitInline("({0}.profile)"); CompiledName("profile1")>]
            member __.profile with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_568 =


    type FunScript.TypeScript.HTMLHeadingElement with 

            [<FunScript.JSEmitInline("({0}.align)"); CompiledName("align4")>]
            member __.align with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_569 =


    type FunScript.TypeScript.HTMLHtmlElement with 

            [<FunScript.JSEmitInline("({0}.version)"); CompiledName("version")>]
            member __.version with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_570 =


    type FunScript.TypeScript.HTMLIFrameElement with 

            [<FunScript.JSEmitInline("({0}.width)"); CompiledName("width8")>]
            member __.width with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.scrolling)"); CompiledName("scrolling1")>]
            member __.scrolling with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.marginHeight)"); CompiledName("marginHeight1")>]
            member __.marginHeight with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.marginWidth)"); CompiledName("marginWidth1")>]
            member __.marginWidth with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.frameSpacing)"); CompiledName("frameSpacing2")>]
            member __.frameSpacing with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.frameBorder)"); CompiledName("frameBorder2")>]
            member __.frameBorder with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.noResize)"); CompiledName("noResize1")>]
            member __.noResize with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.vspace)"); CompiledName("vspace1")>]
            member __.vspace with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.contentWindow)"); CompiledName("contentWindow1")>]
            member __.contentWindow with get() : FunScript.TypeScript.Window = failwith "never" and set (v : FunScript.TypeScript.Window) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.align)"); CompiledName("align5")>]
            member __.align with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.src)"); CompiledName("src3")>]
            member __.src with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.name)"); CompiledName("name17")>]
            member __.name with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.height)"); CompiledName("height6")>]
            member __.height with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.border)"); CompiledName("border4")>]
            member __.border with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.contentDocument)"); CompiledName("contentDocument2")>]
            member __.contentDocument with get() : FunScript.TypeScript.Document = failwith "never" and set (v : FunScript.TypeScript.Document) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.hspace)"); CompiledName("hspace1")>]
            member __.hspace with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.longDesc)"); CompiledName("longDesc1")>]
            member __.longDesc with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.security)"); CompiledName("security2")>]
            member __.security with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onload)"); CompiledName("onload6")>]
            member __.onload with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.sandbox)"); CompiledName("sandbox")>]
            member __.sandbox with get() : FunScript.TypeScript.DOMSettableTokenList = failwith "never" and set (v : FunScript.TypeScript.DOMSettableTokenList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerenter\", {1}, {?2}))"); CompiledName("addEventListener772")>]
            member __.addEventListener_pointerenter(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerout\", {1}, {?2}))"); CompiledName("addEventListener773")>]
            member __.addEventListener_pointerout(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerdown\", {1}, {?2}))"); CompiledName("addEventListener774")>]
            member __.addEventListener_pointerdown(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerup\", {1}, {?2}))"); CompiledName("addEventListener775")>]
            member __.addEventListener_pointerup(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointercancel\", {1}, {?2}))"); CompiledName("addEventListener776")>]
            member __.addEventListener_pointercancel(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerover\", {1}, {?2}))"); CompiledName("addEventListener777")>]
            member __.addEventListener_pointerover(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointermove\", {1}, {?2}))"); CompiledName("addEventListener778")>]
            member __.addEventListener_pointermove(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerleave\", {1}, {?2}))"); CompiledName("addEventListener779")>]
            member __.addEventListener_pointerleave(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerdown\", {1}, {?2}))"); CompiledName("addEventListener780")>]
            member __.addEventListener_mspointerdown(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgotpointercapture\", {1}, {?2}))"); CompiledName("addEventListener781")>]
            member __.addEventListener_msgotpointercapture(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturedoubletap\", {1}, {?2}))"); CompiledName("addEventListener782")>]
            member __.addEventListener_msgesturedoubletap(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerhover\", {1}, {?2}))"); CompiledName("addEventListener783")>]
            member __.addEventListener_mspointerhover(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturehold\", {1}, {?2}))"); CompiledName("addEventListener784")>]
            member __.addEventListener_msgesturehold(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointermove\", {1}, {?2}))"); CompiledName("addEventListener785")>]
            member __.addEventListener_mspointermove(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturechange\", {1}, {?2}))"); CompiledName("addEventListener786")>]
            member __.addEventListener_msgesturechange(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturestart\", {1}, {?2}))"); CompiledName("addEventListener787")>]
            member __.addEventListener_msgesturestart(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointercancel\", {1}, {?2}))"); CompiledName("addEventListener788")>]
            member __.addEventListener_mspointercancel(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgestureend\", {1}, {?2}))"); CompiledName("addEventListener789")>]
            member __.addEventListener_msgestureend(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturetap\", {1}, {?2}))"); CompiledName("addEventListener790")>]
            member __.addEventListener_msgesturetap(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerout\", {1}, {?2}))"); CompiledName("addEventListener791")>]
            member __.addEventListener_mspointerout(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msinertiastart\", {1}, {?2}))"); CompiledName("addEventListener792")>]
            member __.addEventListener_msinertiastart(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mslostpointercapture\", {1}, {?2}))"); CompiledName("addEventListener793")>]
            member __.addEventListener_mslostpointercapture(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerover\", {1}, {?2}))"); CompiledName("addEventListener794")>]
            member __.addEventListener_mspointerover(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerup\", {1}, {?2}))"); CompiledName("addEventListener795")>]
            member __.addEventListener_mspointerup(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"lostpointercapture\", {1}, {?2}))"); CompiledName("addEventListener796")>]
            member __.addEventListener_lostpointercapture(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerenter\", {1}, {?2}))"); CompiledName("addEventListener797")>]
            member __.addEventListener_mspointerenter(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"gotpointercapture\", {1}, {?2}))"); CompiledName("addEventListener798")>]
            member __.addEventListener_gotpointercapture(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerleave\", {1}, {?2}))"); CompiledName("addEventListener799")>]
            member __.addEventListener_mspointerleave(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseleave\", {1}, {?2}))"); CompiledName("addEventListener800")>]
            member __.addEventListener_mouseleave(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforecut\", {1}, {?2}))"); CompiledName("addEventListener801")>]
            member __.addEventListener_beforecut(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"keydown\", {1}, {?2}))"); CompiledName("addEventListener802")>]
            member __.addEventListener_keydown(listener : System.Func<FunScript.TypeScript.KeyboardEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"move\", {1}, {?2}))"); CompiledName("addEventListener803")>]
            member __.addEventListener_move(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"keyup\", {1}, {?2}))"); CompiledName("addEventListener804")>]
            member __.addEventListener_keyup(listener : System.Func<FunScript.TypeScript.KeyboardEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"reset\", {1}, {?2}))"); CompiledName("addEventListener805")>]
            member __.addEventListener_reset(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"help\", {1}, {?2}))"); CompiledName("addEventListener806")>]
            member __.addEventListener_help(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragleave\", {1}, {?2}))"); CompiledName("addEventListener807")>]
            member __.addEventListener_dragleave(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"focusin\", {1}, {?2}))"); CompiledName("addEventListener808")>]
            member __.addEventListener_focusin(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"seeked\", {1}, {?2}))"); CompiledName("addEventListener809")>]
            member __.addEventListener_seeked(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"durationchange\", {1}, {?2}))"); CompiledName("addEventListener810")>]
            member __.addEventListener_durationchange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"blur\", {1}, {?2}))"); CompiledName("addEventListener811")>]
            member __.addEventListener_blur(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"emptied\", {1}, {?2}))"); CompiledName("addEventListener812")>]
            member __.addEventListener_emptied(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"seeking\", {1}, {?2}))"); CompiledName("addEventListener813")>]
            member __.addEventListener_seeking(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"canplay\", {1}, {?2}))"); CompiledName("addEventListener814")>]
            member __.addEventListener_canplay(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"deactivate\", {1}, {?2}))"); CompiledName("addEventListener815")>]
            member __.addEventListener_deactivate(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"datasetchanged\", {1}, {?2}))"); CompiledName("addEventListener816")>]
            member __.addEventListener_datasetchanged(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"rowsdelete\", {1}, {?2}))"); CompiledName("addEventListener817")>]
            member __.addEventListener_rowsdelete(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"loadstart\", {1}, {?2}))"); CompiledName("addEventListener818")>]
            member __.addEventListener_loadstart(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"losecapture\", {1}, {?2}))"); CompiledName("addEventListener819")>]
            member __.addEventListener_losecapture(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragenter\", {1}, {?2}))"); CompiledName("addEventListener820")>]
            member __.addEventListener_dragenter(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"controlselect\", {1}, {?2}))"); CompiledName("addEventListener821")>]
            member __.addEventListener_controlselect(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"submit\", {1}, {?2}))"); CompiledName("addEventListener822")>]
            member __.addEventListener_submit(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"change\", {1}, {?2}))"); CompiledName("addEventListener823")>]
            member __.addEventListener_change(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"layoutcomplete\", {1}, {?2}))"); CompiledName("addEventListener824")>]
            member __.addEventListener_layoutcomplete(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforeactivate\", {1}, {?2}))"); CompiledName("addEventListener825")>]
            member __.addEventListener_beforeactivate(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"canplaythrough\", {1}, {?2}))"); CompiledName("addEventListener826")>]
            member __.addEventListener_canplaythrough(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforeupdate\", {1}, {?2}))"); CompiledName("addEventListener827")>]
            member __.addEventListener_beforeupdate(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"filterchange\", {1}, {?2}))"); CompiledName("addEventListener828")>]
            member __.addEventListener_filterchange(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"datasetcomplete\", {1}, {?2}))"); CompiledName("addEventListener829")>]
            member __.addEventListener_datasetcomplete(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"suspend\", {1}, {?2}))"); CompiledName("addEventListener830")>]
            member __.addEventListener_suspend(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseenter\", {1}, {?2}))"); CompiledName("addEventListener831")>]
            member __.addEventListener_mouseenter(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"errorupdate\", {1}, {?2}))"); CompiledName("addEventListener832")>]
            member __.addEventListener_errorupdate(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseout\", {1}, {?2}))"); CompiledName("addEventListener833")>]
            member __.addEventListener_mouseout(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mousewheel\", {1}, {?2}))"); CompiledName("addEventListener834")>]
            member __.addEventListener_mousewheel(listener : System.Func<FunScript.TypeScript.MouseWheelEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"volumechange\", {1}, {?2}))"); CompiledName("addEventListener835")>]
            member __.addEventListener_volumechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"cellchange\", {1}, {?2}))"); CompiledName("addEventListener836")>]
            member __.addEventListener_cellchange(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"rowexit\", {1}, {?2}))"); CompiledName("addEventListener837")>]
            member __.addEventListener_rowexit(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"rowsinserted\", {1}, {?2}))"); CompiledName("addEventListener838")>]
            member __.addEventListener_rowsinserted(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"propertychange\", {1}, {?2}))"); CompiledName("addEventListener839")>]
            member __.addEventListener_propertychange(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragend\", {1}, {?2}))"); CompiledName("addEventListener840")>]
            member __.addEventListener_dragend(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforepaste\", {1}, {?2}))"); CompiledName("addEventListener841")>]
            member __.addEventListener_beforepaste(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragover\", {1}, {?2}))"); CompiledName("addEventListener842")>]
            member __.addEventListener_dragover(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseup\", {1}, {?2}))"); CompiledName("addEventListener843")>]
            member __.addEventListener_mouseup(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragstart\", {1}, {?2}))"); CompiledName("addEventListener844")>]
            member __.addEventListener_dragstart(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforecopy\", {1}, {?2}))"); CompiledName("addEventListener845")>]
            member __.addEventListener_beforecopy(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"drag\", {1}, {?2}))"); CompiledName("addEventListener846")>]
            member __.addEventListener_drag(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseover\", {1}, {?2}))"); CompiledName("addEventListener847")>]
            member __.addEventListener_mouseover(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pause\", {1}, {?2}))"); CompiledName("addEventListener848")>]
            member __.addEventListener_pause(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mousedown\", {1}, {?2}))"); CompiledName("addEventListener849")>]
            member __.addEventListener_mousedown(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"click\", {1}, {?2}))"); CompiledName("addEventListener850")>]
            member __.addEventListener_click(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"waiting\", {1}, {?2}))"); CompiledName("addEventListener851")>]
            member __.addEventListener_waiting(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"resizestart\", {1}, {?2}))"); CompiledName("addEventListener852")>]
            member __.addEventListener_resizestart(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"paste\", {1}, {?2}))"); CompiledName("addEventListener853")>]
            member __.addEventListener_paste(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"moveend\", {1}, {?2}))"); CompiledName("addEventListener854")>]
            member __.addEventListener_moveend(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"stalled\", {1}, {?2}))"); CompiledName("addEventListener855")>]
            member __.addEventListener_stalled(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mousemove\", {1}, {?2}))"); CompiledName("addEventListener856")>]
            member __.addEventListener_mousemove(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforeeditfocus\", {1}, {?2}))"); CompiledName("addEventListener857")>]
            member __.addEventListener_beforeeditfocus(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"ratechange\", {1}, {?2}))"); CompiledName("addEventListener858")>]
            member __.addEventListener_ratechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"progress\", {1}, {?2}))"); CompiledName("addEventListener859")>]
            member __.addEventListener_progress(listener : System.Func<FunScript.TypeScript.ProgressEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dblclick\", {1}, {?2}))"); CompiledName("addEventListener860")>]
            member __.addEventListener_dblclick(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"contextmenu\", {1}, {?2}))"); CompiledName("addEventListener861")>]
            member __.addEventListener_contextmenu(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"loadedmetadata\", {1}, {?2}))"); CompiledName("addEventListener862")>]
            member __.addEventListener_loadedmetadata(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"afterupdate\", {1}, {?2}))"); CompiledName("addEventListener863")>]
            member __.addEventListener_afterupdate(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"error\", {1}, {?2}))"); CompiledName("addEventListener864")>]
            member __.addEventListener_error(listener : System.Func<FunScript.TypeScript.ErrorEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"play\", {1}, {?2}))"); CompiledName("addEventListener865")>]
            member __.addEventListener_play(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"resizeend\", {1}, {?2}))"); CompiledName("addEventListener866")>]
            member __.addEventListener_resizeend(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"playing\", {1}, {?2}))"); CompiledName("addEventListener867")>]
            member __.addEventListener_playing(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"focusout\", {1}, {?2}))"); CompiledName("addEventListener868")>]
            member __.addEventListener_focusout(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"abort\", {1}, {?2}))"); CompiledName("addEventListener869")>]
            member __.addEventListener_abort(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dataavailable\", {1}, {?2}))"); CompiledName("addEventListener870")>]
            member __.addEventListener_dataavailable(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"readystatechange\", {1}, {?2}))"); CompiledName("addEventListener871")>]
            member __.addEventListener_readystatechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"keypress\", {1}, {?2}))"); CompiledName("addEventListener872")>]
            member __.addEventListener_keypress(listener : System.Func<FunScript.TypeScript.KeyboardEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"loadeddata\", {1}, {?2}))"); CompiledName("addEventListener873")>]
            member __.addEventListener_loadeddata(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforedeactivate\", {1}, {?2}))"); CompiledName("addEventListener874")>]
            member __.addEventListener_beforedeactivate(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"activate\", {1}, {?2}))"); CompiledName("addEventListener875")>]
            member __.addEventListener_activate(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"movestart\", {1}, {?2}))"); CompiledName("addEventListener876")>]
            member __.addEventListener_movestart(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"selectstart\", {1}, {?2}))"); CompiledName("addEventListener877")>]
            member __.addEventListener_selectstart(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"focus\", {1}, {?2}))"); CompiledName("addEventListener878")>]
            member __.addEventListener_focus(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"timeupdate\", {1}, {?2}))"); CompiledName("addEventListener879")>]
            member __.addEventListener_timeupdate(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"resize\", {1}, {?2}))"); CompiledName("addEventListener880")>]
            member __.addEventListener_resize(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"cut\", {1}, {?2}))"); CompiledName("addEventListener881")>]
            member __.addEventListener_cut(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"select\", {1}, {?2}))"); CompiledName("addEventListener882")>]
            member __.addEventListener_select(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"drop\", {1}, {?2}))"); CompiledName("addEventListener883")>]
            member __.addEventListener_drop(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"copy\", {1}, {?2}))"); CompiledName("addEventListener884")>]
            member __.addEventListener_copy(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"ended\", {1}, {?2}))"); CompiledName("addEventListener885")>]
            member __.addEventListener_ended(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"scroll\", {1}, {?2}))"); CompiledName("addEventListener886")>]
            member __.addEventListener_scroll(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"rowenter\", {1}, {?2}))"); CompiledName("addEventListener887")>]
            member __.addEventListener_rowenter(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"load\", {1}, {?2}))"); CompiledName("addEventListener888")>]
            member __.addEventListener_load(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"input\", {1}, {?2}))"); CompiledName("addEventListener889")>]
            member __.addEventListener_input(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mscontentzoom\", {1}, {?2}))"); CompiledName("addEventListener890")>]
            member __.addEventListener_mscontentzoom(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"cuechange\", {1}, {?2}))"); CompiledName("addEventListener891")>]
            member __.addEventListener_cuechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msmanipulationstatechanged\", {1}, {?2}))"); CompiledName("addEventListener892")>]
            member __.addEventListener_msmanipulationstatechanged(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener({1}, {2}, {?3}))"); CompiledName("addEventListener893")>]
            member __.addEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener = {1})"); CompiledName("addEventListener893Aux")>]
            member __.``addEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_571 =


    type FunScript.TypeScript.HTMLImageElement with 

            [<FunScript.JSEmitInline("({0}.width)"); CompiledName("width9")>]
            member __.width with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.vspace)"); CompiledName("vspace2")>]
            member __.vspace with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.naturalHeight)"); CompiledName("naturalHeight")>]
            member __.naturalHeight with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.alt)"); CompiledName("alt2")>]
            member __.alt with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.align)"); CompiledName("align6")>]
            member __.align with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.src)"); CompiledName("src4")>]
            member __.src with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.useMap)"); CompiledName("useMap1")>]
            member __.useMap with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.naturalWidth)"); CompiledName("naturalWidth")>]
            member __.naturalWidth with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.name)"); CompiledName("name18")>]
            member __.name with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.height)"); CompiledName("height7")>]
            member __.height with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.border)"); CompiledName("border5")>]
            member __.border with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.hspace)"); CompiledName("hspace2")>]
            member __.hspace with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.longDesc)"); CompiledName("longDesc2")>]
            member __.longDesc with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.href)"); CompiledName("href5")>]
            member __.href with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.isMap)"); CompiledName("isMap")>]
            member __.isMap with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.complete)"); CompiledName("complete")>]
            member __.complete with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msPlayToPrimary)"); CompiledName("msPlayToPrimary1")>]
            member __.msPlayToPrimary with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msPlayToDisabled)"); CompiledName("msPlayToDisabled1")>]
            member __.msPlayToDisabled with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msPlayToSource)"); CompiledName("msPlayToSource1")>]
            member __.msPlayToSource with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.crossOrigin)"); CompiledName("crossOrigin")>]
            member __.crossOrigin with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msPlayToPreferredSourceUri)"); CompiledName("msPlayToPreferredSourceUri1")>]
            member __.msPlayToPreferredSourceUri with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_572 =


    type FunScript.TypeScript.HTMLInputElement with 

            [<FunScript.JSEmitInline("({0}.width)"); CompiledName("width10")>]
            member __.width with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.status)"); CompiledName("status3")>]
            member __.status with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.form)"); CompiledName("form3")>]
            member __.form with get() : FunScript.TypeScript.HTMLFormElement = failwith "never" and set (v : FunScript.TypeScript.HTMLFormElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.selectionStart)"); CompiledName("selectionStart")>]
            member __.selectionStart with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.indeterminate)"); CompiledName("indeterminate")>]
            member __.indeterminate with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.readOnly)"); CompiledName("readOnly2")>]
            member __.readOnly with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.size)"); CompiledName("size3")>]
            member __.size with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.loop)"); CompiledName("loop1")>]
            member __.loop with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.selectionEnd)"); CompiledName("selectionEnd")>]
            member __.selectionEnd with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.vrml)"); CompiledName("vrml")>]
            member __.vrml with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.lowsrc)"); CompiledName("lowsrc")>]
            member __.lowsrc with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.vspace)"); CompiledName("vspace3")>]
            member __.vspace with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.accept)"); CompiledName("accept")>]
            member __.accept with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.alt)"); CompiledName("alt3")>]
            member __.alt with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.defaultChecked)"); CompiledName("defaultChecked")>]
            member __.defaultChecked with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.align)"); CompiledName("align7")>]
            member __.align with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.value)"); CompiledName("value3")>]
            member __.value with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.src)"); CompiledName("src5")>]
            member __.src with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.name)"); CompiledName("name19")>]
            member __.name with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.useMap)"); CompiledName("useMap2")>]
            member __.useMap with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.height)"); CompiledName("height8")>]
            member __.height with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.border)"); CompiledName("border6")>]
            member __.border with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.dynsrc)"); CompiledName("dynsrc")>]
            member __.dynsrc with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.checked)"); CompiledName("_checked")>]
            member __._checked with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.hspace)"); CompiledName("hspace3")>]
            member __.hspace with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.maxLength)"); CompiledName("maxLength")>]
            member __.maxLength with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.type)"); CompiledName("_type8")>]
            member __._type with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.defaultValue)"); CompiledName("defaultValue")>]
            member __.defaultValue with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.complete)"); CompiledName("complete1")>]
            member __.complete with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.start)"); CompiledName("start")>]
            member __.start with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.validationMessage)"); CompiledName("validationMessage2")>]
            member __.validationMessage with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.files)"); CompiledName("files1")>]
            member __.files with get() : FunScript.TypeScript.FileList = failwith "never" and set (v : FunScript.TypeScript.FileList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.max)"); CompiledName("max")>]
            member __.max with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.formTarget)"); CompiledName("formTarget1")>]
            member __.formTarget with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.willValidate)"); CompiledName("willValidate2")>]
            member __.willValidate with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.step)"); CompiledName("step")>]
            member __.step with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.autofocus)"); CompiledName("autofocus1")>]
            member __.autofocus with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.required)"); CompiledName("required")>]
            member __.required with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.formEnctype)"); CompiledName("formEnctype1")>]
            member __.formEnctype with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.valueAsNumber)"); CompiledName("valueAsNumber")>]
            member __.valueAsNumber with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.placeholder)"); CompiledName("placeholder")>]
            member __.placeholder with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.formMethod)"); CompiledName("formMethod1")>]
            member __.formMethod with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.list)"); CompiledName("list")>]
            member __.list with get() : FunScript.TypeScript.HTMLElement = failwith "never" and set (v : FunScript.TypeScript.HTMLElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.autocomplete)"); CompiledName("autocomplete1")>]
            member __.autocomplete with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.min)"); CompiledName("min")>]
            member __.min with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.formAction)"); CompiledName("formAction1")>]
            member __.formAction with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pattern)"); CompiledName("pattern")>]
            member __.pattern with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.validity)"); CompiledName("validity2")>]
            member __.validity with get() : FunScript.TypeScript.ValidityState = failwith "never" and set (v : FunScript.TypeScript.ValidityState) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.formNoValidate)"); CompiledName("formNoValidate1")>]
            member __.formNoValidate with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.multiple)"); CompiledName("multiple")>]
            member __.multiple with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createTextRange())"); CompiledName("createTextRange2")>]
            member __.createTextRange() : FunScript.TypeScript.TextRange = failwith "never"
            [<FunScript.JSEmitInline("({0}.createTextRange = {1})"); CompiledName("createTextRange2Aux")>]
            member __.``createTextRange <-``(func : System.Func<FunScript.TypeScript.TextRange>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setSelectionRange({1}, {2}))"); CompiledName("setSelectionRange")>]
            member __.setSelectionRange(start : float, _end : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setSelectionRange = {1})"); CompiledName("setSelectionRangeAux")>]
            member __.``setSelectionRange <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.select())"); CompiledName("select2")>]
            member __.select() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.select = {1})"); CompiledName("select2Aux")>]
            member __.``select <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.checkValidity())"); CompiledName("checkValidity3")>]
            member __.checkValidity() : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.checkValidity = {1})"); CompiledName("checkValidity3Aux")>]
            member __.``checkValidity <-``(func : System.Func<bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.stepDown({?1}))"); CompiledName("stepDown")>]
            member __.stepDown(?n : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.stepDown = {1})"); CompiledName("stepDownAux")>]
            member __.``stepDown <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.stepUp({?1}))"); CompiledName("stepUp")>]
            member __.stepUp(?n : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.stepUp = {1})"); CompiledName("stepUpAux")>]
            member __.``stepUp <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setCustomValidity({1}))"); CompiledName("setCustomValidity2")>]
            member __.setCustomValidity(error : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setCustomValidity = {1})"); CompiledName("setCustomValidity2Aux")>]
            member __.``setCustomValidity <-``(func : System.Func<string, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_573 =


    type FunScript.TypeScript.HTMLIsIndexElement with 

            [<FunScript.JSEmitInline("({0}.form)"); CompiledName("form4")>]
            member __.form with get() : FunScript.TypeScript.HTMLFormElement = failwith "never" and set (v : FunScript.TypeScript.HTMLFormElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.action)"); CompiledName("action1")>]
            member __.action with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.prompt)"); CompiledName("prompt1")>]
            member __.prompt with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_574 =


    type FunScript.TypeScript.HTMLLIElement with 

            [<FunScript.JSEmitInline("({0}.value)"); CompiledName("value4")>]
            member __.value with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_575 =


    type FunScript.TypeScript.HTMLLabelElement with 

            [<FunScript.JSEmitInline("({0}.htmlFor)"); CompiledName("htmlFor")>]
            member __.htmlFor with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.form)"); CompiledName("form5")>]
            member __.form with get() : FunScript.TypeScript.HTMLFormElement = failwith "never" and set (v : FunScript.TypeScript.HTMLFormElement) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_576 =


    type FunScript.TypeScript.HTMLLegendElement with 

            [<FunScript.JSEmitInline("({0}.align)"); CompiledName("align8")>]
            member __.align with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.form)"); CompiledName("form6")>]
            member __.form with get() : FunScript.TypeScript.HTMLFormElement = failwith "never" and set (v : FunScript.TypeScript.HTMLFormElement) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_577 =


    type FunScript.TypeScript.HTMLLinkElement with 

            [<FunScript.JSEmitInline("({0}.rel)"); CompiledName("rel1")>]
            member __.rel with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.target)"); CompiledName("target5")>]
            member __.target with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.href)"); CompiledName("href6")>]
            member __.href with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.media)"); CompiledName("media3")>]
            member __.media with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.rev)"); CompiledName("rev1")>]
            member __.rev with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.type)"); CompiledName("_type9")>]
            member __._type with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.charset)"); CompiledName("charset2")>]
            member __.charset with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.hreflang)"); CompiledName("hreflang1")>]
            member __.hreflang with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_578 =


    type FunScript.TypeScript.HTMLMapElement with 

            [<FunScript.JSEmitInline("({0}.name)"); CompiledName("name20")>]
            member __.name with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.areas)"); CompiledName("areas")>]
            member __.areas with get() : FunScript.TypeScript.HTMLAreasCollection = failwith "never" and set (v : FunScript.TypeScript.HTMLAreasCollection) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_579 =


    type FunScript.TypeScript.HTMLMarqueeElement with 

            [<FunScript.JSEmitInline("({0}.width)"); CompiledName("width11")>]
            member __.width with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onbounce)"); CompiledName("onbounce")>]
            member __.onbounce with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.vspace)"); CompiledName("vspace4")>]
            member __.vspace with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.trueSpeed)"); CompiledName("trueSpeed")>]
            member __.trueSpeed with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.scrollAmount)"); CompiledName("scrollAmount")>]
            member __.scrollAmount with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.scrollDelay)"); CompiledName("scrollDelay")>]
            member __.scrollDelay with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.behavior)"); CompiledName("behavior")>]
            member __.behavior with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.height)"); CompiledName("height9")>]
            member __.height with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.loop)"); CompiledName("loop2")>]
            member __.loop with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.direction)"); CompiledName("direction1")>]
            member __.direction with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.hspace)"); CompiledName("hspace4")>]
            member __.hspace with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onstart)"); CompiledName("onstart")>]
            member __.onstart with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onfinish)"); CompiledName("onfinish")>]
            member __.onfinish with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.stop())"); CompiledName("stop")>]
            member __.stop() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.stop = {1})"); CompiledName("stopAux")>]
            member __.``stop <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.start())"); CompiledName("start1")>]
            member __.start() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.start = {1})"); CompiledName("start1Aux")>]
            member __.``start <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerenter\", {1}, {?2}))"); CompiledName("addEventListener894")>]
            member __.addEventListener_pointerenter(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerout\", {1}, {?2}))"); CompiledName("addEventListener895")>]
            member __.addEventListener_pointerout(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerdown\", {1}, {?2}))"); CompiledName("addEventListener896")>]
            member __.addEventListener_pointerdown(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerup\", {1}, {?2}))"); CompiledName("addEventListener897")>]
            member __.addEventListener_pointerup(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointercancel\", {1}, {?2}))"); CompiledName("addEventListener898")>]
            member __.addEventListener_pointercancel(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerover\", {1}, {?2}))"); CompiledName("addEventListener899")>]
            member __.addEventListener_pointerover(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointermove\", {1}, {?2}))"); CompiledName("addEventListener900")>]
            member __.addEventListener_pointermove(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerleave\", {1}, {?2}))"); CompiledName("addEventListener901")>]
            member __.addEventListener_pointerleave(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerdown\", {1}, {?2}))"); CompiledName("addEventListener902")>]
            member __.addEventListener_mspointerdown(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgotpointercapture\", {1}, {?2}))"); CompiledName("addEventListener903")>]
            member __.addEventListener_msgotpointercapture(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturedoubletap\", {1}, {?2}))"); CompiledName("addEventListener904")>]
            member __.addEventListener_msgesturedoubletap(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerhover\", {1}, {?2}))"); CompiledName("addEventListener905")>]
            member __.addEventListener_mspointerhover(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturehold\", {1}, {?2}))"); CompiledName("addEventListener906")>]
            member __.addEventListener_msgesturehold(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointermove\", {1}, {?2}))"); CompiledName("addEventListener907")>]
            member __.addEventListener_mspointermove(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturechange\", {1}, {?2}))"); CompiledName("addEventListener908")>]
            member __.addEventListener_msgesturechange(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturestart\", {1}, {?2}))"); CompiledName("addEventListener909")>]
            member __.addEventListener_msgesturestart(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointercancel\", {1}, {?2}))"); CompiledName("addEventListener910")>]
            member __.addEventListener_mspointercancel(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgestureend\", {1}, {?2}))"); CompiledName("addEventListener911")>]
            member __.addEventListener_msgestureend(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturetap\", {1}, {?2}))"); CompiledName("addEventListener912")>]
            member __.addEventListener_msgesturetap(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerout\", {1}, {?2}))"); CompiledName("addEventListener913")>]
            member __.addEventListener_mspointerout(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msinertiastart\", {1}, {?2}))"); CompiledName("addEventListener914")>]
            member __.addEventListener_msinertiastart(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mslostpointercapture\", {1}, {?2}))"); CompiledName("addEventListener915")>]
            member __.addEventListener_mslostpointercapture(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerover\", {1}, {?2}))"); CompiledName("addEventListener916")>]
            member __.addEventListener_mspointerover(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerup\", {1}, {?2}))"); CompiledName("addEventListener917")>]
            member __.addEventListener_mspointerup(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"lostpointercapture\", {1}, {?2}))"); CompiledName("addEventListener918")>]
            member __.addEventListener_lostpointercapture(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerenter\", {1}, {?2}))"); CompiledName("addEventListener919")>]
            member __.addEventListener_mspointerenter(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"gotpointercapture\", {1}, {?2}))"); CompiledName("addEventListener920")>]
            member __.addEventListener_gotpointercapture(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerleave\", {1}, {?2}))"); CompiledName("addEventListener921")>]
            member __.addEventListener_mspointerleave(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseleave\", {1}, {?2}))"); CompiledName("addEventListener922")>]
            member __.addEventListener_mouseleave(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforecut\", {1}, {?2}))"); CompiledName("addEventListener923")>]
            member __.addEventListener_beforecut(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"keydown\", {1}, {?2}))"); CompiledName("addEventListener924")>]
            member __.addEventListener_keydown(listener : System.Func<FunScript.TypeScript.KeyboardEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"move\", {1}, {?2}))"); CompiledName("addEventListener925")>]
            member __.addEventListener_move(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"keyup\", {1}, {?2}))"); CompiledName("addEventListener926")>]
            member __.addEventListener_keyup(listener : System.Func<FunScript.TypeScript.KeyboardEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"reset\", {1}, {?2}))"); CompiledName("addEventListener927")>]
            member __.addEventListener_reset(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"help\", {1}, {?2}))"); CompiledName("addEventListener928")>]
            member __.addEventListener_help(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragleave\", {1}, {?2}))"); CompiledName("addEventListener929")>]
            member __.addEventListener_dragleave(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"focusin\", {1}, {?2}))"); CompiledName("addEventListener930")>]
            member __.addEventListener_focusin(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"seeked\", {1}, {?2}))"); CompiledName("addEventListener931")>]
            member __.addEventListener_seeked(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"durationchange\", {1}, {?2}))"); CompiledName("addEventListener932")>]
            member __.addEventListener_durationchange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"blur\", {1}, {?2}))"); CompiledName("addEventListener933")>]
            member __.addEventListener_blur(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"emptied\", {1}, {?2}))"); CompiledName("addEventListener934")>]
            member __.addEventListener_emptied(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"seeking\", {1}, {?2}))"); CompiledName("addEventListener935")>]
            member __.addEventListener_seeking(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"canplay\", {1}, {?2}))"); CompiledName("addEventListener936")>]
            member __.addEventListener_canplay(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"deactivate\", {1}, {?2}))"); CompiledName("addEventListener937")>]
            member __.addEventListener_deactivate(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"datasetchanged\", {1}, {?2}))"); CompiledName("addEventListener938")>]
            member __.addEventListener_datasetchanged(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"rowsdelete\", {1}, {?2}))"); CompiledName("addEventListener939")>]
            member __.addEventListener_rowsdelete(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"loadstart\", {1}, {?2}))"); CompiledName("addEventListener940")>]
            member __.addEventListener_loadstart(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"losecapture\", {1}, {?2}))"); CompiledName("addEventListener941")>]
            member __.addEventListener_losecapture(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragenter\", {1}, {?2}))"); CompiledName("addEventListener942")>]
            member __.addEventListener_dragenter(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"controlselect\", {1}, {?2}))"); CompiledName("addEventListener943")>]
            member __.addEventListener_controlselect(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"submit\", {1}, {?2}))"); CompiledName("addEventListener944")>]
            member __.addEventListener_submit(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"change\", {1}, {?2}))"); CompiledName("addEventListener945")>]
            member __.addEventListener_change(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"layoutcomplete\", {1}, {?2}))"); CompiledName("addEventListener946")>]
            member __.addEventListener_layoutcomplete(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforeactivate\", {1}, {?2}))"); CompiledName("addEventListener947")>]
            member __.addEventListener_beforeactivate(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"canplaythrough\", {1}, {?2}))"); CompiledName("addEventListener948")>]
            member __.addEventListener_canplaythrough(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforeupdate\", {1}, {?2}))"); CompiledName("addEventListener949")>]
            member __.addEventListener_beforeupdate(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"filterchange\", {1}, {?2}))"); CompiledName("addEventListener950")>]
            member __.addEventListener_filterchange(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"datasetcomplete\", {1}, {?2}))"); CompiledName("addEventListener951")>]
            member __.addEventListener_datasetcomplete(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"suspend\", {1}, {?2}))"); CompiledName("addEventListener952")>]
            member __.addEventListener_suspend(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseenter\", {1}, {?2}))"); CompiledName("addEventListener953")>]
            member __.addEventListener_mouseenter(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"errorupdate\", {1}, {?2}))"); CompiledName("addEventListener954")>]
            member __.addEventListener_errorupdate(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseout\", {1}, {?2}))"); CompiledName("addEventListener955")>]
            member __.addEventListener_mouseout(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mousewheel\", {1}, {?2}))"); CompiledName("addEventListener956")>]
            member __.addEventListener_mousewheel(listener : System.Func<FunScript.TypeScript.MouseWheelEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"volumechange\", {1}, {?2}))"); CompiledName("addEventListener957")>]
            member __.addEventListener_volumechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"cellchange\", {1}, {?2}))"); CompiledName("addEventListener958")>]
            member __.addEventListener_cellchange(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"rowexit\", {1}, {?2}))"); CompiledName("addEventListener959")>]
            member __.addEventListener_rowexit(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"rowsinserted\", {1}, {?2}))"); CompiledName("addEventListener960")>]
            member __.addEventListener_rowsinserted(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"propertychange\", {1}, {?2}))"); CompiledName("addEventListener961")>]
            member __.addEventListener_propertychange(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragend\", {1}, {?2}))"); CompiledName("addEventListener962")>]
            member __.addEventListener_dragend(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforepaste\", {1}, {?2}))"); CompiledName("addEventListener963")>]
            member __.addEventListener_beforepaste(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragover\", {1}, {?2}))"); CompiledName("addEventListener964")>]
            member __.addEventListener_dragover(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseup\", {1}, {?2}))"); CompiledName("addEventListener965")>]
            member __.addEventListener_mouseup(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragstart\", {1}, {?2}))"); CompiledName("addEventListener966")>]
            member __.addEventListener_dragstart(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforecopy\", {1}, {?2}))"); CompiledName("addEventListener967")>]
            member __.addEventListener_beforecopy(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"drag\", {1}, {?2}))"); CompiledName("addEventListener968")>]
            member __.addEventListener_drag(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseover\", {1}, {?2}))"); CompiledName("addEventListener969")>]
            member __.addEventListener_mouseover(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pause\", {1}, {?2}))"); CompiledName("addEventListener970")>]
            member __.addEventListener_pause(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mousedown\", {1}, {?2}))"); CompiledName("addEventListener971")>]
            member __.addEventListener_mousedown(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"click\", {1}, {?2}))"); CompiledName("addEventListener972")>]
            member __.addEventListener_click(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"waiting\", {1}, {?2}))"); CompiledName("addEventListener973")>]
            member __.addEventListener_waiting(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"resizestart\", {1}, {?2}))"); CompiledName("addEventListener974")>]
            member __.addEventListener_resizestart(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"paste\", {1}, {?2}))"); CompiledName("addEventListener975")>]
            member __.addEventListener_paste(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"moveend\", {1}, {?2}))"); CompiledName("addEventListener976")>]
            member __.addEventListener_moveend(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"stalled\", {1}, {?2}))"); CompiledName("addEventListener977")>]
            member __.addEventListener_stalled(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mousemove\", {1}, {?2}))"); CompiledName("addEventListener978")>]
            member __.addEventListener_mousemove(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforeeditfocus\", {1}, {?2}))"); CompiledName("addEventListener979")>]
            member __.addEventListener_beforeeditfocus(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"ratechange\", {1}, {?2}))"); CompiledName("addEventListener980")>]
            member __.addEventListener_ratechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"progress\", {1}, {?2}))"); CompiledName("addEventListener981")>]
            member __.addEventListener_progress(listener : System.Func<FunScript.TypeScript.ProgressEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dblclick\", {1}, {?2}))"); CompiledName("addEventListener982")>]
            member __.addEventListener_dblclick(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"contextmenu\", {1}, {?2}))"); CompiledName("addEventListener983")>]
            member __.addEventListener_contextmenu(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"loadedmetadata\", {1}, {?2}))"); CompiledName("addEventListener984")>]
            member __.addEventListener_loadedmetadata(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"afterupdate\", {1}, {?2}))"); CompiledName("addEventListener985")>]
            member __.addEventListener_afterupdate(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"error\", {1}, {?2}))"); CompiledName("addEventListener986")>]
            member __.addEventListener_error(listener : System.Func<FunScript.TypeScript.ErrorEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"play\", {1}, {?2}))"); CompiledName("addEventListener987")>]
            member __.addEventListener_play(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"resizeend\", {1}, {?2}))"); CompiledName("addEventListener988")>]
            member __.addEventListener_resizeend(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"playing\", {1}, {?2}))"); CompiledName("addEventListener989")>]
            member __.addEventListener_playing(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"focusout\", {1}, {?2}))"); CompiledName("addEventListener990")>]
            member __.addEventListener_focusout(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"abort\", {1}, {?2}))"); CompiledName("addEventListener991")>]
            member __.addEventListener_abort(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dataavailable\", {1}, {?2}))"); CompiledName("addEventListener992")>]
            member __.addEventListener_dataavailable(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"readystatechange\", {1}, {?2}))"); CompiledName("addEventListener993")>]
            member __.addEventListener_readystatechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"keypress\", {1}, {?2}))"); CompiledName("addEventListener994")>]
            member __.addEventListener_keypress(listener : System.Func<FunScript.TypeScript.KeyboardEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"loadeddata\", {1}, {?2}))"); CompiledName("addEventListener995")>]
            member __.addEventListener_loadeddata(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforedeactivate\", {1}, {?2}))"); CompiledName("addEventListener996")>]
            member __.addEventListener_beforedeactivate(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"activate\", {1}, {?2}))"); CompiledName("addEventListener997")>]
            member __.addEventListener_activate(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"movestart\", {1}, {?2}))"); CompiledName("addEventListener998")>]
            member __.addEventListener_movestart(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"selectstart\", {1}, {?2}))"); CompiledName("addEventListener999")>]
            member __.addEventListener_selectstart(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"focus\", {1}, {?2}))"); CompiledName("addEventListener1000")>]
            member __.addEventListener_focus(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"timeupdate\", {1}, {?2}))"); CompiledName("addEventListener1001")>]
            member __.addEventListener_timeupdate(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"resize\", {1}, {?2}))"); CompiledName("addEventListener1002")>]
            member __.addEventListener_resize(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"cut\", {1}, {?2}))"); CompiledName("addEventListener1003")>]
            member __.addEventListener_cut(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"select\", {1}, {?2}))"); CompiledName("addEventListener1004")>]
            member __.addEventListener_select(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"drop\", {1}, {?2}))"); CompiledName("addEventListener1005")>]
            member __.addEventListener_drop(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"copy\", {1}, {?2}))"); CompiledName("addEventListener1006")>]
            member __.addEventListener_copy(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"ended\", {1}, {?2}))"); CompiledName("addEventListener1007")>]
            member __.addEventListener_ended(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"scroll\", {1}, {?2}))"); CompiledName("addEventListener1008")>]
            member __.addEventListener_scroll(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"rowenter\", {1}, {?2}))"); CompiledName("addEventListener1009")>]
            member __.addEventListener_rowenter(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"load\", {1}, {?2}))"); CompiledName("addEventListener1010")>]
            member __.addEventListener_load(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"input\", {1}, {?2}))"); CompiledName("addEventListener1011")>]
            member __.addEventListener_input(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mscontentzoom\", {1}, {?2}))"); CompiledName("addEventListener1012")>]
            member __.addEventListener_mscontentzoom(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"cuechange\", {1}, {?2}))"); CompiledName("addEventListener1013")>]
            member __.addEventListener_cuechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msmanipulationstatechanged\", {1}, {?2}))"); CompiledName("addEventListener1014")>]
            member __.addEventListener_msmanipulationstatechanged(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"bounce\", {1}, {?2}))"); CompiledName("addEventListener1015")>]
            member __.addEventListener_bounce(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"start\", {1}, {?2}))"); CompiledName("addEventListener1016")>]
            member __.addEventListener_start(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"finish\", {1}, {?2}))"); CompiledName("addEventListener1017")>]
            member __.addEventListener_finish(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener({1}, {2}, {?3}))"); CompiledName("addEventListener1018")>]
            member __.addEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener = {1})"); CompiledName("addEventListener1018Aux")>]
            member __.``addEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_580 =


    type FunScript.TypeScript.HTMLMediaElement with 

            [<FunScript.JSEmitInline("({0}.initialTime)"); CompiledName("initialTime")>]
            member __.initialTime with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.played)"); CompiledName("played")>]
            member __.played with get() : FunScript.TypeScript.TimeRanges = failwith "never" and set (v : FunScript.TypeScript.TimeRanges) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.currentSrc)"); CompiledName("currentSrc")>]
            member __.currentSrc with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.readyState)"); CompiledName("readyState3")>]
            member __.readyState with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.autobuffer)"); CompiledName("autobuffer")>]
            member __.autobuffer with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.loop)"); CompiledName("loop3")>]
            member __.loop with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ended)"); CompiledName("ended")>]
            member __.ended with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.buffered)"); CompiledName("buffered")>]
            member __.buffered with get() : FunScript.TypeScript.TimeRanges = failwith "never" and set (v : FunScript.TypeScript.TimeRanges) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.error)"); CompiledName("error4")>]
            member __.error with get() : FunScript.TypeScript.MediaError = failwith "never" and set (v : FunScript.TypeScript.MediaError) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.seekable)"); CompiledName("seekable")>]
            member __.seekable with get() : FunScript.TypeScript.TimeRanges = failwith "never" and set (v : FunScript.TypeScript.TimeRanges) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.autoplay)"); CompiledName("autoplay")>]
            member __.autoplay with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.controls)"); CompiledName("controls")>]
            member __.controls with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.volume)"); CompiledName("volume1")>]
            member __.volume with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.src)"); CompiledName("src6")>]
            member __.src with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.playbackRate)"); CompiledName("playbackRate")>]
            member __.playbackRate with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.duration)"); CompiledName("duration")>]
            member __.duration with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.muted)"); CompiledName("muted")>]
            member __.muted with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.defaultPlaybackRate)"); CompiledName("defaultPlaybackRate")>]
            member __.defaultPlaybackRate with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.paused)"); CompiledName("paused")>]
            member __.paused with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.seeking)"); CompiledName("seeking")>]
            member __.seeking with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.currentTime)"); CompiledName("currentTime")>]
            member __.currentTime with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.preload)"); CompiledName("preload")>]
            member __.preload with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.networkState)"); CompiledName("networkState")>]
            member __.networkState with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msAudioCategory)"); CompiledName("msAudioCategory")>]
            member __.msAudioCategory with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msRealTime)"); CompiledName("msRealTime")>]
            member __.msRealTime with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msPlayToPrimary)"); CompiledName("msPlayToPrimary2")>]
            member __.msPlayToPrimary with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.textTracks)"); CompiledName("textTracks")>]
            member __.textTracks with get() : FunScript.TypeScript.TextTrackList = failwith "never" and set (v : FunScript.TypeScript.TextTrackList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msPlayToDisabled)"); CompiledName("msPlayToDisabled2")>]
            member __.msPlayToDisabled with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.audioTracks)"); CompiledName("audioTracks")>]
            member __.audioTracks with get() : FunScript.TypeScript.AudioTrackList = failwith "never" and set (v : FunScript.TypeScript.AudioTrackList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msPlayToSource)"); CompiledName("msPlayToSource2")>]
            member __.msPlayToSource with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msAudioDeviceType)"); CompiledName("msAudioDeviceType")>]
            member __.msAudioDeviceType with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msPlayToPreferredSourceUri)"); CompiledName("msPlayToPreferredSourceUri2")>]
            member __.msPlayToPreferredSourceUri with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmsneedkey)"); CompiledName("onmsneedkey")>]
            member __.onmsneedkey with get() : System.Func<FunScript.TypeScript.MSMediaKeyNeededEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MSMediaKeyNeededEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msKeys)"); CompiledName("msKeys")>]
            member __.msKeys with get() : FunScript.TypeScript.MSMediaKeys = failwith "never" and set (v : FunScript.TypeScript.MSMediaKeys) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msGraphicsTrustStatus)"); CompiledName("msGraphicsTrustStatus")>]
            member __.msGraphicsTrustStatus with get() : FunScript.TypeScript.MSGraphicsTrust = failwith "never" and set (v : FunScript.TypeScript.MSGraphicsTrust) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pause())"); CompiledName("pause")>]
            member __.pause() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pause = {1})"); CompiledName("pauseAux")>]
            member __.``pause <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.play())"); CompiledName("play")>]
            member __.play() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.play = {1})"); CompiledName("playAux")>]
            member __.``play <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.load())"); CompiledName("load")>]
            member __.load() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.load = {1})"); CompiledName("loadAux")>]
            member __.``load <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.canPlayType({1}))"); CompiledName("canPlayType")>]
            member __.canPlayType(_type : string) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.canPlayType = {1})"); CompiledName("canPlayTypeAux")>]
            member __.``canPlayType <-``(func : System.Func<string, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msClearEffects())"); CompiledName("msClearEffects")>]
            member __.msClearEffects() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msClearEffects = {1})"); CompiledName("msClearEffectsAux")>]
            member __.``msClearEffects <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msSetMediaProtectionManager({?1}))"); CompiledName("msSetMediaProtectionManager")>]
            member __.msSetMediaProtectionManager(?mediaProtectionManager : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msSetMediaProtectionManager = {1})"); CompiledName("msSetMediaProtectionManagerAux")>]
            member __.``msSetMediaProtectionManager <-``(func : System.Func<obj, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msInsertAudioEffect({1}, {2}, {?3}))"); CompiledName("msInsertAudioEffect")>]
            member __.msInsertAudioEffect(activatableClassId : string, effectRequired : bool, ?config : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msInsertAudioEffect = {1})"); CompiledName("msInsertAudioEffectAux")>]
            member __.``msInsertAudioEffect <-``(func : System.Func<string, bool, obj, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msSetMediaKeys({1}))"); CompiledName("msSetMediaKeys")>]
            member __.msSetMediaKeys(mediaKeys : FunScript.TypeScript.MSMediaKeys) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msSetMediaKeys = {1})"); CompiledName("msSetMediaKeysAux")>]
            member __.``msSetMediaKeys <-``(func : System.Func<FunScript.TypeScript.MSMediaKeys, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addTextTrack({1}, {?2}, {?3}))"); CompiledName("addTextTrack")>]
            member __.addTextTrack(kind : string, ?label : string, ?language : string) : FunScript.TypeScript.TextTrack = failwith "never"
            [<FunScript.JSEmitInline("({0}.addTextTrack = {1})"); CompiledName("addTextTrackAux")>]
            member __.``addTextTrack <-``(func : System.Func<string, string, string, FunScript.TypeScript.TextTrack>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.HAVE_METADATA)"); CompiledName("HAVE_METADATA1")>]
            member __.HAVE_METADATA with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.HAVE_CURRENT_DATA)"); CompiledName("HAVE_CURRENT_DATA1")>]
            member __.HAVE_CURRENT_DATA with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.HAVE_NOTHING)"); CompiledName("HAVE_NOTHING1")>]
            member __.HAVE_NOTHING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NETWORK_NO_SOURCE)"); CompiledName("NETWORK_NO_SOURCE1")>]
            member __.NETWORK_NO_SOURCE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.HAVE_ENOUGH_DATA)"); CompiledName("HAVE_ENOUGH_DATA1")>]
            member __.HAVE_ENOUGH_DATA with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NETWORK_EMPTY)"); CompiledName("NETWORK_EMPTY1")>]
            member __.NETWORK_EMPTY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NETWORK_LOADING)"); CompiledName("NETWORK_LOADING1")>]
            member __.NETWORK_LOADING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NETWORK_IDLE)"); CompiledName("NETWORK_IDLE1")>]
            member __.NETWORK_IDLE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.HAVE_FUTURE_DATA)"); CompiledName("HAVE_FUTURE_DATA1")>]
            member __.HAVE_FUTURE_DATA with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerenter\", {1}, {?2}))"); CompiledName("addEventListener1019")>]
            member __.addEventListener_pointerenter(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerout\", {1}, {?2}))"); CompiledName("addEventListener1020")>]
            member __.addEventListener_pointerout(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerdown\", {1}, {?2}))"); CompiledName("addEventListener1021")>]
            member __.addEventListener_pointerdown(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerup\", {1}, {?2}))"); CompiledName("addEventListener1022")>]
            member __.addEventListener_pointerup(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointercancel\", {1}, {?2}))"); CompiledName("addEventListener1023")>]
            member __.addEventListener_pointercancel(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerover\", {1}, {?2}))"); CompiledName("addEventListener1024")>]
            member __.addEventListener_pointerover(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointermove\", {1}, {?2}))"); CompiledName("addEventListener1025")>]
            member __.addEventListener_pointermove(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerleave\", {1}, {?2}))"); CompiledName("addEventListener1026")>]
            member __.addEventListener_pointerleave(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerdown\", {1}, {?2}))"); CompiledName("addEventListener1027")>]
            member __.addEventListener_mspointerdown(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgotpointercapture\", {1}, {?2}))"); CompiledName("addEventListener1028")>]
            member __.addEventListener_msgotpointercapture(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturedoubletap\", {1}, {?2}))"); CompiledName("addEventListener1029")>]
            member __.addEventListener_msgesturedoubletap(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerhover\", {1}, {?2}))"); CompiledName("addEventListener1030")>]
            member __.addEventListener_mspointerhover(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturehold\", {1}, {?2}))"); CompiledName("addEventListener1031")>]
            member __.addEventListener_msgesturehold(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointermove\", {1}, {?2}))"); CompiledName("addEventListener1032")>]
            member __.addEventListener_mspointermove(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturechange\", {1}, {?2}))"); CompiledName("addEventListener1033")>]
            member __.addEventListener_msgesturechange(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturestart\", {1}, {?2}))"); CompiledName("addEventListener1034")>]
            member __.addEventListener_msgesturestart(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointercancel\", {1}, {?2}))"); CompiledName("addEventListener1035")>]
            member __.addEventListener_mspointercancel(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgestureend\", {1}, {?2}))"); CompiledName("addEventListener1036")>]
            member __.addEventListener_msgestureend(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturetap\", {1}, {?2}))"); CompiledName("addEventListener1037")>]
            member __.addEventListener_msgesturetap(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerout\", {1}, {?2}))"); CompiledName("addEventListener1038")>]
            member __.addEventListener_mspointerout(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msinertiastart\", {1}, {?2}))"); CompiledName("addEventListener1039")>]
            member __.addEventListener_msinertiastart(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mslostpointercapture\", {1}, {?2}))"); CompiledName("addEventListener1040")>]
            member __.addEventListener_mslostpointercapture(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerover\", {1}, {?2}))"); CompiledName("addEventListener1041")>]
            member __.addEventListener_mspointerover(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerup\", {1}, {?2}))"); CompiledName("addEventListener1042")>]
            member __.addEventListener_mspointerup(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"lostpointercapture\", {1}, {?2}))"); CompiledName("addEventListener1043")>]
            member __.addEventListener_lostpointercapture(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerenter\", {1}, {?2}))"); CompiledName("addEventListener1044")>]
            member __.addEventListener_mspointerenter(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"gotpointercapture\", {1}, {?2}))"); CompiledName("addEventListener1045")>]
            member __.addEventListener_gotpointercapture(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerleave\", {1}, {?2}))"); CompiledName("addEventListener1046")>]
            member __.addEventListener_mspointerleave(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseleave\", {1}, {?2}))"); CompiledName("addEventListener1047")>]
            member __.addEventListener_mouseleave(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforecut\", {1}, {?2}))"); CompiledName("addEventListener1048")>]
            member __.addEventListener_beforecut(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"keydown\", {1}, {?2}))"); CompiledName("addEventListener1049")>]
            member __.addEventListener_keydown(listener : System.Func<FunScript.TypeScript.KeyboardEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"move\", {1}, {?2}))"); CompiledName("addEventListener1050")>]
            member __.addEventListener_move(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"keyup\", {1}, {?2}))"); CompiledName("addEventListener1051")>]
            member __.addEventListener_keyup(listener : System.Func<FunScript.TypeScript.KeyboardEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"reset\", {1}, {?2}))"); CompiledName("addEventListener1052")>]
            member __.addEventListener_reset(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"help\", {1}, {?2}))"); CompiledName("addEventListener1053")>]
            member __.addEventListener_help(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragleave\", {1}, {?2}))"); CompiledName("addEventListener1054")>]
            member __.addEventListener_dragleave(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"focusin\", {1}, {?2}))"); CompiledName("addEventListener1055")>]
            member __.addEventListener_focusin(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"seeked\", {1}, {?2}))"); CompiledName("addEventListener1056")>]
            member __.addEventListener_seeked(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"durationchange\", {1}, {?2}))"); CompiledName("addEventListener1057")>]
            member __.addEventListener_durationchange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"blur\", {1}, {?2}))"); CompiledName("addEventListener1058")>]
            member __.addEventListener_blur(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"emptied\", {1}, {?2}))"); CompiledName("addEventListener1059")>]
            member __.addEventListener_emptied(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"seeking\", {1}, {?2}))"); CompiledName("addEventListener1060")>]
            member __.addEventListener_seeking(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"canplay\", {1}, {?2}))"); CompiledName("addEventListener1061")>]
            member __.addEventListener_canplay(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"deactivate\", {1}, {?2}))"); CompiledName("addEventListener1062")>]
            member __.addEventListener_deactivate(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"datasetchanged\", {1}, {?2}))"); CompiledName("addEventListener1063")>]
            member __.addEventListener_datasetchanged(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"rowsdelete\", {1}, {?2}))"); CompiledName("addEventListener1064")>]
            member __.addEventListener_rowsdelete(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"loadstart\", {1}, {?2}))"); CompiledName("addEventListener1065")>]
            member __.addEventListener_loadstart(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"losecapture\", {1}, {?2}))"); CompiledName("addEventListener1066")>]
            member __.addEventListener_losecapture(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragenter\", {1}, {?2}))"); CompiledName("addEventListener1067")>]
            member __.addEventListener_dragenter(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"controlselect\", {1}, {?2}))"); CompiledName("addEventListener1068")>]
            member __.addEventListener_controlselect(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"submit\", {1}, {?2}))"); CompiledName("addEventListener1069")>]
            member __.addEventListener_submit(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"change\", {1}, {?2}))"); CompiledName("addEventListener1070")>]
            member __.addEventListener_change(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"layoutcomplete\", {1}, {?2}))"); CompiledName("addEventListener1071")>]
            member __.addEventListener_layoutcomplete(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforeactivate\", {1}, {?2}))"); CompiledName("addEventListener1072")>]
            member __.addEventListener_beforeactivate(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"canplaythrough\", {1}, {?2}))"); CompiledName("addEventListener1073")>]
            member __.addEventListener_canplaythrough(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforeupdate\", {1}, {?2}))"); CompiledName("addEventListener1074")>]
            member __.addEventListener_beforeupdate(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"filterchange\", {1}, {?2}))"); CompiledName("addEventListener1075")>]
            member __.addEventListener_filterchange(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"datasetcomplete\", {1}, {?2}))"); CompiledName("addEventListener1076")>]
            member __.addEventListener_datasetcomplete(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"suspend\", {1}, {?2}))"); CompiledName("addEventListener1077")>]
            member __.addEventListener_suspend(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseenter\", {1}, {?2}))"); CompiledName("addEventListener1078")>]
            member __.addEventListener_mouseenter(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"errorupdate\", {1}, {?2}))"); CompiledName("addEventListener1079")>]
            member __.addEventListener_errorupdate(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseout\", {1}, {?2}))"); CompiledName("addEventListener1080")>]
            member __.addEventListener_mouseout(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mousewheel\", {1}, {?2}))"); CompiledName("addEventListener1081")>]
            member __.addEventListener_mousewheel(listener : System.Func<FunScript.TypeScript.MouseWheelEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"volumechange\", {1}, {?2}))"); CompiledName("addEventListener1082")>]
            member __.addEventListener_volumechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"cellchange\", {1}, {?2}))"); CompiledName("addEventListener1083")>]
            member __.addEventListener_cellchange(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"rowexit\", {1}, {?2}))"); CompiledName("addEventListener1084")>]
            member __.addEventListener_rowexit(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"rowsinserted\", {1}, {?2}))"); CompiledName("addEventListener1085")>]
            member __.addEventListener_rowsinserted(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"propertychange\", {1}, {?2}))"); CompiledName("addEventListener1086")>]
            member __.addEventListener_propertychange(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragend\", {1}, {?2}))"); CompiledName("addEventListener1087")>]
            member __.addEventListener_dragend(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforepaste\", {1}, {?2}))"); CompiledName("addEventListener1088")>]
            member __.addEventListener_beforepaste(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragover\", {1}, {?2}))"); CompiledName("addEventListener1089")>]
            member __.addEventListener_dragover(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseup\", {1}, {?2}))"); CompiledName("addEventListener1090")>]
            member __.addEventListener_mouseup(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragstart\", {1}, {?2}))"); CompiledName("addEventListener1091")>]
            member __.addEventListener_dragstart(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforecopy\", {1}, {?2}))"); CompiledName("addEventListener1092")>]
            member __.addEventListener_beforecopy(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"drag\", {1}, {?2}))"); CompiledName("addEventListener1093")>]
            member __.addEventListener_drag(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseover\", {1}, {?2}))"); CompiledName("addEventListener1094")>]
            member __.addEventListener_mouseover(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pause\", {1}, {?2}))"); CompiledName("addEventListener1095")>]
            member __.addEventListener_pause(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mousedown\", {1}, {?2}))"); CompiledName("addEventListener1096")>]
            member __.addEventListener_mousedown(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"click\", {1}, {?2}))"); CompiledName("addEventListener1097")>]
            member __.addEventListener_click(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"waiting\", {1}, {?2}))"); CompiledName("addEventListener1098")>]
            member __.addEventListener_waiting(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"resizestart\", {1}, {?2}))"); CompiledName("addEventListener1099")>]
            member __.addEventListener_resizestart(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"paste\", {1}, {?2}))"); CompiledName("addEventListener1100")>]
            member __.addEventListener_paste(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"moveend\", {1}, {?2}))"); CompiledName("addEventListener1101")>]
            member __.addEventListener_moveend(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"stalled\", {1}, {?2}))"); CompiledName("addEventListener1102")>]
            member __.addEventListener_stalled(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mousemove\", {1}, {?2}))"); CompiledName("addEventListener1103")>]
            member __.addEventListener_mousemove(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforeeditfocus\", {1}, {?2}))"); CompiledName("addEventListener1104")>]
            member __.addEventListener_beforeeditfocus(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"ratechange\", {1}, {?2}))"); CompiledName("addEventListener1105")>]
            member __.addEventListener_ratechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"progress\", {1}, {?2}))"); CompiledName("addEventListener1106")>]
            member __.addEventListener_progress(listener : System.Func<FunScript.TypeScript.ProgressEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dblclick\", {1}, {?2}))"); CompiledName("addEventListener1107")>]
            member __.addEventListener_dblclick(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"contextmenu\", {1}, {?2}))"); CompiledName("addEventListener1108")>]
            member __.addEventListener_contextmenu(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"loadedmetadata\", {1}, {?2}))"); CompiledName("addEventListener1109")>]
            member __.addEventListener_loadedmetadata(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"afterupdate\", {1}, {?2}))"); CompiledName("addEventListener1110")>]
            member __.addEventListener_afterupdate(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"error\", {1}, {?2}))"); CompiledName("addEventListener1111")>]
            member __.addEventListener_error(listener : System.Func<FunScript.TypeScript.ErrorEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"play\", {1}, {?2}))"); CompiledName("addEventListener1112")>]
            member __.addEventListener_play(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"resizeend\", {1}, {?2}))"); CompiledName("addEventListener1113")>]
            member __.addEventListener_resizeend(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"playing\", {1}, {?2}))"); CompiledName("addEventListener1114")>]
            member __.addEventListener_playing(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"focusout\", {1}, {?2}))"); CompiledName("addEventListener1115")>]
            member __.addEventListener_focusout(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"abort\", {1}, {?2}))"); CompiledName("addEventListener1116")>]
            member __.addEventListener_abort(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dataavailable\", {1}, {?2}))"); CompiledName("addEventListener1117")>]
            member __.addEventListener_dataavailable(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"readystatechange\", {1}, {?2}))"); CompiledName("addEventListener1118")>]
            member __.addEventListener_readystatechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"keypress\", {1}, {?2}))"); CompiledName("addEventListener1119")>]
            member __.addEventListener_keypress(listener : System.Func<FunScript.TypeScript.KeyboardEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"loadeddata\", {1}, {?2}))"); CompiledName("addEventListener1120")>]
            member __.addEventListener_loadeddata(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforedeactivate\", {1}, {?2}))"); CompiledName("addEventListener1121")>]
            member __.addEventListener_beforedeactivate(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"activate\", {1}, {?2}))"); CompiledName("addEventListener1122")>]
            member __.addEventListener_activate(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"movestart\", {1}, {?2}))"); CompiledName("addEventListener1123")>]
            member __.addEventListener_movestart(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"selectstart\", {1}, {?2}))"); CompiledName("addEventListener1124")>]
            member __.addEventListener_selectstart(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"focus\", {1}, {?2}))"); CompiledName("addEventListener1125")>]
            member __.addEventListener_focus(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"timeupdate\", {1}, {?2}))"); CompiledName("addEventListener1126")>]
            member __.addEventListener_timeupdate(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"resize\", {1}, {?2}))"); CompiledName("addEventListener1127")>]
            member __.addEventListener_resize(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"cut\", {1}, {?2}))"); CompiledName("addEventListener1128")>]
            member __.addEventListener_cut(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"select\", {1}, {?2}))"); CompiledName("addEventListener1129")>]
            member __.addEventListener_select(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"drop\", {1}, {?2}))"); CompiledName("addEventListener1130")>]
            member __.addEventListener_drop(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"copy\", {1}, {?2}))"); CompiledName("addEventListener1131")>]
            member __.addEventListener_copy(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"ended\", {1}, {?2}))"); CompiledName("addEventListener1132")>]
            member __.addEventListener_ended(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"scroll\", {1}, {?2}))"); CompiledName("addEventListener1133")>]
            member __.addEventListener_scroll(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"rowenter\", {1}, {?2}))"); CompiledName("addEventListener1134")>]
            member __.addEventListener_rowenter(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"load\", {1}, {?2}))"); CompiledName("addEventListener1135")>]
            member __.addEventListener_load(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"input\", {1}, {?2}))"); CompiledName("addEventListener1136")>]
            member __.addEventListener_input(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mscontentzoom\", {1}, {?2}))"); CompiledName("addEventListener1137")>]
            member __.addEventListener_mscontentzoom(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"cuechange\", {1}, {?2}))"); CompiledName("addEventListener1138")>]
            member __.addEventListener_cuechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msmanipulationstatechanged\", {1}, {?2}))"); CompiledName("addEventListener1139")>]
            member __.addEventListener_msmanipulationstatechanged(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msneedkey\", {1}, {?2}))"); CompiledName("addEventListener1140")>]
            member __.addEventListener_msneedkey(listener : System.Func<FunScript.TypeScript.MSMediaKeyNeededEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener({1}, {2}, {?3}))"); CompiledName("addEventListener1141")>]
            member __.addEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener = {1})"); CompiledName("addEventListener1141Aux")>]
            member __.``addEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_581 =


    type FunScript.TypeScript.HTMLMenuElement with 

            [<FunScript.JSEmitInline("({0}.type)"); CompiledName("_type10")>]
            member __._type with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_582 =


    type FunScript.TypeScript.HTMLMetaElement with 

            [<FunScript.JSEmitInline("({0}.httpEquiv)"); CompiledName("httpEquiv")>]
            member __.httpEquiv with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.name)"); CompiledName("name21")>]
            member __.name with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.content)"); CompiledName("content1")>]
            member __.content with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.url)"); CompiledName("url")>]
            member __.url with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.scheme)"); CompiledName("scheme")>]
            member __.scheme with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.charset)"); CompiledName("charset3")>]
            member __.charset with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_583 =


    type FunScript.TypeScript.HTMLModElement with 

            [<FunScript.JSEmitInline("({0}.dateTime)"); CompiledName("dateTime")>]
            member __.dateTime with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.cite)"); CompiledName("cite1")>]
            member __.cite with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_584 =


    type FunScript.TypeScript.HTMLNextIdElement with 

            [<FunScript.JSEmitInline("({0}.n)"); CompiledName("n")>]
            member __.n with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_585 =


    type FunScript.TypeScript.HTMLOListElement with 

            [<FunScript.JSEmitInline("({0}.start)"); CompiledName("start2")>]
            member __.start with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_586 =


    type FunScript.TypeScript.HTMLObjectElement with 

            [<FunScript.JSEmitInline("({0}.width)"); CompiledName("width12")>]
            member __.width with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.codeType)"); CompiledName("codeType1")>]
            member __.codeType with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.object)"); CompiledName("_object1")>]
            member __._object with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.form)"); CompiledName("form7")>]
            member __.form with get() : FunScript.TypeScript.HTMLFormElement = failwith "never" and set (v : FunScript.TypeScript.HTMLFormElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.code)"); CompiledName("code4")>]
            member __.code with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.archive)"); CompiledName("archive1")>]
            member __.archive with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.standby)"); CompiledName("standby1")>]
            member __.standby with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.alt)"); CompiledName("alt4")>]
            member __.alt with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.classid)"); CompiledName("classid1")>]
            member __.classid with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.name)"); CompiledName("name22")>]
            member __.name with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.useMap)"); CompiledName("useMap3")>]
            member __.useMap with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.data)"); CompiledName("data3")>]
            member __.data with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.height)"); CompiledName("height10")>]
            member __.height with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.contentDocument)"); CompiledName("contentDocument3")>]
            member __.contentDocument with get() : FunScript.TypeScript.Document = failwith "never" and set (v : FunScript.TypeScript.Document) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.altHtml)"); CompiledName("altHtml1")>]
            member __.altHtml with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.codeBase)"); CompiledName("codeBase1")>]
            member __.codeBase with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.declare)"); CompiledName("declare1")>]
            member __.declare with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.type)"); CompiledName("_type11")>]
            member __._type with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BaseHref)"); CompiledName("BaseHref1")>]
            member __.BaseHref with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.validationMessage)"); CompiledName("validationMessage3")>]
            member __.validationMessage with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.validity)"); CompiledName("validity3")>]
            member __.validity with get() : FunScript.TypeScript.ValidityState = failwith "never" and set (v : FunScript.TypeScript.ValidityState) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.willValidate)"); CompiledName("willValidate3")>]
            member __.willValidate with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msPlayToPreferredSourceUri)"); CompiledName("msPlayToPreferredSourceUri3")>]
            member __.msPlayToPreferredSourceUri with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msPlayToPrimary)"); CompiledName("msPlayToPrimary3")>]
            member __.msPlayToPrimary with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msPlayToDisabled)"); CompiledName("msPlayToDisabled3")>]
            member __.msPlayToDisabled with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.readyState)"); CompiledName("readyState4")>]
            member __.readyState with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msPlayToSource)"); CompiledName("msPlayToSource3")>]
            member __.msPlayToSource with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.checkValidity())"); CompiledName("checkValidity4")>]
            member __.checkValidity() : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.checkValidity = {1})"); CompiledName("checkValidity4Aux")>]
            member __.``checkValidity <-``(func : System.Func<bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setCustomValidity({1}))"); CompiledName("setCustomValidity3")>]
            member __.setCustomValidity(error : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setCustomValidity = {1})"); CompiledName("setCustomValidity3Aux")>]
            member __.``setCustomValidity <-``(func : System.Func<string, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_587 =


    type FunScript.TypeScript.HTMLOptGroupElement with 

            [<FunScript.JSEmitInline("({0}.index)"); CompiledName("index")>]
            member __.index with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.defaultSelected)"); CompiledName("defaultSelected")>]
            member __.defaultSelected with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.text)"); CompiledName("text3")>]
            member __.text with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.value)"); CompiledName("value5")>]
            member __.value with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.form)"); CompiledName("form8")>]
            member __.form with get() : FunScript.TypeScript.HTMLFormElement = failwith "never" and set (v : FunScript.TypeScript.HTMLFormElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.label)"); CompiledName("label1")>]
            member __.label with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.selected)"); CompiledName("selected")>]
            member __.selected with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_588 =


    type FunScript.TypeScript.HTMLOptionElement with 

            [<FunScript.JSEmitInline("({0}.index)"); CompiledName("index1")>]
            member __.index with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.defaultSelected)"); CompiledName("defaultSelected1")>]
            member __.defaultSelected with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.value)"); CompiledName("value6")>]
            member __.value with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.text)"); CompiledName("text4")>]
            member __.text with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.form)"); CompiledName("form9")>]
            member __.form with get() : FunScript.TypeScript.HTMLFormElement = failwith "never" and set (v : FunScript.TypeScript.HTMLFormElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.label)"); CompiledName("label2")>]
            member __.label with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.selected)"); CompiledName("selected1")>]
            member __.selected with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_589 =


    type FunScript.TypeScript.HTMLParagraphElement with 

            [<FunScript.JSEmitInline("({0}.align)"); CompiledName("align9")>]
            member __.align with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_590 =


    type FunScript.TypeScript.HTMLParamElement with 

            [<FunScript.JSEmitInline("({0}.value)"); CompiledName("value7")>]
            member __.value with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.name)"); CompiledName("name23")>]
            member __.name with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.type)"); CompiledName("_type12")>]
            member __._type with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.valueType)"); CompiledName("valueType")>]
            member __.valueType with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_591 =


    type FunScript.TypeScript.HTMLPhraseElement with 

            [<FunScript.JSEmitInline("({0}.dateTime)"); CompiledName("dateTime1")>]
            member __.dateTime with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.cite)"); CompiledName("cite2")>]
            member __.cite with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_592 =


    type FunScript.TypeScript.HTMLPreElement with 

            [<FunScript.JSEmitInline("({0}.width)"); CompiledName("width13")>]
            member __.width with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.cite)"); CompiledName("cite3")>]
            member __.cite with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_593 =


    type FunScript.TypeScript.HTMLProgressElement with 

            [<FunScript.JSEmitInline("({0}.value)"); CompiledName("value8")>]
            member __.value with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.max)"); CompiledName("max1")>]
            member __.max with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.position)"); CompiledName("position1")>]
            member __.position with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.form)"); CompiledName("form10")>]
            member __.form with get() : FunScript.TypeScript.HTMLFormElement = failwith "never" and set (v : FunScript.TypeScript.HTMLFormElement) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_594 =


    type FunScript.TypeScript.HTMLQuoteElement with 

            [<FunScript.JSEmitInline("({0}.dateTime)"); CompiledName("dateTime2")>]
            member __.dateTime with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.cite)"); CompiledName("cite4")>]
            member __.cite with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_595 =


    type FunScript.TypeScript.HTMLScriptElement with 

            [<FunScript.JSEmitInline("({0}.defer)"); CompiledName("defer")>]
            member __.defer with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.text)"); CompiledName("text5")>]
            member __.text with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.src)"); CompiledName("src7")>]
            member __.src with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.htmlFor)"); CompiledName("htmlFor1")>]
            member __.htmlFor with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.charset)"); CompiledName("charset4")>]
            member __.charset with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.type)"); CompiledName("_type13")>]
            member __._type with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.event)"); CompiledName("_event1")>]
            member __._event with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.async)"); CompiledName("_async")>]
            member __._async with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_596 =


    type FunScript.TypeScript.HTMLSelectElement with 

            [<FunScript.JSEmitInline("({0}.options)"); CompiledName("options1")>]
            member __.options with get() : FunScript.TypeScript.HTMLSelectElement = failwith "never" and set (v : FunScript.TypeScript.HTMLSelectElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.value)"); CompiledName("value9")>]
            member __.value with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.form)"); CompiledName("form11")>]
            member __.form with get() : FunScript.TypeScript.HTMLFormElement = failwith "never" and set (v : FunScript.TypeScript.HTMLFormElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.name)"); CompiledName("name24")>]
            member __.name with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.size)"); CompiledName("size4")>]
            member __.size with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length18")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.selectedIndex)"); CompiledName("selectedIndex")>]
            member __.selectedIndex with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.multiple)"); CompiledName("multiple1")>]
            member __.multiple with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.type)"); CompiledName("_type14")>]
            member __._type with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.validationMessage)"); CompiledName("validationMessage4")>]
            member __.validationMessage with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.autofocus)"); CompiledName("autofocus2")>]
            member __.autofocus with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.validity)"); CompiledName("validity4")>]
            member __.validity with get() : FunScript.TypeScript.ValidityState = failwith "never" and set (v : FunScript.TypeScript.ValidityState) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.required)"); CompiledName("required1")>]
            member __.required with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.willValidate)"); CompiledName("willValidate4")>]
            member __.willValidate with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.remove({?1}))"); CompiledName("remove3")>]
            member __.remove(?index : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.remove = {1})"); CompiledName("remove3Aux")>]
            member __.``remove <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.add({1}, {?2}))"); CompiledName("add3")>]
            member __.add(element : FunScript.TypeScript.HTMLElement, ?before : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.add = {1})"); CompiledName("add3Aux")>]
            member __.``add <-``(func : System.Func<FunScript.TypeScript.HTMLElement, obj, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.item({?1}, {?2}))"); CompiledName("item12")>]
            member __.item(?name : obj, ?index : obj) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.item = {1})"); CompiledName("item12Aux")>]
            member __.``item <-``(func : System.Func<obj, obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.namedItem({1}))"); CompiledName("namedItem3")>]
            member __.namedItem(name : string) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.namedItem = {1})"); CompiledName("namedItem3Aux")>]
            member __.``namedItem <-``(func : System.Func<string, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}[{1}])"); CompiledName("Item15")>]
            member __.Item with get(i : string) : obj = failwith "never" and set (i : string) (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.checkValidity())"); CompiledName("checkValidity5")>]
            member __.checkValidity() : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.checkValidity = {1})"); CompiledName("checkValidity5Aux")>]
            member __.``checkValidity <-``(func : System.Func<bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setCustomValidity({1}))"); CompiledName("setCustomValidity4")>]
            member __.setCustomValidity(error : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setCustomValidity = {1})"); CompiledName("setCustomValidity4Aux")>]
            member __.``setCustomValidity <-``(func : System.Func<string, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_597 =


    type FunScript.TypeScript.HTMLSourceElement with 

            [<FunScript.JSEmitInline("({0}.src)"); CompiledName("src8")>]
            member __.src with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.media)"); CompiledName("media4")>]
            member __.media with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.type)"); CompiledName("_type15")>]
            member __._type with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msKeySystem)"); CompiledName("msKeySystem")>]
            member __.msKeySystem with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_598 =


    type FunScript.TypeScript.HTMLStyleElement with 

            [<FunScript.JSEmitInline("({0}.media)"); CompiledName("media5")>]
            member __.media with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.type)"); CompiledName("_type16")>]
            member __._type with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_599 =


    type FunScript.TypeScript.HTMLTableAlignment with 

            [<FunScript.JSEmitInline("({0}.ch)"); CompiledName("ch")>]
            member __.ch with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.vAlign)"); CompiledName("vAlign")>]
            member __.vAlign with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.chOff)"); CompiledName("chOff")>]
            member __.chOff with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_600 =


    type FunScript.TypeScript.HTMLTableCaptionElement with 

            [<FunScript.JSEmitInline("({0}.align)"); CompiledName("align10")>]
            member __.align with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.vAlign)"); CompiledName("vAlign1")>]
            member __.vAlign with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_601 =


    type FunScript.TypeScript.HTMLTableCellElement with 

            [<FunScript.JSEmitInline("({0}.width)"); CompiledName("width14")>]
            member __.width with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.headers)"); CompiledName("headers")>]
            member __.headers with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.cellIndex)"); CompiledName("cellIndex")>]
            member __.cellIndex with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.align)"); CompiledName("align11")>]
            member __.align with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderColorLight)"); CompiledName("borderColorLight")>]
            member __.borderColorLight with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.colSpan)"); CompiledName("colSpan")>]
            member __.colSpan with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderColor)"); CompiledName("borderColor3")>]
            member __.borderColor with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.axis)"); CompiledName("axis")>]
            member __.axis with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.height)"); CompiledName("height11")>]
            member __.height with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.noWrap)"); CompiledName("noWrap4")>]
            member __.noWrap with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.abbr)"); CompiledName("abbr")>]
            member __.abbr with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.rowSpan)"); CompiledName("rowSpan")>]
            member __.rowSpan with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.scope)"); CompiledName("scope")>]
            member __.scope with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderColorDark)"); CompiledName("borderColorDark")>]
            member __.borderColorDark with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_602 =


    type FunScript.TypeScript.HTMLTableColElement with 

            [<FunScript.JSEmitInline("({0}.width)"); CompiledName("width15")>]
            member __.width with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.align)"); CompiledName("align12")>]
            member __.align with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.span)"); CompiledName("span")>]
            member __.span with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_603 =


    type FunScript.TypeScript.HTMLTableElement with 

            [<FunScript.JSEmitInline("({0}.width)"); CompiledName("width16")>]
            member __.width with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderColorLight)"); CompiledName("borderColorLight1")>]
            member __.borderColorLight with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.cellSpacing)"); CompiledName("cellSpacing")>]
            member __.cellSpacing with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.tFoot)"); CompiledName("tFoot")>]
            member __.tFoot with get() : FunScript.TypeScript.HTMLTableSectionElement = failwith "never" and set (v : FunScript.TypeScript.HTMLTableSectionElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.frame)"); CompiledName("frame")>]
            member __.frame with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderColor)"); CompiledName("borderColor4")>]
            member __.borderColor with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.rows)"); CompiledName("rows1")>]
            member __.rows with get() : FunScript.TypeScript.HTMLCollection = failwith "never" and set (v : FunScript.TypeScript.HTMLCollection) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.rules)"); CompiledName("rules1")>]
            member __.rules with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.cols)"); CompiledName("cols1")>]
            member __.cols with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.summary)"); CompiledName("summary")>]
            member __.summary with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.caption)"); CompiledName("caption")>]
            member __.caption with get() : FunScript.TypeScript.HTMLTableCaptionElement = failwith "never" and set (v : FunScript.TypeScript.HTMLTableCaptionElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.tBodies)"); CompiledName("tBodies")>]
            member __.tBodies with get() : FunScript.TypeScript.HTMLCollection = failwith "never" and set (v : FunScript.TypeScript.HTMLCollection) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.tHead)"); CompiledName("tHead")>]
            member __.tHead with get() : FunScript.TypeScript.HTMLTableSectionElement = failwith "never" and set (v : FunScript.TypeScript.HTMLTableSectionElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.align)"); CompiledName("align13")>]
            member __.align with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.cells)"); CompiledName("cells")>]
            member __.cells with get() : FunScript.TypeScript.HTMLCollection = failwith "never" and set (v : FunScript.TypeScript.HTMLCollection) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.height)"); CompiledName("height12")>]
            member __.height with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.cellPadding)"); CompiledName("cellPadding")>]
            member __.cellPadding with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.border)"); CompiledName("border7")>]
            member __.border with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderColorDark)"); CompiledName("borderColorDark1")>]
            member __.borderColorDark with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteRow({?1}))"); CompiledName("deleteRow")>]
            member __.deleteRow(?index : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteRow = {1})"); CompiledName("deleteRowAux")>]
            member __.``deleteRow <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createTBody())"); CompiledName("createTBody")>]
            member __.createTBody() : FunScript.TypeScript.HTMLElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createTBody = {1})"); CompiledName("createTBodyAux")>]
            member __.``createTBody <-``(func : System.Func<FunScript.TypeScript.HTMLElement>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteCaption())"); CompiledName("deleteCaption")>]
            member __.deleteCaption() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteCaption = {1})"); CompiledName("deleteCaptionAux")>]
            member __.``deleteCaption <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.insertRow({?1}))"); CompiledName("insertRow")>]
            member __.insertRow(?index : float) : FunScript.TypeScript.HTMLElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.insertRow = {1})"); CompiledName("insertRowAux")>]
            member __.``insertRow <-``(func : System.Func<float, FunScript.TypeScript.HTMLElement>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteTFoot())"); CompiledName("deleteTFoot")>]
            member __.deleteTFoot() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteTFoot = {1})"); CompiledName("deleteTFootAux")>]
            member __.``deleteTFoot <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createTHead())"); CompiledName("createTHead")>]
            member __.createTHead() : FunScript.TypeScript.HTMLElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createTHead = {1})"); CompiledName("createTHeadAux")>]
            member __.``createTHead <-``(func : System.Func<FunScript.TypeScript.HTMLElement>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteTHead())"); CompiledName("deleteTHead")>]
            member __.deleteTHead() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteTHead = {1})"); CompiledName("deleteTHeadAux")>]
            member __.``deleteTHead <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createCaption())"); CompiledName("createCaption")>]
            member __.createCaption() : FunScript.TypeScript.HTMLElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createCaption = {1})"); CompiledName("createCaptionAux")>]
            member __.``createCaption <-``(func : System.Func<FunScript.TypeScript.HTMLElement>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.moveRow({?1}, {?2}))"); CompiledName("moveRow")>]
            member __.moveRow(?indexFrom : float, ?indexTo : float) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.moveRow = {1})"); CompiledName("moveRowAux")>]
            member __.``moveRow <-``(func : System.Func<float, float, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createTFoot())"); CompiledName("createTFoot")>]
            member __.createTFoot() : FunScript.TypeScript.HTMLElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.createTFoot = {1})"); CompiledName("createTFootAux")>]
            member __.``createTFoot <-``(func : System.Func<FunScript.TypeScript.HTMLElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_604 =


    type FunScript.TypeScript.HTMLTableHeaderCellElement with 

            [<FunScript.JSEmitInline("({0}.scope)"); CompiledName("scope1")>]
            member __.scope with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_605 =


    type FunScript.TypeScript.HTMLTableRowElement with 

            [<FunScript.JSEmitInline("({0}.rowIndex)"); CompiledName("rowIndex")>]
            member __.rowIndex with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.cells)"); CompiledName("cells1")>]
            member __.cells with get() : FunScript.TypeScript.HTMLCollection = failwith "never" and set (v : FunScript.TypeScript.HTMLCollection) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.align)"); CompiledName("align14")>]
            member __.align with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderColorLight)"); CompiledName("borderColorLight2")>]
            member __.borderColorLight with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.sectionRowIndex)"); CompiledName("sectionRowIndex")>]
            member __.sectionRowIndex with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderColor)"); CompiledName("borderColor5")>]
            member __.borderColor with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.height)"); CompiledName("height13")>]
            member __.height with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.borderColorDark)"); CompiledName("borderColorDark2")>]
            member __.borderColorDark with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteCell({?1}))"); CompiledName("deleteCell")>]
            member __.deleteCell(?index : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteCell = {1})"); CompiledName("deleteCellAux")>]
            member __.``deleteCell <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.insertCell({?1}))"); CompiledName("insertCell")>]
            member __.insertCell(?index : float) : FunScript.TypeScript.HTMLElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.insertCell = {1})"); CompiledName("insertCellAux")>]
            member __.``insertCell <-``(func : System.Func<float, FunScript.TypeScript.HTMLElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_606 =


    type FunScript.TypeScript.HTMLTableSectionElement with 

            [<FunScript.JSEmitInline("({0}.align)"); CompiledName("align15")>]
            member __.align with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.rows)"); CompiledName("rows2")>]
            member __.rows with get() : FunScript.TypeScript.HTMLCollection = failwith "never" and set (v : FunScript.TypeScript.HTMLCollection) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteRow({?1}))"); CompiledName("deleteRow1")>]
            member __.deleteRow(?index : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteRow = {1})"); CompiledName("deleteRow1Aux")>]
            member __.``deleteRow <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.moveRow({?1}, {?2}))"); CompiledName("moveRow1")>]
            member __.moveRow(?indexFrom : float, ?indexTo : float) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.moveRow = {1})"); CompiledName("moveRow1Aux")>]
            member __.``moveRow <-``(func : System.Func<float, float, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.insertRow({?1}))"); CompiledName("insertRow1")>]
            member __.insertRow(?index : float) : FunScript.TypeScript.HTMLElement = failwith "never"
            [<FunScript.JSEmitInline("({0}.insertRow = {1})"); CompiledName("insertRow1Aux")>]
            member __.``insertRow <-``(func : System.Func<float, FunScript.TypeScript.HTMLElement>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_607 =


    type FunScript.TypeScript.HTMLTextAreaElement with 

            [<FunScript.JSEmitInline("({0}.value)"); CompiledName("value10")>]
            member __.value with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.status)"); CompiledName("status4")>]
            member __.status with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.form)"); CompiledName("form12")>]
            member __.form with get() : FunScript.TypeScript.HTMLFormElement = failwith "never" and set (v : FunScript.TypeScript.HTMLFormElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.name)"); CompiledName("name25")>]
            member __.name with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.selectionStart)"); CompiledName("selectionStart1")>]
            member __.selectionStart with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.rows)"); CompiledName("rows3")>]
            member __.rows with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.cols)"); CompiledName("cols2")>]
            member __.cols with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.readOnly)"); CompiledName("readOnly3")>]
            member __.readOnly with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.wrap)"); CompiledName("wrap")>]
            member __.wrap with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.selectionEnd)"); CompiledName("selectionEnd1")>]
            member __.selectionEnd with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.type)"); CompiledName("_type17")>]
            member __._type with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.defaultValue)"); CompiledName("defaultValue1")>]
            member __.defaultValue with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.validationMessage)"); CompiledName("validationMessage5")>]
            member __.validationMessage with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.autofocus)"); CompiledName("autofocus3")>]
            member __.autofocus with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.validity)"); CompiledName("validity5")>]
            member __.validity with get() : FunScript.TypeScript.ValidityState = failwith "never" and set (v : FunScript.TypeScript.ValidityState) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.required)"); CompiledName("required2")>]
            member __.required with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.maxLength)"); CompiledName("maxLength1")>]
            member __.maxLength with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.willValidate)"); CompiledName("willValidate5")>]
            member __.willValidate with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.placeholder)"); CompiledName("placeholder1")>]
            member __.placeholder with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createTextRange())"); CompiledName("createTextRange3")>]
            member __.createTextRange() : FunScript.TypeScript.TextRange = failwith "never"
            [<FunScript.JSEmitInline("({0}.createTextRange = {1})"); CompiledName("createTextRange3Aux")>]
            member __.``createTextRange <-``(func : System.Func<FunScript.TypeScript.TextRange>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setSelectionRange({1}, {2}))"); CompiledName("setSelectionRange1")>]
            member __.setSelectionRange(start : float, _end : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setSelectionRange = {1})"); CompiledName("setSelectionRange1Aux")>]
            member __.``setSelectionRange <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.select())"); CompiledName("select3")>]
            member __.select() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.select = {1})"); CompiledName("select3Aux")>]
            member __.``select <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.checkValidity())"); CompiledName("checkValidity6")>]
            member __.checkValidity() : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.checkValidity = {1})"); CompiledName("checkValidity6Aux")>]
            member __.``checkValidity <-``(func : System.Func<bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setCustomValidity({1}))"); CompiledName("setCustomValidity5")>]
            member __.setCustomValidity(error : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setCustomValidity = {1})"); CompiledName("setCustomValidity5Aux")>]
            member __.``setCustomValidity <-``(func : System.Func<string, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_608 =


    type FunScript.TypeScript.HTMLTitleElement with 

            [<FunScript.JSEmitInline("({0}.text)"); CompiledName("text6")>]
            member __.text with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_609 =


    type FunScript.TypeScript.HTMLTrackElement with 

            [<FunScript.JSEmitInline("({0}.kind)"); CompiledName("kind1")>]
            member __.kind with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.src)"); CompiledName("src9")>]
            member __.src with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.srclang)"); CompiledName("srclang")>]
            member __.srclang with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.track)"); CompiledName("track")>]
            member __.track with get() : FunScript.TypeScript.TextTrack = failwith "never" and set (v : FunScript.TypeScript.TextTrack) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.label)"); CompiledName("label3")>]
            member __.label with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.default)"); CompiledName("_default")>]
            member __._default with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.readyState)"); CompiledName("readyState5")>]
            member __.readyState with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ERROR)"); CompiledName("ERROR3")>]
            member __.ERROR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LOADING)"); CompiledName("LOADING3")>]
            member __.LOADING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LOADED)"); CompiledName("LOADED2")>]
            member __.LOADED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NONE)"); CompiledName("NONE3")>]
            member __.NONE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_610 =


    type FunScript.TypeScript.HTMLVideoElement with 

            [<FunScript.JSEmitInline("({0}.width)"); CompiledName("width17")>]
            member __.width with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.videoWidth)"); CompiledName("videoWidth")>]
            member __.videoWidth with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.videoHeight)"); CompiledName("videoHeight")>]
            member __.videoHeight with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.height)"); CompiledName("height14")>]
            member __.height with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.poster)"); CompiledName("poster")>]
            member __.poster with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msIsStereo3D)"); CompiledName("msIsStereo3D")>]
            member __.msIsStereo3D with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msStereo3DPackingMode)"); CompiledName("msStereo3DPackingMode")>]
            member __.msStereo3DPackingMode with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onMSVideoOptimalLayoutChanged)"); CompiledName("onMSVideoOptimalLayoutChanged")>]
            member __.onMSVideoOptimalLayoutChanged with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onMSVideoFrameStepCompleted)"); CompiledName("onMSVideoFrameStepCompleted")>]
            member __.onMSVideoFrameStepCompleted with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msStereo3DRenderMode)"); CompiledName("msStereo3DRenderMode")>]
            member __.msStereo3DRenderMode with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msIsLayoutOptimalForPlayback)"); CompiledName("msIsLayoutOptimalForPlayback")>]
            member __.msIsLayoutOptimalForPlayback with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msHorizontalMirror)"); CompiledName("msHorizontalMirror")>]
            member __.msHorizontalMirror with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onMSVideoFormatChanged)"); CompiledName("onMSVideoFormatChanged")>]
            member __.onMSVideoFormatChanged with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msZoom)"); CompiledName("msZoom")>]
            member __.msZoom with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msInsertVideoEffect({1}, {2}, {?3}))"); CompiledName("msInsertVideoEffect")>]
            member __.msInsertVideoEffect(activatableClassId : string, effectRequired : bool, ?config : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msInsertVideoEffect = {1})"); CompiledName("msInsertVideoEffectAux")>]
            member __.``msInsertVideoEffect <-``(func : System.Func<string, bool, obj, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msSetVideoRectangle({1}, {2}, {3}, {4}))"); CompiledName("msSetVideoRectangle")>]
            member __.msSetVideoRectangle(left : float, top : float, right : float, bottom : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msSetVideoRectangle = {1})"); CompiledName("msSetVideoRectangleAux")>]
            member __.``msSetVideoRectangle <-``(func : System.Func<float, float, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msFrameStep({1}))"); CompiledName("msFrameStep")>]
            member __.msFrameStep(forward : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msFrameStep = {1})"); CompiledName("msFrameStepAux")>]
            member __.``msFrameStep <-``(func : System.Func<bool, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getVideoPlaybackQuality())"); CompiledName("getVideoPlaybackQuality")>]
            member __.getVideoPlaybackQuality() : FunScript.TypeScript.VideoPlaybackQuality = failwith "never"
            [<FunScript.JSEmitInline("({0}.getVideoPlaybackQuality = {1})"); CompiledName("getVideoPlaybackQualityAux")>]
            member __.``getVideoPlaybackQuality <-``(func : System.Func<FunScript.TypeScript.VideoPlaybackQuality>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerenter\", {1}, {?2}))"); CompiledName("addEventListener1142")>]
            member __.addEventListener_pointerenter(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerout\", {1}, {?2}))"); CompiledName("addEventListener1143")>]
            member __.addEventListener_pointerout(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerdown\", {1}, {?2}))"); CompiledName("addEventListener1144")>]
            member __.addEventListener_pointerdown(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerup\", {1}, {?2}))"); CompiledName("addEventListener1145")>]
            member __.addEventListener_pointerup(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointercancel\", {1}, {?2}))"); CompiledName("addEventListener1146")>]
            member __.addEventListener_pointercancel(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerover\", {1}, {?2}))"); CompiledName("addEventListener1147")>]
            member __.addEventListener_pointerover(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointermove\", {1}, {?2}))"); CompiledName("addEventListener1148")>]
            member __.addEventListener_pointermove(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerleave\", {1}, {?2}))"); CompiledName("addEventListener1149")>]
            member __.addEventListener_pointerleave(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerdown\", {1}, {?2}))"); CompiledName("addEventListener1150")>]
            member __.addEventListener_mspointerdown(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgotpointercapture\", {1}, {?2}))"); CompiledName("addEventListener1151")>]
            member __.addEventListener_msgotpointercapture(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturedoubletap\", {1}, {?2}))"); CompiledName("addEventListener1152")>]
            member __.addEventListener_msgesturedoubletap(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerhover\", {1}, {?2}))"); CompiledName("addEventListener1153")>]
            member __.addEventListener_mspointerhover(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturehold\", {1}, {?2}))"); CompiledName("addEventListener1154")>]
            member __.addEventListener_msgesturehold(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointermove\", {1}, {?2}))"); CompiledName("addEventListener1155")>]
            member __.addEventListener_mspointermove(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturechange\", {1}, {?2}))"); CompiledName("addEventListener1156")>]
            member __.addEventListener_msgesturechange(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturestart\", {1}, {?2}))"); CompiledName("addEventListener1157")>]
            member __.addEventListener_msgesturestart(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointercancel\", {1}, {?2}))"); CompiledName("addEventListener1158")>]
            member __.addEventListener_mspointercancel(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgestureend\", {1}, {?2}))"); CompiledName("addEventListener1159")>]
            member __.addEventListener_msgestureend(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturetap\", {1}, {?2}))"); CompiledName("addEventListener1160")>]
            member __.addEventListener_msgesturetap(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerout\", {1}, {?2}))"); CompiledName("addEventListener1161")>]
            member __.addEventListener_mspointerout(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msinertiastart\", {1}, {?2}))"); CompiledName("addEventListener1162")>]
            member __.addEventListener_msinertiastart(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mslostpointercapture\", {1}, {?2}))"); CompiledName("addEventListener1163")>]
            member __.addEventListener_mslostpointercapture(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerover\", {1}, {?2}))"); CompiledName("addEventListener1164")>]
            member __.addEventListener_mspointerover(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerup\", {1}, {?2}))"); CompiledName("addEventListener1165")>]
            member __.addEventListener_mspointerup(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"lostpointercapture\", {1}, {?2}))"); CompiledName("addEventListener1166")>]
            member __.addEventListener_lostpointercapture(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerenter\", {1}, {?2}))"); CompiledName("addEventListener1167")>]
            member __.addEventListener_mspointerenter(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"gotpointercapture\", {1}, {?2}))"); CompiledName("addEventListener1168")>]
            member __.addEventListener_gotpointercapture(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerleave\", {1}, {?2}))"); CompiledName("addEventListener1169")>]
            member __.addEventListener_mspointerleave(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseleave\", {1}, {?2}))"); CompiledName("addEventListener1170")>]
            member __.addEventListener_mouseleave(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforecut\", {1}, {?2}))"); CompiledName("addEventListener1171")>]
            member __.addEventListener_beforecut(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"keydown\", {1}, {?2}))"); CompiledName("addEventListener1172")>]
            member __.addEventListener_keydown(listener : System.Func<FunScript.TypeScript.KeyboardEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"move\", {1}, {?2}))"); CompiledName("addEventListener1173")>]
            member __.addEventListener_move(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"keyup\", {1}, {?2}))"); CompiledName("addEventListener1174")>]
            member __.addEventListener_keyup(listener : System.Func<FunScript.TypeScript.KeyboardEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"reset\", {1}, {?2}))"); CompiledName("addEventListener1175")>]
            member __.addEventListener_reset(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"help\", {1}, {?2}))"); CompiledName("addEventListener1176")>]
            member __.addEventListener_help(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragleave\", {1}, {?2}))"); CompiledName("addEventListener1177")>]
            member __.addEventListener_dragleave(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"focusin\", {1}, {?2}))"); CompiledName("addEventListener1178")>]
            member __.addEventListener_focusin(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"seeked\", {1}, {?2}))"); CompiledName("addEventListener1179")>]
            member __.addEventListener_seeked(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"durationchange\", {1}, {?2}))"); CompiledName("addEventListener1180")>]
            member __.addEventListener_durationchange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"blur\", {1}, {?2}))"); CompiledName("addEventListener1181")>]
            member __.addEventListener_blur(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"emptied\", {1}, {?2}))"); CompiledName("addEventListener1182")>]
            member __.addEventListener_emptied(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"seeking\", {1}, {?2}))"); CompiledName("addEventListener1183")>]
            member __.addEventListener_seeking(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"canplay\", {1}, {?2}))"); CompiledName("addEventListener1184")>]
            member __.addEventListener_canplay(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"deactivate\", {1}, {?2}))"); CompiledName("addEventListener1185")>]
            member __.addEventListener_deactivate(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"datasetchanged\", {1}, {?2}))"); CompiledName("addEventListener1186")>]
            member __.addEventListener_datasetchanged(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"rowsdelete\", {1}, {?2}))"); CompiledName("addEventListener1187")>]
            member __.addEventListener_rowsdelete(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"loadstart\", {1}, {?2}))"); CompiledName("addEventListener1188")>]
            member __.addEventListener_loadstart(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"losecapture\", {1}, {?2}))"); CompiledName("addEventListener1189")>]
            member __.addEventListener_losecapture(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragenter\", {1}, {?2}))"); CompiledName("addEventListener1190")>]
            member __.addEventListener_dragenter(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"controlselect\", {1}, {?2}))"); CompiledName("addEventListener1191")>]
            member __.addEventListener_controlselect(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"submit\", {1}, {?2}))"); CompiledName("addEventListener1192")>]
            member __.addEventListener_submit(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"change\", {1}, {?2}))"); CompiledName("addEventListener1193")>]
            member __.addEventListener_change(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"layoutcomplete\", {1}, {?2}))"); CompiledName("addEventListener1194")>]
            member __.addEventListener_layoutcomplete(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforeactivate\", {1}, {?2}))"); CompiledName("addEventListener1195")>]
            member __.addEventListener_beforeactivate(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"canplaythrough\", {1}, {?2}))"); CompiledName("addEventListener1196")>]
            member __.addEventListener_canplaythrough(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforeupdate\", {1}, {?2}))"); CompiledName("addEventListener1197")>]
            member __.addEventListener_beforeupdate(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"filterchange\", {1}, {?2}))"); CompiledName("addEventListener1198")>]
            member __.addEventListener_filterchange(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"datasetcomplete\", {1}, {?2}))"); CompiledName("addEventListener1199")>]
            member __.addEventListener_datasetcomplete(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"suspend\", {1}, {?2}))"); CompiledName("addEventListener1200")>]
            member __.addEventListener_suspend(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseenter\", {1}, {?2}))"); CompiledName("addEventListener1201")>]
            member __.addEventListener_mouseenter(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"errorupdate\", {1}, {?2}))"); CompiledName("addEventListener1202")>]
            member __.addEventListener_errorupdate(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseout\", {1}, {?2}))"); CompiledName("addEventListener1203")>]
            member __.addEventListener_mouseout(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mousewheel\", {1}, {?2}))"); CompiledName("addEventListener1204")>]
            member __.addEventListener_mousewheel(listener : System.Func<FunScript.TypeScript.MouseWheelEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"volumechange\", {1}, {?2}))"); CompiledName("addEventListener1205")>]
            member __.addEventListener_volumechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"cellchange\", {1}, {?2}))"); CompiledName("addEventListener1206")>]
            member __.addEventListener_cellchange(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"rowexit\", {1}, {?2}))"); CompiledName("addEventListener1207")>]
            member __.addEventListener_rowexit(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"rowsinserted\", {1}, {?2}))"); CompiledName("addEventListener1208")>]
            member __.addEventListener_rowsinserted(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"propertychange\", {1}, {?2}))"); CompiledName("addEventListener1209")>]
            member __.addEventListener_propertychange(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragend\", {1}, {?2}))"); CompiledName("addEventListener1210")>]
            member __.addEventListener_dragend(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforepaste\", {1}, {?2}))"); CompiledName("addEventListener1211")>]
            member __.addEventListener_beforepaste(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragover\", {1}, {?2}))"); CompiledName("addEventListener1212")>]
            member __.addEventListener_dragover(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseup\", {1}, {?2}))"); CompiledName("addEventListener1213")>]
            member __.addEventListener_mouseup(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragstart\", {1}, {?2}))"); CompiledName("addEventListener1214")>]
            member __.addEventListener_dragstart(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforecopy\", {1}, {?2}))"); CompiledName("addEventListener1215")>]
            member __.addEventListener_beforecopy(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"drag\", {1}, {?2}))"); CompiledName("addEventListener1216")>]
            member __.addEventListener_drag(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseover\", {1}, {?2}))"); CompiledName("addEventListener1217")>]
            member __.addEventListener_mouseover(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pause\", {1}, {?2}))"); CompiledName("addEventListener1218")>]
            member __.addEventListener_pause(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mousedown\", {1}, {?2}))"); CompiledName("addEventListener1219")>]
            member __.addEventListener_mousedown(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"click\", {1}, {?2}))"); CompiledName("addEventListener1220")>]
            member __.addEventListener_click(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"waiting\", {1}, {?2}))"); CompiledName("addEventListener1221")>]
            member __.addEventListener_waiting(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"resizestart\", {1}, {?2}))"); CompiledName("addEventListener1222")>]
            member __.addEventListener_resizestart(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"paste\", {1}, {?2}))"); CompiledName("addEventListener1223")>]
            member __.addEventListener_paste(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"moveend\", {1}, {?2}))"); CompiledName("addEventListener1224")>]
            member __.addEventListener_moveend(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"stalled\", {1}, {?2}))"); CompiledName("addEventListener1225")>]
            member __.addEventListener_stalled(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mousemove\", {1}, {?2}))"); CompiledName("addEventListener1226")>]
            member __.addEventListener_mousemove(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforeeditfocus\", {1}, {?2}))"); CompiledName("addEventListener1227")>]
            member __.addEventListener_beforeeditfocus(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"ratechange\", {1}, {?2}))"); CompiledName("addEventListener1228")>]
            member __.addEventListener_ratechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"progress\", {1}, {?2}))"); CompiledName("addEventListener1229")>]
            member __.addEventListener_progress(listener : System.Func<FunScript.TypeScript.ProgressEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dblclick\", {1}, {?2}))"); CompiledName("addEventListener1230")>]
            member __.addEventListener_dblclick(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"contextmenu\", {1}, {?2}))"); CompiledName("addEventListener1231")>]
            member __.addEventListener_contextmenu(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"loadedmetadata\", {1}, {?2}))"); CompiledName("addEventListener1232")>]
            member __.addEventListener_loadedmetadata(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"afterupdate\", {1}, {?2}))"); CompiledName("addEventListener1233")>]
            member __.addEventListener_afterupdate(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"error\", {1}, {?2}))"); CompiledName("addEventListener1234")>]
            member __.addEventListener_error(listener : System.Func<FunScript.TypeScript.ErrorEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"play\", {1}, {?2}))"); CompiledName("addEventListener1235")>]
            member __.addEventListener_play(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"resizeend\", {1}, {?2}))"); CompiledName("addEventListener1236")>]
            member __.addEventListener_resizeend(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"playing\", {1}, {?2}))"); CompiledName("addEventListener1237")>]
            member __.addEventListener_playing(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"focusout\", {1}, {?2}))"); CompiledName("addEventListener1238")>]
            member __.addEventListener_focusout(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"abort\", {1}, {?2}))"); CompiledName("addEventListener1239")>]
            member __.addEventListener_abort(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dataavailable\", {1}, {?2}))"); CompiledName("addEventListener1240")>]
            member __.addEventListener_dataavailable(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"readystatechange\", {1}, {?2}))"); CompiledName("addEventListener1241")>]
            member __.addEventListener_readystatechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"keypress\", {1}, {?2}))"); CompiledName("addEventListener1242")>]
            member __.addEventListener_keypress(listener : System.Func<FunScript.TypeScript.KeyboardEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"loadeddata\", {1}, {?2}))"); CompiledName("addEventListener1243")>]
            member __.addEventListener_loadeddata(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforedeactivate\", {1}, {?2}))"); CompiledName("addEventListener1244")>]
            member __.addEventListener_beforedeactivate(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"activate\", {1}, {?2}))"); CompiledName("addEventListener1245")>]
            member __.addEventListener_activate(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"movestart\", {1}, {?2}))"); CompiledName("addEventListener1246")>]
            member __.addEventListener_movestart(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"selectstart\", {1}, {?2}))"); CompiledName("addEventListener1247")>]
            member __.addEventListener_selectstart(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"focus\", {1}, {?2}))"); CompiledName("addEventListener1248")>]
            member __.addEventListener_focus(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"timeupdate\", {1}, {?2}))"); CompiledName("addEventListener1249")>]
            member __.addEventListener_timeupdate(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"resize\", {1}, {?2}))"); CompiledName("addEventListener1250")>]
            member __.addEventListener_resize(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"cut\", {1}, {?2}))"); CompiledName("addEventListener1251")>]
            member __.addEventListener_cut(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"select\", {1}, {?2}))"); CompiledName("addEventListener1252")>]
            member __.addEventListener_select(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"drop\", {1}, {?2}))"); CompiledName("addEventListener1253")>]
            member __.addEventListener_drop(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"copy\", {1}, {?2}))"); CompiledName("addEventListener1254")>]
            member __.addEventListener_copy(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"ended\", {1}, {?2}))"); CompiledName("addEventListener1255")>]
            member __.addEventListener_ended(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"scroll\", {1}, {?2}))"); CompiledName("addEventListener1256")>]
            member __.addEventListener_scroll(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"rowenter\", {1}, {?2}))"); CompiledName("addEventListener1257")>]
            member __.addEventListener_rowenter(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"load\", {1}, {?2}))"); CompiledName("addEventListener1258")>]
            member __.addEventListener_load(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"input\", {1}, {?2}))"); CompiledName("addEventListener1259")>]
            member __.addEventListener_input(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mscontentzoom\", {1}, {?2}))"); CompiledName("addEventListener1260")>]
            member __.addEventListener_mscontentzoom(listener : System.Func<FunScript.TypeScript.MSEventObj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"cuechange\", {1}, {?2}))"); CompiledName("addEventListener1261")>]
            member __.addEventListener_cuechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msmanipulationstatechanged\", {1}, {?2}))"); CompiledName("addEventListener1262")>]
            member __.addEventListener_msmanipulationstatechanged(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msneedkey\", {1}, {?2}))"); CompiledName("addEventListener1263")>]
            member __.addEventListener_msneedkey(listener : System.Func<FunScript.TypeScript.MSMediaKeyNeededEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"MSVideoOptimalLayoutChanged\", {1}, {?2}))"); CompiledName("addEventListener1264")>]
            member __.addEventListener_MSVideoOptimalLayoutChanged(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"MSVideoFrameStepCompleted\", {1}, {?2}))"); CompiledName("addEventListener1265")>]
            member __.addEventListener_MSVideoFrameStepCompleted(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"MSVideoFormatChanged\", {1}, {?2}))"); CompiledName("addEventListener1266")>]
            member __.addEventListener_MSVideoFormatChanged(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener({1}, {2}, {?3}))"); CompiledName("addEventListener1267")>]
            member __.addEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener = {1})"); CompiledName("addEventListener1267Aux")>]
            member __.``addEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_611 =


    type FunScript.TypeScript.History with 

            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length19")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.state)"); CompiledName("state")>]
            member __.state with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.back({?1}))"); CompiledName("back")>]
            member __.back(?distance : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.back = {1})"); CompiledName("backAux")>]
            member __.``back <-``(func : System.Func<obj, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.forward({?1}))"); CompiledName("forward")>]
            member __.forward(?distance : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.forward = {1})"); CompiledName("forwardAux")>]
            member __.``forward <-``(func : System.Func<obj, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.go({?1}))"); CompiledName("go")>]
            member __.go(?delta : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.go = {1})"); CompiledName("goAux")>]
            member __.``go <-``(func : System.Func<obj, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.replaceState({1}, {2}, {?3}))"); CompiledName("replaceState")>]
            member __.replaceState(statedata : obj, title : string, ?url : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.replaceState = {1})"); CompiledName("replaceStateAux")>]
            member __.``replaceState <-``(func : System.Func<obj, string, string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pushState({1}, {2}, {?3}))"); CompiledName("pushState")>]
            member __.pushState(statedata : obj, title : string, ?url : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pushState = {1})"); CompiledName("pushStateAux")>]
            member __.``pushState <-``(func : System.Func<obj, string, string, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_612 =


    type FunScript.TypeScript.IArguments with 

            [<FunScript.JSEmitInline("({0}[{1}])"); CompiledName("Item16")>]
            member __.Item with get(i : int) : obj = failwith "never" and set (i : int) (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length20")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.callee)"); CompiledName("callee")>]
            member __.callee with get() : FunScript.TypeScript.Function = failwith "never" and set (v : FunScript.TypeScript.Function) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_613 =


    type FunScript.TypeScript.IDBCursor with 

            [<FunScript.JSEmitInline("({0}.source)"); CompiledName("source")>]
            member __.source with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.direction)"); CompiledName("direction2")>]
            member __.direction with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.key)"); CompiledName("key1")>]
            member __.key with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.primaryKey)"); CompiledName("primaryKey")>]
            member __.primaryKey with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.advance({1}))"); CompiledName("advance")>]
            member __.advance(count : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.advance = {1})"); CompiledName("advanceAux")>]
            member __.``advance <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.delete())"); CompiledName("delete")>]
            member __.delete() : FunScript.TypeScript.IDBRequest = failwith "never"
            [<FunScript.JSEmitInline("({0}.delete = {1})"); CompiledName("deleteAux")>]
            member __.``delete <-``(func : System.Func<FunScript.TypeScript.IDBRequest>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.continue({?1}))"); CompiledName("_continue")>]
            member __._continue(?key : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.continue = {1})"); CompiledName("_continueAux")>]
            member __.``_continue <-``(func : System.Func<obj, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.update({1}))"); CompiledName("update1")>]
            member __.update(value : obj) : FunScript.TypeScript.IDBRequest = failwith "never"
            [<FunScript.JSEmitInline("({0}.update = {1})"); CompiledName("update1Aux")>]
            member __.``update <-``(func : System.Func<obj, FunScript.TypeScript.IDBRequest>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PREV)"); CompiledName("PREV1")>]
            member __.PREV with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PREV_NO_DUPLICATE)"); CompiledName("PREV_NO_DUPLICATE1")>]
            member __.PREV_NO_DUPLICATE with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NEXT)"); CompiledName("NEXT1")>]
            member __.NEXT with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NEXT_NO_DUPLICATE)"); CompiledName("NEXT_NO_DUPLICATE1")>]
            member __.NEXT_NO_DUPLICATE with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_614 =


    type FunScript.TypeScript.IDBCursorWithValue with 

            [<FunScript.JSEmitInline("({0}.value)"); CompiledName("value11")>]
            member __.value with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_615 =


    type FunScript.TypeScript.IDBDatabase with 

            [<FunScript.JSEmitInline("({0}.version)"); CompiledName("version1")>]
            member __.version with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.name)"); CompiledName("name26")>]
            member __.name with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.objectStoreNames)"); CompiledName("objectStoreNames")>]
            member __.objectStoreNames with get() : FunScript.TypeScript.DOMStringList = failwith "never" and set (v : FunScript.TypeScript.DOMStringList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onerror)"); CompiledName("onerror8")>]
            member __.onerror with get() : System.Func<FunScript.TypeScript.ErrorEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.ErrorEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onabort)"); CompiledName("onabort4")>]
            member __.onabort with get() : System.Func<FunScript.TypeScript.UIEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.UIEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createObjectStore({1}, {?2}))"); CompiledName("createObjectStore")>]
            member __.createObjectStore(name : string, ?optionalParameters : obj) : FunScript.TypeScript.IDBObjectStore = failwith "never"
            [<FunScript.JSEmitInline("({0}.createObjectStore = {1})"); CompiledName("createObjectStoreAux")>]
            member __.``createObjectStore <-``(func : System.Func<string, obj, FunScript.TypeScript.IDBObjectStore>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.close())"); CompiledName("close2")>]
            member __.close() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.close = {1})"); CompiledName("close2Aux")>]
            member __.``close <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.transaction({1}, {?2}))"); CompiledName("transaction")>]
            member __.transaction(storeNames : obj, ?mode : string) : FunScript.TypeScript.IDBTransaction = failwith "never"
            [<FunScript.JSEmitInline("({0}.transaction = {1})"); CompiledName("transactionAux")>]
            member __.``transaction <-``(func : System.Func<obj, string, FunScript.TypeScript.IDBTransaction>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteObjectStore({1}))"); CompiledName("deleteObjectStore")>]
            member __.deleteObjectStore(name : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteObjectStore = {1})"); CompiledName("deleteObjectStoreAux")>]
            member __.``deleteObjectStore <-``(func : System.Func<string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"error\", {1}, {?2}))"); CompiledName("addEventListener1268")>]
            member __.addEventListener_error(listener : System.Func<FunScript.TypeScript.ErrorEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"abort\", {1}, {?2}))"); CompiledName("addEventListener1269")>]
            member __.addEventListener_abort(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener({1}, {2}, {?3}))"); CompiledName("addEventListener1270")>]
            member __.addEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener = {1})"); CompiledName("addEventListener1270Aux")>]
            member __.``addEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_616 =


    type FunScript.TypeScript.IDBEnvironment with 

            [<FunScript.JSEmitInline("({0}.msIndexedDB)"); CompiledName("msIndexedDB1")>]
            member __.msIndexedDB with get() : FunScript.TypeScript.IDBFactory = failwith "never" and set (v : FunScript.TypeScript.IDBFactory) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.indexedDB)"); CompiledName("indexedDB1")>]
            member __.indexedDB with get() : FunScript.TypeScript.IDBFactory = failwith "never" and set (v : FunScript.TypeScript.IDBFactory) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_617 =


    type FunScript.TypeScript.IDBFactory with 

            [<FunScript.JSEmitInline("({0}.open({1}, {?2}))"); CompiledName("_open2")>]
            member __._open(name : string, ?version : float) : FunScript.TypeScript.IDBOpenDBRequest = failwith "never"
            [<FunScript.JSEmitInline("({0}.open = {1})"); CompiledName("_open2Aux")>]
            member __.``_open <-``(func : System.Func<string, float, FunScript.TypeScript.IDBOpenDBRequest>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.cmp({1}, {2}))"); CompiledName("cmp")>]
            member __.cmp(first : obj, second : obj) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.cmp = {1})"); CompiledName("cmpAux")>]
            member __.``cmp <-``(func : System.Func<obj, obj, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteDatabase({1}))"); CompiledName("deleteDatabase")>]
            member __.deleteDatabase(name : string) : FunScript.TypeScript.IDBOpenDBRequest = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteDatabase = {1})"); CompiledName("deleteDatabaseAux")>]
            member __.``deleteDatabase <-``(func : System.Func<string, FunScript.TypeScript.IDBOpenDBRequest>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_618 =


    type FunScript.TypeScript.IDBIndex with 

            [<FunScript.JSEmitInline("({0}.unique)"); CompiledName("unique")>]
            member __.unique with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.name)"); CompiledName("name27")>]
            member __.name with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.keyPath)"); CompiledName("keyPath")>]
            member __.keyPath with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.objectStore)"); CompiledName("objectStore")>]
            member __.objectStore with get() : FunScript.TypeScript.IDBObjectStore = failwith "never" and set (v : FunScript.TypeScript.IDBObjectStore) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.count({?1}))"); CompiledName("count1")>]
            member __.count(?key : obj) : FunScript.TypeScript.IDBRequest = failwith "never"
            [<FunScript.JSEmitInline("({0}.count = {1})"); CompiledName("count1Aux")>]
            member __.``count <-``(func : System.Func<obj, FunScript.TypeScript.IDBRequest>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getKey({1}))"); CompiledName("getKey")>]
            member __.getKey(key : obj) : FunScript.TypeScript.IDBRequest = failwith "never"
            [<FunScript.JSEmitInline("({0}.getKey = {1})"); CompiledName("getKeyAux")>]
            member __.``getKey <-``(func : System.Func<obj, FunScript.TypeScript.IDBRequest>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.openKeyCursor({?1}, {?2}))"); CompiledName("openKeyCursor")>]
            member __.openKeyCursor(?range : FunScript.TypeScript.IDBKeyRange, ?direction : string) : FunScript.TypeScript.IDBRequest = failwith "never"
            [<FunScript.JSEmitInline("({0}.openKeyCursor = {1})"); CompiledName("openKeyCursorAux")>]
            member __.``openKeyCursor <-``(func : System.Func<FunScript.TypeScript.IDBKeyRange, string, FunScript.TypeScript.IDBRequest>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.get({1}))"); CompiledName("get2")>]
            member __.get(key : obj) : FunScript.TypeScript.IDBRequest = failwith "never"
            [<FunScript.JSEmitInline("({0}.get = {1})"); CompiledName("get2Aux")>]
            member __.``get <-``(func : System.Func<obj, FunScript.TypeScript.IDBRequest>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.openCursor({?1}, {?2}))"); CompiledName("openCursor")>]
            member __.openCursor(?range : FunScript.TypeScript.IDBKeyRange, ?direction : string) : FunScript.TypeScript.IDBRequest = failwith "never"
            [<FunScript.JSEmitInline("({0}.openCursor = {1})"); CompiledName("openCursorAux")>]
            member __.``openCursor <-``(func : System.Func<FunScript.TypeScript.IDBKeyRange, string, FunScript.TypeScript.IDBRequest>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_619 =


    type FunScript.TypeScript.IDBKeyRange with 

            [<FunScript.JSEmitInline("({0}.upper)"); CompiledName("upper")>]
            member __.upper with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.upperOpen)"); CompiledName("upperOpen")>]
            member __.upperOpen with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.lower)"); CompiledName("lower")>]
            member __.lower with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.lowerOpen)"); CompiledName("lowerOpen")>]
            member __.lowerOpen with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_620 =


    type FunScript.TypeScript.IDBObjectStore with 

            [<FunScript.JSEmitInline("({0}.indexNames)"); CompiledName("indexNames")>]
            member __.indexNames with get() : FunScript.TypeScript.DOMStringList = failwith "never" and set (v : FunScript.TypeScript.DOMStringList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.name)"); CompiledName("name28")>]
            member __.name with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.transaction)"); CompiledName("transaction1")>]
            member __.transaction with get() : FunScript.TypeScript.IDBTransaction = failwith "never" and set (v : FunScript.TypeScript.IDBTransaction) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.keyPath)"); CompiledName("keyPath1")>]
            member __.keyPath with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.count({?1}))"); CompiledName("count2")>]
            member __.count(?key : obj) : FunScript.TypeScript.IDBRequest = failwith "never"
            [<FunScript.JSEmitInline("({0}.count = {1})"); CompiledName("count2Aux")>]
            member __.``count <-``(func : System.Func<obj, FunScript.TypeScript.IDBRequest>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.add({1}, {?2}))"); CompiledName("add4")>]
            member __.add(value : obj, ?key : obj) : FunScript.TypeScript.IDBRequest = failwith "never"
            [<FunScript.JSEmitInline("({0}.add = {1})"); CompiledName("add4Aux")>]
            member __.``add <-``(func : System.Func<obj, obj, FunScript.TypeScript.IDBRequest>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clear())"); CompiledName("clear5")>]
            member __.clear() : FunScript.TypeScript.IDBRequest = failwith "never"
            [<FunScript.JSEmitInline("({0}.clear = {1})"); CompiledName("clear5Aux")>]
            member __.``clear <-``(func : System.Func<FunScript.TypeScript.IDBRequest>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createIndex({1}, {2}, {?3}))"); CompiledName("createIndex")>]
            member __.createIndex(name : string, keyPath : string, ?optionalParameters : obj) : FunScript.TypeScript.IDBIndex = failwith "never"
            [<FunScript.JSEmitInline("({0}.createIndex = {1})"); CompiledName("createIndexAux")>]
            member __.``createIndex <-``(func : System.Func<string, string, obj, FunScript.TypeScript.IDBIndex>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.put({1}, {?2}))"); CompiledName("put")>]
            member __.put(value : obj, ?key : obj) : FunScript.TypeScript.IDBRequest = failwith "never"
            [<FunScript.JSEmitInline("({0}.put = {1})"); CompiledName("putAux")>]
            member __.``put <-``(func : System.Func<obj, obj, FunScript.TypeScript.IDBRequest>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.openCursor({?1}, {?2}))"); CompiledName("openCursor1")>]
            member __.openCursor(?range : obj, ?direction : string) : FunScript.TypeScript.IDBRequest = failwith "never"
            [<FunScript.JSEmitInline("({0}.openCursor = {1})"); CompiledName("openCursor1Aux")>]
            member __.``openCursor <-``(func : System.Func<obj, string, FunScript.TypeScript.IDBRequest>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteIndex({1}))"); CompiledName("deleteIndex")>]
            member __.deleteIndex(indexName : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteIndex = {1})"); CompiledName("deleteIndexAux")>]
            member __.``deleteIndex <-``(func : System.Func<string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.index({1}))"); CompiledName("index2")>]
            member __.index(name : string) : FunScript.TypeScript.IDBIndex = failwith "never"
            [<FunScript.JSEmitInline("({0}.index = {1})"); CompiledName("index2Aux")>]
            member __.``index <-``(func : System.Func<string, FunScript.TypeScript.IDBIndex>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.get({1}))"); CompiledName("get3")>]
            member __.get(key : obj) : FunScript.TypeScript.IDBRequest = failwith "never"
            [<FunScript.JSEmitInline("({0}.get = {1})"); CompiledName("get3Aux")>]
            member __.``get <-``(func : System.Func<obj, FunScript.TypeScript.IDBRequest>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.delete({1}))"); CompiledName("delete1")>]
            member __.delete(key : obj) : FunScript.TypeScript.IDBRequest = failwith "never"
            [<FunScript.JSEmitInline("({0}.delete = {1})"); CompiledName("delete1Aux")>]
            member __.``delete <-``(func : System.Func<obj, FunScript.TypeScript.IDBRequest>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_621 =


    type FunScript.TypeScript.IDBOpenDBRequest with 

            [<FunScript.JSEmitInline("({0}.onupgradeneeded)"); CompiledName("onupgradeneeded")>]
            member __.onupgradeneeded with get() : System.Func<FunScript.TypeScript.IDBVersionChangeEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.IDBVersionChangeEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onblocked)"); CompiledName("onblocked")>]
            member __.onblocked with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"success\", {1}, {?2}))"); CompiledName("addEventListener1271")>]
            member __.addEventListener_success(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"error\", {1}, {?2}))"); CompiledName("addEventListener1272")>]
            member __.addEventListener_error(listener : System.Func<FunScript.TypeScript.ErrorEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"upgradeneeded\", {1}, {?2}))"); CompiledName("addEventListener1273")>]
            member __.addEventListener_upgradeneeded(listener : System.Func<FunScript.TypeScript.IDBVersionChangeEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"blocked\", {1}, {?2}))"); CompiledName("addEventListener1274")>]
            member __.addEventListener_blocked(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener({1}, {2}, {?3}))"); CompiledName("addEventListener1275")>]
            member __.addEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener = {1})"); CompiledName("addEventListener1275Aux")>]
            member __.``addEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_622 =


    type FunScript.TypeScript.IDBRequest with 

            [<FunScript.JSEmitInline("({0}.source)"); CompiledName("source1")>]
            member __.source with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onsuccess)"); CompiledName("onsuccess")>]
            member __.onsuccess with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.error)"); CompiledName("error5")>]
            member __.error with get() : FunScript.TypeScript.DOMError = failwith "never" and set (v : FunScript.TypeScript.DOMError) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.transaction)"); CompiledName("transaction2")>]
            member __.transaction with get() : FunScript.TypeScript.IDBTransaction = failwith "never" and set (v : FunScript.TypeScript.IDBTransaction) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onerror)"); CompiledName("onerror9")>]
            member __.onerror with get() : System.Func<FunScript.TypeScript.ErrorEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.ErrorEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.readyState)"); CompiledName("readyState6")>]
            member __.readyState with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.result)"); CompiledName("result1")>]
            member __.result with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"success\", {1}, {?2}))"); CompiledName("addEventListener1276")>]
            member __.addEventListener_success(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"error\", {1}, {?2}))"); CompiledName("addEventListener1277")>]
            member __.addEventListener_error(listener : System.Func<FunScript.TypeScript.ErrorEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener({1}, {2}, {?3}))"); CompiledName("addEventListener1278")>]
            member __.addEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener = {1})"); CompiledName("addEventListener1278Aux")>]
            member __.``addEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_623 =


    type FunScript.TypeScript.IDBTransaction with 

            [<FunScript.JSEmitInline("({0}.oncomplete)"); CompiledName("oncomplete1")>]
            member __.oncomplete with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.db)"); CompiledName("db")>]
            member __.db with get() : FunScript.TypeScript.IDBDatabase = failwith "never" and set (v : FunScript.TypeScript.IDBDatabase) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.mode)"); CompiledName("mode")>]
            member __.mode with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.error)"); CompiledName("error6")>]
            member __.error with get() : FunScript.TypeScript.DOMError = failwith "never" and set (v : FunScript.TypeScript.DOMError) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onerror)"); CompiledName("onerror10")>]
            member __.onerror with get() : System.Func<FunScript.TypeScript.ErrorEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.ErrorEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onabort)"); CompiledName("onabort5")>]
            member __.onabort with get() : System.Func<FunScript.TypeScript.UIEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.UIEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.abort())"); CompiledName("abort2")>]
            member __.abort() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.abort = {1})"); CompiledName("abort2Aux")>]
            member __.``abort <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.objectStore({1}))"); CompiledName("objectStore1")>]
            member __.objectStore(name : string) : FunScript.TypeScript.IDBObjectStore = failwith "never"
            [<FunScript.JSEmitInline("({0}.objectStore = {1})"); CompiledName("objectStore1Aux")>]
            member __.``objectStore <-``(func : System.Func<string, FunScript.TypeScript.IDBObjectStore>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.READ_ONLY)"); CompiledName("READ_ONLY1")>]
            member __.READ_ONLY with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.VERSION_CHANGE)"); CompiledName("VERSION_CHANGE1")>]
            member __.VERSION_CHANGE with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.READ_WRITE)"); CompiledName("READ_WRITE1")>]
            member __.READ_WRITE with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"complete\", {1}, {?2}))"); CompiledName("addEventListener1279")>]
            member __.addEventListener_complete(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"error\", {1}, {?2}))"); CompiledName("addEventListener1280")>]
            member __.addEventListener_error(listener : System.Func<FunScript.TypeScript.ErrorEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"abort\", {1}, {?2}))"); CompiledName("addEventListener1281")>]
            member __.addEventListener_abort(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener({1}, {2}, {?3}))"); CompiledName("addEventListener1282")>]
            member __.addEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener = {1})"); CompiledName("addEventListener1282Aux")>]
            member __.``addEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_624 =


    type FunScript.TypeScript.IDBVersionChangeEvent with 

            [<FunScript.JSEmitInline("({0}.newVersion)"); CompiledName("newVersion")>]
            member __.newVersion with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.oldVersion)"); CompiledName("oldVersion")>]
            member __.oldVersion with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_625 =


    type FunScript.TypeScript.ITextWriter with 

            [<FunScript.JSEmitInline("({0}.Write({1}))"); CompiledName("Write")>]
            member __.Write(s : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.Write = {1})"); CompiledName("WriteAux")>]
            member __.``Write <-``(func : System.Func<string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.WriteLine({1}))"); CompiledName("WriteLine")>]
            member __.WriteLine(s : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.WriteLine = {1})"); CompiledName("WriteLineAux")>]
            member __.``WriteLine <-``(func : System.Func<string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.Close())"); CompiledName("Close")>]
            member __.Close() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.Close = {1})"); CompiledName("CloseAux")>]
            member __.``Close <-``(func : System.Func<unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_626 =


    type FunScript.TypeScript.ImageData with 

            [<FunScript.JSEmitInline("({0}.width)"); CompiledName("width18")>]
            member __.width with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.data)"); CompiledName("data4")>]
            member __.data with get() : array<float> = failwith "never" and set (v : array<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.height)"); CompiledName("height15")>]
            member __.height with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_627 =


    type FunScript.TypeScript.Int16Array with 

            [<FunScript.JSEmitInline("({0}.BYTES_PER_ELEMENT)"); CompiledName("BYTES_PER_ELEMENT10")>]
            member __.BYTES_PER_ELEMENT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length21")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}[{1}])"); CompiledName("Item17")>]
            member __.Item with get(i : int) : float = failwith "never" and set (i : int) (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.get({1}))"); CompiledName("get4")>]
            member __.get(index : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.get = {1})"); CompiledName("get4Aux")>]
            member __.``get <-``(func : System.Func<float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set({1}, {2}))"); CompiledName("set6")>]
            member __.set(index : float, value : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set = {1})"); CompiledName("set6Aux")>]
            member __.``set <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set({1}, {?2}))"); CompiledName("set7")>]
            member __.set(array : FunScript.TypeScript.Int16Array, ?offset : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set = {1})"); CompiledName("set7Aux")>]
            member __.``set <-``(func : System.Func<FunScript.TypeScript.Int16Array, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set({1}, {?2}))"); CompiledName("set8")>]
            member __.set(array : array<float>, ?offset : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set = {1})"); CompiledName("set8Aux")>]
            member __.``set <-``(func : System.Func<array<float>, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.subarray({1}, {?2}))"); CompiledName("subarray2")>]
            member __.subarray(_begin : float, ?_end : float) : FunScript.TypeScript.Int16Array = failwith "never"
            [<FunScript.JSEmitInline("({0}.subarray = {1})"); CompiledName("subarray2Aux")>]
            member __.``subarray <-``(func : System.Func<float, float, FunScript.TypeScript.Int16Array>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_628 =


    type FunScript.TypeScript.Int32Array with 

            [<FunScript.JSEmitInline("({0}.BYTES_PER_ELEMENT)"); CompiledName("BYTES_PER_ELEMENT11")>]
            member __.BYTES_PER_ELEMENT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length22")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}[{1}])"); CompiledName("Item18")>]
            member __.Item with get(i : int) : float = failwith "never" and set (i : int) (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.get({1}))"); CompiledName("get5")>]
            member __.get(index : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.get = {1})"); CompiledName("get5Aux")>]
            member __.``get <-``(func : System.Func<float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set({1}, {2}))"); CompiledName("set9")>]
            member __.set(index : float, value : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set = {1})"); CompiledName("set9Aux")>]
            member __.``set <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set({1}, {?2}))"); CompiledName("set10")>]
            member __.set(array : FunScript.TypeScript.Int32Array, ?offset : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set = {1})"); CompiledName("set10Aux")>]
            member __.``set <-``(func : System.Func<FunScript.TypeScript.Int32Array, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set({1}, {?2}))"); CompiledName("set11")>]
            member __.set(array : array<float>, ?offset : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set = {1})"); CompiledName("set11Aux")>]
            member __.``set <-``(func : System.Func<array<float>, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.subarray({1}, {?2}))"); CompiledName("subarray3")>]
            member __.subarray(_begin : float, ?_end : float) : FunScript.TypeScript.Int32Array = failwith "never"
            [<FunScript.JSEmitInline("({0}.subarray = {1})"); CompiledName("subarray3Aux")>]
            member __.``subarray <-``(func : System.Func<float, float, FunScript.TypeScript.Int32Array>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_629 =


    type FunScript.TypeScript.Int8Array with 

            [<FunScript.JSEmitInline("({0}.BYTES_PER_ELEMENT)"); CompiledName("BYTES_PER_ELEMENT12")>]
            member __.BYTES_PER_ELEMENT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length23")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}[{1}])"); CompiledName("Item19")>]
            member __.Item with get(i : int) : float = failwith "never" and set (i : int) (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.get({1}))"); CompiledName("get6")>]
            member __.get(index : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.get = {1})"); CompiledName("get6Aux")>]
            member __.``get <-``(func : System.Func<float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set({1}, {2}))"); CompiledName("set12")>]
            member __.set(index : float, value : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set = {1})"); CompiledName("set12Aux")>]
            member __.``set <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set({1}, {?2}))"); CompiledName("set13")>]
            member __.set(array : FunScript.TypeScript.Int8Array, ?offset : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set = {1})"); CompiledName("set13Aux")>]
            member __.``set <-``(func : System.Func<FunScript.TypeScript.Int8Array, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set({1}, {?2}))"); CompiledName("set14")>]
            member __.set(array : array<float>, ?offset : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set = {1})"); CompiledName("set14Aux")>]
            member __.``set <-``(func : System.Func<array<float>, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.subarray({1}, {?2}))"); CompiledName("subarray4")>]
            member __.subarray(_begin : float, ?_end : float) : FunScript.TypeScript.Int8Array = failwith "never"
            [<FunScript.JSEmitInline("({0}.subarray = {1})"); CompiledName("subarray4Aux")>]
            member __.``subarray <-``(func : System.Func<float, float, FunScript.TypeScript.Int8Array>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_630 =


    type FunScript.TypeScript.Intl.Globals with 

            [<FunScript.JSEmitInline("(Intl.Collator)"); CompiledName("Collator")>]
            static member Collator with get() : FunScript.TypeScript.Intl.AnonymousType29 = failwith "never" and set (v : FunScript.TypeScript.Intl.AnonymousType29) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Intl.NumberFormat)"); CompiledName("NumberFormat")>]
            static member NumberFormat with get() : FunScript.TypeScript.Intl.AnonymousType30 = failwith "never" and set (v : FunScript.TypeScript.Intl.AnonymousType30) : unit = failwith "never"
            [<FunScript.JSEmitInline("(Intl.DateTimeFormat)"); CompiledName("DateTimeFormat")>]
            static member DateTimeFormat with get() : FunScript.TypeScript.Intl.AnonymousType31 = failwith "never" and set (v : FunScript.TypeScript.Intl.AnonymousType31) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_631 =


    type FunScript.TypeScript.JSON with 

            [<FunScript.JSEmitInline("({0}.parse({1}, {?2}))"); CompiledName("parse1")>]
            member __.parse(text : string, ?reviver : System.Func<obj, obj, obj>) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.parse = {1})"); CompiledName("parse1Aux")>]
            member __.``parse <-``(func : System.Func<string, System.Func<obj, obj, obj>, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.stringify({1}))"); CompiledName("stringify")>]
            member __.stringify(value : obj) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.stringify = {1})"); CompiledName("stringifyAux")>]
            member __.``stringify <-``(func : System.Func<obj, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.stringify({1}, {2}))"); CompiledName("stringify1")>]
            member __.stringify(value : obj, replacer : System.Func<string, obj, obj>) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.stringify = {1})"); CompiledName("stringify1Aux")>]
            member __.``stringify <-``(func : System.Func<obj, System.Func<string, obj, obj>, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.stringify({1}, {2}))"); CompiledName("stringify2")>]
            member __.stringify(value : obj, replacer : array<obj>) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.stringify = {1})"); CompiledName("stringify2Aux")>]
            member __.``stringify <-``(func : System.Func<obj, array<obj>, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.stringify({1}, {2}, {3}))"); CompiledName("stringify3")>]
            member __.stringify(value : obj, replacer : System.Func<string, obj, obj>, space : obj) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.stringify = {1})"); CompiledName("stringify3Aux")>]
            member __.``stringify <-``(func : System.Func<obj, System.Func<string, obj, obj>, obj, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.stringify({1}, {2}, {3}))"); CompiledName("stringify4")>]
            member __.stringify(value : obj, replacer : array<obj>, space : obj) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.stringify = {1})"); CompiledName("stringify4Aux")>]
            member __.``stringify <-``(func : System.Func<obj, array<obj>, obj, string>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_632 =


    type FunScript.TypeScript.Key with 

            [<FunScript.JSEmitInline("({0}.algorithm)"); CompiledName("algorithm1")>]
            member __.algorithm with get() : FunScript.TypeScript.Algorithm = failwith "never" and set (v : FunScript.TypeScript.Algorithm) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.type)"); CompiledName("_type18")>]
            member __._type with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.extractable)"); CompiledName("extractable")>]
            member __.extractable with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.keyUsage)"); CompiledName("keyUsage")>]
            member __.keyUsage with get() : array<string> = failwith "never" and set (v : array<string>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_633 =


    type FunScript.TypeScript.KeyOperation with 

            [<FunScript.JSEmitInline("({0}.oncomplete)"); CompiledName("oncomplete2")>]
            member __.oncomplete with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onerror)"); CompiledName("onerror11")>]
            member __.onerror with get() : System.Func<FunScript.TypeScript.ErrorEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.ErrorEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.result)"); CompiledName("result2")>]
            member __.result with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"complete\", {1}, {?2}))"); CompiledName("addEventListener1283")>]
            member __.addEventListener_complete(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"error\", {1}, {?2}))"); CompiledName("addEventListener1284")>]
            member __.addEventListener_error(listener : System.Func<FunScript.TypeScript.ErrorEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener({1}, {2}, {?3}))"); CompiledName("addEventListener1285")>]
            member __.addEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener = {1})"); CompiledName("addEventListener1285Aux")>]
            member __.``addEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_634 =


    type FunScript.TypeScript.KeyPair with 

            [<FunScript.JSEmitInline("({0}.privateKey)"); CompiledName("privateKey")>]
            member __.privateKey with get() : FunScript.TypeScript.Key = failwith "never" and set (v : FunScript.TypeScript.Key) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.publicKey)"); CompiledName("publicKey")>]
            member __.publicKey with get() : FunScript.TypeScript.Key = failwith "never" and set (v : FunScript.TypeScript.Key) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_635 =


    type FunScript.TypeScript.KeyboardEvent with 

            [<FunScript.JSEmitInline("({0}.location)"); CompiledName("location2")>]
            member __.location with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.keyCode)"); CompiledName("keyCode")>]
            member __.keyCode with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.shiftKey)"); CompiledName("shiftKey")>]
            member __.shiftKey with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.which)"); CompiledName("which")>]
            member __.which with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.locale)"); CompiledName("locale1")>]
            member __.locale with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.key)"); CompiledName("key2")>]
            member __.key with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.altKey)"); CompiledName("altKey")>]
            member __.altKey with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.metaKey)"); CompiledName("metaKey")>]
            member __.metaKey with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.char)"); CompiledName("_char")>]
            member __._char with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ctrlKey)"); CompiledName("ctrlKey")>]
            member __.ctrlKey with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.repeat)"); CompiledName("repeat")>]
            member __.repeat with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.charCode)"); CompiledName("charCode")>]
            member __.charCode with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getModifierState({1}))"); CompiledName("getModifierState")>]
            member __.getModifierState(keyArg : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.getModifierState = {1})"); CompiledName("getModifierStateAux")>]
            member __.``getModifierState <-``(func : System.Func<string, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initKeyboardEvent({1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}))"); CompiledName("initKeyboardEvent")>]
            member __.initKeyboardEvent(typeArg : string, canBubbleArg : bool, cancelableArg : bool, viewArg : FunScript.TypeScript.Window, keyArg : string, locationArg : float, modifiersListArg : string, repeat : bool, locale : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOM_KEY_LOCATION_RIGHT)"); CompiledName("DOM_KEY_LOCATION_RIGHT1")>]
            member __.DOM_KEY_LOCATION_RIGHT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOM_KEY_LOCATION_STANDARD)"); CompiledName("DOM_KEY_LOCATION_STANDARD1")>]
            member __.DOM_KEY_LOCATION_STANDARD with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOM_KEY_LOCATION_LEFT)"); CompiledName("DOM_KEY_LOCATION_LEFT1")>]
            member __.DOM_KEY_LOCATION_LEFT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOM_KEY_LOCATION_NUMPAD)"); CompiledName("DOM_KEY_LOCATION_NUMPAD1")>]
            member __.DOM_KEY_LOCATION_NUMPAD with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOM_KEY_LOCATION_JOYSTICK)"); CompiledName("DOM_KEY_LOCATION_JOYSTICK1")>]
            member __.DOM_KEY_LOCATION_JOYSTICK with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOM_KEY_LOCATION_MOBILE)"); CompiledName("DOM_KEY_LOCATION_MOBILE1")>]
            member __.DOM_KEY_LOCATION_MOBILE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_636 =


    type FunScript.TypeScript.LinkStyle with 

            [<FunScript.JSEmitInline("({0}.styleSheet)"); CompiledName("styleSheet1")>]
            member __.styleSheet with get() : FunScript.TypeScript.StyleSheet = failwith "never" and set (v : FunScript.TypeScript.StyleSheet) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.sheet)"); CompiledName("sheet")>]
            member __.sheet with get() : FunScript.TypeScript.StyleSheet = failwith "never" and set (v : FunScript.TypeScript.StyleSheet) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_637 =


    type FunScript.TypeScript.Location with 

            [<FunScript.JSEmitInline("({0}.hash)"); CompiledName("hash2")>]
            member __.hash with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.protocol)"); CompiledName("protocol2")>]
            member __.protocol with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.search)"); CompiledName("search2")>]
            member __.search with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.href)"); CompiledName("href7")>]
            member __.href with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.hostname)"); CompiledName("hostname2")>]
            member __.hostname with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.port)"); CompiledName("port2")>]
            member __.port with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pathname)"); CompiledName("pathname2")>]
            member __.pathname with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.host)"); CompiledName("host2")>]
            member __.host with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.reload({?1}))"); CompiledName("reload")>]
            member __.reload(?flag : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.reload = {1})"); CompiledName("reloadAux")>]
            member __.``reload <-``(func : System.Func<bool, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.replace({1}))"); CompiledName("replace")>]
            member __.replace(url : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.replace = {1})"); CompiledName("replaceAux")>]
            member __.``replace <-``(func : System.Func<string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.assign({1}))"); CompiledName("assign")>]
            member __.assign(url : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.assign = {1})"); CompiledName("assignAux")>]
            member __.``assign <-``(func : System.Func<string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toString())"); CompiledName("toString9")>]
            member __.toString() : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toString = {1})"); CompiledName("toString9Aux")>]
            member __.``toString <-``(func : System.Func<string>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_638 =


    type FunScript.TypeScript.LongRunningScriptDetectedEvent with 

            [<FunScript.JSEmitInline("({0}.stopPageScriptExecution)"); CompiledName("stopPageScriptExecution")>]
            member __.stopPageScriptExecution with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.executionTime)"); CompiledName("executionTime")>]
            member __.executionTime with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_639 =


    type FunScript.TypeScript.MSApp with 

            [<FunScript.JSEmitInline("({0}.createFileFromStorageFile({1}))"); CompiledName("createFileFromStorageFile")>]
            member __.createFileFromStorageFile(storageFile : obj) : FunScript.TypeScript.File = failwith "never"
            [<FunScript.JSEmitInline("({0}.createFileFromStorageFile = {1})"); CompiledName("createFileFromStorageFileAux")>]
            member __.``createFileFromStorageFile <-``(func : System.Func<obj, FunScript.TypeScript.File>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createBlobFromRandomAccessStream({1}, {2}))"); CompiledName("createBlobFromRandomAccessStream")>]
            member __.createBlobFromRandomAccessStream(_type : string, seeker : obj) : FunScript.TypeScript.Blob = failwith "never"
            [<FunScript.JSEmitInline("({0}.createBlobFromRandomAccessStream = {1})"); CompiledName("createBlobFromRandomAccessStreamAux")>]
            member __.``createBlobFromRandomAccessStream <-``(func : System.Func<string, obj, FunScript.TypeScript.Blob>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createStreamFromInputStream({1}, {2}))"); CompiledName("createStreamFromInputStream")>]
            member __.createStreamFromInputStream(_type : string, inputStream : obj) : FunScript.TypeScript.MSStream = failwith "never"
            [<FunScript.JSEmitInline("({0}.createStreamFromInputStream = {1})"); CompiledName("createStreamFromInputStreamAux")>]
            member __.``createStreamFromInputStream <-``(func : System.Func<string, obj, FunScript.TypeScript.MSStream>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.terminateApp({1}))"); CompiledName("terminateApp")>]
            member __.terminateApp(exceptionObject : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.terminateApp = {1})"); CompiledName("terminateAppAux")>]
            member __.``terminateApp <-``(func : System.Func<obj, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createDataPackage({1}))"); CompiledName("createDataPackage")>]
            member __.createDataPackage(_object : obj) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.createDataPackage = {1})"); CompiledName("createDataPackageAux")>]
            member __.``createDataPackage <-``(func : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.execUnsafeLocalFunction({1}))"); CompiledName("execUnsafeLocalFunction")>]
            member __.execUnsafeLocalFunction(unsafeFunction : FunScript.TypeScript.MSUnsafeFunctionCallbackDelegate) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.execUnsafeLocalFunction = {1})"); CompiledName("execUnsafeLocalFunctionAux")>]
            member __.``execUnsafeLocalFunction <-``(func : System.Func<FunScript.TypeScript.MSUnsafeFunctionCallbackDelegate, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getHtmlPrintDocumentSource({1}))"); CompiledName("getHtmlPrintDocumentSource")>]
            member __.getHtmlPrintDocumentSource(htmlDoc : obj) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.getHtmlPrintDocumentSource = {1})"); CompiledName("getHtmlPrintDocumentSourceAux")>]
            member __.``getHtmlPrintDocumentSource <-``(func : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addPublicLocalApplicationUri({1}))"); CompiledName("addPublicLocalApplicationUri")>]
            member __.addPublicLocalApplicationUri(uri : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addPublicLocalApplicationUri = {1})"); CompiledName("addPublicLocalApplicationUriAux")>]
            member __.``addPublicLocalApplicationUri <-``(func : System.Func<string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createDataPackageFromSelection())"); CompiledName("createDataPackageFromSelection")>]
            member __.createDataPackageFromSelection() : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.createDataPackageFromSelection = {1})"); CompiledName("createDataPackageFromSelectionAux")>]
            member __.``createDataPackageFromSelection <-``(func : System.Func<obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getViewOpener())"); CompiledName("getViewOpener")>]
            member __.getViewOpener() : FunScript.TypeScript.MSAppView = failwith "never"
            [<FunScript.JSEmitInline("({0}.getViewOpener = {1})"); CompiledName("getViewOpenerAux")>]
            member __.``getViewOpener <-``(func : System.Func<FunScript.TypeScript.MSAppView>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.suppressSubdownloadCredentialPrompts({1}))"); CompiledName("suppressSubdownloadCredentialPrompts")>]
            member __.suppressSubdownloadCredentialPrompts(suppress : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.suppressSubdownloadCredentialPrompts = {1})"); CompiledName("suppressSubdownloadCredentialPromptsAux")>]
            member __.``suppressSubdownloadCredentialPrompts <-``(func : System.Func<bool, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.execAsyncAtPriority({1}, {2}))"); CompiledName("execAsyncAtPriority")>]
            member __.execAsyncAtPriority(asynchronousCallback : FunScript.TypeScript.MSExecAtPriorityFunctionCallback, priority : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.execAsyncAtPriority = {1})"); CompiledName("execAsyncAtPriorityAux")>]
            member __.``execAsyncAtPriority <-``(func : System.Func<FunScript.TypeScript.MSExecAtPriorityFunctionCallback, string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.execAsyncAtPriority({1}, {2}, {3...}))"); CompiledName("execAsyncAtPriority1")>]
            member __.execAsyncAtPriorityOverload2(asynchronousCallback : FunScript.TypeScript.MSExecAtPriorityFunctionCallback, priority : string, [<System.ParamArray>] args : array<obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.isTaskScheduledAtPriorityOrHigher({1}))"); CompiledName("isTaskScheduledAtPriorityOrHigher")>]
            member __.isTaskScheduledAtPriorityOrHigher(priority : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.isTaskScheduledAtPriorityOrHigher = {1})"); CompiledName("isTaskScheduledAtPriorityOrHigherAux")>]
            member __.``isTaskScheduledAtPriorityOrHigher <-``(func : System.Func<string, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.execAtPriority({1}, {2}))"); CompiledName("execAtPriority")>]
            member __.execAtPriority(synchronousCallback : FunScript.TypeScript.MSExecAtPriorityFunctionCallback, priority : string) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.execAtPriority = {1})"); CompiledName("execAtPriorityAux")>]
            member __.``execAtPriority <-``(func : System.Func<FunScript.TypeScript.MSExecAtPriorityFunctionCallback, string, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.execAtPriority({1}, {2}, {3...}))"); CompiledName("execAtPriority1")>]
            member __.execAtPriorityOverload2(synchronousCallback : FunScript.TypeScript.MSExecAtPriorityFunctionCallback, priority : string, [<System.ParamArray>] args : array<obj>) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.createNewView({1}))"); CompiledName("createNewView")>]
            member __.createNewView(uri : string) : FunScript.TypeScript.MSAppView = failwith "never"
            [<FunScript.JSEmitInline("({0}.createNewView = {1})"); CompiledName("createNewViewAux")>]
            member __.``createNewView <-``(func : System.Func<string, FunScript.TypeScript.MSAppView>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getCurrentPriority())"); CompiledName("getCurrentPriority")>]
            member __.getCurrentPriority() : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.getCurrentPriority = {1})"); CompiledName("getCurrentPriorityAux")>]
            member __.``getCurrentPriority <-``(func : System.Func<string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NORMAL)"); CompiledName("NORMAL")>]
            member __.NORMAL with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.HIGH)"); CompiledName("HIGH")>]
            member __.HIGH with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.IDLE)"); CompiledName("IDLE2")>]
            member __.IDLE with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.CURRENT)"); CompiledName("CURRENT")>]
            member __.CURRENT with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_640 =


    type FunScript.TypeScript.MSAppView with 

            [<FunScript.JSEmitInline("({0}.viewId)"); CompiledName("viewId")>]
            member __.viewId with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.close())"); CompiledName("close3")>]
            member __.close() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.close = {1})"); CompiledName("close3Aux")>]
            member __.``close <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.postMessage({1}, {2}, {?3}))"); CompiledName("postMessage1")>]
            member __.postMessage(message : obj, targetOrigin : string, ?ports : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.postMessage = {1})"); CompiledName("postMessage1Aux")>]
            member __.``postMessage <-``(func : System.Func<obj, string, obj, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_641 =


    type FunScript.TypeScript.MSBaseReader with 

            [<FunScript.JSEmitInline("({0}.onprogress)"); CompiledName("onprogress5")>]
            member __.onprogress with get() : System.Func<FunScript.TypeScript.ProgressEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.ProgressEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.readyState)"); CompiledName("readyState7")>]
            member __.readyState with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onabort)"); CompiledName("onabort6")>]
            member __.onabort with get() : System.Func<FunScript.TypeScript.UIEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.UIEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onloadend)"); CompiledName("onloadend")>]
            member __.onloadend with get() : System.Func<FunScript.TypeScript.ProgressEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.ProgressEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onerror)"); CompiledName("onerror12")>]
            member __.onerror with get() : System.Func<FunScript.TypeScript.ErrorEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.ErrorEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onload)"); CompiledName("onload7")>]
            member __.onload with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onloadstart)"); CompiledName("onloadstart3")>]
            member __.onloadstart with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.result)"); CompiledName("result3")>]
            member __.result with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.abort())"); CompiledName("abort3")>]
            member __.abort() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.abort = {1})"); CompiledName("abort3Aux")>]
            member __.``abort <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LOADING)"); CompiledName("LOADING4")>]
            member __.LOADING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.EMPTY)"); CompiledName("EMPTY")>]
            member __.EMPTY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DONE)"); CompiledName("DONE1")>]
            member __.DONE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"progress\", {1}, {?2}))"); CompiledName("addEventListener1286")>]
            member __.addEventListener_progress(listener : System.Func<FunScript.TypeScript.ProgressEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"abort\", {1}, {?2}))"); CompiledName("addEventListener1287")>]
            member __.addEventListener_abort(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"loadend\", {1}, {?2}))"); CompiledName("addEventListener1288")>]
            member __.addEventListener_loadend(listener : System.Func<FunScript.TypeScript.ProgressEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"error\", {1}, {?2}))"); CompiledName("addEventListener1289")>]
            member __.addEventListener_error(listener : System.Func<FunScript.TypeScript.ErrorEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"load\", {1}, {?2}))"); CompiledName("addEventListener1290")>]
            member __.addEventListener_load(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"loadstart\", {1}, {?2}))"); CompiledName("addEventListener1291")>]
            member __.addEventListener_loadstart(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener({1}, {2}, {?3}))"); CompiledName("addEventListener1292")>]
            member __.addEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener = {1})"); CompiledName("addEventListener1292Aux")>]
            member __.``addEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_642 =


    type FunScript.TypeScript.MSBehaviorUrnsCollection with 

            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length24")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.item({1}))"); CompiledName("item13")>]
            member __.item(index : float) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.item = {1})"); CompiledName("item13Aux")>]
            member __.``item <-``(func : System.Func<float, string>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_643 =


    type FunScript.TypeScript.MSBlobBuilder with 

            [<FunScript.JSEmitInline("({0}.append({1}, {?2}))"); CompiledName("append1")>]
            member __.append(data : obj, ?endings : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.append = {1})"); CompiledName("append1Aux")>]
            member __.``append <-``(func : System.Func<obj, string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getBlob({?1}))"); CompiledName("getBlob")>]
            member __.getBlob(?contentType : string) : FunScript.TypeScript.Blob = failwith "never"
            [<FunScript.JSEmitInline("({0}.getBlob = {1})"); CompiledName("getBlobAux")>]
            member __.``getBlob <-``(func : System.Func<string, FunScript.TypeScript.Blob>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_644 =


    type FunScript.TypeScript.MSCSSMatrix with 

            [<FunScript.JSEmitInline("({0}.m24)"); CompiledName("m24")>]
            member __.m24 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.m34)"); CompiledName("m34")>]
            member __.m34 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.a)"); CompiledName("a")>]
            member __.a with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.d)"); CompiledName("d")>]
            member __.d with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.m32)"); CompiledName("m32")>]
            member __.m32 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.m41)"); CompiledName("m41")>]
            member __.m41 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.m11)"); CompiledName("m11")>]
            member __.m11 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.f)"); CompiledName("f")>]
            member __.f with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.e)"); CompiledName("e")>]
            member __.e with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.m23)"); CompiledName("m23")>]
            member __.m23 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.m14)"); CompiledName("m14")>]
            member __.m14 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.m33)"); CompiledName("m33")>]
            member __.m33 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.m22)"); CompiledName("m22")>]
            member __.m22 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.m21)"); CompiledName("m21")>]
            member __.m21 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.c)"); CompiledName("c")>]
            member __.c with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.m12)"); CompiledName("m12")>]
            member __.m12 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.b)"); CompiledName("b")>]
            member __.b with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.m42)"); CompiledName("m42")>]
            member __.m42 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.m31)"); CompiledName("m31")>]
            member __.m31 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.m43)"); CompiledName("m43")>]
            member __.m43 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.m13)"); CompiledName("m13")>]
            member __.m13 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.m44)"); CompiledName("m44")>]
            member __.m44 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.multiply({1}))"); CompiledName("multiply")>]
            member __.multiply(secondMatrix : FunScript.TypeScript.MSCSSMatrix) : FunScript.TypeScript.MSCSSMatrix = failwith "never"
            [<FunScript.JSEmitInline("({0}.multiply = {1})"); CompiledName("multiplyAux")>]
            member __.``multiply <-``(func : System.Func<FunScript.TypeScript.MSCSSMatrix, FunScript.TypeScript.MSCSSMatrix>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.skewY({1}))"); CompiledName("skewY")>]
            member __.skewY(angle : float) : FunScript.TypeScript.MSCSSMatrix = failwith "never"
            [<FunScript.JSEmitInline("({0}.skewY = {1})"); CompiledName("skewYAux")>]
            member __.``skewY <-``(func : System.Func<float, FunScript.TypeScript.MSCSSMatrix>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setMatrixValue({1}))"); CompiledName("setMatrixValue")>]
            member __.setMatrixValue(value : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setMatrixValue = {1})"); CompiledName("setMatrixValueAux")>]
            member __.``setMatrixValue <-``(func : System.Func<string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.inverse())"); CompiledName("inverse")>]
            member __.inverse() : FunScript.TypeScript.MSCSSMatrix = failwith "never"
            [<FunScript.JSEmitInline("({0}.inverse = {1})"); CompiledName("inverseAux")>]
            member __.``inverse <-``(func : System.Func<FunScript.TypeScript.MSCSSMatrix>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.rotateAxisAngle({1}, {2}, {3}, {4}))"); CompiledName("rotateAxisAngle")>]
            member __.rotateAxisAngle(x : float, y : float, z : float, angle : float) : FunScript.TypeScript.MSCSSMatrix = failwith "never"
            [<FunScript.JSEmitInline("({0}.rotateAxisAngle = {1})"); CompiledName("rotateAxisAngleAux")>]
            member __.``rotateAxisAngle <-``(func : System.Func<float, float, float, float, FunScript.TypeScript.MSCSSMatrix>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toString())"); CompiledName("toString10")>]
            member __.toString() : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toString = {1})"); CompiledName("toString10Aux")>]
            member __.``toString <-``(func : System.Func<string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.rotate({1}, {?2}, {?3}))"); CompiledName("rotate1")>]
            member __.rotate(angleX : float, ?angleY : float, ?angleZ : float) : FunScript.TypeScript.MSCSSMatrix = failwith "never"
            [<FunScript.JSEmitInline("({0}.rotate = {1})"); CompiledName("rotate1Aux")>]
            member __.``rotate <-``(func : System.Func<float, float, float, FunScript.TypeScript.MSCSSMatrix>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.translate({1}, {2}, {?3}))"); CompiledName("translate1")>]
            member __.translate(x : float, y : float, ?z : float) : FunScript.TypeScript.MSCSSMatrix = failwith "never"
            [<FunScript.JSEmitInline("({0}.translate = {1})"); CompiledName("translate1Aux")>]
            member __.``translate <-``(func : System.Func<float, float, float, FunScript.TypeScript.MSCSSMatrix>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.scale({1}, {?2}, {?3}))"); CompiledName("scale1")>]
            member __.scale(scaleX : float, ?scaleY : float, ?scaleZ : float) : FunScript.TypeScript.MSCSSMatrix = failwith "never"
            [<FunScript.JSEmitInline("({0}.scale = {1})"); CompiledName("scale1Aux")>]
            member __.``scale <-``(func : System.Func<float, float, float, FunScript.TypeScript.MSCSSMatrix>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.skewX({1}))"); CompiledName("skewX")>]
            member __.skewX(angle : float) : FunScript.TypeScript.MSCSSMatrix = failwith "never"
            [<FunScript.JSEmitInline("({0}.skewX = {1})"); CompiledName("skewXAux")>]
            member __.``skewX <-``(func : System.Func<float, FunScript.TypeScript.MSCSSMatrix>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_645 =


    type FunScript.TypeScript.MSCSSProperties with 

            [<FunScript.JSEmitInline("({0}.scrollbarShadowColor)"); CompiledName("scrollbarShadowColor")>]
            member __.scrollbarShadowColor with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.scrollbarHighlightColor)"); CompiledName("scrollbarHighlightColor")>]
            member __.scrollbarHighlightColor with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.layoutGridChar)"); CompiledName("layoutGridChar")>]
            member __.layoutGridChar with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.layoutGridType)"); CompiledName("layoutGridType")>]
            member __.layoutGridType with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.textAutospace)"); CompiledName("textAutospace")>]
            member __.textAutospace with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.textKashidaSpace)"); CompiledName("textKashidaSpace")>]
            member __.textKashidaSpace with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.writingMode)"); CompiledName("writingMode")>]
            member __.writingMode with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.scrollbarFaceColor)"); CompiledName("scrollbarFaceColor")>]
            member __.scrollbarFaceColor with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.backgroundPositionY)"); CompiledName("backgroundPositionY")>]
            member __.backgroundPositionY with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.lineBreak)"); CompiledName("lineBreak")>]
            member __.lineBreak with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.imeMode)"); CompiledName("imeMode")>]
            member __.imeMode with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msBlockProgression)"); CompiledName("msBlockProgression")>]
            member __.msBlockProgression with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.layoutGridLine)"); CompiledName("layoutGridLine")>]
            member __.layoutGridLine with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.scrollbarBaseColor)"); CompiledName("scrollbarBaseColor")>]
            member __.scrollbarBaseColor with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.layoutGrid)"); CompiledName("layoutGrid")>]
            member __.layoutGrid with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.layoutFlow)"); CompiledName("layoutFlow")>]
            member __.layoutFlow with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.textKashida)"); CompiledName("textKashida")>]
            member __.textKashida with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.filter)"); CompiledName("filter2")>]
            member __.filter with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.zoom)"); CompiledName("zoom")>]
            member __.zoom with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.scrollbarArrowColor)"); CompiledName("scrollbarArrowColor")>]
            member __.scrollbarArrowColor with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.behavior)"); CompiledName("behavior1")>]
            member __.behavior with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.backgroundPositionX)"); CompiledName("backgroundPositionX")>]
            member __.backgroundPositionX with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.accelerator)"); CompiledName("accelerator")>]
            member __.accelerator with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.layoutGridMode)"); CompiledName("layoutGridMode")>]
            member __.layoutGridMode with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.textJustifyTrim)"); CompiledName("textJustifyTrim")>]
            member __.textJustifyTrim with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.scrollbar3dLightColor)"); CompiledName("scrollbar3dLightColor")>]
            member __.scrollbar3dLightColor with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msInterpolationMode)"); CompiledName("msInterpolationMode")>]
            member __.msInterpolationMode with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.scrollbarTrackColor)"); CompiledName("scrollbarTrackColor")>]
            member __.scrollbarTrackColor with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.scrollbarDarkShadowColor)"); CompiledName("scrollbarDarkShadowColor")>]
            member __.scrollbarDarkShadowColor with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.styleFloat)"); CompiledName("styleFloat")>]
            member __.styleFloat with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getAttribute({1}, {?2}))"); CompiledName("getAttribute1")>]
            member __.getAttribute(attributeName : string, ?flags : float) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.getAttribute = {1})"); CompiledName("getAttribute1Aux")>]
            member __.``getAttribute <-``(func : System.Func<string, float, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setAttribute({1}, {2}, {?3}))"); CompiledName("setAttribute1")>]
            member __.setAttribute(attributeName : string, attributeValue : obj, ?flags : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setAttribute = {1})"); CompiledName("setAttribute1Aux")>]
            member __.``setAttribute <-``(func : System.Func<string, obj, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeAttribute({1}, {?2}))"); CompiledName("removeAttribute1")>]
            member __.removeAttribute(attributeName : string, ?flags : float) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeAttribute = {1})"); CompiledName("removeAttribute1Aux")>]
            member __.``removeAttribute <-``(func : System.Func<string, float, bool>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_646 =


    type FunScript.TypeScript.MSCSSRuleList with 

            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length25")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.item({?1}))"); CompiledName("item14")>]
            member __.item(?index : float) : FunScript.TypeScript.CSSStyleRule = failwith "never"
            [<FunScript.JSEmitInline("({0}.item = {1})"); CompiledName("item14Aux")>]
            member __.``item <-``(func : System.Func<float, FunScript.TypeScript.CSSStyleRule>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}[{1}])"); CompiledName("Item20")>]
            member __.Item with get(i : int) : FunScript.TypeScript.CSSStyleRule = failwith "never" and set (i : int) (v : FunScript.TypeScript.CSSStyleRule) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_647 =


    type FunScript.TypeScript.MSCompatibleInfo with 

            [<FunScript.JSEmitInline("({0}.version)"); CompiledName("version2")>]
            member __.version with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.userAgent)"); CompiledName("userAgent")>]
            member __.userAgent with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_648 =


    type FunScript.TypeScript.MSCompatibleInfoCollection with 

            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length26")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.item({1}))"); CompiledName("item15")>]
            member __.item(index : float) : FunScript.TypeScript.MSCompatibleInfo = failwith "never"
            [<FunScript.JSEmitInline("({0}.item = {1})"); CompiledName("item15Aux")>]
            member __.``item <-``(func : System.Func<float, FunScript.TypeScript.MSCompatibleInfo>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_649 =


    type FunScript.TypeScript.MSCurrentStyleCSSProperties with 

            [<FunScript.JSEmitInline("({0}.blockDirection)"); CompiledName("blockDirection")>]
            member __.blockDirection with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clipBottom)"); CompiledName("clipBottom")>]
            member __.clipBottom with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clipLeft)"); CompiledName("clipLeft")>]
            member __.clipLeft with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clipRight)"); CompiledName("clipRight")>]
            member __.clipRight with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clipTop)"); CompiledName("clipTop")>]
            member __.clipTop with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.hasLayout)"); CompiledName("hasLayout")>]
            member __.hasLayout with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_650 =


    type FunScript.TypeScript.MSDataBindingExtensions with 

            [<FunScript.JSEmitInline("({0}.dataSrc)"); CompiledName("dataSrc")>]
            member __.dataSrc with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.dataFormatAs)"); CompiledName("dataFormatAs")>]
            member __.dataFormatAs with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.dataFld)"); CompiledName("dataFld")>]
            member __.dataFld with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_651 =


    type FunScript.TypeScript.MSDataBindingRecordSetExtensions with 

            [<FunScript.JSEmitInline("({0}.recordset)"); CompiledName("recordset")>]
            member __.recordset with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.namedRecordset({1}, {?2}))"); CompiledName("namedRecordset")>]
            member __.namedRecordset(dataMember : string, ?hierarchy : obj) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.namedRecordset = {1})"); CompiledName("namedRecordsetAux")>]
            member __.``namedRecordset <-``(func : System.Func<string, obj, obj>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_652 =


    type FunScript.TypeScript.MSDataBindingRecordSetReadonlyExtensions with 

            [<FunScript.JSEmitInline("({0}.recordset)"); CompiledName("recordset1")>]
            member __.recordset with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.namedRecordset({1}, {?2}))"); CompiledName("namedRecordset1")>]
            member __.namedRecordset(dataMember : string, ?hierarchy : obj) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.namedRecordset = {1})"); CompiledName("namedRecordset1Aux")>]
            member __.``namedRecordset <-``(func : System.Func<string, obj, obj>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_653 =


    type FunScript.TypeScript.MSDataBindingTableExtensions with 

            [<FunScript.JSEmitInline("({0}.dataPageSize)"); CompiledName("dataPageSize")>]
            member __.dataPageSize with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.nextPage())"); CompiledName("nextPage")>]
            member __.nextPage() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.nextPage = {1})"); CompiledName("nextPageAux")>]
            member __.``nextPage <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.firstPage())"); CompiledName("firstPage")>]
            member __.firstPage() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.firstPage = {1})"); CompiledName("firstPageAux")>]
            member __.``firstPage <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.refresh())"); CompiledName("refresh")>]
            member __.refresh() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.refresh = {1})"); CompiledName("refreshAux")>]
            member __.``refresh <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.previousPage())"); CompiledName("previousPage")>]
            member __.previousPage() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.previousPage = {1})"); CompiledName("previousPageAux")>]
            member __.``previousPage <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.lastPage())"); CompiledName("lastPage")>]
            member __.lastPage() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.lastPage = {1})"); CompiledName("lastPageAux")>]
            member __.``lastPage <-``(func : System.Func<unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_654 =


    type FunScript.TypeScript.MSDocumentExtensions with 

            [<FunScript.JSEmitInline("({0}.captureEvents())"); CompiledName("captureEvents1")>]
            member __.captureEvents() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.captureEvents = {1})"); CompiledName("captureEvents1Aux")>]
            member __.``captureEvents <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.releaseEvents())"); CompiledName("releaseEvents1")>]
            member __.releaseEvents() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.releaseEvents = {1})"); CompiledName("releaseEvents1Aux")>]
            member __.``releaseEvents <-``(func : System.Func<unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_655 =


    type FunScript.TypeScript.MSEventAttachmentTarget with 

            [<FunScript.JSEmitInline("({0}.attachEvent({1}, {2}))"); CompiledName("attachEvent1")>]
            member __.attachEvent(_event : string, listener : FunScript.TypeScript.EventListenerDelegate) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.attachEvent = {1})"); CompiledName("attachEvent1Aux")>]
            member __.``attachEvent <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.detachEvent({1}, {2}))"); CompiledName("detachEvent1")>]
            member __.detachEvent(_event : string, listener : FunScript.TypeScript.EventListenerDelegate) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.detachEvent = {1})"); CompiledName("detachEvent1Aux")>]
            member __.``detachEvent <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_656 =


    type FunScript.TypeScript.MSEventObj with 

            [<FunScript.JSEmitInline("({0}.nextPage)"); CompiledName("nextPage1")>]
            member __.nextPage with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.keyCode)"); CompiledName("keyCode1")>]
            member __.keyCode with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toElement)"); CompiledName("toElement")>]
            member __.toElement with get() : FunScript.TypeScript.Element = failwith "never" and set (v : FunScript.TypeScript.Element) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.returnValue)"); CompiledName("returnValue1")>]
            member __.returnValue with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.dataFld)"); CompiledName("dataFld1")>]
            member __.dataFld with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.y)"); CompiledName("y2")>]
            member __.y with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.dataTransfer)"); CompiledName("dataTransfer1")>]
            member __.dataTransfer with get() : FunScript.TypeScript.DataTransfer = failwith "never" and set (v : FunScript.TypeScript.DataTransfer) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.propertyName)"); CompiledName("propertyName")>]
            member __.propertyName with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.url)"); CompiledName("url1")>]
            member __.url with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.offsetX)"); CompiledName("offsetX")>]
            member __.offsetX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.recordset)"); CompiledName("recordset2")>]
            member __.recordset with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.screenX)"); CompiledName("screenX1")>]
            member __.screenX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.buttonID)"); CompiledName("buttonID")>]
            member __.buttonID with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.wheelDelta)"); CompiledName("wheelDelta")>]
            member __.wheelDelta with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.reason)"); CompiledName("reason1")>]
            member __.reason with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.origin)"); CompiledName("origin")>]
            member __.origin with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.data)"); CompiledName("data5")>]
            member __.data with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.srcFilter)"); CompiledName("srcFilter")>]
            member __.srcFilter with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.boundElements)"); CompiledName("boundElements")>]
            member __.boundElements with get() : FunScript.TypeScript.HTMLCollection = failwith "never" and set (v : FunScript.TypeScript.HTMLCollection) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.cancelBubble)"); CompiledName("cancelBubble1")>]
            member __.cancelBubble with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.altLeft)"); CompiledName("altLeft")>]
            member __.altLeft with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.behaviorCookie)"); CompiledName("behaviorCookie")>]
            member __.behaviorCookie with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.bookmarks)"); CompiledName("bookmarks")>]
            member __.bookmarks with get() : FunScript.TypeScript.BookmarkCollection = failwith "never" and set (v : FunScript.TypeScript.BookmarkCollection) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.type)"); CompiledName("_type19")>]
            member __._type with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.repeat)"); CompiledName("repeat1")>]
            member __.repeat with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.srcElement)"); CompiledName("srcElement1")>]
            member __.srcElement with get() : FunScript.TypeScript.Element = failwith "never" and set (v : FunScript.TypeScript.Element) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.source)"); CompiledName("source2")>]
            member __.source with get() : FunScript.TypeScript.Window = failwith "never" and set (v : FunScript.TypeScript.Window) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.fromElement)"); CompiledName("fromElement")>]
            member __.fromElement with get() : FunScript.TypeScript.Element = failwith "never" and set (v : FunScript.TypeScript.Element) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.offsetY)"); CompiledName("offsetY")>]
            member __.offsetY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x)"); CompiledName("x2")>]
            member __.x with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.behaviorPart)"); CompiledName("behaviorPart")>]
            member __.behaviorPart with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.qualifier)"); CompiledName("qualifier")>]
            member __.qualifier with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.altKey)"); CompiledName("altKey1")>]
            member __.altKey with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ctrlKey)"); CompiledName("ctrlKey1")>]
            member __.ctrlKey with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clientY)"); CompiledName("clientY")>]
            member __.clientY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.shiftKey)"); CompiledName("shiftKey1")>]
            member __.shiftKey with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.shiftLeft)"); CompiledName("shiftLeft")>]
            member __.shiftLeft with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.contentOverflow)"); CompiledName("contentOverflow")>]
            member __.contentOverflow with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.screenY)"); CompiledName("screenY1")>]
            member __.screenY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ctrlLeft)"); CompiledName("ctrlLeft")>]
            member __.ctrlLeft with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.button)"); CompiledName("button")>]
            member __.button with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.srcUrn)"); CompiledName("srcUrn")>]
            member __.srcUrn with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clientX)"); CompiledName("clientX")>]
            member __.clientX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.actionURL)"); CompiledName("actionURL")>]
            member __.actionURL with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getAttribute({1}, {?2}))"); CompiledName("getAttribute2")>]
            member __.getAttribute(strAttributeName : string, ?lFlags : float) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.getAttribute = {1})"); CompiledName("getAttribute2Aux")>]
            member __.``getAttribute <-``(func : System.Func<string, float, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setAttribute({1}, {2}, {?3}))"); CompiledName("setAttribute2")>]
            member __.setAttribute(strAttributeName : string, attributeValue : obj, ?lFlags : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setAttribute = {1})"); CompiledName("setAttribute2Aux")>]
            member __.``setAttribute <-``(func : System.Func<string, obj, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeAttribute({1}, {?2}))"); CompiledName("removeAttribute2")>]
            member __.removeAttribute(strAttributeName : string, ?lFlags : float) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeAttribute = {1})"); CompiledName("removeAttribute2Aux")>]
            member __.``removeAttribute <-``(func : System.Func<string, float, bool>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_657 =


    type FunScript.TypeScript.MSExecAtPriorityFunctionCallback with 

            [<FunScript.JSEmitInline("({0}())"); CompiledName("Invoke29")>]
            member __.Invoke() : obj = failwith "never"
            [<FunScript.JSEmitInline("({0} = {1})"); CompiledName("Invoke29Aux")>]
            member __.``Invoke <-``(func : System.Func<obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}({1...}))"); CompiledName("Invoke30")>]
            member __.InvokeOverload2([<System.ParamArray>] args : array<obj>) : obj = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_658 =


    type FunScript.TypeScript.MSFileSaver with 

            [<FunScript.JSEmitInline("({0}.msSaveBlob({1}, {?2}))"); CompiledName("msSaveBlob")>]
            member __.msSaveBlob(blob : obj, ?defaultName : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.msSaveBlob = {1})"); CompiledName("msSaveBlobAux")>]
            member __.``msSaveBlob <-``(func : System.Func<obj, string, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msSaveOrOpenBlob({1}, {?2}))"); CompiledName("msSaveOrOpenBlob")>]
            member __.msSaveOrOpenBlob(blob : obj, ?defaultName : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.msSaveOrOpenBlob = {1})"); CompiledName("msSaveOrOpenBlobAux")>]
            member __.``msSaveOrOpenBlob <-``(func : System.Func<obj, string, bool>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_659 =


    type FunScript.TypeScript.MSGesture with 

            [<FunScript.JSEmitInline("({0}.target)"); CompiledName("target6")>]
            member __.target with get() : FunScript.TypeScript.Element = failwith "never" and set (v : FunScript.TypeScript.Element) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addPointer({1}))"); CompiledName("addPointer")>]
            member __.addPointer(pointerId : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addPointer = {1})"); CompiledName("addPointerAux")>]
            member __.``addPointer <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.stop())"); CompiledName("stop1")>]
            member __.stop() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.stop = {1})"); CompiledName("stop1Aux")>]
            member __.``stop <-``(func : System.Func<unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_660 =


    type FunScript.TypeScript.MSGestureEvent with 

            [<FunScript.JSEmitInline("({0}.offsetY)"); CompiledName("offsetY1")>]
            member __.offsetY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.translationY)"); CompiledName("translationY")>]
            member __.translationY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.velocityExpansion)"); CompiledName("velocityExpansion")>]
            member __.velocityExpansion with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.velocityY)"); CompiledName("velocityY")>]
            member __.velocityY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.velocityAngular)"); CompiledName("velocityAngular")>]
            member __.velocityAngular with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.translationX)"); CompiledName("translationX")>]
            member __.translationX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.velocityX)"); CompiledName("velocityX")>]
            member __.velocityX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.hwTimestamp)"); CompiledName("hwTimestamp")>]
            member __.hwTimestamp with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.offsetX)"); CompiledName("offsetX1")>]
            member __.offsetX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.screenX)"); CompiledName("screenX2")>]
            member __.screenX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.rotation)"); CompiledName("rotation")>]
            member __.rotation with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.expansion)"); CompiledName("expansion")>]
            member __.expansion with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clientY)"); CompiledName("clientY1")>]
            member __.clientY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.screenY)"); CompiledName("screenY2")>]
            member __.screenY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.scale)"); CompiledName("scale2")>]
            member __.scale with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.gestureObject)"); CompiledName("gestureObject")>]
            member __.gestureObject with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clientX)"); CompiledName("clientX1")>]
            member __.clientX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initGestureEvent({1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16}, {17}, {18}, {19}, {20}, {21}))"); CompiledName("initGestureEvent")>]
            member __.initGestureEvent(typeArg : string, canBubbleArg : bool, cancelableArg : bool, viewArg : FunScript.TypeScript.Window, detailArg : float, screenXArg : float, screenYArg : float, clientXArg : float, clientYArg : float, offsetXArg : float, offsetYArg : float, translationXArg : float, translationYArg : float, scaleArg : float, expansionArg : float, rotationArg : float, velocityXArg : float, velocityYArg : float, velocityExpansionArg : float, velocityAngularArg : float, hwTimestampArg : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MSGESTURE_FLAG_BEGIN)"); CompiledName("MSGESTURE_FLAG_BEGIN1")>]
            member __.MSGESTURE_FLAG_BEGIN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MSGESTURE_FLAG_END)"); CompiledName("MSGESTURE_FLAG_END1")>]
            member __.MSGESTURE_FLAG_END with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MSGESTURE_FLAG_CANCEL)"); CompiledName("MSGESTURE_FLAG_CANCEL1")>]
            member __.MSGESTURE_FLAG_CANCEL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MSGESTURE_FLAG_INERTIA)"); CompiledName("MSGESTURE_FLAG_INERTIA1")>]
            member __.MSGESTURE_FLAG_INERTIA with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MSGESTURE_FLAG_NONE)"); CompiledName("MSGESTURE_FLAG_NONE1")>]
            member __.MSGESTURE_FLAG_NONE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_661 =


    type FunScript.TypeScript.MSGraphicsTrust with 

            [<FunScript.JSEmitInline("({0}.status)"); CompiledName("status5")>]
            member __.status with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.constrictionActive)"); CompiledName("constrictionActive")>]
            member __.constrictionActive with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_662 =


    type FunScript.TypeScript.MSHTMLCollectionExtensions with 

            [<FunScript.JSEmitInline("({0}.urns({1}))"); CompiledName("urns")>]
            member __.urns(urn : obj) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.urns = {1})"); CompiledName("urnsAux")>]
            member __.``urns <-``(func : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.tags({1}))"); CompiledName("tags")>]
            member __.tags(tagName : obj) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.tags = {1})"); CompiledName("tagsAux")>]
            member __.``tags <-``(func : System.Func<obj, obj>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_663 =


    type FunScript.TypeScript.MSHTMLWebViewElement with 

            [<FunScript.JSEmitInline("({0}.documentTitle)"); CompiledName("documentTitle")>]
            member __.documentTitle with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.width)"); CompiledName("width19")>]
            member __.width with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.src)"); CompiledName("src10")>]
            member __.src with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.canGoForward)"); CompiledName("canGoForward")>]
            member __.canGoForward with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.height)"); CompiledName("height16")>]
            member __.height with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.canGoBack)"); CompiledName("canGoBack")>]
            member __.canGoBack with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.navigateWithHttpRequestMessage({1}))"); CompiledName("navigateWithHttpRequestMessage")>]
            member __.navigateWithHttpRequestMessage(requestMessage : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.navigateWithHttpRequestMessage = {1})"); CompiledName("navigateWithHttpRequestMessageAux")>]
            member __.``navigateWithHttpRequestMessage <-``(func : System.Func<obj, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.goBack())"); CompiledName("goBack")>]
            member __.goBack() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.goBack = {1})"); CompiledName("goBackAux")>]
            member __.``goBack <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.navigate({1}))"); CompiledName("navigate1")>]
            member __.navigate(uri : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.navigate = {1})"); CompiledName("navigate1Aux")>]
            member __.``navigate <-``(func : System.Func<string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.stop())"); CompiledName("stop2")>]
            member __.stop() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.stop = {1})"); CompiledName("stop2Aux")>]
            member __.``stop <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.navigateToString({1}))"); CompiledName("navigateToString")>]
            member __.navigateToString(contents : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.navigateToString = {1})"); CompiledName("navigateToStringAux")>]
            member __.``navigateToString <-``(func : System.Func<string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.captureSelectedContentToDataPackageAsync())"); CompiledName("captureSelectedContentToDataPackageAsync")>]
            member __.captureSelectedContentToDataPackageAsync() : FunScript.TypeScript.MSWebViewAsyncOperation = failwith "never"
            [<FunScript.JSEmitInline("({0}.captureSelectedContentToDataPackageAsync = {1})"); CompiledName("captureSelectedContentToDataPackageAsyncAux")>]
            member __.``captureSelectedContentToDataPackageAsync <-``(func : System.Func<FunScript.TypeScript.MSWebViewAsyncOperation>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.capturePreviewToBlobAsync())"); CompiledName("capturePreviewToBlobAsync")>]
            member __.capturePreviewToBlobAsync() : FunScript.TypeScript.MSWebViewAsyncOperation = failwith "never"
            [<FunScript.JSEmitInline("({0}.capturePreviewToBlobAsync = {1})"); CompiledName("capturePreviewToBlobAsyncAux")>]
            member __.``capturePreviewToBlobAsync <-``(func : System.Func<FunScript.TypeScript.MSWebViewAsyncOperation>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.refresh())"); CompiledName("refresh1")>]
            member __.refresh() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.refresh = {1})"); CompiledName("refresh1Aux")>]
            member __.``refresh <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.goForward())"); CompiledName("goForward")>]
            member __.goForward() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.goForward = {1})"); CompiledName("goForwardAux")>]
            member __.``goForward <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.navigateToLocalStreamUri({1}, {2}))"); CompiledName("navigateToLocalStreamUri")>]
            member __.navigateToLocalStreamUri(source : string, streamResolver : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.navigateToLocalStreamUri = {1})"); CompiledName("navigateToLocalStreamUriAux")>]
            member __.``navigateToLocalStreamUri <-``(func : System.Func<string, obj, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.invokeScriptAsync({1}))"); CompiledName("invokeScriptAsync")>]
            member __.invokeScriptAsync(scriptName : string) : FunScript.TypeScript.MSWebViewAsyncOperation = failwith "never"
            [<FunScript.JSEmitInline("({0}.invokeScriptAsync = {1})"); CompiledName("invokeScriptAsyncAux")>]
            member __.``invokeScriptAsync <-``(func : System.Func<string, FunScript.TypeScript.MSWebViewAsyncOperation>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.invokeScriptAsync({1}, {2...}))"); CompiledName("invokeScriptAsync1")>]
            member __.invokeScriptAsyncOverload2(scriptName : string, [<System.ParamArray>] args : array<obj>) : FunScript.TypeScript.MSWebViewAsyncOperation = failwith "never"
            [<FunScript.JSEmitInline("({0}.buildLocalStreamUri({1}, {2}))"); CompiledName("buildLocalStreamUri")>]
            member __.buildLocalStreamUri(contentIdentifier : string, relativePath : string) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.buildLocalStreamUri = {1})"); CompiledName("buildLocalStreamUriAux")>]
            member __.``buildLocalStreamUri <-``(func : System.Func<string, string, string>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_664 =


    type FunScript.TypeScript.MSImageResourceExtensions with 

            [<FunScript.JSEmitInline("({0}.dynsrc)"); CompiledName("dynsrc1")>]
            member __.dynsrc with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.vrml)"); CompiledName("vrml1")>]
            member __.vrml with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.lowsrc)"); CompiledName("lowsrc1")>]
            member __.lowsrc with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.start)"); CompiledName("start3")>]
            member __.start with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.loop)"); CompiledName("loop4")>]
            member __.loop with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_665 =


    type FunScript.TypeScript.MSInputMethodContext with 

            [<FunScript.JSEmitInline("({0}.oncandidatewindowshow)"); CompiledName("oncandidatewindowshow")>]
            member __.oncandidatewindowshow with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.target)"); CompiledName("target7")>]
            member __.target with get() : FunScript.TypeScript.HTMLElement = failwith "never" and set (v : FunScript.TypeScript.HTMLElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.compositionStartOffset)"); CompiledName("compositionStartOffset")>]
            member __.compositionStartOffset with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.oncandidatewindowhide)"); CompiledName("oncandidatewindowhide")>]
            member __.oncandidatewindowhide with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.oncandidatewindowupdate)"); CompiledName("oncandidatewindowupdate")>]
            member __.oncandidatewindowupdate with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.compositionEndOffset)"); CompiledName("compositionEndOffset")>]
            member __.compositionEndOffset with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getCompositionAlternatives())"); CompiledName("getCompositionAlternatives")>]
            member __.getCompositionAlternatives() : array<string> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getCompositionAlternatives = {1})"); CompiledName("getCompositionAlternativesAux")>]
            member __.``getCompositionAlternatives <-``(func : System.Func<array<string>>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getCandidateWindowClientRect())"); CompiledName("getCandidateWindowClientRect")>]
            member __.getCandidateWindowClientRect() : FunScript.TypeScript.ClientRect = failwith "never"
            [<FunScript.JSEmitInline("({0}.getCandidateWindowClientRect = {1})"); CompiledName("getCandidateWindowClientRectAux")>]
            member __.``getCandidateWindowClientRect <-``(func : System.Func<FunScript.TypeScript.ClientRect>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.hasComposition())"); CompiledName("hasComposition")>]
            member __.hasComposition() : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.hasComposition = {1})"); CompiledName("hasCompositionAux")>]
            member __.``hasComposition <-``(func : System.Func<bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.isCandidateWindowVisible())"); CompiledName("isCandidateWindowVisible")>]
            member __.isCandidateWindowVisible() : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.isCandidateWindowVisible = {1})"); CompiledName("isCandidateWindowVisibleAux")>]
            member __.``isCandidateWindowVisible <-``(func : System.Func<bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"candidatewindowshow\", {1}, {?2}))"); CompiledName("addEventListener1293")>]
            member __.addEventListener_candidatewindowshow(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"candidatewindowhide\", {1}, {?2}))"); CompiledName("addEventListener1294")>]
            member __.addEventListener_candidatewindowhide(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"candidatewindowupdate\", {1}, {?2}))"); CompiledName("addEventListener1295")>]
            member __.addEventListener_candidatewindowupdate(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener({1}, {2}, {?3}))"); CompiledName("addEventListener1296")>]
            member __.addEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener = {1})"); CompiledName("addEventListener1296Aux")>]
            member __.``addEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_666 =


    type FunScript.TypeScript.MSLaunchUriCallback with 

            [<FunScript.JSEmitInline("({0}())"); CompiledName("Invoke31")>]
            member __.Invoke() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0} = {1})"); CompiledName("Invoke31Aux")>]
            member __.``Invoke <-``(func : System.Func<unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_667 =


    type FunScript.TypeScript.MSManipulationEvent with 

            [<FunScript.JSEmitInline("({0}.lastState)"); CompiledName("lastState")>]
            member __.lastState with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.currentState)"); CompiledName("currentState")>]
            member __.currentState with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initMSManipulationEvent({1}, {2}, {3}, {4}, {5}, {6}, {7}))"); CompiledName("initMSManipulationEvent")>]
            member __.initMSManipulationEvent(typeArg : string, canBubbleArg : bool, cancelableArg : bool, viewArg : FunScript.TypeScript.Window, detailArg : float, lastState : float, currentState : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initMSManipulationEvent = {1})"); CompiledName("initMSManipulationEventAux")>]
            member __.``initMSManipulationEvent <-``(func : System.Func<string, bool, bool, FunScript.TypeScript.Window, float, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MS_MANIPULATION_STATE_STOPPED)"); CompiledName("MS_MANIPULATION_STATE_STOPPED1")>]
            member __.MS_MANIPULATION_STATE_STOPPED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MS_MANIPULATION_STATE_ACTIVE)"); CompiledName("MS_MANIPULATION_STATE_ACTIVE1")>]
            member __.MS_MANIPULATION_STATE_ACTIVE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MS_MANIPULATION_STATE_INERTIA)"); CompiledName("MS_MANIPULATION_STATE_INERTIA1")>]
            member __.MS_MANIPULATION_STATE_INERTIA with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MS_MANIPULATION_STATE_SELECTING)"); CompiledName("MS_MANIPULATION_STATE_SELECTING1")>]
            member __.MS_MANIPULATION_STATE_SELECTING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MS_MANIPULATION_STATE_COMMITTED)"); CompiledName("MS_MANIPULATION_STATE_COMMITTED1")>]
            member __.MS_MANIPULATION_STATE_COMMITTED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MS_MANIPULATION_STATE_PRESELECT)"); CompiledName("MS_MANIPULATION_STATE_PRESELECT1")>]
            member __.MS_MANIPULATION_STATE_PRESELECT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MS_MANIPULATION_STATE_DRAGGING)"); CompiledName("MS_MANIPULATION_STATE_DRAGGING1")>]
            member __.MS_MANIPULATION_STATE_DRAGGING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MS_MANIPULATION_STATE_CANCELLED)"); CompiledName("MS_MANIPULATION_STATE_CANCELLED1")>]
            member __.MS_MANIPULATION_STATE_CANCELLED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_668 =


    type FunScript.TypeScript.MSMediaKeyError with 

            [<FunScript.JSEmitInline("({0}.systemCode)"); CompiledName("systemCode")>]
            member __.systemCode with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.code)"); CompiledName("code5")>]
            member __.code with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MS_MEDIA_KEYERR_SERVICE)"); CompiledName("MS_MEDIA_KEYERR_SERVICE1")>]
            member __.MS_MEDIA_KEYERR_SERVICE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MS_MEDIA_KEYERR_HARDWARECHANGE)"); CompiledName("MS_MEDIA_KEYERR_HARDWARECHANGE1")>]
            member __.MS_MEDIA_KEYERR_HARDWARECHANGE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MS_MEDIA_KEYERR_OUTPUT)"); CompiledName("MS_MEDIA_KEYERR_OUTPUT1")>]
            member __.MS_MEDIA_KEYERR_OUTPUT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MS_MEDIA_KEYERR_DOMAIN)"); CompiledName("MS_MEDIA_KEYERR_DOMAIN1")>]
            member __.MS_MEDIA_KEYERR_DOMAIN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MS_MEDIA_KEYERR_UNKNOWN)"); CompiledName("MS_MEDIA_KEYERR_UNKNOWN1")>]
            member __.MS_MEDIA_KEYERR_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MS_MEDIA_KEYERR_CLIENT)"); CompiledName("MS_MEDIA_KEYERR_CLIENT1")>]
            member __.MS_MEDIA_KEYERR_CLIENT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_669 =


    type FunScript.TypeScript.MSMediaKeyMessageEvent with 

            [<FunScript.JSEmitInline("({0}.destinationURL)"); CompiledName("destinationURL")>]
            member __.destinationURL with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.message)"); CompiledName("message4")>]
            member __.message with get() : FunScript.TypeScript.Uint8Array = failwith "never" and set (v : FunScript.TypeScript.Uint8Array) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_670 =


    type FunScript.TypeScript.MSMediaKeyNeededEvent with 

            [<FunScript.JSEmitInline("({0}.initData)"); CompiledName("initData")>]
            member __.initData with get() : FunScript.TypeScript.Uint8Array = failwith "never" and set (v : FunScript.TypeScript.Uint8Array) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_671 =


    type FunScript.TypeScript.MSMediaKeySession with 

            [<FunScript.JSEmitInline("({0}.sessionId)"); CompiledName("sessionId")>]
            member __.sessionId with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.error)"); CompiledName("error7")>]
            member __.error with get() : FunScript.TypeScript.MSMediaKeyError = failwith "never" and set (v : FunScript.TypeScript.MSMediaKeyError) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.keySystem)"); CompiledName("keySystem")>]
            member __.keySystem with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.close())"); CompiledName("close4")>]
            member __.close() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.close = {1})"); CompiledName("close4Aux")>]
            member __.``close <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.update({1}))"); CompiledName("update2")>]
            member __.update(key : FunScript.TypeScript.Uint8Array) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.update = {1})"); CompiledName("update2Aux")>]
            member __.``update <-``(func : System.Func<FunScript.TypeScript.Uint8Array, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_672 =


    type FunScript.TypeScript.MSMediaKeys with 

            [<FunScript.JSEmitInline("({0}.keySystem)"); CompiledName("keySystem1")>]
            member __.keySystem with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSession({1}, {2}, {?3}))"); CompiledName("createSession")>]
            member __.createSession(_type : string, initData : FunScript.TypeScript.Uint8Array, ?cdmData : FunScript.TypeScript.Uint8Array) : FunScript.TypeScript.MSMediaKeySession = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSession = {1})"); CompiledName("createSessionAux")>]
            member __.``createSession <-``(func : System.Func<string, FunScript.TypeScript.Uint8Array, FunScript.TypeScript.Uint8Array, FunScript.TypeScript.MSMediaKeySession>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_673 =


    type FunScript.TypeScript.MSMimeTypesCollection with 

            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length27")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_674 =


    type FunScript.TypeScript.MSNamespaceInfo with 

            [<FunScript.JSEmitInline("({0}.urn)"); CompiledName("urn1")>]
            member __.urn with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onreadystatechange)"); CompiledName("onreadystatechange3")>]
            member __.onreadystatechange with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.name)"); CompiledName("name29")>]
            member __.name with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.readyState)"); CompiledName("readyState8")>]
            member __.readyState with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.doImport({1}))"); CompiledName("doImport")>]
            member __.doImport(implementationUrl : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.doImport = {1})"); CompiledName("doImportAux")>]
            member __.``doImport <-``(func : System.Func<string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"readystatechange\", {1}, {?2}))"); CompiledName("addEventListener1297")>]
            member __.addEventListener_readystatechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener({1}, {2}, {?3}))"); CompiledName("addEventListener1298")>]
            member __.addEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener = {1})"); CompiledName("addEventListener1298Aux")>]
            member __.``addEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_675 =


    type FunScript.TypeScript.MSNamespaceInfoCollection with 

            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length28")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.add({?1}, {?2}, {?3}))"); CompiledName("add5")>]
            member __.add(?_namespace : string, ?urn : string, ?implementationUrl : obj) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.add = {1})"); CompiledName("add5Aux")>]
            member __.``add <-``(func : System.Func<string, string, obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.item({1}))"); CompiledName("item16")>]
            member __.item(index : obj) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.item = {1})"); CompiledName("item16Aux")>]
            member __.``item <-``(func : System.Func<obj, obj>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_676 =


    type FunScript.TypeScript.MSNavigatorDoNotTrack with 

            [<FunScript.JSEmitInline("({0}.msDoNotTrack)"); CompiledName("msDoNotTrack")>]
            member __.msDoNotTrack with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeSiteSpecificTrackingException({1}))"); CompiledName("removeSiteSpecificTrackingException")>]
            member __.removeSiteSpecificTrackingException(args : FunScript.TypeScript.ExceptionInformation) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeSiteSpecificTrackingException = {1})"); CompiledName("removeSiteSpecificTrackingExceptionAux")>]
            member __.``removeSiteSpecificTrackingException <-``(func : System.Func<FunScript.TypeScript.ExceptionInformation, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeWebWideTrackingException({1}))"); CompiledName("removeWebWideTrackingException")>]
            member __.removeWebWideTrackingException(args : FunScript.TypeScript.ExceptionInformation) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeWebWideTrackingException = {1})"); CompiledName("removeWebWideTrackingExceptionAux")>]
            member __.``removeWebWideTrackingException <-``(func : System.Func<FunScript.TypeScript.ExceptionInformation, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.storeWebWideTrackingException({1}))"); CompiledName("storeWebWideTrackingException")>]
            member __.storeWebWideTrackingException(args : FunScript.TypeScript.StoreExceptionsInformation) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.storeWebWideTrackingException = {1})"); CompiledName("storeWebWideTrackingExceptionAux")>]
            member __.``storeWebWideTrackingException <-``(func : System.Func<FunScript.TypeScript.StoreExceptionsInformation, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.storeSiteSpecificTrackingException({1}))"); CompiledName("storeSiteSpecificTrackingException")>]
            member __.storeSiteSpecificTrackingException(args : FunScript.TypeScript.StoreSiteSpecificExceptionsInformation) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.storeSiteSpecificTrackingException = {1})"); CompiledName("storeSiteSpecificTrackingExceptionAux")>]
            member __.``storeSiteSpecificTrackingException <-``(func : System.Func<FunScript.TypeScript.StoreSiteSpecificExceptionsInformation, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.confirmSiteSpecificTrackingException({1}))"); CompiledName("confirmSiteSpecificTrackingException")>]
            member __.confirmSiteSpecificTrackingException(args : FunScript.TypeScript.ConfirmSiteSpecificExceptionsInformation) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.confirmSiteSpecificTrackingException = {1})"); CompiledName("confirmSiteSpecificTrackingExceptionAux")>]
            member __.``confirmSiteSpecificTrackingException <-``(func : System.Func<FunScript.TypeScript.ConfirmSiteSpecificExceptionsInformation, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.confirmWebWideTrackingException({1}))"); CompiledName("confirmWebWideTrackingException")>]
            member __.confirmWebWideTrackingException(args : FunScript.TypeScript.ExceptionInformation) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.confirmWebWideTrackingException = {1})"); CompiledName("confirmWebWideTrackingExceptionAux")>]
            member __.``confirmWebWideTrackingException <-``(func : System.Func<FunScript.TypeScript.ExceptionInformation, bool>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_677 =


    type FunScript.TypeScript.MSNavigatorExtensions with 

            [<FunScript.JSEmitInline("({0}.userLanguage)"); CompiledName("userLanguage")>]
            member __.userLanguage with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.plugins)"); CompiledName("plugins1")>]
            member __.plugins with get() : FunScript.TypeScript.MSPluginsCollection = failwith "never" and set (v : FunScript.TypeScript.MSPluginsCollection) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.cookieEnabled)"); CompiledName("cookieEnabled")>]
            member __.cookieEnabled with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.appCodeName)"); CompiledName("appCodeName")>]
            member __.appCodeName with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.cpuClass)"); CompiledName("cpuClass")>]
            member __.cpuClass with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.appMinorVersion)"); CompiledName("appMinorVersion")>]
            member __.appMinorVersion with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.connectionSpeed)"); CompiledName("connectionSpeed")>]
            member __.connectionSpeed with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.browserLanguage)"); CompiledName("browserLanguage")>]
            member __.browserLanguage with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.mimeTypes)"); CompiledName("mimeTypes")>]
            member __.mimeTypes with get() : FunScript.TypeScript.MSMimeTypesCollection = failwith "never" and set (v : FunScript.TypeScript.MSMimeTypesCollection) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.systemLanguage)"); CompiledName("systemLanguage")>]
            member __.systemLanguage with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.language)"); CompiledName("language2")>]
            member __.language with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.javaEnabled())"); CompiledName("javaEnabled")>]
            member __.javaEnabled() : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.javaEnabled = {1})"); CompiledName("javaEnabledAux")>]
            member __.``javaEnabled <-``(func : System.Func<bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.taintEnabled())"); CompiledName("taintEnabled")>]
            member __.taintEnabled() : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.taintEnabled = {1})"); CompiledName("taintEnabledAux")>]
            member __.``taintEnabled <-``(func : System.Func<bool>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_678 =


    type FunScript.TypeScript.MSNodeExtensions with 

            [<FunScript.JSEmitInline("({0}.swapNode({1}))"); CompiledName("swapNode")>]
            member __.swapNode(otherNode : FunScript.TypeScript.Node) : FunScript.TypeScript.Node = failwith "never"
            [<FunScript.JSEmitInline("({0}.swapNode = {1})"); CompiledName("swapNodeAux")>]
            member __.``swapNode <-``(func : System.Func<FunScript.TypeScript.Node, FunScript.TypeScript.Node>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeNode({?1}))"); CompiledName("removeNode")>]
            member __.removeNode(?deep : bool) : FunScript.TypeScript.Node = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeNode = {1})"); CompiledName("removeNodeAux")>]
            member __.``removeNode <-``(func : System.Func<bool, FunScript.TypeScript.Node>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.replaceNode({1}))"); CompiledName("replaceNode")>]
            member __.replaceNode(replacement : FunScript.TypeScript.Node) : FunScript.TypeScript.Node = failwith "never"
            [<FunScript.JSEmitInline("({0}.replaceNode = {1})"); CompiledName("replaceNodeAux")>]
            member __.``replaceNode <-``(func : System.Func<FunScript.TypeScript.Node, FunScript.TypeScript.Node>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_679 =


    type FunScript.TypeScript.MSPluginsCollection with 

            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length29")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.refresh({?1}))"); CompiledName("refresh2")>]
            member __.refresh(?reload : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.refresh = {1})"); CompiledName("refresh2Aux")>]
            member __.``refresh <-``(func : System.Func<bool, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_680 =


    type FunScript.TypeScript.MSPointerEvent with 

            [<FunScript.JSEmitInline("({0}.width)"); CompiledName("width20")>]
            member __.width with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.rotation)"); CompiledName("rotation1")>]
            member __.rotation with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pressure)"); CompiledName("pressure")>]
            member __.pressure with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pointerType)"); CompiledName("pointerType")>]
            member __.pointerType with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.isPrimary)"); CompiledName("isPrimary")>]
            member __.isPrimary with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.tiltY)"); CompiledName("tiltY")>]
            member __.tiltY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.height)"); CompiledName("height17")>]
            member __.height with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.intermediatePoints)"); CompiledName("intermediatePoints")>]
            member __.intermediatePoints with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.currentPoint)"); CompiledName("currentPoint")>]
            member __.currentPoint with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.tiltX)"); CompiledName("tiltX")>]
            member __.tiltX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.hwTimestamp)"); CompiledName("hwTimestamp1")>]
            member __.hwTimestamp with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pointerId)"); CompiledName("pointerId")>]
            member __.pointerId with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initPointerEvent({1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16}, {17}, {18}, {19}, {20}, {21}, {22}, {23}, {24}, {25}, {26}, {27}))"); CompiledName("initPointerEvent")>]
            member __.initPointerEvent(typeArg : string, canBubbleArg : bool, cancelableArg : bool, viewArg : FunScript.TypeScript.Window, detailArg : float, screenXArg : float, screenYArg : float, clientXArg : float, clientYArg : float, ctrlKeyArg : bool, altKeyArg : bool, shiftKeyArg : bool, metaKeyArg : bool, buttonArg : float, relatedTargetArg : FunScript.TypeScript.EventTarget, offsetXArg : float, offsetYArg : float, widthArg : float, heightArg : float, pressure : float, rotation : float, tiltX : float, tiltY : float, pointerIdArg : float, pointerType : obj, hwTimestampArg : float, isPrimary : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getCurrentPoint({1}))"); CompiledName("getCurrentPoint")>]
            member __.getCurrentPoint(element : FunScript.TypeScript.Element) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getCurrentPoint = {1})"); CompiledName("getCurrentPointAux")>]
            member __.``getCurrentPoint <-``(func : System.Func<FunScript.TypeScript.Element, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getIntermediatePoints({1}))"); CompiledName("getIntermediatePoints")>]
            member __.getIntermediatePoints(element : FunScript.TypeScript.Element) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getIntermediatePoints = {1})"); CompiledName("getIntermediatePointsAux")>]
            member __.``getIntermediatePoints <-``(func : System.Func<FunScript.TypeScript.Element, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MSPOINTER_TYPE_PEN)"); CompiledName("MSPOINTER_TYPE_PEN1")>]
            member __.MSPOINTER_TYPE_PEN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MSPOINTER_TYPE_MOUSE)"); CompiledName("MSPOINTER_TYPE_MOUSE1")>]
            member __.MSPOINTER_TYPE_MOUSE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MSPOINTER_TYPE_TOUCH)"); CompiledName("MSPOINTER_TYPE_TOUCH1")>]
            member __.MSPOINTER_TYPE_TOUCH with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_681 =


    type FunScript.TypeScript.MSPopupWindow with 

            [<FunScript.JSEmitInline("({0}.document)"); CompiledName("document2")>]
            member __.document with get() : FunScript.TypeScript.Document = failwith "never" and set (v : FunScript.TypeScript.Document) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.isOpen)"); CompiledName("isOpen")>]
            member __.isOpen with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.show({1}, {2}, {3}, {4}, {?5}))"); CompiledName("show")>]
            member __.show(x : float, y : float, w : float, h : float, ?element : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.show = {1})"); CompiledName("showAux")>]
            member __.``show <-``(func : System.Func<float, float, float, float, obj, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.hide())"); CompiledName("hide")>]
            member __.hide() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.hide = {1})"); CompiledName("hideAux")>]
            member __.``hide <-``(func : System.Func<unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_682 =


    type FunScript.TypeScript.MSRangeCollection with 

            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length30")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.item({1}))"); CompiledName("item17")>]
            member __.item(index : float) : FunScript.TypeScript.Range = failwith "never"
            [<FunScript.JSEmitInline("({0}.item = {1})"); CompiledName("item17Aux")>]
            member __.``item <-``(func : System.Func<float, FunScript.TypeScript.Range>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}[{1}])"); CompiledName("Item21")>]
            member __.Item with get(i : int) : FunScript.TypeScript.Range = failwith "never" and set (i : int) (v : FunScript.TypeScript.Range) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_683 =


    type FunScript.TypeScript.MSResourceMetadata with 

            [<FunScript.JSEmitInline("({0}.protocol)"); CompiledName("protocol3")>]
            member __.protocol with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.fileSize)"); CompiledName("fileSize")>]
            member __.fileSize with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.fileUpdatedDate)"); CompiledName("fileUpdatedDate")>]
            member __.fileUpdatedDate with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.nameProp)"); CompiledName("nameProp1")>]
            member __.nameProp with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.fileCreatedDate)"); CompiledName("fileCreatedDate")>]
            member __.fileCreatedDate with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.fileModifiedDate)"); CompiledName("fileModifiedDate")>]
            member __.fileModifiedDate with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.mimeType)"); CompiledName("mimeType1")>]
            member __.mimeType with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_684 =


    type FunScript.TypeScript.MSSelection with 

            [<FunScript.JSEmitInline("({0}.type)"); CompiledName("_type20")>]
            member __._type with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.typeDetail)"); CompiledName("typeDetail")>]
            member __.typeDetail with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createRange())"); CompiledName("createRange1")>]
            member __.createRange() : FunScript.TypeScript.TextRange = failwith "never"
            [<FunScript.JSEmitInline("({0}.createRange = {1})"); CompiledName("createRange1Aux")>]
            member __.``createRange <-``(func : System.Func<FunScript.TypeScript.TextRange>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clear())"); CompiledName("clear6")>]
            member __.clear() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clear = {1})"); CompiledName("clear6Aux")>]
            member __.``clear <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createRangeCollection())"); CompiledName("createRangeCollection")>]
            member __.createRangeCollection() : FunScript.TypeScript.TextRangeCollection = failwith "never"
            [<FunScript.JSEmitInline("({0}.createRangeCollection = {1})"); CompiledName("createRangeCollectionAux")>]
            member __.``createRangeCollection <-``(func : System.Func<FunScript.TypeScript.TextRangeCollection>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.empty())"); CompiledName("empty")>]
            member __.empty() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.empty = {1})"); CompiledName("emptyAux")>]
            member __.``empty <-``(func : System.Func<unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_685 =


    type FunScript.TypeScript.MSSiteModeEvent with 

            [<FunScript.JSEmitInline("({0}.buttonID)"); CompiledName("buttonID1")>]
            member __.buttonID with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.actionURL)"); CompiledName("actionURL1")>]
            member __.actionURL with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_686 =


    type FunScript.TypeScript.MSStorageExtensions with 

            [<FunScript.JSEmitInline("({0}.remainingSpace)"); CompiledName("remainingSpace")>]
            member __.remainingSpace with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_687 =


    type FunScript.TypeScript.MSStream with 

            [<FunScript.JSEmitInline("({0}.type)"); CompiledName("_type21")>]
            member __._type with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msDetachStream())"); CompiledName("msDetachStream1")>]
            member __.msDetachStream() : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.msDetachStream = {1})"); CompiledName("msDetachStream1Aux")>]
            member __.``msDetachStream <-``(func : System.Func<obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msClose())"); CompiledName("msClose1")>]
            member __.msClose() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msClose = {1})"); CompiledName("msClose1Aux")>]
            member __.``msClose <-``(func : System.Func<unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_688 =


    type FunScript.TypeScript.MSStreamReader with 

            [<FunScript.JSEmitInline("({0}.error)"); CompiledName("error8")>]
            member __.error with get() : FunScript.TypeScript.DOMError = failwith "never" and set (v : FunScript.TypeScript.DOMError) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.readAsArrayBuffer({1}, {?2}))"); CompiledName("readAsArrayBuffer1")>]
            member __.readAsArrayBuffer(stream : FunScript.TypeScript.MSStream, ?size : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.readAsArrayBuffer = {1})"); CompiledName("readAsArrayBuffer1Aux")>]
            member __.``readAsArrayBuffer <-``(func : System.Func<FunScript.TypeScript.MSStream, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.readAsBlob({1}, {?2}))"); CompiledName("readAsBlob")>]
            member __.readAsBlob(stream : FunScript.TypeScript.MSStream, ?size : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.readAsBlob = {1})"); CompiledName("readAsBlobAux")>]
            member __.``readAsBlob <-``(func : System.Func<FunScript.TypeScript.MSStream, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.readAsDataURL({1}, {?2}))"); CompiledName("readAsDataURL1")>]
            member __.readAsDataURL(stream : FunScript.TypeScript.MSStream, ?size : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.readAsDataURL = {1})"); CompiledName("readAsDataURL1Aux")>]
            member __.``readAsDataURL <-``(func : System.Func<FunScript.TypeScript.MSStream, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.readAsText({1}, {?2}, {?3}))"); CompiledName("readAsText1")>]
            member __.readAsText(stream : FunScript.TypeScript.MSStream, ?encoding : string, ?size : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.readAsText = {1})"); CompiledName("readAsText1Aux")>]
            member __.``readAsText <-``(func : System.Func<FunScript.TypeScript.MSStream, string, float, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_689 =


    type FunScript.TypeScript.MSStyleCSSProperties with 

            [<FunScript.JSEmitInline("({0}.pixelWidth)"); CompiledName("pixelWidth")>]
            member __.pixelWidth with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.posHeight)"); CompiledName("posHeight")>]
            member __.posHeight with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.posLeft)"); CompiledName("posLeft")>]
            member __.posLeft with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pixelTop)"); CompiledName("pixelTop")>]
            member __.pixelTop with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pixelBottom)"); CompiledName("pixelBottom")>]
            member __.pixelBottom with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.textDecorationNone)"); CompiledName("textDecorationNone")>]
            member __.textDecorationNone with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pixelLeft)"); CompiledName("pixelLeft")>]
            member __.pixelLeft with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.posTop)"); CompiledName("posTop")>]
            member __.posTop with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.posBottom)"); CompiledName("posBottom")>]
            member __.posBottom with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.textDecorationOverline)"); CompiledName("textDecorationOverline")>]
            member __.textDecorationOverline with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.posWidth)"); CompiledName("posWidth")>]
            member __.posWidth with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.textDecorationLineThrough)"); CompiledName("textDecorationLineThrough")>]
            member __.textDecorationLineThrough with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pixelHeight)"); CompiledName("pixelHeight")>]
            member __.pixelHeight with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.textDecorationBlink)"); CompiledName("textDecorationBlink")>]
            member __.textDecorationBlink with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.posRight)"); CompiledName("posRight")>]
            member __.posRight with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pixelRight)"); CompiledName("pixelRight")>]
            member __.pixelRight with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.textDecorationUnderline)"); CompiledName("textDecorationUnderline")>]
            member __.textDecorationUnderline with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_690 =


    type FunScript.TypeScript.MSUnsafeFunctionCallback with 

            [<FunScript.JSEmitInline("({0}())"); CompiledName("Invoke32")>]
            member __.Invoke() : obj = failwith "never"
            [<FunScript.JSEmitInline("({0} = {1})"); CompiledName("Invoke32Aux")>]
            member __.``Invoke <-``(func : System.Func<obj>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_691 =


    type FunScript.TypeScript.MSWebViewAsyncOperation with 

            [<FunScript.JSEmitInline("({0}.target)"); CompiledName("target8")>]
            member __.target with get() : FunScript.TypeScript.MSHTMLWebViewElement = failwith "never" and set (v : FunScript.TypeScript.MSHTMLWebViewElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.oncomplete)"); CompiledName("oncomplete3")>]
            member __.oncomplete with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.error)"); CompiledName("error9")>]
            member __.error with get() : FunScript.TypeScript.DOMError = failwith "never" and set (v : FunScript.TypeScript.DOMError) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onerror)"); CompiledName("onerror13")>]
            member __.onerror with get() : System.Func<FunScript.TypeScript.ErrorEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.ErrorEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.readyState)"); CompiledName("readyState9")>]
            member __.readyState with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.type)"); CompiledName("_type22")>]
            member __._type with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.result)"); CompiledName("result4")>]
            member __.result with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.start())"); CompiledName("start4")>]
            member __.start() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.start = {1})"); CompiledName("start4Aux")>]
            member __.``start <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ERROR)"); CompiledName("ERROR4")>]
            member __.ERROR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TYPE_CREATE_DATA_PACKAGE_FROM_SELECTION)"); CompiledName("TYPE_CREATE_DATA_PACKAGE_FROM_SELECTION1")>]
            member __.TYPE_CREATE_DATA_PACKAGE_FROM_SELECTION with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TYPE_INVOKE_SCRIPT)"); CompiledName("TYPE_INVOKE_SCRIPT1")>]
            member __.TYPE_INVOKE_SCRIPT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.COMPLETED)"); CompiledName("COMPLETED1")>]
            member __.COMPLETED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TYPE_CAPTURE_PREVIEW_TO_RANDOM_ACCESS_STREAM)"); CompiledName("TYPE_CAPTURE_PREVIEW_TO_RANDOM_ACCESS_STREAM1")>]
            member __.TYPE_CAPTURE_PREVIEW_TO_RANDOM_ACCESS_STREAM with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STARTED)"); CompiledName("STARTED1")>]
            member __.STARTED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"complete\", {1}, {?2}))"); CompiledName("addEventListener1299")>]
            member __.addEventListener_complete(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"error\", {1}, {?2}))"); CompiledName("addEventListener1300")>]
            member __.addEventListener_error(listener : System.Func<FunScript.TypeScript.ErrorEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener({1}, {2}, {?3}))"); CompiledName("addEventListener1301")>]
            member __.addEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener = {1})"); CompiledName("addEventListener1301Aux")>]
            member __.``addEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_692 =


    type FunScript.TypeScript.MSWindowExtensions with 

            [<FunScript.JSEmitInline("({0}.status)"); CompiledName("status6")>]
            member __.status with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmouseleave)"); CompiledName("onmouseleave2")>]
            member __.onmouseleave with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.screenLeft)"); CompiledName("screenLeft1")>]
            member __.screenLeft with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.offscreenBuffering)"); CompiledName("offscreenBuffering1")>]
            member __.offscreenBuffering with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.maxConnectionsPerServer)"); CompiledName("maxConnectionsPerServer1")>]
            member __.maxConnectionsPerServer with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmouseenter)"); CompiledName("onmouseenter2")>]
            member __.onmouseenter with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clipboardData)"); CompiledName("clipboardData1")>]
            member __.clipboardData with get() : FunScript.TypeScript.DataTransfer = failwith "never" and set (v : FunScript.TypeScript.DataTransfer) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.defaultStatus)"); CompiledName("defaultStatus1")>]
            member __.defaultStatus with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clientInformation)"); CompiledName("clientInformation1")>]
            member __.clientInformation with get() : FunScript.TypeScript.Navigator = failwith "never" and set (v : FunScript.TypeScript.Navigator) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.closed)"); CompiledName("closed1")>]
            member __.closed with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onhelp)"); CompiledName("onhelp3")>]
            member __.onhelp with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.external)"); CompiledName("_external1")>]
            member __._external with get() : FunScript.TypeScript.External = failwith "never" and set (v : FunScript.TypeScript.External) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.event)"); CompiledName("_event2")>]
            member __._event with get() : FunScript.TypeScript.MSEventObj = failwith "never" and set (v : FunScript.TypeScript.MSEventObj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onfocusout)"); CompiledName("onfocusout3")>]
            member __.onfocusout with get() : System.Func<FunScript.TypeScript.FocusEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.FocusEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.screenTop)"); CompiledName("screenTop1")>]
            member __.screenTop with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onfocusin)"); CompiledName("onfocusin3")>]
            member __.onfocusin with get() : System.Func<FunScript.TypeScript.FocusEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.FocusEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.showModelessDialog({?1}, {?2}, {?3}))"); CompiledName("showModelessDialog1")>]
            member __.showModelessDialog(?url : string, ?argument : obj, ?options : obj) : FunScript.TypeScript.Window = failwith "never"
            [<FunScript.JSEmitInline("({0}.showModelessDialog = {1})"); CompiledName("showModelessDialog1Aux")>]
            member __.``showModelessDialog <-``(func : System.Func<string, obj, obj, FunScript.TypeScript.Window>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.navigate({1}))"); CompiledName("navigate2")>]
            member __.navigate(url : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.navigate = {1})"); CompiledName("navigate2Aux")>]
            member __.``navigate <-``(func : System.Func<string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.resizeBy({?1}, {?2}))"); CompiledName("resizeBy1")>]
            member __.resizeBy(?x : float, ?y : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.resizeBy = {1})"); CompiledName("resizeBy1Aux")>]
            member __.``resizeBy <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.item({1}))"); CompiledName("item18")>]
            member __.item(index : obj) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.item = {1})"); CompiledName("item18Aux")>]
            member __.``item <-``(func : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.resizeTo({?1}, {?2}))"); CompiledName("resizeTo1")>]
            member __.resizeTo(?x : float, ?y : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.resizeTo = {1})"); CompiledName("resizeTo1Aux")>]
            member __.``resizeTo <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createPopup({?1}))"); CompiledName("createPopup1")>]
            member __.createPopup(?arguments : obj) : FunScript.TypeScript.MSPopupWindow = failwith "never"
            [<FunScript.JSEmitInline("({0}.createPopup = {1})"); CompiledName("createPopup1Aux")>]
            member __.``createPopup <-``(func : System.Func<obj, FunScript.TypeScript.MSPopupWindow>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toStaticHTML({1}))"); CompiledName("toStaticHTML1")>]
            member __.toStaticHTML(html : string) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toStaticHTML = {1})"); CompiledName("toStaticHTML1Aux")>]
            member __.``toStaticHTML <-``(func : System.Func<string, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.execScript({1}, {?2}))"); CompiledName("execScript1")>]
            member __.execScript(code : string, ?language : string) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.execScript = {1})"); CompiledName("execScript1Aux")>]
            member __.``execScript <-``(func : System.Func<string, string, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msWriteProfilerMark({1}))"); CompiledName("msWriteProfilerMark1")>]
            member __.msWriteProfilerMark(profilerMarkName : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msWriteProfilerMark = {1})"); CompiledName("msWriteProfilerMark1Aux")>]
            member __.``msWriteProfilerMark <-``(func : System.Func<string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.moveTo({?1}, {?2}))"); CompiledName("moveTo2")>]
            member __.moveTo(?x : float, ?y : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.moveTo = {1})"); CompiledName("moveTo2Aux")>]
            member __.``moveTo <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.moveBy({?1}, {?2}))"); CompiledName("moveBy1")>]
            member __.moveBy(?x : float, ?y : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.moveBy = {1})"); CompiledName("moveBy1Aux")>]
            member __.``moveBy <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.showHelp({1}, {?2}, {?3}))"); CompiledName("showHelp1")>]
            member __.showHelp(url : string, ?helpArg : obj, ?features : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.showHelp = {1})"); CompiledName("showHelp1Aux")>]
            member __.``showHelp <-``(func : System.Func<string, obj, string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.captureEvents())"); CompiledName("captureEvents2")>]
            member __.captureEvents() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.captureEvents = {1})"); CompiledName("captureEvents2Aux")>]
            member __.``captureEvents <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.releaseEvents())"); CompiledName("releaseEvents2")>]
            member __.releaseEvents() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.releaseEvents = {1})"); CompiledName("releaseEvents2Aux")>]
            member __.``releaseEvents <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseleave\", {1}, {?2}))"); CompiledName("addEventListener1302")>]
            member __.addEventListener_mouseleave(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseenter\", {1}, {?2}))"); CompiledName("addEventListener1303")>]
            member __.addEventListener_mouseenter(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"help\", {1}, {?2}))"); CompiledName("addEventListener1304")>]
            member __.addEventListener_help(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"focusout\", {1}, {?2}))"); CompiledName("addEventListener1305")>]
            member __.addEventListener_focusout(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"focusin\", {1}, {?2}))"); CompiledName("addEventListener1306")>]
            member __.addEventListener_focusin(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener({1}, {2}, {?3}))"); CompiledName("addEventListener1307")>]
            member __.addEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener = {1})"); CompiledName("addEventListener1307Aux")>]
            member __.``addEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_693 =


    type FunScript.TypeScript.MSWindowModeless with 

            [<FunScript.JSEmitInline("({0}.dialogTop)"); CompiledName("dialogTop")>]
            member __.dialogTop with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.dialogLeft)"); CompiledName("dialogLeft")>]
            member __.dialogLeft with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.dialogWidth)"); CompiledName("dialogWidth")>]
            member __.dialogWidth with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.dialogHeight)"); CompiledName("dialogHeight")>]
            member __.dialogHeight with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.menuArguments)"); CompiledName("menuArguments")>]
            member __.menuArguments with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_694 =


    type FunScript.TypeScript.Map<'K, 'V> with 

            [<FunScript.JSEmitInline("({0}.clear())"); CompiledName("clear7")>]
            member __.clear() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clear = {1})"); CompiledName("clear7Aux")>]
            member __.``clear <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.delete({1}))"); CompiledName("delete2")>]
            member __.delete(key : 'K) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.delete = {1})"); CompiledName("delete2Aux")>]
            member __.``delete <-``(func : System.Func<'K, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.forEach({1}, {?2}))"); CompiledName("forEach1")>]
            member __.forEach(callbackfn : System.Func<'V, 'K, FunScript.TypeScript.Map<'K, 'V>, unit>, ?thisArg : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.forEach = {1})"); CompiledName("forEach1Aux")>]
            member __.``forEach <-``(func : System.Func<System.Func<'V, 'K, FunScript.TypeScript.Map<'K, 'V>, unit>, obj, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.get({1}))"); CompiledName("get7")>]
            member __.get(key : 'K) : 'V = failwith "never"
            [<FunScript.JSEmitInline("({0}.get = {1})"); CompiledName("get7Aux")>]
            member __.``get <-``(func : System.Func<'K, 'V>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.has({1}))"); CompiledName("has")>]
            member __.has(key : 'K) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.has = {1})"); CompiledName("hasAux")>]
            member __.``has <-``(func : System.Func<'K, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set({1}, {2}))"); CompiledName("set15")>]
            member __.set(key : 'K, value : 'V) : FunScript.TypeScript.Map<'K, 'V> = failwith "never"
            [<FunScript.JSEmitInline("({0}.set = {1})"); CompiledName("set15Aux")>]
            member __.``set <-``(func : System.Func<'K, 'V, FunScript.TypeScript.Map<'K, 'V>>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.size)"); CompiledName("size5")>]
            member __.size with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_695 =


    type FunScript.TypeScript.Math with 

            [<FunScript.JSEmitInline("({0}.E)"); CompiledName("E")>]
            member __.E with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LN10)"); CompiledName("LN10")>]
            member __.LN10 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LN2)"); CompiledName("LN2")>]
            member __.LN2 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LOG2E)"); CompiledName("LOG2E")>]
            member __.LOG2E with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LOG10E)"); CompiledName("LOG10E")>]
            member __.LOG10E with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PI)"); CompiledName("PI")>]
            member __.PI with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SQRT1_2)"); CompiledName("SQRT1_2")>]
            member __.SQRT1_2 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SQRT2)"); CompiledName("SQRT2")>]
            member __.SQRT2 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.abs({1}))"); CompiledName("abs")>]
            member __.abs(x : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.abs = {1})"); CompiledName("absAux")>]
            member __.``abs <-``(func : System.Func<float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.acos({1}))"); CompiledName("acos")>]
            member __.acos(x : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.acos = {1})"); CompiledName("acosAux")>]
            member __.``acos <-``(func : System.Func<float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.asin({1}))"); CompiledName("asin")>]
            member __.asin(x : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.asin = {1})"); CompiledName("asinAux")>]
            member __.``asin <-``(func : System.Func<float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.atan({1}))"); CompiledName("atan")>]
            member __.atan(x : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.atan = {1})"); CompiledName("atanAux")>]
            member __.``atan <-``(func : System.Func<float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.atan2({1}, {2}))"); CompiledName("atan2")>]
            member __.atan2(y : float, x : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.atan2 = {1})"); CompiledName("atan2Aux")>]
            member __.``atan2 <-``(func : System.Func<float, float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ceil({1}))"); CompiledName("ceil")>]
            member __.ceil(x : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.ceil = {1})"); CompiledName("ceilAux")>]
            member __.``ceil <-``(func : System.Func<float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.cos({1}))"); CompiledName("cos")>]
            member __.cos(x : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.cos = {1})"); CompiledName("cosAux")>]
            member __.``cos <-``(func : System.Func<float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.exp({1}))"); CompiledName("exp")>]
            member __.exp(x : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.exp = {1})"); CompiledName("expAux")>]
            member __.``exp <-``(func : System.Func<float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.floor({1}))"); CompiledName("floor")>]
            member __.floor(x : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.floor = {1})"); CompiledName("floorAux")>]
            member __.``floor <-``(func : System.Func<float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.log({1}))"); CompiledName("log2")>]
            member __.log(x : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.log = {1})"); CompiledName("log2Aux")>]
            member __.``log <-``(func : System.Func<float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.max())"); CompiledName("max2")>]
            member __.max() : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.max = {1})"); CompiledName("max2Aux")>]
            member __.``max <-``(func : System.Func<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.max({1...}))"); CompiledName("max3")>]
            member __.maxOverload2([<System.ParamArray>] values : array<float>) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.min())"); CompiledName("min1")>]
            member __.min() : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.min = {1})"); CompiledName("min1Aux")>]
            member __.``min <-``(func : System.Func<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.min({1...}))"); CompiledName("min2")>]
            member __.minOverload2([<System.ParamArray>] values : array<float>) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.pow({1}, {2}))"); CompiledName("pow")>]
            member __.pow(x : float, y : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.pow = {1})"); CompiledName("powAux")>]
            member __.``pow <-``(func : System.Func<float, float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.random())"); CompiledName("random")>]
            member __.random() : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.random = {1})"); CompiledName("randomAux")>]
            member __.``random <-``(func : System.Func<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.round({1}))"); CompiledName("round")>]
            member __.round(x : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.round = {1})"); CompiledName("roundAux")>]
            member __.``round <-``(func : System.Func<float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.sin({1}))"); CompiledName("sin")>]
            member __.sin(x : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.sin = {1})"); CompiledName("sinAux")>]
            member __.``sin <-``(func : System.Func<float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.sqrt({1}))"); CompiledName("sqrt")>]
            member __.sqrt(x : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.sqrt = {1})"); CompiledName("sqrtAux")>]
            member __.``sqrt <-``(func : System.Func<float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.tan({1}))"); CompiledName("tan")>]
            member __.tan(x : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.tan = {1})"); CompiledName("tanAux")>]
            member __.``tan <-``(func : System.Func<float, float>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_696 =


    type FunScript.TypeScript.MediaError with 

            [<FunScript.JSEmitInline("({0}.code)"); CompiledName("code6")>]
            member __.code with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msExtendedCode)"); CompiledName("msExtendedCode")>]
            member __.msExtendedCode with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MEDIA_ERR_ABORTED)"); CompiledName("MEDIA_ERR_ABORTED1")>]
            member __.MEDIA_ERR_ABORTED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MEDIA_ERR_NETWORK)"); CompiledName("MEDIA_ERR_NETWORK1")>]
            member __.MEDIA_ERR_NETWORK with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MEDIA_ERR_SRC_NOT_SUPPORTED)"); CompiledName("MEDIA_ERR_SRC_NOT_SUPPORTED1")>]
            member __.MEDIA_ERR_SRC_NOT_SUPPORTED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MEDIA_ERR_DECODE)"); CompiledName("MEDIA_ERR_DECODE1")>]
            member __.MEDIA_ERR_DECODE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MS_MEDIA_ERR_ENCRYPTED)"); CompiledName("MS_MEDIA_ERR_ENCRYPTED1")>]
            member __.MS_MEDIA_ERR_ENCRYPTED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_697 =


    type FunScript.TypeScript.MediaList with 

            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length31")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.mediaText)"); CompiledName("mediaText")>]
            member __.mediaText with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteMedium({1}))"); CompiledName("deleteMedium")>]
            member __.deleteMedium(oldMedium : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteMedium = {1})"); CompiledName("deleteMediumAux")>]
            member __.``deleteMedium <-``(func : System.Func<string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.appendMedium({1}))"); CompiledName("appendMedium")>]
            member __.appendMedium(newMedium : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.appendMedium = {1})"); CompiledName("appendMediumAux")>]
            member __.``appendMedium <-``(func : System.Func<string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.item({1}))"); CompiledName("item19")>]
            member __.item(index : float) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.item = {1})"); CompiledName("item19Aux")>]
            member __.``item <-``(func : System.Func<float, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}[{1}])"); CompiledName("Item22")>]
            member __.Item with get(i : int) : string = failwith "never" and set (i : int) (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toString())"); CompiledName("toString11")>]
            member __.toString() : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toString = {1})"); CompiledName("toString11Aux")>]
            member __.``toString <-``(func : System.Func<string>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_698 =


    type FunScript.TypeScript.MediaQueryList with 

            [<FunScript.JSEmitInline("({0}.matches)"); CompiledName("matches")>]
            member __.matches with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.media)"); CompiledName("media6")>]
            member __.media with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addListener({1}))"); CompiledName("addListener")>]
            member __.addListener(listener : FunScript.TypeScript.MediaQueryListListenerDelegate) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addListener = {1})"); CompiledName("addListenerAux")>]
            member __.``addListener <-``(func : System.Func<FunScript.TypeScript.MediaQueryListListenerDelegate, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeListener({1}))"); CompiledName("removeListener")>]
            member __.removeListener(listener : FunScript.TypeScript.MediaQueryListListenerDelegate) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeListener = {1})"); CompiledName("removeListenerAux")>]
            member __.``removeListener <-``(func : System.Func<FunScript.TypeScript.MediaQueryListListenerDelegate, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_699 =


    type FunScript.TypeScript.MediaQueryListListener with 

            [<FunScript.JSEmitInline("({0}({1}))"); CompiledName("Invoke33")>]
            member __.Invoke(mql : FunScript.TypeScript.MediaQueryList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0} = {1})"); CompiledName("Invoke33Aux")>]
            member __.``Invoke <-``(func : System.Func<FunScript.TypeScript.MediaQueryList, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_700 =


    type FunScript.TypeScript.MediaSource with 

            [<FunScript.JSEmitInline("({0}.sourceBuffers)"); CompiledName("sourceBuffers")>]
            member __.sourceBuffers with get() : FunScript.TypeScript.SourceBufferList = failwith "never" and set (v : FunScript.TypeScript.SourceBufferList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.duration)"); CompiledName("duration1")>]
            member __.duration with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.readyState)"); CompiledName("readyState10")>]
            member __.readyState with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.activeSourceBuffers)"); CompiledName("activeSourceBuffers")>]
            member __.activeSourceBuffers with get() : FunScript.TypeScript.SourceBufferList = failwith "never" and set (v : FunScript.TypeScript.SourceBufferList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addSourceBuffer({1}))"); CompiledName("addSourceBuffer")>]
            member __.addSourceBuffer(_type : string) : FunScript.TypeScript.SourceBuffer = failwith "never"
            [<FunScript.JSEmitInline("({0}.addSourceBuffer = {1})"); CompiledName("addSourceBufferAux")>]
            member __.``addSourceBuffer <-``(func : System.Func<string, FunScript.TypeScript.SourceBuffer>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.endOfStream({?1}))"); CompiledName("endOfStream")>]
            member __.endOfStream(?error : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.endOfStream = {1})"); CompiledName("endOfStreamAux")>]
            member __.``endOfStream <-``(func : System.Func<string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeSourceBuffer({1}))"); CompiledName("removeSourceBuffer")>]
            member __.removeSourceBuffer(sourceBuffer : FunScript.TypeScript.SourceBuffer) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeSourceBuffer = {1})"); CompiledName("removeSourceBufferAux")>]
            member __.``removeSourceBuffer <-``(func : System.Func<FunScript.TypeScript.SourceBuffer, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_701 =


    type FunScript.TypeScript.MessageChannel with 

            [<FunScript.JSEmitInline("({0}.port2)"); CompiledName("port21")>]
            member __.port2 with get() : FunScript.TypeScript.MessagePort = failwith "never" and set (v : FunScript.TypeScript.MessagePort) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.port1)"); CompiledName("port11")>]
            member __.port1 with get() : FunScript.TypeScript.MessagePort = failwith "never" and set (v : FunScript.TypeScript.MessagePort) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_702 =


    type FunScript.TypeScript.MessageEvent with 

            [<FunScript.JSEmitInline("({0}.source)"); CompiledName("source3")>]
            member __.source with get() : FunScript.TypeScript.Window = failwith "never" and set (v : FunScript.TypeScript.Window) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.origin)"); CompiledName("origin1")>]
            member __.origin with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.data)"); CompiledName("data6")>]
            member __.data with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ports)"); CompiledName("ports")>]
            member __.ports with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initMessageEvent({1}, {2}, {3}, {4}, {5}, {6}, {7}))"); CompiledName("initMessageEvent")>]
            member __.initMessageEvent(typeArg : string, canBubbleArg : bool, cancelableArg : bool, dataArg : obj, originArg : string, lastEventIdArg : string, sourceArg : FunScript.TypeScript.Window) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initMessageEvent = {1})"); CompiledName("initMessageEventAux")>]
            member __.``initMessageEvent <-``(func : System.Func<string, bool, bool, obj, string, string, FunScript.TypeScript.Window, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_703 =


    type FunScript.TypeScript.MessagePort with 

            [<FunScript.JSEmitInline("({0}.onmessage)"); CompiledName("onmessage3")>]
            member __.onmessage with get() : System.Func<FunScript.TypeScript.MessageEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MessageEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.close())"); CompiledName("close5")>]
            member __.close() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.close = {1})"); CompiledName("close5Aux")>]
            member __.``close <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.postMessage({?1}, {?2}))"); CompiledName("postMessage2")>]
            member __.postMessage(?message : obj, ?ports : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.postMessage = {1})"); CompiledName("postMessage2Aux")>]
            member __.``postMessage <-``(func : System.Func<obj, obj, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.start())"); CompiledName("start5")>]
            member __.start() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.start = {1})"); CompiledName("start5Aux")>]
            member __.``start <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"message\", {1}, {?2}))"); CompiledName("addEventListener1308")>]
            member __.addEventListener_message(listener : System.Func<FunScript.TypeScript.MessageEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener({1}, {2}, {?3}))"); CompiledName("addEventListener1309")>]
            member __.addEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener = {1})"); CompiledName("addEventListener1309Aux")>]
            member __.``addEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_704 =


    type FunScript.TypeScript.MimeType with 

            [<FunScript.JSEmitInline("({0}.enabledPlugin)"); CompiledName("enabledPlugin")>]
            member __.enabledPlugin with get() : FunScript.TypeScript.Plugin = failwith "never" and set (v : FunScript.TypeScript.Plugin) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.suffixes)"); CompiledName("suffixes")>]
            member __.suffixes with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.type)"); CompiledName("_type23")>]
            member __._type with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.description)"); CompiledName("description")>]
            member __.description with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_705 =


    type FunScript.TypeScript.MimeTypeArray with 

            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length32")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.item({1}))"); CompiledName("item20")>]
            member __.item(index : float) : FunScript.TypeScript.Plugin = failwith "never"
            [<FunScript.JSEmitInline("({0}.item = {1})"); CompiledName("item20Aux")>]
            member __.``item <-``(func : System.Func<float, FunScript.TypeScript.Plugin>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}[{1}])"); CompiledName("Item23")>]
            member __.Item with get(i : int) : FunScript.TypeScript.Plugin = failwith "never" and set (i : int) (v : FunScript.TypeScript.Plugin) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.namedItem({1}))"); CompiledName("namedItem4")>]
            member __.namedItem(_type : string) : FunScript.TypeScript.Plugin = failwith "never"
            [<FunScript.JSEmitInline("({0}.namedItem = {1})"); CompiledName("namedItem4Aux")>]
            member __.``namedItem <-``(func : System.Func<string, FunScript.TypeScript.Plugin>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_706 =


    type FunScript.TypeScript.MouseEvent with 

            [<FunScript.JSEmitInline("({0}.toElement)"); CompiledName("toElement1")>]
            member __.toElement with get() : FunScript.TypeScript.Element = failwith "never" and set (v : FunScript.TypeScript.Element) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.layerY)"); CompiledName("layerY")>]
            member __.layerY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.fromElement)"); CompiledName("fromElement1")>]
            member __.fromElement with get() : FunScript.TypeScript.Element = failwith "never" and set (v : FunScript.TypeScript.Element) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.which)"); CompiledName("which1")>]
            member __.which with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pageX)"); CompiledName("pageX")>]
            member __.pageX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.offsetY)"); CompiledName("offsetY2")>]
            member __.offsetY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x)"); CompiledName("x3")>]
            member __.x with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.y)"); CompiledName("y3")>]
            member __.y with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.metaKey)"); CompiledName("metaKey1")>]
            member __.metaKey with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.altKey)"); CompiledName("altKey2")>]
            member __.altKey with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ctrlKey)"); CompiledName("ctrlKey2")>]
            member __.ctrlKey with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.offsetX)"); CompiledName("offsetX2")>]
            member __.offsetX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.screenX)"); CompiledName("screenX3")>]
            member __.screenX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clientY)"); CompiledName("clientY2")>]
            member __.clientY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.shiftKey)"); CompiledName("shiftKey2")>]
            member __.shiftKey with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.layerX)"); CompiledName("layerX")>]
            member __.layerX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.screenY)"); CompiledName("screenY3")>]
            member __.screenY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.relatedTarget)"); CompiledName("relatedTarget1")>]
            member __.relatedTarget with get() : FunScript.TypeScript.EventTarget = failwith "never" and set (v : FunScript.TypeScript.EventTarget) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.button)"); CompiledName("button1")>]
            member __.button with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pageY)"); CompiledName("pageY")>]
            member __.pageY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.buttons)"); CompiledName("buttons")>]
            member __.buttons with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clientX)"); CompiledName("clientX2")>]
            member __.clientX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initMouseEvent({1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}))"); CompiledName("initMouseEvent")>]
            member __.initMouseEvent(typeArg : string, canBubbleArg : bool, cancelableArg : bool, viewArg : FunScript.TypeScript.Window, detailArg : float, screenXArg : float, screenYArg : float, clientXArg : float, clientYArg : float, ctrlKeyArg : bool, altKeyArg : bool, shiftKeyArg : bool, metaKeyArg : bool, buttonArg : float, relatedTargetArg : FunScript.TypeScript.EventTarget) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getModifierState({1}))"); CompiledName("getModifierState1")>]
            member __.getModifierState(keyArg : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.getModifierState = {1})"); CompiledName("getModifierState1Aux")>]
            member __.``getModifierState <-``(func : System.Func<string, bool>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_707 =


    type FunScript.TypeScript.MouseEventInit with 

            [<FunScript.JSEmitInline("({0}.bubbles)"); CompiledName("bubbles1")>]
            member __.bubbles with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.cancelable)"); CompiledName("cancelable1")>]
            member __.cancelable with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.view)"); CompiledName("view")>]
            member __.view with get() : FunScript.TypeScript.Window = failwith "never" and set (v : FunScript.TypeScript.Window) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.detail)"); CompiledName("detail1")>]
            member __.detail with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.screenX)"); CompiledName("screenX4")>]
            member __.screenX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.screenY)"); CompiledName("screenY4")>]
            member __.screenY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clientX)"); CompiledName("clientX3")>]
            member __.clientX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clientY)"); CompiledName("clientY3")>]
            member __.clientY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ctrlKey)"); CompiledName("ctrlKey3")>]
            member __.ctrlKey with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.shiftKey)"); CompiledName("shiftKey3")>]
            member __.shiftKey with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.altKey)"); CompiledName("altKey3")>]
            member __.altKey with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.metaKey)"); CompiledName("metaKey2")>]
            member __.metaKey with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.button)"); CompiledName("button2")>]
            member __.button with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.buttons)"); CompiledName("buttons1")>]
            member __.buttons with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.relatedTarget)"); CompiledName("relatedTarget2")>]
            member __.relatedTarget with get() : FunScript.TypeScript.EventTarget = failwith "never" and set (v : FunScript.TypeScript.EventTarget) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_708 =


    type FunScript.TypeScript.MouseWheelEvent with 

            [<FunScript.JSEmitInline("({0}.wheelDelta)"); CompiledName("wheelDelta1")>]
            member __.wheelDelta with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initMouseWheelEvent({1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}))"); CompiledName("initMouseWheelEvent")>]
            member __.initMouseWheelEvent(typeArg : string, canBubbleArg : bool, cancelableArg : bool, viewArg : FunScript.TypeScript.Window, detailArg : float, screenXArg : float, screenYArg : float, clientXArg : float, clientYArg : float, buttonArg : float, relatedTargetArg : FunScript.TypeScript.EventTarget, modifiersListArg : string, wheelDeltaArg : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_709 =


    type FunScript.TypeScript.MsZoomToOptions with 

            [<FunScript.JSEmitInline("({0}.contentX)"); CompiledName("contentX")>]
            member __.contentX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.contentY)"); CompiledName("contentY")>]
            member __.contentY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.viewportX)"); CompiledName("viewportX")>]
            member __.viewportX with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.viewportY)"); CompiledName("viewportY")>]
            member __.viewportY with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.scaleFactor)"); CompiledName("scaleFactor")>]
            member __.scaleFactor with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.animate)"); CompiledName("animate")>]
            member __.animate with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_710 =


    type FunScript.TypeScript.MutationCallback with 

            [<FunScript.JSEmitInline("({0}({1}, {2}))"); CompiledName("Invoke34")>]
            member __.Invoke(mutations : array<FunScript.TypeScript.MutationRecord>, observer : FunScript.TypeScript.MutationObserver) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0} = {1})"); CompiledName("Invoke34Aux")>]
            member __.``Invoke <-``(func : System.Func<array<FunScript.TypeScript.MutationRecord>, FunScript.TypeScript.MutationObserver, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_711 =


    type FunScript.TypeScript.MutationEvent with 

            [<FunScript.JSEmitInline("({0}.newValue)"); CompiledName("newValue")>]
            member __.newValue with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.attrChange)"); CompiledName("attrChange")>]
            member __.attrChange with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.attrName)"); CompiledName("attrName")>]
            member __.attrName with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.prevValue)"); CompiledName("prevValue")>]
            member __.prevValue with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.relatedNode)"); CompiledName("relatedNode")>]
            member __.relatedNode with get() : FunScript.TypeScript.Node = failwith "never" and set (v : FunScript.TypeScript.Node) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initMutationEvent({1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}))"); CompiledName("initMutationEvent")>]
            member __.initMutationEvent(typeArg : string, canBubbleArg : bool, cancelableArg : bool, relatedNodeArg : FunScript.TypeScript.Node, prevValueArg : string, newValueArg : string, attrNameArg : string, attrChangeArg : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initMutationEvent = {1})"); CompiledName("initMutationEventAux")>]
            member __.``initMutationEvent <-``(func : System.Func<string, bool, bool, FunScript.TypeScript.Node, string, string, string, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MODIFICATION)"); CompiledName("MODIFICATION1")>]
            member __.MODIFICATION with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.REMOVAL)"); CompiledName("REMOVAL1")>]
            member __.REMOVAL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ADDITION)"); CompiledName("ADDITION1")>]
            member __.ADDITION with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_712 =


    type FunScript.TypeScript.MutationObserver with 

            [<FunScript.JSEmitInline("({0}.observe({1}, {2}))"); CompiledName("observe")>]
            member __.observe(target : FunScript.TypeScript.Node, options : FunScript.TypeScript.MutationObserverInit) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.observe = {1})"); CompiledName("observeAux")>]
            member __.``observe <-``(func : System.Func<FunScript.TypeScript.Node, FunScript.TypeScript.MutationObserverInit, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.takeRecords())"); CompiledName("takeRecords")>]
            member __.takeRecords() : array<FunScript.TypeScript.MutationRecord> = failwith "never"
            [<FunScript.JSEmitInline("({0}.takeRecords = {1})"); CompiledName("takeRecordsAux")>]
            member __.``takeRecords <-``(func : System.Func<array<FunScript.TypeScript.MutationRecord>>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.disconnect())"); CompiledName("disconnect")>]
            member __.disconnect() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.disconnect = {1})"); CompiledName("disconnectAux")>]
            member __.``disconnect <-``(func : System.Func<unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_713 =


    type FunScript.TypeScript.MutationObserverInit with 

            [<FunScript.JSEmitInline("({0}.childList)"); CompiledName("childList")>]
            member __.childList with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.attributes)"); CompiledName("attributes")>]
            member __.attributes with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.characterData)"); CompiledName("characterData")>]
            member __.characterData with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.subtree)"); CompiledName("subtree")>]
            member __.subtree with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.attributeOldValue)"); CompiledName("attributeOldValue")>]
            member __.attributeOldValue with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.characterDataOldValue)"); CompiledName("characterDataOldValue")>]
            member __.characterDataOldValue with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.attributeFilter)"); CompiledName("attributeFilter")>]
            member __.attributeFilter with get() : array<string> = failwith "never" and set (v : array<string>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_714 =


    type FunScript.TypeScript.MutationRecord with 

            [<FunScript.JSEmitInline("({0}.oldValue)"); CompiledName("oldValue")>]
            member __.oldValue with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.previousSibling)"); CompiledName("previousSibling")>]
            member __.previousSibling with get() : FunScript.TypeScript.Node = failwith "never" and set (v : FunScript.TypeScript.Node) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addedNodes)"); CompiledName("addedNodes")>]
            member __.addedNodes with get() : FunScript.TypeScript.NodeList = failwith "never" and set (v : FunScript.TypeScript.NodeList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.attributeName)"); CompiledName("attributeName")>]
            member __.attributeName with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removedNodes)"); CompiledName("removedNodes")>]
            member __.removedNodes with get() : FunScript.TypeScript.NodeList = failwith "never" and set (v : FunScript.TypeScript.NodeList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.target)"); CompiledName("target9")>]
            member __.target with get() : FunScript.TypeScript.Node = failwith "never" and set (v : FunScript.TypeScript.Node) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.nextSibling)"); CompiledName("nextSibling")>]
            member __.nextSibling with get() : FunScript.TypeScript.Node = failwith "never" and set (v : FunScript.TypeScript.Node) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.attributeNamespace)"); CompiledName("attributeNamespace")>]
            member __.attributeNamespace with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.type)"); CompiledName("_type24")>]
            member __._type with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_715 =


    type FunScript.TypeScript.NamedNodeMap with 

            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length33")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeNamedItemNS({1}, {2}))"); CompiledName("removeNamedItemNS")>]
            member __.removeNamedItemNS(namespaceURI : string, localName : string) : FunScript.TypeScript.Attr = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeNamedItemNS = {1})"); CompiledName("removeNamedItemNSAux")>]
            member __.``removeNamedItemNS <-``(func : System.Func<string, string, FunScript.TypeScript.Attr>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.item({1}))"); CompiledName("item21")>]
            member __.item(index : float) : FunScript.TypeScript.Attr = failwith "never"
            [<FunScript.JSEmitInline("({0}.item = {1})"); CompiledName("item21Aux")>]
            member __.``item <-``(func : System.Func<float, FunScript.TypeScript.Attr>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}[{1}])"); CompiledName("Item24")>]
            member __.Item with get(i : int) : FunScript.TypeScript.Attr = failwith "never" and set (i : int) (v : FunScript.TypeScript.Attr) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeNamedItem({1}))"); CompiledName("removeNamedItem")>]
            member __.removeNamedItem(name : string) : FunScript.TypeScript.Attr = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeNamedItem = {1})"); CompiledName("removeNamedItemAux")>]
            member __.``removeNamedItem <-``(func : System.Func<string, FunScript.TypeScript.Attr>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getNamedItem({1}))"); CompiledName("getNamedItem")>]
            member __.getNamedItem(name : string) : FunScript.TypeScript.Attr = failwith "never"
            [<FunScript.JSEmitInline("({0}.getNamedItem = {1})"); CompiledName("getNamedItemAux")>]
            member __.``getNamedItem <-``(func : System.Func<string, FunScript.TypeScript.Attr>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setNamedItem({1}))"); CompiledName("setNamedItem")>]
            member __.setNamedItem(arg : FunScript.TypeScript.Attr) : FunScript.TypeScript.Attr = failwith "never"
            [<FunScript.JSEmitInline("({0}.setNamedItem = {1})"); CompiledName("setNamedItemAux")>]
            member __.``setNamedItem <-``(func : System.Func<FunScript.TypeScript.Attr, FunScript.TypeScript.Attr>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getNamedItemNS({1}, {2}))"); CompiledName("getNamedItemNS")>]
            member __.getNamedItemNS(namespaceURI : string, localName : string) : FunScript.TypeScript.Attr = failwith "never"
            [<FunScript.JSEmitInline("({0}.getNamedItemNS = {1})"); CompiledName("getNamedItemNSAux")>]
            member __.``getNamedItemNS <-``(func : System.Func<string, string, FunScript.TypeScript.Attr>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setNamedItemNS({1}))"); CompiledName("setNamedItemNS")>]
            member __.setNamedItemNS(arg : FunScript.TypeScript.Attr) : FunScript.TypeScript.Attr = failwith "never"
            [<FunScript.JSEmitInline("({0}.setNamedItemNS = {1})"); CompiledName("setNamedItemNSAux")>]
            member __.``setNamedItemNS <-``(func : System.Func<FunScript.TypeScript.Attr, FunScript.TypeScript.Attr>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_716 =


    type FunScript.TypeScript.NavigationCompletedEvent with 

            [<FunScript.JSEmitInline("({0}.webErrorStatus)"); CompiledName("webErrorStatus")>]
            member __.webErrorStatus with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.isSuccess)"); CompiledName("isSuccess")>]
            member __.isSuccess with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_717 =


    type FunScript.TypeScript.NavigationEvent with 

            [<FunScript.JSEmitInline("({0}.uri)"); CompiledName("uri")>]
            member __.uri with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_718 =


    type FunScript.TypeScript.Navigator with 

            [<FunScript.JSEmitInline("({0}.msMaxTouchPoints)"); CompiledName("msMaxTouchPoints")>]
            member __.msMaxTouchPoints with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msPointerEnabled)"); CompiledName("msPointerEnabled")>]
            member __.msPointerEnabled with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msManipulationViewsEnabled)"); CompiledName("msManipulationViewsEnabled")>]
            member __.msManipulationViewsEnabled with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pointerEnabled)"); CompiledName("pointerEnabled")>]
            member __.pointerEnabled with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.maxTouchPoints)"); CompiledName("maxTouchPoints")>]
            member __.maxTouchPoints with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msLaunchUri({1}, {?2}, {?3}))"); CompiledName("msLaunchUri")>]
            member __.msLaunchUri(uri : string, ?successCallback : FunScript.TypeScript.MSLaunchUriCallbackDelegate, ?noHandlerCallback : FunScript.TypeScript.MSLaunchUriCallbackDelegate) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msLaunchUri = {1})"); CompiledName("msLaunchUriAux")>]
            member __.``msLaunchUri <-``(func : System.Func<string, FunScript.TypeScript.MSLaunchUriCallbackDelegate, FunScript.TypeScript.MSLaunchUriCallbackDelegate, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_719 =


    type FunScript.TypeScript.NavigatorGeolocation with 

            [<FunScript.JSEmitInline("({0}.geolocation)"); CompiledName("geolocation")>]
            member __.geolocation with get() : FunScript.TypeScript.Geolocation = failwith "never" and set (v : FunScript.TypeScript.Geolocation) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_720 =


    type FunScript.TypeScript.NavigatorID with 

            [<FunScript.JSEmitInline("({0}.appVersion)"); CompiledName("appVersion")>]
            member __.appVersion with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.appName)"); CompiledName("appName")>]
            member __.appName with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.userAgent)"); CompiledName("userAgent1")>]
            member __.userAgent with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.platform)"); CompiledName("platform")>]
            member __.platform with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.product)"); CompiledName("product")>]
            member __.product with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.vendor)"); CompiledName("vendor")>]
            member __.vendor with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_721 =


    type FunScript.TypeScript.NavigatorOnLine with 

            [<FunScript.JSEmitInline("({0}.onLine)"); CompiledName("onLine")>]
            member __.onLine with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_722 =


    type FunScript.TypeScript.Node with 

            [<FunScript.JSEmitInline("({0}.nodeType)"); CompiledName("nodeType")>]
            member __.nodeType with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.previousSibling)"); CompiledName("previousSibling1")>]
            member __.previousSibling with get() : FunScript.TypeScript.Node = failwith "never" and set (v : FunScript.TypeScript.Node) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.localName)"); CompiledName("localName")>]
            member __.localName with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.namespaceURI)"); CompiledName("namespaceURI1")>]
            member __.namespaceURI with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.textContent)"); CompiledName("textContent")>]
            member __.textContent with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.parentNode)"); CompiledName("parentNode")>]
            member __.parentNode with get() : FunScript.TypeScript.Node = failwith "never" and set (v : FunScript.TypeScript.Node) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.nextSibling)"); CompiledName("nextSibling1")>]
            member __.nextSibling with get() : FunScript.TypeScript.Node = failwith "never" and set (v : FunScript.TypeScript.Node) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.nodeValue)"); CompiledName("nodeValue")>]
            member __.nodeValue with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.lastChild)"); CompiledName("lastChild")>]
            member __.lastChild with get() : FunScript.TypeScript.Node = failwith "never" and set (v : FunScript.TypeScript.Node) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.childNodes)"); CompiledName("childNodes")>]
            member __.childNodes with get() : FunScript.TypeScript.NodeList = failwith "never" and set (v : FunScript.TypeScript.NodeList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.nodeName)"); CompiledName("nodeName")>]
            member __.nodeName with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ownerDocument)"); CompiledName("ownerDocument")>]
            member __.ownerDocument with get() : FunScript.TypeScript.Document = failwith "never" and set (v : FunScript.TypeScript.Document) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.attributes)"); CompiledName("attributes1")>]
            member __.attributes with get() : FunScript.TypeScript.NamedNodeMap = failwith "never" and set (v : FunScript.TypeScript.NamedNodeMap) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.firstChild)"); CompiledName("firstChild")>]
            member __.firstChild with get() : FunScript.TypeScript.Node = failwith "never" and set (v : FunScript.TypeScript.Node) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.prefix)"); CompiledName("prefix1")>]
            member __.prefix with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeChild({1}))"); CompiledName("removeChild")>]
            member __.removeChild(oldChild : FunScript.TypeScript.Node) : FunScript.TypeScript.Node = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeChild = {1})"); CompiledName("removeChildAux")>]
            member __.``removeChild <-``(func : System.Func<FunScript.TypeScript.Node, FunScript.TypeScript.Node>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.appendChild({1}))"); CompiledName("appendChild")>]
            member __.appendChild(newChild : FunScript.TypeScript.Node) : FunScript.TypeScript.Node = failwith "never"
            [<FunScript.JSEmitInline("({0}.appendChild = {1})"); CompiledName("appendChildAux")>]
            member __.``appendChild <-``(func : System.Func<FunScript.TypeScript.Node, FunScript.TypeScript.Node>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.isSupported({1}, {2}))"); CompiledName("isSupported")>]
            member __.isSupported(feature : string, version : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.isSupported = {1})"); CompiledName("isSupportedAux")>]
            member __.``isSupported <-``(func : System.Func<string, string, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.isEqualNode({1}))"); CompiledName("isEqualNode")>]
            member __.isEqualNode(arg : FunScript.TypeScript.Node) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.isEqualNode = {1})"); CompiledName("isEqualNodeAux")>]
            member __.``isEqualNode <-``(func : System.Func<FunScript.TypeScript.Node, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.lookupPrefix({1}))"); CompiledName("lookupPrefix")>]
            member __.lookupPrefix(namespaceURI : string) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.lookupPrefix = {1})"); CompiledName("lookupPrefixAux")>]
            member __.``lookupPrefix <-``(func : System.Func<string, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.isDefaultNamespace({1}))"); CompiledName("isDefaultNamespace")>]
            member __.isDefaultNamespace(namespaceURI : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.isDefaultNamespace = {1})"); CompiledName("isDefaultNamespaceAux")>]
            member __.``isDefaultNamespace <-``(func : System.Func<string, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.compareDocumentPosition({1}))"); CompiledName("compareDocumentPosition")>]
            member __.compareDocumentPosition(other : FunScript.TypeScript.Node) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.compareDocumentPosition = {1})"); CompiledName("compareDocumentPositionAux")>]
            member __.``compareDocumentPosition <-``(func : System.Func<FunScript.TypeScript.Node, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.normalize())"); CompiledName("normalize")>]
            member __.normalize() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.normalize = {1})"); CompiledName("normalizeAux")>]
            member __.``normalize <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.isSameNode({1}))"); CompiledName("isSameNode")>]
            member __.isSameNode(other : FunScript.TypeScript.Node) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.isSameNode = {1})"); CompiledName("isSameNodeAux")>]
            member __.``isSameNode <-``(func : System.Func<FunScript.TypeScript.Node, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.hasAttributes())"); CompiledName("hasAttributes")>]
            member __.hasAttributes() : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.hasAttributes = {1})"); CompiledName("hasAttributesAux")>]
            member __.``hasAttributes <-``(func : System.Func<bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.lookupNamespaceURI({1}))"); CompiledName("lookupNamespaceURI")>]
            member __.lookupNamespaceURI(prefix : string) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.lookupNamespaceURI = {1})"); CompiledName("lookupNamespaceURIAux")>]
            member __.``lookupNamespaceURI <-``(func : System.Func<string, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.cloneNode({?1}))"); CompiledName("cloneNode")>]
            member __.cloneNode(?deep : bool) : FunScript.TypeScript.Node = failwith "never"
            [<FunScript.JSEmitInline("({0}.cloneNode = {1})"); CompiledName("cloneNodeAux")>]
            member __.``cloneNode <-``(func : System.Func<bool, FunScript.TypeScript.Node>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.hasChildNodes())"); CompiledName("hasChildNodes")>]
            member __.hasChildNodes() : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.hasChildNodes = {1})"); CompiledName("hasChildNodesAux")>]
            member __.``hasChildNodes <-``(func : System.Func<bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.replaceChild({1}, {2}))"); CompiledName("replaceChild")>]
            member __.replaceChild(newChild : FunScript.TypeScript.Node, oldChild : FunScript.TypeScript.Node) : FunScript.TypeScript.Node = failwith "never"
            [<FunScript.JSEmitInline("({0}.replaceChild = {1})"); CompiledName("replaceChildAux")>]
            member __.``replaceChild <-``(func : System.Func<FunScript.TypeScript.Node, FunScript.TypeScript.Node, FunScript.TypeScript.Node>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.insertBefore({1}, {?2}))"); CompiledName("insertBefore")>]
            member __.insertBefore(newChild : FunScript.TypeScript.Node, ?refChild : FunScript.TypeScript.Node) : FunScript.TypeScript.Node = failwith "never"
            [<FunScript.JSEmitInline("({0}.insertBefore = {1})"); CompiledName("insertBeforeAux")>]
            member __.``insertBefore <-``(func : System.Func<FunScript.TypeScript.Node, FunScript.TypeScript.Node, FunScript.TypeScript.Node>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ENTITY_REFERENCE_NODE)"); CompiledName("ENTITY_REFERENCE_NODE1")>]
            member __.ENTITY_REFERENCE_NODE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ATTRIBUTE_NODE)"); CompiledName("ATTRIBUTE_NODE1")>]
            member __.ATTRIBUTE_NODE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOCUMENT_FRAGMENT_NODE)"); CompiledName("DOCUMENT_FRAGMENT_NODE1")>]
            member __.DOCUMENT_FRAGMENT_NODE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXT_NODE)"); CompiledName("TEXT_NODE1")>]
            member __.TEXT_NODE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ELEMENT_NODE)"); CompiledName("ELEMENT_NODE1")>]
            member __.ELEMENT_NODE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.COMMENT_NODE)"); CompiledName("COMMENT_NODE1")>]
            member __.COMMENT_NODE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOCUMENT_POSITION_DISCONNECTED)"); CompiledName("DOCUMENT_POSITION_DISCONNECTED1")>]
            member __.DOCUMENT_POSITION_DISCONNECTED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOCUMENT_POSITION_CONTAINED_BY)"); CompiledName("DOCUMENT_POSITION_CONTAINED_BY1")>]
            member __.DOCUMENT_POSITION_CONTAINED_BY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOCUMENT_POSITION_CONTAINS)"); CompiledName("DOCUMENT_POSITION_CONTAINS1")>]
            member __.DOCUMENT_POSITION_CONTAINS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOCUMENT_TYPE_NODE)"); CompiledName("DOCUMENT_TYPE_NODE1")>]
            member __.DOCUMENT_TYPE_NODE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC)"); CompiledName("DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC1")>]
            member __.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOCUMENT_NODE)"); CompiledName("DOCUMENT_NODE1")>]
            member __.DOCUMENT_NODE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ENTITY_NODE)"); CompiledName("ENTITY_NODE1")>]
            member __.ENTITY_NODE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PROCESSING_INSTRUCTION_NODE)"); CompiledName("PROCESSING_INSTRUCTION_NODE1")>]
            member __.PROCESSING_INSTRUCTION_NODE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.CDATA_SECTION_NODE)"); CompiledName("CDATA_SECTION_NODE1")>]
            member __.CDATA_SECTION_NODE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NOTATION_NODE)"); CompiledName("NOTATION_NODE1")>]
            member __.NOTATION_NODE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOCUMENT_POSITION_FOLLOWING)"); CompiledName("DOCUMENT_POSITION_FOLLOWING1")>]
            member __.DOCUMENT_POSITION_FOLLOWING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOCUMENT_POSITION_PRECEDING)"); CompiledName("DOCUMENT_POSITION_PRECEDING1")>]
            member __.DOCUMENT_POSITION_PRECEDING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_723 =


    type FunScript.TypeScript.NodeFilter with 

            [<FunScript.JSEmitInline("({0}.acceptNode({1}))"); CompiledName("acceptNode")>]
            member __.acceptNode(n : FunScript.TypeScript.Node) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.acceptNode = {1})"); CompiledName("acceptNodeAux")>]
            member __.``acceptNode <-``(func : System.Func<FunScript.TypeScript.Node, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SHOW_ENTITY_REFERENCE)"); CompiledName("SHOW_ENTITY_REFERENCE")>]
            member __.SHOW_ENTITY_REFERENCE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SHOW_NOTATION)"); CompiledName("SHOW_NOTATION")>]
            member __.SHOW_NOTATION with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SHOW_ENTITY)"); CompiledName("SHOW_ENTITY")>]
            member __.SHOW_ENTITY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SHOW_DOCUMENT)"); CompiledName("SHOW_DOCUMENT")>]
            member __.SHOW_DOCUMENT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SHOW_PROCESSING_INSTRUCTION)"); CompiledName("SHOW_PROCESSING_INSTRUCTION")>]
            member __.SHOW_PROCESSING_INSTRUCTION with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FILTER_REJECT)"); CompiledName("FILTER_REJECT")>]
            member __.FILTER_REJECT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SHOW_CDATA_SECTION)"); CompiledName("SHOW_CDATA_SECTION")>]
            member __.SHOW_CDATA_SECTION with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FILTER_ACCEPT)"); CompiledName("FILTER_ACCEPT")>]
            member __.FILTER_ACCEPT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SHOW_ALL)"); CompiledName("SHOW_ALL")>]
            member __.SHOW_ALL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SHOW_DOCUMENT_TYPE)"); CompiledName("SHOW_DOCUMENT_TYPE")>]
            member __.SHOW_DOCUMENT_TYPE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SHOW_TEXT)"); CompiledName("SHOW_TEXT")>]
            member __.SHOW_TEXT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SHOW_ELEMENT)"); CompiledName("SHOW_ELEMENT")>]
            member __.SHOW_ELEMENT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SHOW_COMMENT)"); CompiledName("SHOW_COMMENT")>]
            member __.SHOW_COMMENT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FILTER_SKIP)"); CompiledName("FILTER_SKIP")>]
            member __.FILTER_SKIP with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SHOW_ATTRIBUTE)"); CompiledName("SHOW_ATTRIBUTE")>]
            member __.SHOW_ATTRIBUTE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SHOW_DOCUMENT_FRAGMENT)"); CompiledName("SHOW_DOCUMENT_FRAGMENT")>]
            member __.SHOW_DOCUMENT_FRAGMENT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_724 =


    type FunScript.TypeScript.NodeIterator with 

            [<FunScript.JSEmitInline("({0}.whatToShow)"); CompiledName("whatToShow")>]
            member __.whatToShow with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.filter)"); CompiledName("filter3")>]
            member __.filter with get() : FunScript.TypeScript.NodeFilter = failwith "never" and set (v : FunScript.TypeScript.NodeFilter) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.root)"); CompiledName("root")>]
            member __.root with get() : FunScript.TypeScript.Node = failwith "never" and set (v : FunScript.TypeScript.Node) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.expandEntityReferences)"); CompiledName("expandEntityReferences")>]
            member __.expandEntityReferences with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.nextNode())"); CompiledName("nextNode")>]
            member __.nextNode() : FunScript.TypeScript.Node = failwith "never"
            [<FunScript.JSEmitInline("({0}.nextNode = {1})"); CompiledName("nextNodeAux")>]
            member __.``nextNode <-``(func : System.Func<FunScript.TypeScript.Node>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.detach())"); CompiledName("detach")>]
            member __.detach() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.detach = {1})"); CompiledName("detachAux")>]
            member __.``detach <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.previousNode())"); CompiledName("previousNode")>]
            member __.previousNode() : FunScript.TypeScript.Node = failwith "never"
            [<FunScript.JSEmitInline("({0}.previousNode = {1})"); CompiledName("previousNodeAux")>]
            member __.``previousNode <-``(func : System.Func<FunScript.TypeScript.Node>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_725 =


    type FunScript.TypeScript.NodeList with 

            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length34")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.item({1}))"); CompiledName("item22")>]
            member __.item(index : float) : FunScript.TypeScript.Node = failwith "never"
            [<FunScript.JSEmitInline("({0}.item = {1})"); CompiledName("item22Aux")>]
            member __.``item <-``(func : System.Func<float, FunScript.TypeScript.Node>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}[{1}])"); CompiledName("Item25")>]
            member __.Item with get(i : int) : FunScript.TypeScript.Node = failwith "never" and set (i : int) (v : FunScript.TypeScript.Node) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_726 =


    type FunScript.TypeScript.NodeListOf<'TNode when 'TNode :> FunScript.TypeScript.Node> with 

            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length35")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.item({1}))"); CompiledName("item23")>]
            member __.item(index : float) : 'TNode = failwith "never"
            [<FunScript.JSEmitInline("({0}.item = {1})"); CompiledName("item23Aux")>]
            member __.``item <-``(func : System.Func<float, 'TNode>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}[{1}])"); CompiledName("Item26")>]
            member __.Item with get(i : int) : 'TNode = failwith "never" and set (i : int) (v : 'TNode) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_727 =


    type FunScript.TypeScript.NodeSelector with 

            [<FunScript.JSEmitInline("({0}.querySelectorAll({1}))"); CompiledName("querySelectorAll")>]
            member __.querySelectorAll(selectors : string) : FunScript.TypeScript.NodeList = failwith "never"
            [<FunScript.JSEmitInline("({0}.querySelectorAll = {1})"); CompiledName("querySelectorAllAux")>]
            member __.``querySelectorAll <-``(func : System.Func<string, FunScript.TypeScript.NodeList>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.querySelector({1}))"); CompiledName("querySelector")>]
            member __.querySelector(selectors : string) : FunScript.TypeScript.Element = failwith "never"
            [<FunScript.JSEmitInline("({0}.querySelector = {1})"); CompiledName("querySelectorAux")>]
            member __.``querySelector <-``(func : System.Func<string, FunScript.TypeScript.Element>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_728 =


    type FunScript.TypeScript.Number with 

            [<FunScript.JSEmitInline("({0}.toString({?1}))"); CompiledName("toString12")>]
            member __.toString(?radix : float) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toString = {1})"); CompiledName("toString12Aux")>]
            member __.``toString <-``(func : System.Func<float, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toFixed({?1}))"); CompiledName("toFixed")>]
            member __.toFixed(?fractionDigits : float) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toFixed = {1})"); CompiledName("toFixedAux")>]
            member __.``toFixed <-``(func : System.Func<float, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toExponential({?1}))"); CompiledName("toExponential")>]
            member __.toExponential(?fractionDigits : float) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toExponential = {1})"); CompiledName("toExponentialAux")>]
            member __.``toExponential <-``(func : System.Func<float, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toPrecision({?1}))"); CompiledName("toPrecision")>]
            member __.toPrecision(?precision : float) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toPrecision = {1})"); CompiledName("toPrecisionAux")>]
            member __.``toPrecision <-``(func : System.Func<float, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toLocaleString({?1}, {?2}))"); CompiledName("toLocaleString4")>]
            member __.toLocaleString(?locales : array<string>, ?options : FunScript.TypeScript.Intl.NumberFormatOptions) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toLocaleString = {1})"); CompiledName("toLocaleString4Aux")>]
            member __.``toLocaleString <-``(func : System.Func<array<string>, FunScript.TypeScript.Intl.NumberFormatOptions, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toLocaleString({?1}, {?2}))"); CompiledName("toLocaleString5")>]
            member __.toLocaleStringOverload2(?locale : string, ?options : FunScript.TypeScript.Intl.NumberFormatOptions) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toLocaleString = {1})"); CompiledName("toLocaleString5Aux")>]
            member __.``toLocaleStringOverload2 <-``(func : System.Func<string, FunScript.TypeScript.Intl.NumberFormatOptions, string>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_729 =


    type FunScript.TypeScript.Intl.NumberFormat with 

            [<FunScript.JSEmitInline("({0}.format({1}))"); CompiledName("format1")>]
            member __.format(value : float) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.format = {1})"); CompiledName("format1Aux")>]
            member __.``format <-``(func : System.Func<float, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.resolvedOptions())"); CompiledName("resolvedOptions2")>]
            member __.resolvedOptions() : FunScript.TypeScript.Intl.ResolvedNumberFormatOptions = failwith "never"
            [<FunScript.JSEmitInline("({0}.resolvedOptions = {1})"); CompiledName("resolvedOptions2Aux")>]
            member __.``resolvedOptions <-``(func : System.Func<FunScript.TypeScript.Intl.ResolvedNumberFormatOptions>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_730 =


    type FunScript.TypeScript.Intl.NumberFormatOptions with 

            [<FunScript.JSEmitInline("({0}.localeMatcher)"); CompiledName("localeMatcher2")>]
            member __.localeMatcher with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.style)"); CompiledName("style5")>]
            member __.style with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.currency)"); CompiledName("currency")>]
            member __.currency with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.currencyDisplay)"); CompiledName("currencyDisplay")>]
            member __.currencyDisplay with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.useGrouping)"); CompiledName("useGrouping")>]
            member __.useGrouping with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_731 =


    type FunScript.TypeScript.OES_standard_derivatives with 

            [<FunScript.JSEmitInline("({0}.FRAGMENT_SHADER_DERIVATIVE_HINT_OES)"); CompiledName("FRAGMENT_SHADER_DERIVATIVE_HINT_OES1")>]
            member __.FRAGMENT_SHADER_DERIVATIVE_HINT_OES with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_732 =


    type FunScript.TypeScript.Object with 

            [<FunScript.JSEmitInline("({0}.constructor)"); CompiledName("_constructor")>]
            member __._constructor with get() : FunScript.TypeScript.Function = failwith "never" and set (v : FunScript.TypeScript.Function) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toString())"); CompiledName("toString13")>]
            member __.toString() : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toString = {1})"); CompiledName("toString13Aux")>]
            member __.``toString <-``(func : System.Func<string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toLocaleString())"); CompiledName("toLocaleString6")>]
            member __.toLocaleString() : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toLocaleString = {1})"); CompiledName("toLocaleString6Aux")>]
            member __.``toLocaleString <-``(func : System.Func<string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.valueOf())"); CompiledName("valueOf1")>]
            member __.valueOf() : FunScript.TypeScript.Object = failwith "never"
            [<FunScript.JSEmitInline("({0}.valueOf = {1})"); CompiledName("valueOf1Aux")>]
            member __.``valueOf <-``(func : System.Func<FunScript.TypeScript.Object>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.hasOwnProperty({1}))"); CompiledName("hasOwnProperty")>]
            member __.hasOwnProperty(v : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.hasOwnProperty = {1})"); CompiledName("hasOwnPropertyAux")>]
            member __.``hasOwnProperty <-``(func : System.Func<string, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.isPrototypeOf({1}))"); CompiledName("isPrototypeOf")>]
            member __.isPrototypeOf(v : FunScript.TypeScript.Object) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.isPrototypeOf = {1})"); CompiledName("isPrototypeOfAux")>]
            member __.``isPrototypeOf <-``(func : System.Func<FunScript.TypeScript.Object, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.propertyIsEnumerable({1}))"); CompiledName("propertyIsEnumerable")>]
            member __.propertyIsEnumerable(v : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.propertyIsEnumerable = {1})"); CompiledName("propertyIsEnumerableAux")>]
            member __.``propertyIsEnumerable <-``(func : System.Func<string, bool>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_733 =


    type FunScript.TypeScript.ObjectURLOptions with 

            [<FunScript.JSEmitInline("({0}.oneTimeOnly)"); CompiledName("oneTimeOnly")>]
            member __.oneTimeOnly with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_734 =


    type FunScript.TypeScript.PageTransitionEvent with 

            [<FunScript.JSEmitInline("({0}.persisted)"); CompiledName("persisted")>]
            member __.persisted with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_735 =


    type FunScript.TypeScript.PerfWidgetExternal with 

            [<FunScript.JSEmitInline("({0}.maxCpuSpeed)"); CompiledName("maxCpuSpeed")>]
            member __.maxCpuSpeed with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.independentRenderingEnabled)"); CompiledName("independentRenderingEnabled")>]
            member __.independentRenderingEnabled with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.irDisablingContentString)"); CompiledName("irDisablingContentString")>]
            member __.irDisablingContentString with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.irStatusAvailable)"); CompiledName("irStatusAvailable")>]
            member __.irStatusAvailable with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.performanceCounter)"); CompiledName("performanceCounter")>]
            member __.performanceCounter with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.averagePaintTime)"); CompiledName("averagePaintTime")>]
            member __.averagePaintTime with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.activeNetworkRequestCount)"); CompiledName("activeNetworkRequestCount")>]
            member __.activeNetworkRequestCount with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.paintRequestsPerSecond)"); CompiledName("paintRequestsPerSecond")>]
            member __.paintRequestsPerSecond with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.extraInformationEnabled)"); CompiledName("extraInformationEnabled")>]
            member __.extraInformationEnabled with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.performanceCounterFrequency)"); CompiledName("performanceCounterFrequency")>]
            member __.performanceCounterFrequency with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.averageFrameTime)"); CompiledName("averageFrameTime")>]
            member __.averageFrameTime with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.repositionWindow({1}, {2}))"); CompiledName("repositionWindow")>]
            member __.repositionWindow(x : float, y : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.repositionWindow = {1})"); CompiledName("repositionWindowAux")>]
            member __.``repositionWindow <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getRecentMemoryUsage({1}))"); CompiledName("getRecentMemoryUsage")>]
            member __.getRecentMemoryUsage(last : float) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.getRecentMemoryUsage = {1})"); CompiledName("getRecentMemoryUsageAux")>]
            member __.``getRecentMemoryUsage <-``(func : System.Func<float, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getMemoryUsage())"); CompiledName("getMemoryUsage")>]
            member __.getMemoryUsage() : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.getMemoryUsage = {1})"); CompiledName("getMemoryUsageAux")>]
            member __.``getMemoryUsage <-``(func : System.Func<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.resizeWindow({1}, {2}))"); CompiledName("resizeWindow")>]
            member __.resizeWindow(width : float, height : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.resizeWindow = {1})"); CompiledName("resizeWindowAux")>]
            member __.``resizeWindow <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getProcessCpuUsage())"); CompiledName("getProcessCpuUsage")>]
            member __.getProcessCpuUsage() : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.getProcessCpuUsage = {1})"); CompiledName("getProcessCpuUsageAux")>]
            member __.``getProcessCpuUsage <-``(func : System.Func<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeEventListener({1}, {2}))"); CompiledName("removeEventListener2")>]
            member __.removeEventListener(eventType : string, callback : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeEventListener = {1})"); CompiledName("removeEventListener2Aux")>]
            member __.``removeEventListener <-``(func : System.Func<string, System.Func<obj, obj>, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getRecentCpuUsage({1}))"); CompiledName("getRecentCpuUsage")>]
            member __.getRecentCpuUsage(last : float) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.getRecentCpuUsage = {1})"); CompiledName("getRecentCpuUsageAux")>]
            member __.``getRecentCpuUsage <-``(func : System.Func<float, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener({1}, {2}))"); CompiledName("addEventListener1310")>]
            member __.addEventListener(eventType : string, callback : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener = {1})"); CompiledName("addEventListener1310Aux")>]
            member __.``addEventListener <-``(func : System.Func<string, System.Func<obj, obj>, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getRecentFrames({1}))"); CompiledName("getRecentFrames")>]
            member __.getRecentFrames(last : float) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.getRecentFrames = {1})"); CompiledName("getRecentFramesAux")>]
            member __.``getRecentFrames <-``(func : System.Func<float, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getRecentPaintRequests({1}))"); CompiledName("getRecentPaintRequests")>]
            member __.getRecentPaintRequests(last : float) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.getRecentPaintRequests = {1})"); CompiledName("getRecentPaintRequestsAux")>]
            member __.``getRecentPaintRequests <-``(func : System.Func<float, obj>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_736 =


    type FunScript.TypeScript.Performance with 

            [<FunScript.JSEmitInline("({0}.navigation)"); CompiledName("navigation")>]
            member __.navigation with get() : FunScript.TypeScript.PerformanceNavigation = failwith "never" and set (v : FunScript.TypeScript.PerformanceNavigation) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.timing)"); CompiledName("timing")>]
            member __.timing with get() : FunScript.TypeScript.PerformanceTiming = failwith "never" and set (v : FunScript.TypeScript.PerformanceTiming) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getEntriesByType({1}))"); CompiledName("getEntriesByType")>]
            member __.getEntriesByType(entryType : string) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.getEntriesByType = {1})"); CompiledName("getEntriesByTypeAux")>]
            member __.``getEntriesByType <-``(func : System.Func<string, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toJSON())"); CompiledName("toJSON1")>]
            member __.toJSON() : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.toJSON = {1})"); CompiledName("toJSON1Aux")>]
            member __.``toJSON <-``(func : System.Func<obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getMeasures({?1}))"); CompiledName("getMeasures")>]
            member __.getMeasures(?measureName : string) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.getMeasures = {1})"); CompiledName("getMeasuresAux")>]
            member __.``getMeasures <-``(func : System.Func<string, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clearMarks({?1}))"); CompiledName("clearMarks")>]
            member __.clearMarks(?markName : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clearMarks = {1})"); CompiledName("clearMarksAux")>]
            member __.``clearMarks <-``(func : System.Func<string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getMarks({?1}))"); CompiledName("getMarks")>]
            member __.getMarks(?markName : string) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.getMarks = {1})"); CompiledName("getMarksAux")>]
            member __.``getMarks <-``(func : System.Func<string, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clearResourceTimings())"); CompiledName("clearResourceTimings")>]
            member __.clearResourceTimings() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clearResourceTimings = {1})"); CompiledName("clearResourceTimingsAux")>]
            member __.``clearResourceTimings <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.mark({1}))"); CompiledName("mark")>]
            member __.mark(markName : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.mark = {1})"); CompiledName("markAux")>]
            member __.``mark <-``(func : System.Func<string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.measure({1}, {?2}, {?3}))"); CompiledName("_measure")>]
            member __._measure(measureName : string, ?startMarkName : string, ?endMarkName : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.measure = {1})"); CompiledName("_measureAux")>]
            member __.``_measure <-``(func : System.Func<string, string, string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getEntriesByName({1}, {?2}))"); CompiledName("getEntriesByName")>]
            member __.getEntriesByName(name : string, ?entryType : string) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.getEntriesByName = {1})"); CompiledName("getEntriesByNameAux")>]
            member __.``getEntriesByName <-``(func : System.Func<string, string, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getEntries())"); CompiledName("getEntries")>]
            member __.getEntries() : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.getEntries = {1})"); CompiledName("getEntriesAux")>]
            member __.``getEntries <-``(func : System.Func<obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clearMeasures({?1}))"); CompiledName("clearMeasures")>]
            member __.clearMeasures(?measureName : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clearMeasures = {1})"); CompiledName("clearMeasuresAux")>]
            member __.``clearMeasures <-``(func : System.Func<string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setResourceTimingBufferSize({1}))"); CompiledName("setResourceTimingBufferSize")>]
            member __.setResourceTimingBufferSize(maxSize : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setResourceTimingBufferSize = {1})"); CompiledName("setResourceTimingBufferSizeAux")>]
            member __.``setResourceTimingBufferSize <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.now())"); CompiledName("now1")>]
            member __.now() : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.now = {1})"); CompiledName("now1Aux")>]
            member __.``now <-``(func : System.Func<float>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_737 =


    type FunScript.TypeScript.PerformanceEntry with 

            [<FunScript.JSEmitInline("({0}.name)"); CompiledName("name30")>]
            member __.name with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.startTime)"); CompiledName("startTime")>]
            member __.startTime with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.duration)"); CompiledName("duration2")>]
            member __.duration with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.entryType)"); CompiledName("entryType")>]
            member __.entryType with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_738 =


    type FunScript.TypeScript.PerformanceNavigation with 

            [<FunScript.JSEmitInline("({0}.redirectCount)"); CompiledName("redirectCount")>]
            member __.redirectCount with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.type)"); CompiledName("_type25")>]
            member __._type with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toJSON())"); CompiledName("toJSON2")>]
            member __.toJSON() : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.toJSON = {1})"); CompiledName("toJSON2Aux")>]
            member __.``toJSON <-``(func : System.Func<obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TYPE_RELOAD)"); CompiledName("TYPE_RELOAD1")>]
            member __.TYPE_RELOAD with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TYPE_RESERVED)"); CompiledName("TYPE_RESERVED1")>]
            member __.TYPE_RESERVED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TYPE_BACK_FORWARD)"); CompiledName("TYPE_BACK_FORWARD1")>]
            member __.TYPE_BACK_FORWARD with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TYPE_NAVIGATE)"); CompiledName("TYPE_NAVIGATE1")>]
            member __.TYPE_NAVIGATE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_739 =


    type FunScript.TypeScript.PerformanceNavigationTiming with 

            [<FunScript.JSEmitInline("({0}.redirectStart)"); CompiledName("redirectStart")>]
            member __.redirectStart with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.domainLookupEnd)"); CompiledName("domainLookupEnd")>]
            member __.domainLookupEnd with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.responseStart)"); CompiledName("responseStart")>]
            member __.responseStart with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.domComplete)"); CompiledName("domComplete")>]
            member __.domComplete with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.domainLookupStart)"); CompiledName("domainLookupStart")>]
            member __.domainLookupStart with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.loadEventStart)"); CompiledName("loadEventStart")>]
            member __.loadEventStart with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.unloadEventEnd)"); CompiledName("unloadEventEnd")>]
            member __.unloadEventEnd with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.fetchStart)"); CompiledName("fetchStart")>]
            member __.fetchStart with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.requestStart)"); CompiledName("requestStart")>]
            member __.requestStart with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.domInteractive)"); CompiledName("domInteractive")>]
            member __.domInteractive with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.navigationStart)"); CompiledName("navigationStart")>]
            member __.navigationStart with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.connectEnd)"); CompiledName("connectEnd")>]
            member __.connectEnd with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.loadEventEnd)"); CompiledName("loadEventEnd")>]
            member __.loadEventEnd with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.connectStart)"); CompiledName("connectStart")>]
            member __.connectStart with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.responseEnd)"); CompiledName("responseEnd")>]
            member __.responseEnd with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.domLoading)"); CompiledName("domLoading")>]
            member __.domLoading with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.redirectEnd)"); CompiledName("redirectEnd")>]
            member __.redirectEnd with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.redirectCount)"); CompiledName("redirectCount1")>]
            member __.redirectCount with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.unloadEventStart)"); CompiledName("unloadEventStart")>]
            member __.unloadEventStart with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.domContentLoadedEventStart)"); CompiledName("domContentLoadedEventStart")>]
            member __.domContentLoadedEventStart with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.domContentLoadedEventEnd)"); CompiledName("domContentLoadedEventEnd")>]
            member __.domContentLoadedEventEnd with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.type)"); CompiledName("_type26")>]
            member __._type with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_740 =


    type FunScript.TypeScript.PerformanceResourceTiming with 

            [<FunScript.JSEmitInline("({0}.redirectStart)"); CompiledName("redirectStart1")>]
            member __.redirectStart with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.redirectEnd)"); CompiledName("redirectEnd1")>]
            member __.redirectEnd with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.domainLookupEnd)"); CompiledName("domainLookupEnd1")>]
            member __.domainLookupEnd with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.responseStart)"); CompiledName("responseStart1")>]
            member __.responseStart with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.domainLookupStart)"); CompiledName("domainLookupStart1")>]
            member __.domainLookupStart with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.fetchStart)"); CompiledName("fetchStart1")>]
            member __.fetchStart with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.requestStart)"); CompiledName("requestStart1")>]
            member __.requestStart with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.connectEnd)"); CompiledName("connectEnd1")>]
            member __.connectEnd with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.connectStart)"); CompiledName("connectStart1")>]
            member __.connectStart with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initiatorType)"); CompiledName("initiatorType")>]
            member __.initiatorType with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.responseEnd)"); CompiledName("responseEnd1")>]
            member __.responseEnd with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_741 =


    type FunScript.TypeScript.PerformanceTiming with 

            [<FunScript.JSEmitInline("({0}.redirectStart)"); CompiledName("redirectStart2")>]
            member __.redirectStart with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.domainLookupEnd)"); CompiledName("domainLookupEnd2")>]
            member __.domainLookupEnd with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.responseStart)"); CompiledName("responseStart2")>]
            member __.responseStart with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.domComplete)"); CompiledName("domComplete1")>]
            member __.domComplete with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.domainLookupStart)"); CompiledName("domainLookupStart2")>]
            member __.domainLookupStart with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.loadEventStart)"); CompiledName("loadEventStart1")>]
            member __.loadEventStart with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msFirstPaint)"); CompiledName("msFirstPaint")>]
            member __.msFirstPaint with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.unloadEventEnd)"); CompiledName("unloadEventEnd1")>]
            member __.unloadEventEnd with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.fetchStart)"); CompiledName("fetchStart2")>]
            member __.fetchStart with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.requestStart)"); CompiledName("requestStart2")>]
            member __.requestStart with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.domInteractive)"); CompiledName("domInteractive1")>]
            member __.domInteractive with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.navigationStart)"); CompiledName("navigationStart1")>]
            member __.navigationStart with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.connectEnd)"); CompiledName("connectEnd2")>]
            member __.connectEnd with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.loadEventEnd)"); CompiledName("loadEventEnd1")>]
            member __.loadEventEnd with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.connectStart)"); CompiledName("connectStart2")>]
            member __.connectStart with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.responseEnd)"); CompiledName("responseEnd2")>]
            member __.responseEnd with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.domLoading)"); CompiledName("domLoading1")>]
            member __.domLoading with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.redirectEnd)"); CompiledName("redirectEnd2")>]
            member __.redirectEnd with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.unloadEventStart)"); CompiledName("unloadEventStart1")>]
            member __.unloadEventStart with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.domContentLoadedEventStart)"); CompiledName("domContentLoadedEventStart1")>]
            member __.domContentLoadedEventStart with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.domContentLoadedEventEnd)"); CompiledName("domContentLoadedEventEnd1")>]
            member __.domContentLoadedEventEnd with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toJSON())"); CompiledName("toJSON3")>]
            member __.toJSON() : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.toJSON = {1})"); CompiledName("toJSON3Aux")>]
            member __.``toJSON <-``(func : System.Func<obj>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_742 =


    type FunScript.TypeScript.Plugin with 

            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length36")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.filename)"); CompiledName("filename1")>]
            member __.filename with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.version)"); CompiledName("version3")>]
            member __.version with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.name)"); CompiledName("name31")>]
            member __.name with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.description)"); CompiledName("description1")>]
            member __.description with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.item({1}))"); CompiledName("item24")>]
            member __.item(index : float) : FunScript.TypeScript.MimeType = failwith "never"
            [<FunScript.JSEmitInline("({0}.item = {1})"); CompiledName("item24Aux")>]
            member __.``item <-``(func : System.Func<float, FunScript.TypeScript.MimeType>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}[{1}])"); CompiledName("Item27")>]
            member __.Item with get(i : int) : FunScript.TypeScript.MimeType = failwith "never" and set (i : int) (v : FunScript.TypeScript.MimeType) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.namedItem({1}))"); CompiledName("namedItem5")>]
            member __.namedItem(_type : string) : FunScript.TypeScript.MimeType = failwith "never"
            [<FunScript.JSEmitInline("({0}.namedItem = {1})"); CompiledName("namedItem5Aux")>]
            member __.``namedItem <-``(func : System.Func<string, FunScript.TypeScript.MimeType>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_743 =


    type FunScript.TypeScript.PluginArray with 

            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length37")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.refresh({?1}))"); CompiledName("refresh3")>]
            member __.refresh(?reload : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.refresh = {1})"); CompiledName("refresh3Aux")>]
            member __.``refresh <-``(func : System.Func<bool, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.item({1}))"); CompiledName("item25")>]
            member __.item(index : float) : FunScript.TypeScript.Plugin = failwith "never"
            [<FunScript.JSEmitInline("({0}.item = {1})"); CompiledName("item25Aux")>]
            member __.``item <-``(func : System.Func<float, FunScript.TypeScript.Plugin>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}[{1}])"); CompiledName("Item28")>]
            member __.Item with get(i : int) : FunScript.TypeScript.Plugin = failwith "never" and set (i : int) (v : FunScript.TypeScript.Plugin) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.namedItem({1}))"); CompiledName("namedItem6")>]
            member __.namedItem(name : string) : FunScript.TypeScript.Plugin = failwith "never"
            [<FunScript.JSEmitInline("({0}.namedItem = {1})"); CompiledName("namedItem6Aux")>]
            member __.``namedItem <-``(func : System.Func<string, FunScript.TypeScript.Plugin>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_744 =


    type FunScript.TypeScript.PointerEvent with 

            [<FunScript.JSEmitInline("({0}.width)"); CompiledName("width21")>]
            member __.width with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.rotation)"); CompiledName("rotation2")>]
            member __.rotation with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pressure)"); CompiledName("pressure1")>]
            member __.pressure with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pointerType)"); CompiledName("pointerType1")>]
            member __.pointerType with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.isPrimary)"); CompiledName("isPrimary1")>]
            member __.isPrimary with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.tiltY)"); CompiledName("tiltY1")>]
            member __.tiltY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.height)"); CompiledName("height18")>]
            member __.height with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.intermediatePoints)"); CompiledName("intermediatePoints1")>]
            member __.intermediatePoints with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.currentPoint)"); CompiledName("currentPoint1")>]
            member __.currentPoint with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.tiltX)"); CompiledName("tiltX1")>]
            member __.tiltX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.hwTimestamp)"); CompiledName("hwTimestamp2")>]
            member __.hwTimestamp with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pointerId)"); CompiledName("pointerId1")>]
            member __.pointerId with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initPointerEvent({1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16}, {17}, {18}, {19}, {20}, {21}, {22}, {23}, {24}, {25}, {26}, {27}))"); CompiledName("initPointerEvent1")>]
            member __.initPointerEvent(typeArg : string, canBubbleArg : bool, cancelableArg : bool, viewArg : FunScript.TypeScript.Window, detailArg : float, screenXArg : float, screenYArg : float, clientXArg : float, clientYArg : float, ctrlKeyArg : bool, altKeyArg : bool, shiftKeyArg : bool, metaKeyArg : bool, buttonArg : float, relatedTargetArg : FunScript.TypeScript.EventTarget, offsetXArg : float, offsetYArg : float, widthArg : float, heightArg : float, pressure : float, rotation : float, tiltX : float, tiltY : float, pointerIdArg : float, pointerType : obj, hwTimestampArg : float, isPrimary : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getCurrentPoint({1}))"); CompiledName("getCurrentPoint1")>]
            member __.getCurrentPoint(element : FunScript.TypeScript.Element) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getCurrentPoint = {1})"); CompiledName("getCurrentPoint1Aux")>]
            member __.``getCurrentPoint <-``(func : System.Func<FunScript.TypeScript.Element, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getIntermediatePoints({1}))"); CompiledName("getIntermediatePoints1")>]
            member __.getIntermediatePoints(element : FunScript.TypeScript.Element) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getIntermediatePoints = {1})"); CompiledName("getIntermediatePoints1Aux")>]
            member __.``getIntermediatePoints <-``(func : System.Func<FunScript.TypeScript.Element, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_745 =


    type FunScript.TypeScript.PointerEventInit with 

            [<FunScript.JSEmitInline("({0}.pointerId)"); CompiledName("pointerId2")>]
            member __.pointerId with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.width)"); CompiledName("width22")>]
            member __.width with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.height)"); CompiledName("height19")>]
            member __.height with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pressure)"); CompiledName("pressure2")>]
            member __.pressure with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.tiltX)"); CompiledName("tiltX2")>]
            member __.tiltX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.tiltY)"); CompiledName("tiltY2")>]
            member __.tiltY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pointerType)"); CompiledName("pointerType2")>]
            member __.pointerType with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.isPrimary)"); CompiledName("isPrimary2")>]
            member __.isPrimary with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_746 =


    type FunScript.TypeScript.PopStateEvent with 

            [<FunScript.JSEmitInline("({0}.state)"); CompiledName("state1")>]
            member __.state with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initPopStateEvent({1}, {2}, {3}, {4}))"); CompiledName("initPopStateEvent")>]
            member __.initPopStateEvent(typeArg : string, canBubbleArg : bool, cancelableArg : bool, stateArg : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initPopStateEvent = {1})"); CompiledName("initPopStateEventAux")>]
            member __.``initPopStateEvent <-``(func : System.Func<string, bool, bool, obj, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_747 =


    type FunScript.TypeScript.Position with 

            [<FunScript.JSEmitInline("({0}.timestamp)"); CompiledName("timestamp")>]
            member __.timestamp with get() : FunScript.TypeScript.Date = failwith "never" and set (v : FunScript.TypeScript.Date) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.coords)"); CompiledName("coords2")>]
            member __.coords with get() : FunScript.TypeScript.Coordinates = failwith "never" and set (v : FunScript.TypeScript.Coordinates) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_748 =


    type FunScript.TypeScript.PositionCallback with 

            [<FunScript.JSEmitInline("({0}({1}))"); CompiledName("Invoke35")>]
            member __.Invoke(position : FunScript.TypeScript.Position) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0} = {1})"); CompiledName("Invoke35Aux")>]
            member __.``Invoke <-``(func : System.Func<FunScript.TypeScript.Position, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_749 =


    type FunScript.TypeScript.PositionError with 

            [<FunScript.JSEmitInline("({0}.code)"); CompiledName("code7")>]
            member __.code with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.message)"); CompiledName("message5")>]
            member __.message with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toString())"); CompiledName("toString14")>]
            member __.toString() : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toString = {1})"); CompiledName("toString14Aux")>]
            member __.``toString <-``(func : System.Func<string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.POSITION_UNAVAILABLE)"); CompiledName("POSITION_UNAVAILABLE1")>]
            member __.POSITION_UNAVAILABLE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PERMISSION_DENIED)"); CompiledName("PERMISSION_DENIED1")>]
            member __.PERMISSION_DENIED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TIMEOUT)"); CompiledName("TIMEOUT1")>]
            member __.TIMEOUT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_750 =


    type FunScript.TypeScript.PositionErrorCallback with 

            [<FunScript.JSEmitInline("({0}({1}))"); CompiledName("Invoke36")>]
            member __.Invoke(error : FunScript.TypeScript.PositionError) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0} = {1})"); CompiledName("Invoke36Aux")>]
            member __.``Invoke <-``(func : System.Func<FunScript.TypeScript.PositionError, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_751 =


    type FunScript.TypeScript.PositionOptions with 

            [<FunScript.JSEmitInline("({0}.enableHighAccuracy)"); CompiledName("enableHighAccuracy")>]
            member __.enableHighAccuracy with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.timeout)"); CompiledName("timeout")>]
            member __.timeout with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.maximumAge)"); CompiledName("maximumAge")>]
            member __.maximumAge with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_752 =


    type FunScript.TypeScript.ProcessingInstruction with 

            [<FunScript.JSEmitInline("({0}.target)"); CompiledName("target10")>]
            member __.target with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.data)"); CompiledName("data7")>]
            member __.data with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_753 =


    type FunScript.TypeScript.ProgressEvent with 

            [<FunScript.JSEmitInline("({0}.loaded)"); CompiledName("loaded")>]
            member __.loaded with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.lengthComputable)"); CompiledName("lengthComputable")>]
            member __.lengthComputable with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.total)"); CompiledName("total")>]
            member __.total with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initProgressEvent({1}, {2}, {3}, {4}, {5}, {6}))"); CompiledName("initProgressEvent")>]
            member __.initProgressEvent(typeArg : string, canBubbleArg : bool, cancelableArg : bool, lengthComputableArg : bool, loadedArg : float, totalArg : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initProgressEvent = {1})"); CompiledName("initProgressEventAux")>]
            member __.``initProgressEvent <-``(func : System.Func<string, bool, bool, bool, float, float, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_754 =


    type FunScript.TypeScript.PropertyDescriptor with 

            [<FunScript.JSEmitInline("({0}.configurable)"); CompiledName("configurable")>]
            member __.configurable with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.enumerable)"); CompiledName("enumerable")>]
            member __.enumerable with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.value)"); CompiledName("value12")>]
            member __.value with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.writable)"); CompiledName("writable")>]
            member __.writable with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.get())"); CompiledName("get8")>]
            member __.get() : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.get = {1})"); CompiledName("get8Aux")>]
            member __.``get <-``(func : System.Func<obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set({1}))"); CompiledName("set16")>]
            member __.set(v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set = {1})"); CompiledName("set16Aux")>]
            member __.``set <-``(func : System.Func<obj, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_755 =


    type FunScript.TypeScript.PropertyDescriptorMap with 

            [<FunScript.JSEmitInline("({0}[{1}])"); CompiledName("Item29")>]
            member __.Item with get(i : string) : FunScript.TypeScript.PropertyDescriptor = failwith "never" and set (i : string) (v : FunScript.TypeScript.PropertyDescriptor) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_756 =


    type FunScript.TypeScript.RandomSource with 

            [<FunScript.JSEmitInline("({0}.getRandomValues({1}))"); CompiledName("getRandomValues")>]
            member __.getRandomValues(array : FunScript.TypeScript.ArrayBufferView) : FunScript.TypeScript.ArrayBufferView = failwith "never"
            [<FunScript.JSEmitInline("({0}.getRandomValues = {1})"); CompiledName("getRandomValuesAux")>]
            member __.``getRandomValues <-``(func : System.Func<FunScript.TypeScript.ArrayBufferView, FunScript.TypeScript.ArrayBufferView>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_757 =


    type FunScript.TypeScript.Range with 

            [<FunScript.JSEmitInline("({0}.startOffset)"); CompiledName("startOffset")>]
            member __.startOffset with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.collapsed)"); CompiledName("collapsed")>]
            member __.collapsed with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.endOffset)"); CompiledName("endOffset")>]
            member __.endOffset with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.startContainer)"); CompiledName("startContainer")>]
            member __.startContainer with get() : FunScript.TypeScript.Node = failwith "never" and set (v : FunScript.TypeScript.Node) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.endContainer)"); CompiledName("endContainer")>]
            member __.endContainer with get() : FunScript.TypeScript.Node = failwith "never" and set (v : FunScript.TypeScript.Node) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.commonAncestorContainer)"); CompiledName("commonAncestorContainer")>]
            member __.commonAncestorContainer with get() : FunScript.TypeScript.Node = failwith "never" and set (v : FunScript.TypeScript.Node) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setStart({1}, {2}))"); CompiledName("setStart")>]
            member __.setStart(refNode : FunScript.TypeScript.Node, offset : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setStart = {1})"); CompiledName("setStartAux")>]
            member __.``setStart <-``(func : System.Func<FunScript.TypeScript.Node, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setEndBefore({1}))"); CompiledName("setEndBefore")>]
            member __.setEndBefore(refNode : FunScript.TypeScript.Node) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setEndBefore = {1})"); CompiledName("setEndBeforeAux")>]
            member __.``setEndBefore <-``(func : System.Func<FunScript.TypeScript.Node, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setStartBefore({1}))"); CompiledName("setStartBefore")>]
            member __.setStartBefore(refNode : FunScript.TypeScript.Node) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setStartBefore = {1})"); CompiledName("setStartBeforeAux")>]
            member __.``setStartBefore <-``(func : System.Func<FunScript.TypeScript.Node, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.selectNode({1}))"); CompiledName("selectNode")>]
            member __.selectNode(refNode : FunScript.TypeScript.Node) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.selectNode = {1})"); CompiledName("selectNodeAux")>]
            member __.``selectNode <-``(func : System.Func<FunScript.TypeScript.Node, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.detach())"); CompiledName("detach1")>]
            member __.detach() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.detach = {1})"); CompiledName("detach1Aux")>]
            member __.``detach <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getBoundingClientRect())"); CompiledName("getBoundingClientRect1")>]
            member __.getBoundingClientRect() : FunScript.TypeScript.ClientRect = failwith "never"
            [<FunScript.JSEmitInline("({0}.getBoundingClientRect = {1})"); CompiledName("getBoundingClientRect1Aux")>]
            member __.``getBoundingClientRect <-``(func : System.Func<FunScript.TypeScript.ClientRect>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toString())"); CompiledName("toString15")>]
            member __.toString() : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toString = {1})"); CompiledName("toString15Aux")>]
            member __.``toString <-``(func : System.Func<string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.compareBoundaryPoints({1}, {2}))"); CompiledName("compareBoundaryPoints")>]
            member __.compareBoundaryPoints(how : float, sourceRange : FunScript.TypeScript.Range) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.compareBoundaryPoints = {1})"); CompiledName("compareBoundaryPointsAux")>]
            member __.``compareBoundaryPoints <-``(func : System.Func<float, FunScript.TypeScript.Range, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.insertNode({1}))"); CompiledName("insertNode")>]
            member __.insertNode(newNode : FunScript.TypeScript.Node) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.insertNode = {1})"); CompiledName("insertNodeAux")>]
            member __.``insertNode <-``(func : System.Func<FunScript.TypeScript.Node, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.collapse({1}))"); CompiledName("collapse")>]
            member __.collapse(toStart : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.collapse = {1})"); CompiledName("collapseAux")>]
            member __.``collapse <-``(func : System.Func<bool, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.selectNodeContents({1}))"); CompiledName("selectNodeContents")>]
            member __.selectNodeContents(refNode : FunScript.TypeScript.Node) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.selectNodeContents = {1})"); CompiledName("selectNodeContentsAux")>]
            member __.``selectNodeContents <-``(func : System.Func<FunScript.TypeScript.Node, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.cloneContents())"); CompiledName("cloneContents")>]
            member __.cloneContents() : FunScript.TypeScript.DocumentFragment = failwith "never"
            [<FunScript.JSEmitInline("({0}.cloneContents = {1})"); CompiledName("cloneContentsAux")>]
            member __.``cloneContents <-``(func : System.Func<FunScript.TypeScript.DocumentFragment>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setEnd({1}, {2}))"); CompiledName("setEnd")>]
            member __.setEnd(refNode : FunScript.TypeScript.Node, offset : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setEnd = {1})"); CompiledName("setEndAux")>]
            member __.``setEnd <-``(func : System.Func<FunScript.TypeScript.Node, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.cloneRange())"); CompiledName("cloneRange")>]
            member __.cloneRange() : FunScript.TypeScript.Range = failwith "never"
            [<FunScript.JSEmitInline("({0}.cloneRange = {1})"); CompiledName("cloneRangeAux")>]
            member __.``cloneRange <-``(func : System.Func<FunScript.TypeScript.Range>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getClientRects())"); CompiledName("getClientRects1")>]
            member __.getClientRects() : FunScript.TypeScript.ClientRectList = failwith "never"
            [<FunScript.JSEmitInline("({0}.getClientRects = {1})"); CompiledName("getClientRects1Aux")>]
            member __.``getClientRects <-``(func : System.Func<FunScript.TypeScript.ClientRectList>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.surroundContents({1}))"); CompiledName("surroundContents")>]
            member __.surroundContents(newParent : FunScript.TypeScript.Node) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.surroundContents = {1})"); CompiledName("surroundContentsAux")>]
            member __.``surroundContents <-``(func : System.Func<FunScript.TypeScript.Node, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteContents())"); CompiledName("deleteContents")>]
            member __.deleteContents() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteContents = {1})"); CompiledName("deleteContentsAux")>]
            member __.``deleteContents <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setStartAfter({1}))"); CompiledName("setStartAfter")>]
            member __.setStartAfter(refNode : FunScript.TypeScript.Node) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setStartAfter = {1})"); CompiledName("setStartAfterAux")>]
            member __.``setStartAfter <-``(func : System.Func<FunScript.TypeScript.Node, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.extractContents())"); CompiledName("extractContents")>]
            member __.extractContents() : FunScript.TypeScript.DocumentFragment = failwith "never"
            [<FunScript.JSEmitInline("({0}.extractContents = {1})"); CompiledName("extractContentsAux")>]
            member __.``extractContents <-``(func : System.Func<FunScript.TypeScript.DocumentFragment>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setEndAfter({1}))"); CompiledName("setEndAfter")>]
            member __.setEndAfter(refNode : FunScript.TypeScript.Node) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setEndAfter = {1})"); CompiledName("setEndAfterAux")>]
            member __.``setEndAfter <-``(func : System.Func<FunScript.TypeScript.Node, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createContextualFragment({1}))"); CompiledName("createContextualFragment")>]
            member __.createContextualFragment(fragment : string) : FunScript.TypeScript.DocumentFragment = failwith "never"
            [<FunScript.JSEmitInline("({0}.createContextualFragment = {1})"); CompiledName("createContextualFragmentAux")>]
            member __.``createContextualFragment <-``(func : System.Func<string, FunScript.TypeScript.DocumentFragment>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.END_TO_END)"); CompiledName("END_TO_END1")>]
            member __.END_TO_END with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.START_TO_START)"); CompiledName("START_TO_START1")>]
            member __.START_TO_START with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.START_TO_END)"); CompiledName("START_TO_END1")>]
            member __.START_TO_END with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.END_TO_START)"); CompiledName("END_TO_START1")>]
            member __.END_TO_START with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_758 =


    type FunScript.TypeScript.RangeException with 

            [<FunScript.JSEmitInline("({0}.code)"); CompiledName("code8")>]
            member __.code with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.message)"); CompiledName("message6")>]
            member __.message with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.name)"); CompiledName("name32")>]
            member __.name with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toString())"); CompiledName("toString16")>]
            member __.toString() : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toString = {1})"); CompiledName("toString16Aux")>]
            member __.``toString <-``(func : System.Func<string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.INVALID_NODE_TYPE_ERR)"); CompiledName("INVALID_NODE_TYPE_ERR3")>]
            member __.INVALID_NODE_TYPE_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BAD_BOUNDARYPOINTS_ERR)"); CompiledName("BAD_BOUNDARYPOINTS_ERR1")>]
            member __.BAD_BOUNDARYPOINTS_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_759 =


    type FunScript.TypeScript.RegExp with 

            [<FunScript.JSEmitInline("({0}.exec({1}))"); CompiledName("exec")>]
            member __.exec(_string : string) : FunScript.TypeScript.RegExpExecArray = failwith "never"
            [<FunScript.JSEmitInline("({0}.exec = {1})"); CompiledName("execAux")>]
            member __.``exec <-``(func : System.Func<string, FunScript.TypeScript.RegExpExecArray>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.test({1}))"); CompiledName("test")>]
            member __.test(_string : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.test = {1})"); CompiledName("testAux")>]
            member __.``test <-``(func : System.Func<string, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.source)"); CompiledName("source4")>]
            member __.source with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.global)"); CompiledName("_global")>]
            member __._global with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ignoreCase)"); CompiledName("ignoreCase")>]
            member __.ignoreCase with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.multiline)"); CompiledName("multiline")>]
            member __.multiline with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.lastIndex)"); CompiledName("lastIndex")>]
            member __.lastIndex with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.compile())"); CompiledName("compile")>]
            member __.compile() : FunScript.TypeScript.RegExp = failwith "never"
            [<FunScript.JSEmitInline("({0}.compile = {1})"); CompiledName("compileAux")>]
            member __.``compile <-``(func : System.Func<FunScript.TypeScript.RegExp>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_760 =


    type FunScript.TypeScript.RegExpExecArray with 

            [<FunScript.JSEmitInline("({0}.index)"); CompiledName("index3")>]
            member __.index with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.input)"); CompiledName("input")>]
            member __.input with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_761 =


    type FunScript.TypeScript.RegExpMatchArray with 

            [<FunScript.JSEmitInline("({0}.index)"); CompiledName("index4")>]
            member __.index with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.input)"); CompiledName("input1")>]
            member __.input with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_762 =


    type FunScript.TypeScript.Intl.ResolvedCollatorOptions with 

            [<FunScript.JSEmitInline("({0}.locale)"); CompiledName("locale2")>]
            member __.locale with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.usage)"); CompiledName("usage1")>]
            member __.usage with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.sensitivity)"); CompiledName("sensitivity1")>]
            member __.sensitivity with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ignorePunctuation)"); CompiledName("ignorePunctuation1")>]
            member __.ignorePunctuation with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.collation)"); CompiledName("collation")>]
            member __.collation with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.caseFirst)"); CompiledName("caseFirst1")>]
            member __.caseFirst with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.numeric)"); CompiledName("numeric1")>]
            member __.numeric with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_763 =


    type FunScript.TypeScript.Intl.ResolvedDateTimeFormatOptions with 

            [<FunScript.JSEmitInline("({0}.locale)"); CompiledName("locale3")>]
            member __.locale with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.calendar)"); CompiledName("calendar")>]
            member __.calendar with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.numberingSystem)"); CompiledName("numberingSystem")>]
            member __.numberingSystem with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.timeZone)"); CompiledName("timeZone")>]
            member __.timeZone with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.hour12)"); CompiledName("hour121")>]
            member __.hour12 with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.weekday)"); CompiledName("weekday1")>]
            member __.weekday with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.era)"); CompiledName("era1")>]
            member __.era with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.year)"); CompiledName("year1")>]
            member __.year with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.month)"); CompiledName("month1")>]
            member __.month with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.day)"); CompiledName("day1")>]
            member __.day with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.hour)"); CompiledName("hour1")>]
            member __.hour with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.minute)"); CompiledName("minute1")>]
            member __.minute with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.second)"); CompiledName("second1")>]
            member __.second with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.timeZoneName)"); CompiledName("timeZoneName1")>]
            member __.timeZoneName with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_764 =


    type FunScript.TypeScript.Intl.ResolvedNumberFormatOptions with 

            [<FunScript.JSEmitInline("({0}.locale)"); CompiledName("locale4")>]
            member __.locale with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.numberingSystem)"); CompiledName("numberingSystem1")>]
            member __.numberingSystem with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.style)"); CompiledName("style6")>]
            member __.style with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.currency)"); CompiledName("currency1")>]
            member __.currency with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.currencyDisplay)"); CompiledName("currencyDisplay1")>]
            member __.currencyDisplay with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.minimumintegerDigits)"); CompiledName("minimumintegerDigits")>]
            member __.minimumintegerDigits with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.minimumFractionDigits)"); CompiledName("minimumFractionDigits")>]
            member __.minimumFractionDigits with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.maximumFractionDigits)"); CompiledName("maximumFractionDigits")>]
            member __.maximumFractionDigits with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.minimumSignificantDigits)"); CompiledName("minimumSignificantDigits")>]
            member __.minimumSignificantDigits with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.maximumSignificantDigits)"); CompiledName("maximumSignificantDigits")>]
            member __.maximumSignificantDigits with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.useGrouping)"); CompiledName("useGrouping1")>]
            member __.useGrouping with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_765 =


    type FunScript.TypeScript.SVGAElement with 

            [<FunScript.JSEmitInline("({0}.target)"); CompiledName("target11")>]
            member __.target with get() : FunScript.TypeScript.SVGAnimatedString = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedString) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_766 =


    type FunScript.TypeScript.SVGAngle with 

            [<FunScript.JSEmitInline("({0}.valueAsString)"); CompiledName("valueAsString")>]
            member __.valueAsString with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.valueInSpecifiedUnits)"); CompiledName("valueInSpecifiedUnits")>]
            member __.valueInSpecifiedUnits with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.value)"); CompiledName("value13")>]
            member __.value with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.unitType)"); CompiledName("unitType")>]
            member __.unitType with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.newValueSpecifiedUnits({1}, {2}))"); CompiledName("newValueSpecifiedUnits")>]
            member __.newValueSpecifiedUnits(unitType : float, valueInSpecifiedUnits : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.newValueSpecifiedUnits = {1})"); CompiledName("newValueSpecifiedUnitsAux")>]
            member __.``newValueSpecifiedUnits <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.convertToSpecifiedUnits({1}))"); CompiledName("convertToSpecifiedUnits")>]
            member __.convertToSpecifiedUnits(unitType : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.convertToSpecifiedUnits = {1})"); CompiledName("convertToSpecifiedUnitsAux")>]
            member __.``convertToSpecifiedUnits <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_ANGLETYPE_RAD)"); CompiledName("SVG_ANGLETYPE_RAD1")>]
            member __.SVG_ANGLETYPE_RAD with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_ANGLETYPE_UNKNOWN)"); CompiledName("SVG_ANGLETYPE_UNKNOWN1")>]
            member __.SVG_ANGLETYPE_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_ANGLETYPE_UNSPECIFIED)"); CompiledName("SVG_ANGLETYPE_UNSPECIFIED1")>]
            member __.SVG_ANGLETYPE_UNSPECIFIED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_ANGLETYPE_DEG)"); CompiledName("SVG_ANGLETYPE_DEG1")>]
            member __.SVG_ANGLETYPE_DEG with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_ANGLETYPE_GRAD)"); CompiledName("SVG_ANGLETYPE_GRAD1")>]
            member __.SVG_ANGLETYPE_GRAD with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_767 =


    type FunScript.TypeScript.SVGAnimatedAngle with 

            [<FunScript.JSEmitInline("({0}.animVal)"); CompiledName("animVal")>]
            member __.animVal with get() : FunScript.TypeScript.SVGAngle = failwith "never" and set (v : FunScript.TypeScript.SVGAngle) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.baseVal)"); CompiledName("baseVal")>]
            member __.baseVal with get() : FunScript.TypeScript.SVGAngle = failwith "never" and set (v : FunScript.TypeScript.SVGAngle) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_768 =


    type FunScript.TypeScript.SVGAnimatedBoolean with 

            [<FunScript.JSEmitInline("({0}.animVal)"); CompiledName("animVal1")>]
            member __.animVal with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.baseVal)"); CompiledName("baseVal1")>]
            member __.baseVal with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_769 =


    type FunScript.TypeScript.SVGAnimatedEnumeration with 

            [<FunScript.JSEmitInline("({0}.animVal)"); CompiledName("animVal2")>]
            member __.animVal with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.baseVal)"); CompiledName("baseVal2")>]
            member __.baseVal with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_770 =


    type FunScript.TypeScript.SVGAnimatedInteger with 

            [<FunScript.JSEmitInline("({0}.animVal)"); CompiledName("animVal3")>]
            member __.animVal with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.baseVal)"); CompiledName("baseVal3")>]
            member __.baseVal with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_771 =


    type FunScript.TypeScript.SVGAnimatedLength with 

            [<FunScript.JSEmitInline("({0}.animVal)"); CompiledName("animVal4")>]
            member __.animVal with get() : FunScript.TypeScript.SVGLength = failwith "never" and set (v : FunScript.TypeScript.SVGLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.baseVal)"); CompiledName("baseVal4")>]
            member __.baseVal with get() : FunScript.TypeScript.SVGLength = failwith "never" and set (v : FunScript.TypeScript.SVGLength) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_772 =


    type FunScript.TypeScript.SVGAnimatedLengthList with 

            [<FunScript.JSEmitInline("({0}.animVal)"); CompiledName("animVal5")>]
            member __.animVal with get() : FunScript.TypeScript.SVGLengthList = failwith "never" and set (v : FunScript.TypeScript.SVGLengthList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.baseVal)"); CompiledName("baseVal5")>]
            member __.baseVal with get() : FunScript.TypeScript.SVGLengthList = failwith "never" and set (v : FunScript.TypeScript.SVGLengthList) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_773 =


    type FunScript.TypeScript.SVGAnimatedNumber with 

            [<FunScript.JSEmitInline("({0}.animVal)"); CompiledName("animVal6")>]
            member __.animVal with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.baseVal)"); CompiledName("baseVal6")>]
            member __.baseVal with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_774 =


    type FunScript.TypeScript.SVGAnimatedNumberList with 

            [<FunScript.JSEmitInline("({0}.animVal)"); CompiledName("animVal7")>]
            member __.animVal with get() : FunScript.TypeScript.SVGNumberList = failwith "never" and set (v : FunScript.TypeScript.SVGNumberList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.baseVal)"); CompiledName("baseVal7")>]
            member __.baseVal with get() : FunScript.TypeScript.SVGNumberList = failwith "never" and set (v : FunScript.TypeScript.SVGNumberList) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_775 =


    type FunScript.TypeScript.SVGAnimatedPathData with 

            [<FunScript.JSEmitInline("({0}.pathSegList)"); CompiledName("pathSegList")>]
            member __.pathSegList with get() : FunScript.TypeScript.SVGPathSegList = failwith "never" and set (v : FunScript.TypeScript.SVGPathSegList) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_776 =


    type FunScript.TypeScript.SVGAnimatedPoints with 

            [<FunScript.JSEmitInline("({0}.points)"); CompiledName("points")>]
            member __.points with get() : FunScript.TypeScript.SVGPointList = failwith "never" and set (v : FunScript.TypeScript.SVGPointList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.animatedPoints)"); CompiledName("animatedPoints")>]
            member __.animatedPoints with get() : FunScript.TypeScript.SVGPointList = failwith "never" and set (v : FunScript.TypeScript.SVGPointList) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_777 =


    type FunScript.TypeScript.SVGAnimatedPreserveAspectRatio with 

            [<FunScript.JSEmitInline("({0}.animVal)"); CompiledName("animVal8")>]
            member __.animVal with get() : FunScript.TypeScript.SVGPreserveAspectRatio = failwith "never" and set (v : FunScript.TypeScript.SVGPreserveAspectRatio) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.baseVal)"); CompiledName("baseVal8")>]
            member __.baseVal with get() : FunScript.TypeScript.SVGPreserveAspectRatio = failwith "never" and set (v : FunScript.TypeScript.SVGPreserveAspectRatio) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_778 =


    type FunScript.TypeScript.SVGAnimatedRect with 

            [<FunScript.JSEmitInline("({0}.animVal)"); CompiledName("animVal9")>]
            member __.animVal with get() : FunScript.TypeScript.SVGRect = failwith "never" and set (v : FunScript.TypeScript.SVGRect) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.baseVal)"); CompiledName("baseVal9")>]
            member __.baseVal with get() : FunScript.TypeScript.SVGRect = failwith "never" and set (v : FunScript.TypeScript.SVGRect) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_779 =


    type FunScript.TypeScript.SVGAnimatedString with 

            [<FunScript.JSEmitInline("({0}.animVal)"); CompiledName("animVal10")>]
            member __.animVal with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.baseVal)"); CompiledName("baseVal10")>]
            member __.baseVal with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_780 =


    type FunScript.TypeScript.SVGAnimatedTransformList with 

            [<FunScript.JSEmitInline("({0}.animVal)"); CompiledName("animVal11")>]
            member __.animVal with get() : FunScript.TypeScript.SVGTransformList = failwith "never" and set (v : FunScript.TypeScript.SVGTransformList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.baseVal)"); CompiledName("baseVal11")>]
            member __.baseVal with get() : FunScript.TypeScript.SVGTransformList = failwith "never" and set (v : FunScript.TypeScript.SVGTransformList) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_781 =


    type FunScript.TypeScript.SVGCircleElement with 

            [<FunScript.JSEmitInline("({0}.cx)"); CompiledName("cx")>]
            member __.cx with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.r)"); CompiledName("r")>]
            member __.r with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.cy)"); CompiledName("cy")>]
            member __.cy with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_782 =


    type FunScript.TypeScript.SVGClipPathElement with 

            [<FunScript.JSEmitInline("({0}.clipPathUnits)"); CompiledName("clipPathUnits")>]
            member __.clipPathUnits with get() : FunScript.TypeScript.SVGAnimatedEnumeration = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedEnumeration) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_783 =


    type FunScript.TypeScript.SVGComponentTransferFunctionElement with 

            [<FunScript.JSEmitInline("({0}.tableValues)"); CompiledName("tableValues")>]
            member __.tableValues with get() : FunScript.TypeScript.SVGAnimatedNumberList = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumberList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.slope)"); CompiledName("slope")>]
            member __.slope with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.type)"); CompiledName("_type27")>]
            member __._type with get() : FunScript.TypeScript.SVGAnimatedEnumeration = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedEnumeration) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.exponent)"); CompiledName("exponent")>]
            member __.exponent with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.amplitude)"); CompiledName("amplitude")>]
            member __.amplitude with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.intercept)"); CompiledName("intercept")>]
            member __.intercept with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.offset)"); CompiledName("offset")>]
            member __.offset with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN)"); CompiledName("SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN1")>]
            member __.SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FECOMPONENTTRANSFER_TYPE_TABLE)"); CompiledName("SVG_FECOMPONENTTRANSFER_TYPE_TABLE1")>]
            member __.SVG_FECOMPONENTTRANSFER_TYPE_TABLE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY)"); CompiledName("SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY1")>]
            member __.SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FECOMPONENTTRANSFER_TYPE_GAMMA)"); CompiledName("SVG_FECOMPONENTTRANSFER_TYPE_GAMMA1")>]
            member __.SVG_FECOMPONENTTRANSFER_TYPE_GAMMA with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE)"); CompiledName("SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE1")>]
            member __.SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FECOMPONENTTRANSFER_TYPE_LINEAR)"); CompiledName("SVG_FECOMPONENTTRANSFER_TYPE_LINEAR1")>]
            member __.SVG_FECOMPONENTTRANSFER_TYPE_LINEAR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_784 =


    type FunScript.TypeScript.SVGElement with 

            [<FunScript.JSEmitInline("({0}.onmouseover)"); CompiledName("onmouseover3")>]
            member __.onmouseover with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.viewportElement)"); CompiledName("viewportElement")>]
            member __.viewportElement with get() : FunScript.TypeScript.SVGElement = failwith "never" and set (v : FunScript.TypeScript.SVGElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmousemove)"); CompiledName("onmousemove3")>]
            member __.onmousemove with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmouseout)"); CompiledName("onmouseout3")>]
            member __.onmouseout with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ondblclick)"); CompiledName("ondblclick3")>]
            member __.ondblclick with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onfocusout)"); CompiledName("onfocusout4")>]
            member __.onfocusout with get() : System.Func<FunScript.TypeScript.FocusEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.FocusEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onfocusin)"); CompiledName("onfocusin4")>]
            member __.onfocusin with get() : System.Func<FunScript.TypeScript.FocusEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.FocusEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.xmlbase)"); CompiledName("xmlbase")>]
            member __.xmlbase with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmousedown)"); CompiledName("onmousedown3")>]
            member __.onmousedown with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onload)"); CompiledName("onload8")>]
            member __.onload with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmouseup)"); CompiledName("onmouseup3")>]
            member __.onmouseup with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onclick)"); CompiledName("onclick3")>]
            member __.onclick with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ownerSVGElement)"); CompiledName("ownerSVGElement")>]
            member __.ownerSVGElement with get() : FunScript.TypeScript.SVGSVGElement = failwith "never" and set (v : FunScript.TypeScript.SVGSVGElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.id)"); CompiledName("id3")>]
            member __.id with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerenter\", {1}, {?2}))"); CompiledName("addEventListener1311")>]
            member __.addEventListener_pointerenter(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerout\", {1}, {?2}))"); CompiledName("addEventListener1312")>]
            member __.addEventListener_pointerout(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerdown\", {1}, {?2}))"); CompiledName("addEventListener1313")>]
            member __.addEventListener_pointerdown(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerup\", {1}, {?2}))"); CompiledName("addEventListener1314")>]
            member __.addEventListener_pointerup(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointercancel\", {1}, {?2}))"); CompiledName("addEventListener1315")>]
            member __.addEventListener_pointercancel(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerover\", {1}, {?2}))"); CompiledName("addEventListener1316")>]
            member __.addEventListener_pointerover(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointermove\", {1}, {?2}))"); CompiledName("addEventListener1317")>]
            member __.addEventListener_pointermove(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerleave\", {1}, {?2}))"); CompiledName("addEventListener1318")>]
            member __.addEventListener_pointerleave(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerdown\", {1}, {?2}))"); CompiledName("addEventListener1319")>]
            member __.addEventListener_mspointerdown(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgotpointercapture\", {1}, {?2}))"); CompiledName("addEventListener1320")>]
            member __.addEventListener_msgotpointercapture(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturedoubletap\", {1}, {?2}))"); CompiledName("addEventListener1321")>]
            member __.addEventListener_msgesturedoubletap(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerhover\", {1}, {?2}))"); CompiledName("addEventListener1322")>]
            member __.addEventListener_mspointerhover(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturehold\", {1}, {?2}))"); CompiledName("addEventListener1323")>]
            member __.addEventListener_msgesturehold(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointermove\", {1}, {?2}))"); CompiledName("addEventListener1324")>]
            member __.addEventListener_mspointermove(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturechange\", {1}, {?2}))"); CompiledName("addEventListener1325")>]
            member __.addEventListener_msgesturechange(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturestart\", {1}, {?2}))"); CompiledName("addEventListener1326")>]
            member __.addEventListener_msgesturestart(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointercancel\", {1}, {?2}))"); CompiledName("addEventListener1327")>]
            member __.addEventListener_mspointercancel(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgestureend\", {1}, {?2}))"); CompiledName("addEventListener1328")>]
            member __.addEventListener_msgestureend(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturetap\", {1}, {?2}))"); CompiledName("addEventListener1329")>]
            member __.addEventListener_msgesturetap(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerout\", {1}, {?2}))"); CompiledName("addEventListener1330")>]
            member __.addEventListener_mspointerout(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msinertiastart\", {1}, {?2}))"); CompiledName("addEventListener1331")>]
            member __.addEventListener_msinertiastart(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mslostpointercapture\", {1}, {?2}))"); CompiledName("addEventListener1332")>]
            member __.addEventListener_mslostpointercapture(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerover\", {1}, {?2}))"); CompiledName("addEventListener1333")>]
            member __.addEventListener_mspointerover(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerup\", {1}, {?2}))"); CompiledName("addEventListener1334")>]
            member __.addEventListener_mspointerup(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"lostpointercapture\", {1}, {?2}))"); CompiledName("addEventListener1335")>]
            member __.addEventListener_lostpointercapture(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerenter\", {1}, {?2}))"); CompiledName("addEventListener1336")>]
            member __.addEventListener_mspointerenter(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"gotpointercapture\", {1}, {?2}))"); CompiledName("addEventListener1337")>]
            member __.addEventListener_gotpointercapture(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerleave\", {1}, {?2}))"); CompiledName("addEventListener1338")>]
            member __.addEventListener_mspointerleave(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseover\", {1}, {?2}))"); CompiledName("addEventListener1339")>]
            member __.addEventListener_mouseover(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mousemove\", {1}, {?2}))"); CompiledName("addEventListener1340")>]
            member __.addEventListener_mousemove(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseout\", {1}, {?2}))"); CompiledName("addEventListener1341")>]
            member __.addEventListener_mouseout(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dblclick\", {1}, {?2}))"); CompiledName("addEventListener1342")>]
            member __.addEventListener_dblclick(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"focusout\", {1}, {?2}))"); CompiledName("addEventListener1343")>]
            member __.addEventListener_focusout(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"focusin\", {1}, {?2}))"); CompiledName("addEventListener1344")>]
            member __.addEventListener_focusin(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mousedown\", {1}, {?2}))"); CompiledName("addEventListener1345")>]
            member __.addEventListener_mousedown(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"load\", {1}, {?2}))"); CompiledName("addEventListener1346")>]
            member __.addEventListener_load(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseup\", {1}, {?2}))"); CompiledName("addEventListener1347")>]
            member __.addEventListener_mouseup(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"click\", {1}, {?2}))"); CompiledName("addEventListener1348")>]
            member __.addEventListener_click(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener({1}, {2}, {?3}))"); CompiledName("addEventListener1349")>]
            member __.addEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener = {1})"); CompiledName("addEventListener1349Aux")>]
            member __.``addEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_785 =


    type FunScript.TypeScript.SVGElementInstance with 

            [<FunScript.JSEmitInline("({0}.previousSibling)"); CompiledName("previousSibling2")>]
            member __.previousSibling with get() : FunScript.TypeScript.SVGElementInstance = failwith "never" and set (v : FunScript.TypeScript.SVGElementInstance) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.parentNode)"); CompiledName("parentNode1")>]
            member __.parentNode with get() : FunScript.TypeScript.SVGElementInstance = failwith "never" and set (v : FunScript.TypeScript.SVGElementInstance) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.lastChild)"); CompiledName("lastChild1")>]
            member __.lastChild with get() : FunScript.TypeScript.SVGElementInstance = failwith "never" and set (v : FunScript.TypeScript.SVGElementInstance) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.nextSibling)"); CompiledName("nextSibling2")>]
            member __.nextSibling with get() : FunScript.TypeScript.SVGElementInstance = failwith "never" and set (v : FunScript.TypeScript.SVGElementInstance) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.childNodes)"); CompiledName("childNodes1")>]
            member __.childNodes with get() : FunScript.TypeScript.SVGElementInstanceList = failwith "never" and set (v : FunScript.TypeScript.SVGElementInstanceList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.correspondingUseElement)"); CompiledName("correspondingUseElement")>]
            member __.correspondingUseElement with get() : FunScript.TypeScript.SVGUseElement = failwith "never" and set (v : FunScript.TypeScript.SVGUseElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.correspondingElement)"); CompiledName("correspondingElement")>]
            member __.correspondingElement with get() : FunScript.TypeScript.SVGElement = failwith "never" and set (v : FunScript.TypeScript.SVGElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.firstChild)"); CompiledName("firstChild1")>]
            member __.firstChild with get() : FunScript.TypeScript.SVGElementInstance = failwith "never" and set (v : FunScript.TypeScript.SVGElementInstance) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_786 =


    type FunScript.TypeScript.SVGElementInstanceList with 

            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length38")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.item({1}))"); CompiledName("item26")>]
            member __.item(index : float) : FunScript.TypeScript.SVGElementInstance = failwith "never"
            [<FunScript.JSEmitInline("({0}.item = {1})"); CompiledName("item26Aux")>]
            member __.``item <-``(func : System.Func<float, FunScript.TypeScript.SVGElementInstance>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_787 =


    type FunScript.TypeScript.SVGEllipseElement with 

            [<FunScript.JSEmitInline("({0}.ry)"); CompiledName("ry")>]
            member __.ry with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.cx)"); CompiledName("cx1")>]
            member __.cx with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.rx)"); CompiledName("rx")>]
            member __.rx with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.cy)"); CompiledName("cy1")>]
            member __.cy with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_788 =


    type FunScript.TypeScript.SVGException with 

            [<FunScript.JSEmitInline("({0}.code)"); CompiledName("code9")>]
            member __.code with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.message)"); CompiledName("message7")>]
            member __.message with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.name)"); CompiledName("name33")>]
            member __.name with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toString())"); CompiledName("toString17")>]
            member __.toString() : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toString = {1})"); CompiledName("toString17Aux")>]
            member __.``toString <-``(func : System.Func<string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_MATRIX_NOT_INVERTABLE)"); CompiledName("SVG_MATRIX_NOT_INVERTABLE1")>]
            member __.SVG_MATRIX_NOT_INVERTABLE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_WRONG_TYPE_ERR)"); CompiledName("SVG_WRONG_TYPE_ERR1")>]
            member __.SVG_WRONG_TYPE_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_INVALID_VALUE_ERR)"); CompiledName("SVG_INVALID_VALUE_ERR1")>]
            member __.SVG_INVALID_VALUE_ERR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_789 =


    type FunScript.TypeScript.SVGExternalResourcesRequired with 

            [<FunScript.JSEmitInline("({0}.externalResourcesRequired)"); CompiledName("externalResourcesRequired")>]
            member __.externalResourcesRequired with get() : FunScript.TypeScript.SVGAnimatedBoolean = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedBoolean) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_790 =


    type FunScript.TypeScript.SVGFEBlendElement with 

            [<FunScript.JSEmitInline("({0}.in2)"); CompiledName("in2")>]
            member __.in2 with get() : FunScript.TypeScript.SVGAnimatedString = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedString) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.mode)"); CompiledName("mode1")>]
            member __.mode with get() : FunScript.TypeScript.SVGAnimatedEnumeration = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedEnumeration) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.in1)"); CompiledName("in1")>]
            member __.in1 with get() : FunScript.TypeScript.SVGAnimatedString = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedString) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FEBLEND_MODE_DARKEN)"); CompiledName("SVG_FEBLEND_MODE_DARKEN1")>]
            member __.SVG_FEBLEND_MODE_DARKEN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FEBLEND_MODE_UNKNOWN)"); CompiledName("SVG_FEBLEND_MODE_UNKNOWN1")>]
            member __.SVG_FEBLEND_MODE_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FEBLEND_MODE_MULTIPLY)"); CompiledName("SVG_FEBLEND_MODE_MULTIPLY1")>]
            member __.SVG_FEBLEND_MODE_MULTIPLY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FEBLEND_MODE_NORMAL)"); CompiledName("SVG_FEBLEND_MODE_NORMAL1")>]
            member __.SVG_FEBLEND_MODE_NORMAL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FEBLEND_MODE_SCREEN)"); CompiledName("SVG_FEBLEND_MODE_SCREEN1")>]
            member __.SVG_FEBLEND_MODE_SCREEN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FEBLEND_MODE_LIGHTEN)"); CompiledName("SVG_FEBLEND_MODE_LIGHTEN1")>]
            member __.SVG_FEBLEND_MODE_LIGHTEN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_791 =


    type FunScript.TypeScript.SVGFEColorMatrixElement with 

            [<FunScript.JSEmitInline("({0}.in1)"); CompiledName("in11")>]
            member __.in1 with get() : FunScript.TypeScript.SVGAnimatedString = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedString) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.type)"); CompiledName("_type28")>]
            member __._type with get() : FunScript.TypeScript.SVGAnimatedEnumeration = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedEnumeration) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.values)"); CompiledName("values")>]
            member __.values with get() : FunScript.TypeScript.SVGAnimatedNumberList = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumberList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FECOLORMATRIX_TYPE_SATURATE)"); CompiledName("SVG_FECOLORMATRIX_TYPE_SATURATE1")>]
            member __.SVG_FECOLORMATRIX_TYPE_SATURATE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FECOLORMATRIX_TYPE_UNKNOWN)"); CompiledName("SVG_FECOLORMATRIX_TYPE_UNKNOWN1")>]
            member __.SVG_FECOLORMATRIX_TYPE_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FECOLORMATRIX_TYPE_MATRIX)"); CompiledName("SVG_FECOLORMATRIX_TYPE_MATRIX1")>]
            member __.SVG_FECOLORMATRIX_TYPE_MATRIX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FECOLORMATRIX_TYPE_HUEROTATE)"); CompiledName("SVG_FECOLORMATRIX_TYPE_HUEROTATE1")>]
            member __.SVG_FECOLORMATRIX_TYPE_HUEROTATE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA)"); CompiledName("SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA1")>]
            member __.SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_792 =


    type FunScript.TypeScript.SVGFEComponentTransferElement with 

            [<FunScript.JSEmitInline("({0}.in1)"); CompiledName("in12")>]
            member __.in1 with get() : FunScript.TypeScript.SVGAnimatedString = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedString) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_793 =


    type FunScript.TypeScript.SVGFECompositeElement with 

            [<FunScript.JSEmitInline("({0}.operator)"); CompiledName("_operator")>]
            member __._operator with get() : FunScript.TypeScript.SVGAnimatedEnumeration = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedEnumeration) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.in2)"); CompiledName("in21")>]
            member __.in2 with get() : FunScript.TypeScript.SVGAnimatedString = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedString) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.k2)"); CompiledName("k2")>]
            member __.k2 with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.k1)"); CompiledName("k1")>]
            member __.k1 with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.k3)"); CompiledName("k3")>]
            member __.k3 with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.in1)"); CompiledName("in13")>]
            member __.in1 with get() : FunScript.TypeScript.SVGAnimatedString = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedString) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.k4)"); CompiledName("k4")>]
            member __.k4 with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FECOMPOSITE_OPERATOR_OUT)"); CompiledName("SVG_FECOMPOSITE_OPERATOR_OUT1")>]
            member __.SVG_FECOMPOSITE_OPERATOR_OUT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FECOMPOSITE_OPERATOR_OVER)"); CompiledName("SVG_FECOMPOSITE_OPERATOR_OVER1")>]
            member __.SVG_FECOMPOSITE_OPERATOR_OVER with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FECOMPOSITE_OPERATOR_XOR)"); CompiledName("SVG_FECOMPOSITE_OPERATOR_XOR1")>]
            member __.SVG_FECOMPOSITE_OPERATOR_XOR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FECOMPOSITE_OPERATOR_ARITHMETIC)"); CompiledName("SVG_FECOMPOSITE_OPERATOR_ARITHMETIC1")>]
            member __.SVG_FECOMPOSITE_OPERATOR_ARITHMETIC with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FECOMPOSITE_OPERATOR_UNKNOWN)"); CompiledName("SVG_FECOMPOSITE_OPERATOR_UNKNOWN1")>]
            member __.SVG_FECOMPOSITE_OPERATOR_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FECOMPOSITE_OPERATOR_IN)"); CompiledName("SVG_FECOMPOSITE_OPERATOR_IN1")>]
            member __.SVG_FECOMPOSITE_OPERATOR_IN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_FECOMPOSITE_OPERATOR_ATOP)"); CompiledName("SVG_FECOMPOSITE_OPERATOR_ATOP1")>]
            member __.SVG_FECOMPOSITE_OPERATOR_ATOP with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_794 =


    type FunScript.TypeScript.SVGFEConvolveMatrixElement with 

            [<FunScript.JSEmitInline("({0}.orderY)"); CompiledName("orderY")>]
            member __.orderY with get() : FunScript.TypeScript.SVGAnimatedInteger = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedInteger) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.kernelUnitLengthY)"); CompiledName("kernelUnitLengthY")>]
            member __.kernelUnitLengthY with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.orderX)"); CompiledName("orderX")>]
            member __.orderX with get() : FunScript.TypeScript.SVGAnimatedInteger = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedInteger) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.preserveAlpha)"); CompiledName("preserveAlpha")>]
            member __.preserveAlpha with get() : FunScript.TypeScript.SVGAnimatedBoolean = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedBoolean) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.kernelMatrix)"); CompiledName("kernelMatrix")>]
            member __.kernelMatrix with get() : FunScript.TypeScript.SVGAnimatedNumberList = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumberList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.edgeMode)"); CompiledName("edgeMode")>]
            member __.edgeMode with get() : FunScript.TypeScript.SVGAnimatedEnumeration = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedEnumeration) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.kernelUnitLengthX)"); CompiledName("kernelUnitLengthX")>]
            member __.kernelUnitLengthX with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.bias)"); CompiledName("bias")>]
            member __.bias with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.targetX)"); CompiledName("targetX")>]
            member __.targetX with get() : FunScript.TypeScript.SVGAnimatedInteger = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedInteger) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.targetY)"); CompiledName("targetY")>]
            member __.targetY with get() : FunScript.TypeScript.SVGAnimatedInteger = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedInteger) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.divisor)"); CompiledName("divisor")>]
            member __.divisor with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.in1)"); CompiledName("in14")>]
            member __.in1 with get() : FunScript.TypeScript.SVGAnimatedString = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedString) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_EDGEMODE_WRAP)"); CompiledName("SVG_EDGEMODE_WRAP1")>]
            member __.SVG_EDGEMODE_WRAP with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_EDGEMODE_DUPLICATE)"); CompiledName("SVG_EDGEMODE_DUPLICATE1")>]
            member __.SVG_EDGEMODE_DUPLICATE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_EDGEMODE_UNKNOWN)"); CompiledName("SVG_EDGEMODE_UNKNOWN1")>]
            member __.SVG_EDGEMODE_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_EDGEMODE_NONE)"); CompiledName("SVG_EDGEMODE_NONE1")>]
            member __.SVG_EDGEMODE_NONE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_795 =


    type FunScript.TypeScript.SVGFEDiffuseLightingElement with 

            [<FunScript.JSEmitInline("({0}.kernelUnitLengthY)"); CompiledName("kernelUnitLengthY1")>]
            member __.kernelUnitLengthY with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.surfaceScale)"); CompiledName("surfaceScale")>]
            member __.surfaceScale with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.in1)"); CompiledName("in15")>]
            member __.in1 with get() : FunScript.TypeScript.SVGAnimatedString = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedString) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.kernelUnitLengthX)"); CompiledName("kernelUnitLengthX1")>]
            member __.kernelUnitLengthX with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.diffuseConstant)"); CompiledName("diffuseConstant")>]
            member __.diffuseConstant with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_796 =


    type FunScript.TypeScript.SVGFEDisplacementMapElement with 

            [<FunScript.JSEmitInline("({0}.in2)"); CompiledName("in22")>]
            member __.in2 with get() : FunScript.TypeScript.SVGAnimatedString = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedString) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.xChannelSelector)"); CompiledName("xChannelSelector")>]
            member __.xChannelSelector with get() : FunScript.TypeScript.SVGAnimatedEnumeration = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedEnumeration) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.yChannelSelector)"); CompiledName("yChannelSelector")>]
            member __.yChannelSelector with get() : FunScript.TypeScript.SVGAnimatedEnumeration = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedEnumeration) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.scale)"); CompiledName("scale3")>]
            member __.scale with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.in1)"); CompiledName("in16")>]
            member __.in1 with get() : FunScript.TypeScript.SVGAnimatedString = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedString) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_CHANNEL_B)"); CompiledName("SVG_CHANNEL_B1")>]
            member __.SVG_CHANNEL_B with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_CHANNEL_R)"); CompiledName("SVG_CHANNEL_R1")>]
            member __.SVG_CHANNEL_R with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_CHANNEL_G)"); CompiledName("SVG_CHANNEL_G1")>]
            member __.SVG_CHANNEL_G with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_CHANNEL_UNKNOWN)"); CompiledName("SVG_CHANNEL_UNKNOWN1")>]
            member __.SVG_CHANNEL_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_CHANNEL_A)"); CompiledName("SVG_CHANNEL_A1")>]
            member __.SVG_CHANNEL_A with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_797 =


    type FunScript.TypeScript.SVGFEDistantLightElement with 

            [<FunScript.JSEmitInline("({0}.azimuth)"); CompiledName("azimuth")>]
            member __.azimuth with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.elevation)"); CompiledName("elevation")>]
            member __.elevation with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_798 =


    type FunScript.TypeScript.SVGFEGaussianBlurElement with 

            [<FunScript.JSEmitInline("({0}.stdDeviationX)"); CompiledName("stdDeviationX")>]
            member __.stdDeviationX with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.in1)"); CompiledName("in17")>]
            member __.in1 with get() : FunScript.TypeScript.SVGAnimatedString = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedString) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.stdDeviationY)"); CompiledName("stdDeviationY")>]
            member __.stdDeviationY with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setStdDeviation({1}, {2}))"); CompiledName("setStdDeviation")>]
            member __.setStdDeviation(stdDeviationX : float, stdDeviationY : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setStdDeviation = {1})"); CompiledName("setStdDeviationAux")>]
            member __.``setStdDeviation <-``(func : System.Func<float, float, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_799 =


    type FunScript.TypeScript.SVGFEImageElement with 

            [<FunScript.JSEmitInline("({0}.preserveAspectRatio)"); CompiledName("preserveAspectRatio")>]
            member __.preserveAspectRatio with get() : FunScript.TypeScript.SVGAnimatedPreserveAspectRatio = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedPreserveAspectRatio) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_800 =


    type FunScript.TypeScript.SVGFEMergeNodeElement with 

            [<FunScript.JSEmitInline("({0}.in1)"); CompiledName("in18")>]
            member __.in1 with get() : FunScript.TypeScript.SVGAnimatedString = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedString) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_801 =


    type FunScript.TypeScript.SVGFEMorphologyElement with 

            [<FunScript.JSEmitInline("({0}.operator)"); CompiledName("_operator1")>]
            member __._operator with get() : FunScript.TypeScript.SVGAnimatedEnumeration = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedEnumeration) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.radiusX)"); CompiledName("radiusX")>]
            member __.radiusX with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.radiusY)"); CompiledName("radiusY")>]
            member __.radiusY with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.in1)"); CompiledName("in19")>]
            member __.in1 with get() : FunScript.TypeScript.SVGAnimatedString = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedString) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_MORPHOLOGY_OPERATOR_UNKNOWN)"); CompiledName("SVG_MORPHOLOGY_OPERATOR_UNKNOWN1")>]
            member __.SVG_MORPHOLOGY_OPERATOR_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_MORPHOLOGY_OPERATOR_ERODE)"); CompiledName("SVG_MORPHOLOGY_OPERATOR_ERODE1")>]
            member __.SVG_MORPHOLOGY_OPERATOR_ERODE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_MORPHOLOGY_OPERATOR_DILATE)"); CompiledName("SVG_MORPHOLOGY_OPERATOR_DILATE1")>]
            member __.SVG_MORPHOLOGY_OPERATOR_DILATE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_802 =


    type FunScript.TypeScript.SVGFEOffsetElement with 

            [<FunScript.JSEmitInline("({0}.dy)"); CompiledName("dy")>]
            member __.dy with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.in1)"); CompiledName("in110")>]
            member __.in1 with get() : FunScript.TypeScript.SVGAnimatedString = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedString) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.dx)"); CompiledName("dx")>]
            member __.dx with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_803 =


    type FunScript.TypeScript.SVGFEPointLightElement with 

            [<FunScript.JSEmitInline("({0}.y)"); CompiledName("y4")>]
            member __.y with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x)"); CompiledName("x4")>]
            member __.x with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.z)"); CompiledName("z2")>]
            member __.z with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_804 =


    type FunScript.TypeScript.SVGFESpecularLightingElement with 

            [<FunScript.JSEmitInline("({0}.kernelUnitLengthY)"); CompiledName("kernelUnitLengthY2")>]
            member __.kernelUnitLengthY with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.surfaceScale)"); CompiledName("surfaceScale1")>]
            member __.surfaceScale with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.specularExponent)"); CompiledName("specularExponent")>]
            member __.specularExponent with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.in1)"); CompiledName("in111")>]
            member __.in1 with get() : FunScript.TypeScript.SVGAnimatedString = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedString) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.kernelUnitLengthX)"); CompiledName("kernelUnitLengthX2")>]
            member __.kernelUnitLengthX with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.specularConstant)"); CompiledName("specularConstant")>]
            member __.specularConstant with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_805 =


    type FunScript.TypeScript.SVGFESpotLightElement with 

            [<FunScript.JSEmitInline("({0}.pointsAtY)"); CompiledName("pointsAtY")>]
            member __.pointsAtY with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.y)"); CompiledName("y5")>]
            member __.y with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.limitingConeAngle)"); CompiledName("limitingConeAngle")>]
            member __.limitingConeAngle with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.specularExponent)"); CompiledName("specularExponent1")>]
            member __.specularExponent with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x)"); CompiledName("x5")>]
            member __.x with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pointsAtZ)"); CompiledName("pointsAtZ")>]
            member __.pointsAtZ with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.z)"); CompiledName("z3")>]
            member __.z with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pointsAtX)"); CompiledName("pointsAtX")>]
            member __.pointsAtX with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_806 =


    type FunScript.TypeScript.SVGFETileElement with 

            [<FunScript.JSEmitInline("({0}.in1)"); CompiledName("in112")>]
            member __.in1 with get() : FunScript.TypeScript.SVGAnimatedString = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedString) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_807 =


    type FunScript.TypeScript.SVGFETurbulenceElement with 

            [<FunScript.JSEmitInline("({0}.baseFrequencyX)"); CompiledName("baseFrequencyX")>]
            member __.baseFrequencyX with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.numOctaves)"); CompiledName("numOctaves")>]
            member __.numOctaves with get() : FunScript.TypeScript.SVGAnimatedInteger = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedInteger) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.type)"); CompiledName("_type29")>]
            member __._type with get() : FunScript.TypeScript.SVGAnimatedEnumeration = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedEnumeration) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.baseFrequencyY)"); CompiledName("baseFrequencyY")>]
            member __.baseFrequencyY with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.stitchTiles)"); CompiledName("stitchTiles")>]
            member __.stitchTiles with get() : FunScript.TypeScript.SVGAnimatedEnumeration = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedEnumeration) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.seed)"); CompiledName("seed")>]
            member __.seed with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_STITCHTYPE_UNKNOWN)"); CompiledName("SVG_STITCHTYPE_UNKNOWN1")>]
            member __.SVG_STITCHTYPE_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_STITCHTYPE_NOSTITCH)"); CompiledName("SVG_STITCHTYPE_NOSTITCH1")>]
            member __.SVG_STITCHTYPE_NOSTITCH with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_TURBULENCE_TYPE_UNKNOWN)"); CompiledName("SVG_TURBULENCE_TYPE_UNKNOWN1")>]
            member __.SVG_TURBULENCE_TYPE_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_TURBULENCE_TYPE_TURBULENCE)"); CompiledName("SVG_TURBULENCE_TYPE_TURBULENCE1")>]
            member __.SVG_TURBULENCE_TYPE_TURBULENCE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_TURBULENCE_TYPE_FRACTALNOISE)"); CompiledName("SVG_TURBULENCE_TYPE_FRACTALNOISE1")>]
            member __.SVG_TURBULENCE_TYPE_FRACTALNOISE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_STITCHTYPE_STITCH)"); CompiledName("SVG_STITCHTYPE_STITCH1")>]
            member __.SVG_STITCHTYPE_STITCH with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_808 =


    type FunScript.TypeScript.SVGFilterElement with 

            [<FunScript.JSEmitInline("({0}.y)"); CompiledName("y6")>]
            member __.y with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.width)"); CompiledName("width23")>]
            member __.width with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.filterResX)"); CompiledName("filterResX")>]
            member __.filterResX with get() : FunScript.TypeScript.SVGAnimatedInteger = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedInteger) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.filterUnits)"); CompiledName("filterUnits")>]
            member __.filterUnits with get() : FunScript.TypeScript.SVGAnimatedEnumeration = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedEnumeration) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.primitiveUnits)"); CompiledName("primitiveUnits")>]
            member __.primitiveUnits with get() : FunScript.TypeScript.SVGAnimatedEnumeration = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedEnumeration) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x)"); CompiledName("x6")>]
            member __.x with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.height)"); CompiledName("height20")>]
            member __.height with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.filterResY)"); CompiledName("filterResY")>]
            member __.filterResY with get() : FunScript.TypeScript.SVGAnimatedInteger = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedInteger) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setFilterRes({1}, {2}))"); CompiledName("setFilterRes")>]
            member __.setFilterRes(filterResX : float, filterResY : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setFilterRes = {1})"); CompiledName("setFilterResAux")>]
            member __.``setFilterRes <-``(func : System.Func<float, float, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_809 =


    type FunScript.TypeScript.SVGFilterPrimitiveStandardAttributes with 

            [<FunScript.JSEmitInline("({0}.y)"); CompiledName("y7")>]
            member __.y with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.width)"); CompiledName("width24")>]
            member __.width with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x)"); CompiledName("x7")>]
            member __.x with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.height)"); CompiledName("height21")>]
            member __.height with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.result)"); CompiledName("result5")>]
            member __.result with get() : FunScript.TypeScript.SVGAnimatedString = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedString) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_810 =


    type FunScript.TypeScript.SVGFitToViewBox with 

            [<FunScript.JSEmitInline("({0}.viewBox)"); CompiledName("viewBox")>]
            member __.viewBox with get() : FunScript.TypeScript.SVGAnimatedRect = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedRect) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.preserveAspectRatio)"); CompiledName("preserveAspectRatio1")>]
            member __.preserveAspectRatio with get() : FunScript.TypeScript.SVGAnimatedPreserveAspectRatio = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedPreserveAspectRatio) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_811 =


    type FunScript.TypeScript.SVGGradientElement with 

            [<FunScript.JSEmitInline("({0}.spreadMethod)"); CompiledName("spreadMethod")>]
            member __.spreadMethod with get() : FunScript.TypeScript.SVGAnimatedEnumeration = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedEnumeration) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.gradientTransform)"); CompiledName("gradientTransform")>]
            member __.gradientTransform with get() : FunScript.TypeScript.SVGAnimatedTransformList = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedTransformList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.gradientUnits)"); CompiledName("gradientUnits")>]
            member __.gradientUnits with get() : FunScript.TypeScript.SVGAnimatedEnumeration = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedEnumeration) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_SPREADMETHOD_REFLECT)"); CompiledName("SVG_SPREADMETHOD_REFLECT1")>]
            member __.SVG_SPREADMETHOD_REFLECT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_SPREADMETHOD_PAD)"); CompiledName("SVG_SPREADMETHOD_PAD1")>]
            member __.SVG_SPREADMETHOD_PAD with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_SPREADMETHOD_UNKNOWN)"); CompiledName("SVG_SPREADMETHOD_UNKNOWN1")>]
            member __.SVG_SPREADMETHOD_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_SPREADMETHOD_REPEAT)"); CompiledName("SVG_SPREADMETHOD_REPEAT1")>]
            member __.SVG_SPREADMETHOD_REPEAT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_812 =


    type FunScript.TypeScript.SVGImageElement with 

            [<FunScript.JSEmitInline("({0}.y)"); CompiledName("y8")>]
            member __.y with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.width)"); CompiledName("width25")>]
            member __.width with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.preserveAspectRatio)"); CompiledName("preserveAspectRatio2")>]
            member __.preserveAspectRatio with get() : FunScript.TypeScript.SVGAnimatedPreserveAspectRatio = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedPreserveAspectRatio) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x)"); CompiledName("x8")>]
            member __.x with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.height)"); CompiledName("height22")>]
            member __.height with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_813 =


    type FunScript.TypeScript.SVGLangSpace with 

            [<FunScript.JSEmitInline("({0}.xmllang)"); CompiledName("xmllang")>]
            member __.xmllang with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.xmlspace)"); CompiledName("xmlspace")>]
            member __.xmlspace with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_814 =


    type FunScript.TypeScript.SVGLength with 

            [<FunScript.JSEmitInline("({0}.valueAsString)"); CompiledName("valueAsString1")>]
            member __.valueAsString with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.valueInSpecifiedUnits)"); CompiledName("valueInSpecifiedUnits1")>]
            member __.valueInSpecifiedUnits with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.value)"); CompiledName("value14")>]
            member __.value with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.unitType)"); CompiledName("unitType1")>]
            member __.unitType with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.newValueSpecifiedUnits({1}, {2}))"); CompiledName("newValueSpecifiedUnits1")>]
            member __.newValueSpecifiedUnits(unitType : float, valueInSpecifiedUnits : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.newValueSpecifiedUnits = {1})"); CompiledName("newValueSpecifiedUnits1Aux")>]
            member __.``newValueSpecifiedUnits <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.convertToSpecifiedUnits({1}))"); CompiledName("convertToSpecifiedUnits1")>]
            member __.convertToSpecifiedUnits(unitType : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.convertToSpecifiedUnits = {1})"); CompiledName("convertToSpecifiedUnits1Aux")>]
            member __.``convertToSpecifiedUnits <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_LENGTHTYPE_NUMBER)"); CompiledName("SVG_LENGTHTYPE_NUMBER1")>]
            member __.SVG_LENGTHTYPE_NUMBER with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_LENGTHTYPE_CM)"); CompiledName("SVG_LENGTHTYPE_CM1")>]
            member __.SVG_LENGTHTYPE_CM with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_LENGTHTYPE_PC)"); CompiledName("SVG_LENGTHTYPE_PC1")>]
            member __.SVG_LENGTHTYPE_PC with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_LENGTHTYPE_PERCENTAGE)"); CompiledName("SVG_LENGTHTYPE_PERCENTAGE1")>]
            member __.SVG_LENGTHTYPE_PERCENTAGE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_LENGTHTYPE_MM)"); CompiledName("SVG_LENGTHTYPE_MM1")>]
            member __.SVG_LENGTHTYPE_MM with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_LENGTHTYPE_PT)"); CompiledName("SVG_LENGTHTYPE_PT1")>]
            member __.SVG_LENGTHTYPE_PT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_LENGTHTYPE_IN)"); CompiledName("SVG_LENGTHTYPE_IN1")>]
            member __.SVG_LENGTHTYPE_IN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_LENGTHTYPE_EMS)"); CompiledName("SVG_LENGTHTYPE_EMS1")>]
            member __.SVG_LENGTHTYPE_EMS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_LENGTHTYPE_PX)"); CompiledName("SVG_LENGTHTYPE_PX1")>]
            member __.SVG_LENGTHTYPE_PX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_LENGTHTYPE_UNKNOWN)"); CompiledName("SVG_LENGTHTYPE_UNKNOWN1")>]
            member __.SVG_LENGTHTYPE_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_LENGTHTYPE_EXS)"); CompiledName("SVG_LENGTHTYPE_EXS1")>]
            member __.SVG_LENGTHTYPE_EXS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_815 =


    type FunScript.TypeScript.SVGLengthList with 

            [<FunScript.JSEmitInline("({0}.numberOfItems)"); CompiledName("numberOfItems")>]
            member __.numberOfItems with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.replaceItem({1}, {2}))"); CompiledName("replaceItem")>]
            member __.replaceItem(newItem : FunScript.TypeScript.SVGLength, index : float) : FunScript.TypeScript.SVGLength = failwith "never"
            [<FunScript.JSEmitInline("({0}.replaceItem = {1})"); CompiledName("replaceItemAux")>]
            member __.``replaceItem <-``(func : System.Func<FunScript.TypeScript.SVGLength, float, FunScript.TypeScript.SVGLength>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getItem({1}))"); CompiledName("getItem")>]
            member __.getItem(index : float) : FunScript.TypeScript.SVGLength = failwith "never"
            [<FunScript.JSEmitInline("({0}.getItem = {1})"); CompiledName("getItemAux")>]
            member __.``getItem <-``(func : System.Func<float, FunScript.TypeScript.SVGLength>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clear())"); CompiledName("clear8")>]
            member __.clear() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clear = {1})"); CompiledName("clear8Aux")>]
            member __.``clear <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.appendItem({1}))"); CompiledName("appendItem")>]
            member __.appendItem(newItem : FunScript.TypeScript.SVGLength) : FunScript.TypeScript.SVGLength = failwith "never"
            [<FunScript.JSEmitInline("({0}.appendItem = {1})"); CompiledName("appendItemAux")>]
            member __.``appendItem <-``(func : System.Func<FunScript.TypeScript.SVGLength, FunScript.TypeScript.SVGLength>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initialize({1}))"); CompiledName("initialize")>]
            member __.initialize(newItem : FunScript.TypeScript.SVGLength) : FunScript.TypeScript.SVGLength = failwith "never"
            [<FunScript.JSEmitInline("({0}.initialize = {1})"); CompiledName("initializeAux")>]
            member __.``initialize <-``(func : System.Func<FunScript.TypeScript.SVGLength, FunScript.TypeScript.SVGLength>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeItem({1}))"); CompiledName("removeItem")>]
            member __.removeItem(index : float) : FunScript.TypeScript.SVGLength = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeItem = {1})"); CompiledName("removeItemAux")>]
            member __.``removeItem <-``(func : System.Func<float, FunScript.TypeScript.SVGLength>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.insertItemBefore({1}, {2}))"); CompiledName("insertItemBefore")>]
            member __.insertItemBefore(newItem : FunScript.TypeScript.SVGLength, index : float) : FunScript.TypeScript.SVGLength = failwith "never"
            [<FunScript.JSEmitInline("({0}.insertItemBefore = {1})"); CompiledName("insertItemBeforeAux")>]
            member __.``insertItemBefore <-``(func : System.Func<FunScript.TypeScript.SVGLength, float, FunScript.TypeScript.SVGLength>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_816 =


    type FunScript.TypeScript.SVGLineElement with 

            [<FunScript.JSEmitInline("({0}.y1)"); CompiledName("y11")>]
            member __.y1 with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x2)"); CompiledName("x21")>]
            member __.x2 with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x1)"); CompiledName("x11")>]
            member __.x1 with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.y2)"); CompiledName("y21")>]
            member __.y2 with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_817 =


    type FunScript.TypeScript.SVGLinearGradientElement with 

            [<FunScript.JSEmitInline("({0}.y1)"); CompiledName("y12")>]
            member __.y1 with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x2)"); CompiledName("x22")>]
            member __.x2 with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x1)"); CompiledName("x12")>]
            member __.x1 with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.y2)"); CompiledName("y22")>]
            member __.y2 with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_818 =


    type FunScript.TypeScript.SVGLocatable with 

            [<FunScript.JSEmitInline("({0}.farthestViewportElement)"); CompiledName("farthestViewportElement")>]
            member __.farthestViewportElement with get() : FunScript.TypeScript.SVGElement = failwith "never" and set (v : FunScript.TypeScript.SVGElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.nearestViewportElement)"); CompiledName("nearestViewportElement")>]
            member __.nearestViewportElement with get() : FunScript.TypeScript.SVGElement = failwith "never" and set (v : FunScript.TypeScript.SVGElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getBBox())"); CompiledName("getBBox")>]
            member __.getBBox() : FunScript.TypeScript.SVGRect = failwith "never"
            [<FunScript.JSEmitInline("({0}.getBBox = {1})"); CompiledName("getBBoxAux")>]
            member __.``getBBox <-``(func : System.Func<FunScript.TypeScript.SVGRect>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getTransformToElement({1}))"); CompiledName("getTransformToElement")>]
            member __.getTransformToElement(element : FunScript.TypeScript.SVGElement) : FunScript.TypeScript.SVGMatrix = failwith "never"
            [<FunScript.JSEmitInline("({0}.getTransformToElement = {1})"); CompiledName("getTransformToElementAux")>]
            member __.``getTransformToElement <-``(func : System.Func<FunScript.TypeScript.SVGElement, FunScript.TypeScript.SVGMatrix>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getCTM())"); CompiledName("getCTM")>]
            member __.getCTM() : FunScript.TypeScript.SVGMatrix = failwith "never"
            [<FunScript.JSEmitInline("({0}.getCTM = {1})"); CompiledName("getCTMAux")>]
            member __.``getCTM <-``(func : System.Func<FunScript.TypeScript.SVGMatrix>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getScreenCTM())"); CompiledName("getScreenCTM")>]
            member __.getScreenCTM() : FunScript.TypeScript.SVGMatrix = failwith "never"
            [<FunScript.JSEmitInline("({0}.getScreenCTM = {1})"); CompiledName("getScreenCTMAux")>]
            member __.``getScreenCTM <-``(func : System.Func<FunScript.TypeScript.SVGMatrix>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_819 =


    type FunScript.TypeScript.SVGMarkerElement with 

            [<FunScript.JSEmitInline("({0}.orientType)"); CompiledName("orientType")>]
            member __.orientType with get() : FunScript.TypeScript.SVGAnimatedEnumeration = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedEnumeration) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.markerUnits)"); CompiledName("markerUnits")>]
            member __.markerUnits with get() : FunScript.TypeScript.SVGAnimatedEnumeration = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedEnumeration) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.markerWidth)"); CompiledName("markerWidth")>]
            member __.markerWidth with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.markerHeight)"); CompiledName("markerHeight")>]
            member __.markerHeight with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.orientAngle)"); CompiledName("orientAngle")>]
            member __.orientAngle with get() : FunScript.TypeScript.SVGAnimatedAngle = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedAngle) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.refY)"); CompiledName("refY")>]
            member __.refY with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.refX)"); CompiledName("refX")>]
            member __.refX with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setOrientToAngle({1}))"); CompiledName("setOrientToAngle")>]
            member __.setOrientToAngle(angle : FunScript.TypeScript.SVGAngle) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setOrientToAngle = {1})"); CompiledName("setOrientToAngleAux")>]
            member __.``setOrientToAngle <-``(func : System.Func<FunScript.TypeScript.SVGAngle, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setOrientToAuto())"); CompiledName("setOrientToAuto")>]
            member __.setOrientToAuto() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setOrientToAuto = {1})"); CompiledName("setOrientToAutoAux")>]
            member __.``setOrientToAuto <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_MARKER_ORIENT_UNKNOWN)"); CompiledName("SVG_MARKER_ORIENT_UNKNOWN1")>]
            member __.SVG_MARKER_ORIENT_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_MARKER_ORIENT_ANGLE)"); CompiledName("SVG_MARKER_ORIENT_ANGLE1")>]
            member __.SVG_MARKER_ORIENT_ANGLE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_MARKERUNITS_UNKNOWN)"); CompiledName("SVG_MARKERUNITS_UNKNOWN1")>]
            member __.SVG_MARKERUNITS_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_MARKERUNITS_STROKEWIDTH)"); CompiledName("SVG_MARKERUNITS_STROKEWIDTH1")>]
            member __.SVG_MARKERUNITS_STROKEWIDTH with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_MARKER_ORIENT_AUTO)"); CompiledName("SVG_MARKER_ORIENT_AUTO1")>]
            member __.SVG_MARKER_ORIENT_AUTO with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_MARKERUNITS_USERSPACEONUSE)"); CompiledName("SVG_MARKERUNITS_USERSPACEONUSE1")>]
            member __.SVG_MARKERUNITS_USERSPACEONUSE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_820 =


    type FunScript.TypeScript.SVGMaskElement with 

            [<FunScript.JSEmitInline("({0}.y)"); CompiledName("y9")>]
            member __.y with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.width)"); CompiledName("width26")>]
            member __.width with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.maskUnits)"); CompiledName("maskUnits")>]
            member __.maskUnits with get() : FunScript.TypeScript.SVGAnimatedEnumeration = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedEnumeration) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.maskContentUnits)"); CompiledName("maskContentUnits")>]
            member __.maskContentUnits with get() : FunScript.TypeScript.SVGAnimatedEnumeration = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedEnumeration) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x)"); CompiledName("x9")>]
            member __.x with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.height)"); CompiledName("height23")>]
            member __.height with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_821 =


    type FunScript.TypeScript.SVGMatrix with 

            [<FunScript.JSEmitInline("({0}.e)"); CompiledName("e1")>]
            member __.e with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.c)"); CompiledName("c1")>]
            member __.c with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.a)"); CompiledName("a1")>]
            member __.a with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.b)"); CompiledName("b1")>]
            member __.b with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.d)"); CompiledName("d1")>]
            member __.d with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.f)"); CompiledName("f1")>]
            member __.f with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.multiply({1}))"); CompiledName("multiply1")>]
            member __.multiply(secondMatrix : FunScript.TypeScript.SVGMatrix) : FunScript.TypeScript.SVGMatrix = failwith "never"
            [<FunScript.JSEmitInline("({0}.multiply = {1})"); CompiledName("multiply1Aux")>]
            member __.``multiply <-``(func : System.Func<FunScript.TypeScript.SVGMatrix, FunScript.TypeScript.SVGMatrix>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.flipY())"); CompiledName("flipY")>]
            member __.flipY() : FunScript.TypeScript.SVGMatrix = failwith "never"
            [<FunScript.JSEmitInline("({0}.flipY = {1})"); CompiledName("flipYAux")>]
            member __.``flipY <-``(func : System.Func<FunScript.TypeScript.SVGMatrix>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.skewY({1}))"); CompiledName("skewY1")>]
            member __.skewY(angle : float) : FunScript.TypeScript.SVGMatrix = failwith "never"
            [<FunScript.JSEmitInline("({0}.skewY = {1})"); CompiledName("skewY1Aux")>]
            member __.``skewY <-``(func : System.Func<float, FunScript.TypeScript.SVGMatrix>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.inverse())"); CompiledName("inverse1")>]
            member __.inverse() : FunScript.TypeScript.SVGMatrix = failwith "never"
            [<FunScript.JSEmitInline("({0}.inverse = {1})"); CompiledName("inverse1Aux")>]
            member __.``inverse <-``(func : System.Func<FunScript.TypeScript.SVGMatrix>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.scaleNonUniform({1}, {2}))"); CompiledName("scaleNonUniform")>]
            member __.scaleNonUniform(scaleFactorX : float, scaleFactorY : float) : FunScript.TypeScript.SVGMatrix = failwith "never"
            [<FunScript.JSEmitInline("({0}.scaleNonUniform = {1})"); CompiledName("scaleNonUniformAux")>]
            member __.``scaleNonUniform <-``(func : System.Func<float, float, FunScript.TypeScript.SVGMatrix>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.rotate({1}))"); CompiledName("rotate2")>]
            member __.rotate(angle : float) : FunScript.TypeScript.SVGMatrix = failwith "never"
            [<FunScript.JSEmitInline("({0}.rotate = {1})"); CompiledName("rotate2Aux")>]
            member __.``rotate <-``(func : System.Func<float, FunScript.TypeScript.SVGMatrix>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.flipX())"); CompiledName("flipX")>]
            member __.flipX() : FunScript.TypeScript.SVGMatrix = failwith "never"
            [<FunScript.JSEmitInline("({0}.flipX = {1})"); CompiledName("flipXAux")>]
            member __.``flipX <-``(func : System.Func<FunScript.TypeScript.SVGMatrix>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.translate({1}, {2}))"); CompiledName("translate2")>]
            member __.translate(x : float, y : float) : FunScript.TypeScript.SVGMatrix = failwith "never"
            [<FunScript.JSEmitInline("({0}.translate = {1})"); CompiledName("translate2Aux")>]
            member __.``translate <-``(func : System.Func<float, float, FunScript.TypeScript.SVGMatrix>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.scale({1}))"); CompiledName("scale4")>]
            member __.scale(scaleFactor : float) : FunScript.TypeScript.SVGMatrix = failwith "never"
            [<FunScript.JSEmitInline("({0}.scale = {1})"); CompiledName("scale4Aux")>]
            member __.``scale <-``(func : System.Func<float, FunScript.TypeScript.SVGMatrix>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.rotateFromVector({1}, {2}))"); CompiledName("rotateFromVector")>]
            member __.rotateFromVector(x : float, y : float) : FunScript.TypeScript.SVGMatrix = failwith "never"
            [<FunScript.JSEmitInline("({0}.rotateFromVector = {1})"); CompiledName("rotateFromVectorAux")>]
            member __.``rotateFromVector <-``(func : System.Func<float, float, FunScript.TypeScript.SVGMatrix>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.skewX({1}))"); CompiledName("skewX1")>]
            member __.skewX(angle : float) : FunScript.TypeScript.SVGMatrix = failwith "never"
            [<FunScript.JSEmitInline("({0}.skewX = {1})"); CompiledName("skewX1Aux")>]
            member __.``skewX <-``(func : System.Func<float, FunScript.TypeScript.SVGMatrix>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_822 =


    type FunScript.TypeScript.SVGNumber with 

            [<FunScript.JSEmitInline("({0}.value)"); CompiledName("value15")>]
            member __.value with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_823 =


    type FunScript.TypeScript.SVGNumberList with 

            [<FunScript.JSEmitInline("({0}.numberOfItems)"); CompiledName("numberOfItems1")>]
            member __.numberOfItems with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.replaceItem({1}, {2}))"); CompiledName("replaceItem1")>]
            member __.replaceItem(newItem : FunScript.TypeScript.SVGNumber, index : float) : FunScript.TypeScript.SVGNumber = failwith "never"
            [<FunScript.JSEmitInline("({0}.replaceItem = {1})"); CompiledName("replaceItem1Aux")>]
            member __.``replaceItem <-``(func : System.Func<FunScript.TypeScript.SVGNumber, float, FunScript.TypeScript.SVGNumber>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getItem({1}))"); CompiledName("getItem1")>]
            member __.getItem(index : float) : FunScript.TypeScript.SVGNumber = failwith "never"
            [<FunScript.JSEmitInline("({0}.getItem = {1})"); CompiledName("getItem1Aux")>]
            member __.``getItem <-``(func : System.Func<float, FunScript.TypeScript.SVGNumber>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clear())"); CompiledName("clear9")>]
            member __.clear() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clear = {1})"); CompiledName("clear9Aux")>]
            member __.``clear <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.appendItem({1}))"); CompiledName("appendItem1")>]
            member __.appendItem(newItem : FunScript.TypeScript.SVGNumber) : FunScript.TypeScript.SVGNumber = failwith "never"
            [<FunScript.JSEmitInline("({0}.appendItem = {1})"); CompiledName("appendItem1Aux")>]
            member __.``appendItem <-``(func : System.Func<FunScript.TypeScript.SVGNumber, FunScript.TypeScript.SVGNumber>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initialize({1}))"); CompiledName("initialize1")>]
            member __.initialize(newItem : FunScript.TypeScript.SVGNumber) : FunScript.TypeScript.SVGNumber = failwith "never"
            [<FunScript.JSEmitInline("({0}.initialize = {1})"); CompiledName("initialize1Aux")>]
            member __.``initialize <-``(func : System.Func<FunScript.TypeScript.SVGNumber, FunScript.TypeScript.SVGNumber>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeItem({1}))"); CompiledName("removeItem1")>]
            member __.removeItem(index : float) : FunScript.TypeScript.SVGNumber = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeItem = {1})"); CompiledName("removeItem1Aux")>]
            member __.``removeItem <-``(func : System.Func<float, FunScript.TypeScript.SVGNumber>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.insertItemBefore({1}, {2}))"); CompiledName("insertItemBefore1")>]
            member __.insertItemBefore(newItem : FunScript.TypeScript.SVGNumber, index : float) : FunScript.TypeScript.SVGNumber = failwith "never"
            [<FunScript.JSEmitInline("({0}.insertItemBefore = {1})"); CompiledName("insertItemBefore1Aux")>]
            member __.``insertItemBefore <-``(func : System.Func<FunScript.TypeScript.SVGNumber, float, FunScript.TypeScript.SVGNumber>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_824 =


    type FunScript.TypeScript.SVGPathElement with 

            [<FunScript.JSEmitInline("({0}.getPathSegAtLength({1}))"); CompiledName("getPathSegAtLength")>]
            member __.getPathSegAtLength(distance : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.getPathSegAtLength = {1})"); CompiledName("getPathSegAtLengthAux")>]
            member __.``getPathSegAtLength <-``(func : System.Func<float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getPointAtLength({1}))"); CompiledName("getPointAtLength")>]
            member __.getPointAtLength(distance : float) : FunScript.TypeScript.SVGPoint = failwith "never"
            [<FunScript.JSEmitInline("({0}.getPointAtLength = {1})"); CompiledName("getPointAtLengthAux")>]
            member __.``getPointAtLength <-``(func : System.Func<float, FunScript.TypeScript.SVGPoint>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGPathSegCurvetoQuadraticAbs({1}, {2}, {3}, {4}))"); CompiledName("createSVGPathSegCurvetoQuadraticAbs")>]
            member __.createSVGPathSegCurvetoQuadraticAbs(x : float, y : float, x1 : float, y1 : float) : FunScript.TypeScript.SVGPathSegCurvetoQuadraticAbs = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGPathSegCurvetoQuadraticAbs = {1})"); CompiledName("createSVGPathSegCurvetoQuadraticAbsAux")>]
            member __.``createSVGPathSegCurvetoQuadraticAbs <-``(func : System.Func<float, float, float, float, FunScript.TypeScript.SVGPathSegCurvetoQuadraticAbs>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGPathSegLinetoRel({1}, {2}))"); CompiledName("createSVGPathSegLinetoRel")>]
            member __.createSVGPathSegLinetoRel(x : float, y : float) : FunScript.TypeScript.SVGPathSegLinetoRel = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGPathSegLinetoRel = {1})"); CompiledName("createSVGPathSegLinetoRelAux")>]
            member __.``createSVGPathSegLinetoRel <-``(func : System.Func<float, float, FunScript.TypeScript.SVGPathSegLinetoRel>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGPathSegCurvetoQuadraticRel({1}, {2}, {3}, {4}))"); CompiledName("createSVGPathSegCurvetoQuadraticRel")>]
            member __.createSVGPathSegCurvetoQuadraticRel(x : float, y : float, x1 : float, y1 : float) : FunScript.TypeScript.SVGPathSegCurvetoQuadraticRel = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGPathSegCurvetoQuadraticRel = {1})"); CompiledName("createSVGPathSegCurvetoQuadraticRelAux")>]
            member __.``createSVGPathSegCurvetoQuadraticRel <-``(func : System.Func<float, float, float, float, FunScript.TypeScript.SVGPathSegCurvetoQuadraticRel>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGPathSegCurvetoCubicAbs({1}, {2}, {3}, {4}, {5}, {6}))"); CompiledName("createSVGPathSegCurvetoCubicAbs")>]
            member __.createSVGPathSegCurvetoCubicAbs(x : float, y : float, x1 : float, y1 : float, x2 : float, y2 : float) : FunScript.TypeScript.SVGPathSegCurvetoCubicAbs = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGPathSegCurvetoCubicAbs = {1})"); CompiledName("createSVGPathSegCurvetoCubicAbsAux")>]
            member __.``createSVGPathSegCurvetoCubicAbs <-``(func : System.Func<float, float, float, float, float, float, FunScript.TypeScript.SVGPathSegCurvetoCubicAbs>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGPathSegLinetoAbs({1}, {2}))"); CompiledName("createSVGPathSegLinetoAbs")>]
            member __.createSVGPathSegLinetoAbs(x : float, y : float) : FunScript.TypeScript.SVGPathSegLinetoAbs = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGPathSegLinetoAbs = {1})"); CompiledName("createSVGPathSegLinetoAbsAux")>]
            member __.``createSVGPathSegLinetoAbs <-``(func : System.Func<float, float, FunScript.TypeScript.SVGPathSegLinetoAbs>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGPathSegClosePath())"); CompiledName("createSVGPathSegClosePath")>]
            member __.createSVGPathSegClosePath() : FunScript.TypeScript.SVGPathSegClosePath = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGPathSegClosePath = {1})"); CompiledName("createSVGPathSegClosePathAux")>]
            member __.``createSVGPathSegClosePath <-``(func : System.Func<FunScript.TypeScript.SVGPathSegClosePath>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGPathSegCurvetoCubicRel({1}, {2}, {3}, {4}, {5}, {6}))"); CompiledName("createSVGPathSegCurvetoCubicRel")>]
            member __.createSVGPathSegCurvetoCubicRel(x : float, y : float, x1 : float, y1 : float, x2 : float, y2 : float) : FunScript.TypeScript.SVGPathSegCurvetoCubicRel = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGPathSegCurvetoCubicRel = {1})"); CompiledName("createSVGPathSegCurvetoCubicRelAux")>]
            member __.``createSVGPathSegCurvetoCubicRel <-``(func : System.Func<float, float, float, float, float, float, FunScript.TypeScript.SVGPathSegCurvetoCubicRel>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGPathSegCurvetoQuadraticSmoothRel({1}, {2}))"); CompiledName("createSVGPathSegCurvetoQuadraticSmoothRel")>]
            member __.createSVGPathSegCurvetoQuadraticSmoothRel(x : float, y : float) : FunScript.TypeScript.SVGPathSegCurvetoQuadraticSmoothRel = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGPathSegCurvetoQuadraticSmoothRel = {1})"); CompiledName("createSVGPathSegCurvetoQuadraticSmoothRelAux")>]
            member __.``createSVGPathSegCurvetoQuadraticSmoothRel <-``(func : System.Func<float, float, FunScript.TypeScript.SVGPathSegCurvetoQuadraticSmoothRel>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGPathSegMovetoRel({1}, {2}))"); CompiledName("createSVGPathSegMovetoRel")>]
            member __.createSVGPathSegMovetoRel(x : float, y : float) : FunScript.TypeScript.SVGPathSegMovetoRel = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGPathSegMovetoRel = {1})"); CompiledName("createSVGPathSegMovetoRelAux")>]
            member __.``createSVGPathSegMovetoRel <-``(func : System.Func<float, float, FunScript.TypeScript.SVGPathSegMovetoRel>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGPathSegCurvetoCubicSmoothAbs({1}, {2}, {3}, {4}))"); CompiledName("createSVGPathSegCurvetoCubicSmoothAbs")>]
            member __.createSVGPathSegCurvetoCubicSmoothAbs(x : float, y : float, x2 : float, y2 : float) : FunScript.TypeScript.SVGPathSegCurvetoCubicSmoothAbs = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGPathSegCurvetoCubicSmoothAbs = {1})"); CompiledName("createSVGPathSegCurvetoCubicSmoothAbsAux")>]
            member __.``createSVGPathSegCurvetoCubicSmoothAbs <-``(func : System.Func<float, float, float, float, FunScript.TypeScript.SVGPathSegCurvetoCubicSmoothAbs>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGPathSegMovetoAbs({1}, {2}))"); CompiledName("createSVGPathSegMovetoAbs")>]
            member __.createSVGPathSegMovetoAbs(x : float, y : float) : FunScript.TypeScript.SVGPathSegMovetoAbs = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGPathSegMovetoAbs = {1})"); CompiledName("createSVGPathSegMovetoAbsAux")>]
            member __.``createSVGPathSegMovetoAbs <-``(func : System.Func<float, float, FunScript.TypeScript.SVGPathSegMovetoAbs>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGPathSegLinetoVerticalRel({1}))"); CompiledName("createSVGPathSegLinetoVerticalRel")>]
            member __.createSVGPathSegLinetoVerticalRel(y : float) : FunScript.TypeScript.SVGPathSegLinetoVerticalRel = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGPathSegLinetoVerticalRel = {1})"); CompiledName("createSVGPathSegLinetoVerticalRelAux")>]
            member __.``createSVGPathSegLinetoVerticalRel <-``(func : System.Func<float, FunScript.TypeScript.SVGPathSegLinetoVerticalRel>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGPathSegArcRel({1}, {2}, {3}, {4}, {5}, {6}, {7}))"); CompiledName("createSVGPathSegArcRel")>]
            member __.createSVGPathSegArcRel(x : float, y : float, r1 : float, r2 : float, angle : float, largeArcFlag : bool, sweepFlag : bool) : FunScript.TypeScript.SVGPathSegArcRel = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGPathSegArcRel = {1})"); CompiledName("createSVGPathSegArcRelAux")>]
            member __.``createSVGPathSegArcRel <-``(func : System.Func<float, float, float, float, float, bool, bool, FunScript.TypeScript.SVGPathSegArcRel>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGPathSegCurvetoQuadraticSmoothAbs({1}, {2}))"); CompiledName("createSVGPathSegCurvetoQuadraticSmoothAbs")>]
            member __.createSVGPathSegCurvetoQuadraticSmoothAbs(x : float, y : float) : FunScript.TypeScript.SVGPathSegCurvetoQuadraticSmoothAbs = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGPathSegCurvetoQuadraticSmoothAbs = {1})"); CompiledName("createSVGPathSegCurvetoQuadraticSmoothAbsAux")>]
            member __.``createSVGPathSegCurvetoQuadraticSmoothAbs <-``(func : System.Func<float, float, FunScript.TypeScript.SVGPathSegCurvetoQuadraticSmoothAbs>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGPathSegLinetoHorizontalRel({1}))"); CompiledName("createSVGPathSegLinetoHorizontalRel")>]
            member __.createSVGPathSegLinetoHorizontalRel(x : float) : FunScript.TypeScript.SVGPathSegLinetoHorizontalRel = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGPathSegLinetoHorizontalRel = {1})"); CompiledName("createSVGPathSegLinetoHorizontalRelAux")>]
            member __.``createSVGPathSegLinetoHorizontalRel <-``(func : System.Func<float, FunScript.TypeScript.SVGPathSegLinetoHorizontalRel>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getTotalLength())"); CompiledName("getTotalLength")>]
            member __.getTotalLength() : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.getTotalLength = {1})"); CompiledName("getTotalLengthAux")>]
            member __.``getTotalLength <-``(func : System.Func<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGPathSegCurvetoCubicSmoothRel({1}, {2}, {3}, {4}))"); CompiledName("createSVGPathSegCurvetoCubicSmoothRel")>]
            member __.createSVGPathSegCurvetoCubicSmoothRel(x : float, y : float, x2 : float, y2 : float) : FunScript.TypeScript.SVGPathSegCurvetoCubicSmoothRel = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGPathSegCurvetoCubicSmoothRel = {1})"); CompiledName("createSVGPathSegCurvetoCubicSmoothRelAux")>]
            member __.``createSVGPathSegCurvetoCubicSmoothRel <-``(func : System.Func<float, float, float, float, FunScript.TypeScript.SVGPathSegCurvetoCubicSmoothRel>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGPathSegLinetoHorizontalAbs({1}))"); CompiledName("createSVGPathSegLinetoHorizontalAbs")>]
            member __.createSVGPathSegLinetoHorizontalAbs(x : float) : FunScript.TypeScript.SVGPathSegLinetoHorizontalAbs = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGPathSegLinetoHorizontalAbs = {1})"); CompiledName("createSVGPathSegLinetoHorizontalAbsAux")>]
            member __.``createSVGPathSegLinetoHorizontalAbs <-``(func : System.Func<float, FunScript.TypeScript.SVGPathSegLinetoHorizontalAbs>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGPathSegLinetoVerticalAbs({1}))"); CompiledName("createSVGPathSegLinetoVerticalAbs")>]
            member __.createSVGPathSegLinetoVerticalAbs(y : float) : FunScript.TypeScript.SVGPathSegLinetoVerticalAbs = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGPathSegLinetoVerticalAbs = {1})"); CompiledName("createSVGPathSegLinetoVerticalAbsAux")>]
            member __.``createSVGPathSegLinetoVerticalAbs <-``(func : System.Func<float, FunScript.TypeScript.SVGPathSegLinetoVerticalAbs>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGPathSegArcAbs({1}, {2}, {3}, {4}, {5}, {6}, {7}))"); CompiledName("createSVGPathSegArcAbs")>]
            member __.createSVGPathSegArcAbs(x : float, y : float, r1 : float, r2 : float, angle : float, largeArcFlag : bool, sweepFlag : bool) : FunScript.TypeScript.SVGPathSegArcAbs = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGPathSegArcAbs = {1})"); CompiledName("createSVGPathSegArcAbsAux")>]
            member __.``createSVGPathSegArcAbs <-``(func : System.Func<float, float, float, float, float, bool, bool, FunScript.TypeScript.SVGPathSegArcAbs>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_825 =


    type FunScript.TypeScript.SVGPathSeg with 

            [<FunScript.JSEmitInline("({0}.pathSegType)"); CompiledName("pathSegType")>]
            member __.pathSegType with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pathSegTypeAsLetter)"); CompiledName("pathSegTypeAsLetter")>]
            member __.pathSegTypeAsLetter with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PATHSEG_MOVETO_REL)"); CompiledName("PATHSEG_MOVETO_REL1")>]
            member __.PATHSEG_MOVETO_REL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PATHSEG_LINETO_VERTICAL_REL)"); CompiledName("PATHSEG_LINETO_VERTICAL_REL1")>]
            member __.PATHSEG_LINETO_VERTICAL_REL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS)"); CompiledName("PATHSEG_CURVETO_CUBIC_SMOOTH_ABS1")>]
            member __.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PATHSEG_CURVETO_QUADRATIC_REL)"); CompiledName("PATHSEG_CURVETO_QUADRATIC_REL1")>]
            member __.PATHSEG_CURVETO_QUADRATIC_REL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PATHSEG_CURVETO_CUBIC_ABS)"); CompiledName("PATHSEG_CURVETO_CUBIC_ABS1")>]
            member __.PATHSEG_CURVETO_CUBIC_ABS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PATHSEG_LINETO_HORIZONTAL_ABS)"); CompiledName("PATHSEG_LINETO_HORIZONTAL_ABS1")>]
            member __.PATHSEG_LINETO_HORIZONTAL_ABS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PATHSEG_CURVETO_QUADRATIC_ABS)"); CompiledName("PATHSEG_CURVETO_QUADRATIC_ABS1")>]
            member __.PATHSEG_CURVETO_QUADRATIC_ABS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PATHSEG_LINETO_ABS)"); CompiledName("PATHSEG_LINETO_ABS1")>]
            member __.PATHSEG_LINETO_ABS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PATHSEG_CLOSEPATH)"); CompiledName("PATHSEG_CLOSEPATH1")>]
            member __.PATHSEG_CLOSEPATH with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PATHSEG_LINETO_HORIZONTAL_REL)"); CompiledName("PATHSEG_LINETO_HORIZONTAL_REL1")>]
            member __.PATHSEG_LINETO_HORIZONTAL_REL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PATHSEG_CURVETO_CUBIC_SMOOTH_REL)"); CompiledName("PATHSEG_CURVETO_CUBIC_SMOOTH_REL1")>]
            member __.PATHSEG_CURVETO_CUBIC_SMOOTH_REL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PATHSEG_LINETO_REL)"); CompiledName("PATHSEG_LINETO_REL1")>]
            member __.PATHSEG_LINETO_REL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS)"); CompiledName("PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS1")>]
            member __.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PATHSEG_ARC_REL)"); CompiledName("PATHSEG_ARC_REL1")>]
            member __.PATHSEG_ARC_REL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PATHSEG_CURVETO_CUBIC_REL)"); CompiledName("PATHSEG_CURVETO_CUBIC_REL1")>]
            member __.PATHSEG_CURVETO_CUBIC_REL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PATHSEG_UNKNOWN)"); CompiledName("PATHSEG_UNKNOWN1")>]
            member __.PATHSEG_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PATHSEG_LINETO_VERTICAL_ABS)"); CompiledName("PATHSEG_LINETO_VERTICAL_ABS1")>]
            member __.PATHSEG_LINETO_VERTICAL_ABS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PATHSEG_ARC_ABS)"); CompiledName("PATHSEG_ARC_ABS1")>]
            member __.PATHSEG_ARC_ABS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PATHSEG_MOVETO_ABS)"); CompiledName("PATHSEG_MOVETO_ABS1")>]
            member __.PATHSEG_MOVETO_ABS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL)"); CompiledName("PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL1")>]
            member __.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_826 =


    type FunScript.TypeScript.SVGPathSegArcAbs with 

            [<FunScript.JSEmitInline("({0}.y)"); CompiledName("y10")>]
            member __.y with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.sweepFlag)"); CompiledName("sweepFlag")>]
            member __.sweepFlag with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.r2)"); CompiledName("r2")>]
            member __.r2 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x)"); CompiledName("x10")>]
            member __.x with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.angle)"); CompiledName("angle")>]
            member __.angle with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.r1)"); CompiledName("r1")>]
            member __.r1 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.largeArcFlag)"); CompiledName("largeArcFlag")>]
            member __.largeArcFlag with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_827 =


    type FunScript.TypeScript.SVGPathSegArcRel with 

            [<FunScript.JSEmitInline("({0}.y)"); CompiledName("y13")>]
            member __.y with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.sweepFlag)"); CompiledName("sweepFlag1")>]
            member __.sweepFlag with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.r2)"); CompiledName("r21")>]
            member __.r2 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x)"); CompiledName("x13")>]
            member __.x with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.angle)"); CompiledName("angle1")>]
            member __.angle with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.r1)"); CompiledName("r11")>]
            member __.r1 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.largeArcFlag)"); CompiledName("largeArcFlag1")>]
            member __.largeArcFlag with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_828 =


    type FunScript.TypeScript.SVGPathSegCurvetoCubicAbs with 

            [<FunScript.JSEmitInline("({0}.y)"); CompiledName("y14")>]
            member __.y with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.y1)"); CompiledName("y15")>]
            member __.y1 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x2)"); CompiledName("x23")>]
            member __.x2 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x)"); CompiledName("x14")>]
            member __.x with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x1)"); CompiledName("x15")>]
            member __.x1 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.y2)"); CompiledName("y23")>]
            member __.y2 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_829 =


    type FunScript.TypeScript.SVGPathSegCurvetoCubicRel with 

            [<FunScript.JSEmitInline("({0}.y)"); CompiledName("y16")>]
            member __.y with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.y1)"); CompiledName("y17")>]
            member __.y1 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x2)"); CompiledName("x24")>]
            member __.x2 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x)"); CompiledName("x16")>]
            member __.x with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x1)"); CompiledName("x17")>]
            member __.x1 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.y2)"); CompiledName("y24")>]
            member __.y2 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_830 =


    type FunScript.TypeScript.SVGPathSegCurvetoCubicSmoothAbs with 

            [<FunScript.JSEmitInline("({0}.y)"); CompiledName("y18")>]
            member __.y with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x2)"); CompiledName("x25")>]
            member __.x2 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x)"); CompiledName("x18")>]
            member __.x with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.y2)"); CompiledName("y25")>]
            member __.y2 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_831 =


    type FunScript.TypeScript.SVGPathSegCurvetoCubicSmoothRel with 

            [<FunScript.JSEmitInline("({0}.y)"); CompiledName("y19")>]
            member __.y with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x2)"); CompiledName("x26")>]
            member __.x2 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x)"); CompiledName("x19")>]
            member __.x with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.y2)"); CompiledName("y26")>]
            member __.y2 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_832 =


    type FunScript.TypeScript.SVGPathSegCurvetoQuadraticAbs with 

            [<FunScript.JSEmitInline("({0}.y)"); CompiledName("y20")>]
            member __.y with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.y1)"); CompiledName("y110")>]
            member __.y1 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x)"); CompiledName("x20")>]
            member __.x with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x1)"); CompiledName("x110")>]
            member __.x1 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_833 =


    type FunScript.TypeScript.SVGPathSegCurvetoQuadraticRel with 

            [<FunScript.JSEmitInline("({0}.y)"); CompiledName("y27")>]
            member __.y with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.y1)"); CompiledName("y111")>]
            member __.y1 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x)"); CompiledName("x27")>]
            member __.x with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x1)"); CompiledName("x111")>]
            member __.x1 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_834 =


    type FunScript.TypeScript.SVGPathSegCurvetoQuadraticSmoothAbs with 

            [<FunScript.JSEmitInline("({0}.y)"); CompiledName("y28")>]
            member __.y with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x)"); CompiledName("x28")>]
            member __.x with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_835 =


    type FunScript.TypeScript.SVGPathSegCurvetoQuadraticSmoothRel with 

            [<FunScript.JSEmitInline("({0}.y)"); CompiledName("y29")>]
            member __.y with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x)"); CompiledName("x29")>]
            member __.x with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_836 =


    type FunScript.TypeScript.SVGPathSegLinetoAbs with 

            [<FunScript.JSEmitInline("({0}.y)"); CompiledName("y30")>]
            member __.y with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x)"); CompiledName("x30")>]
            member __.x with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_837 =


    type FunScript.TypeScript.SVGPathSegLinetoHorizontalAbs with 

            [<FunScript.JSEmitInline("({0}.x)"); CompiledName("x31")>]
            member __.x with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_838 =


    type FunScript.TypeScript.SVGPathSegLinetoHorizontalRel with 

            [<FunScript.JSEmitInline("({0}.x)"); CompiledName("x32")>]
            member __.x with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_839 =


    type FunScript.TypeScript.SVGPathSegLinetoRel with 

            [<FunScript.JSEmitInline("({0}.y)"); CompiledName("y31")>]
            member __.y with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x)"); CompiledName("x33")>]
            member __.x with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_840 =


    type FunScript.TypeScript.SVGPathSegLinetoVerticalAbs with 

            [<FunScript.JSEmitInline("({0}.y)"); CompiledName("y32")>]
            member __.y with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_841 =


    type FunScript.TypeScript.SVGPathSegLinetoVerticalRel with 

            [<FunScript.JSEmitInline("({0}.y)"); CompiledName("y33")>]
            member __.y with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_842 =


    type FunScript.TypeScript.SVGPathSegList with 

            [<FunScript.JSEmitInline("({0}.numberOfItems)"); CompiledName("numberOfItems2")>]
            member __.numberOfItems with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.replaceItem({1}, {2}))"); CompiledName("replaceItem2")>]
            member __.replaceItem(newItem : FunScript.TypeScript.SVGPathSeg, index : float) : FunScript.TypeScript.SVGPathSeg = failwith "never"
            [<FunScript.JSEmitInline("({0}.replaceItem = {1})"); CompiledName("replaceItem2Aux")>]
            member __.``replaceItem <-``(func : System.Func<FunScript.TypeScript.SVGPathSeg, float, FunScript.TypeScript.SVGPathSeg>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getItem({1}))"); CompiledName("getItem2")>]
            member __.getItem(index : float) : FunScript.TypeScript.SVGPathSeg = failwith "never"
            [<FunScript.JSEmitInline("({0}.getItem = {1})"); CompiledName("getItem2Aux")>]
            member __.``getItem <-``(func : System.Func<float, FunScript.TypeScript.SVGPathSeg>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clear())"); CompiledName("clear10")>]
            member __.clear() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clear = {1})"); CompiledName("clear10Aux")>]
            member __.``clear <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.appendItem({1}))"); CompiledName("appendItem2")>]
            member __.appendItem(newItem : FunScript.TypeScript.SVGPathSeg) : FunScript.TypeScript.SVGPathSeg = failwith "never"
            [<FunScript.JSEmitInline("({0}.appendItem = {1})"); CompiledName("appendItem2Aux")>]
            member __.``appendItem <-``(func : System.Func<FunScript.TypeScript.SVGPathSeg, FunScript.TypeScript.SVGPathSeg>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initialize({1}))"); CompiledName("initialize2")>]
            member __.initialize(newItem : FunScript.TypeScript.SVGPathSeg) : FunScript.TypeScript.SVGPathSeg = failwith "never"
            [<FunScript.JSEmitInline("({0}.initialize = {1})"); CompiledName("initialize2Aux")>]
            member __.``initialize <-``(func : System.Func<FunScript.TypeScript.SVGPathSeg, FunScript.TypeScript.SVGPathSeg>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeItem({1}))"); CompiledName("removeItem2")>]
            member __.removeItem(index : float) : FunScript.TypeScript.SVGPathSeg = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeItem = {1})"); CompiledName("removeItem2Aux")>]
            member __.``removeItem <-``(func : System.Func<float, FunScript.TypeScript.SVGPathSeg>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.insertItemBefore({1}, {2}))"); CompiledName("insertItemBefore2")>]
            member __.insertItemBefore(newItem : FunScript.TypeScript.SVGPathSeg, index : float) : FunScript.TypeScript.SVGPathSeg = failwith "never"
            [<FunScript.JSEmitInline("({0}.insertItemBefore = {1})"); CompiledName("insertItemBefore2Aux")>]
            member __.``insertItemBefore <-``(func : System.Func<FunScript.TypeScript.SVGPathSeg, float, FunScript.TypeScript.SVGPathSeg>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_843 =


    type FunScript.TypeScript.SVGPathSegMovetoAbs with 

            [<FunScript.JSEmitInline("({0}.y)"); CompiledName("y34")>]
            member __.y with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x)"); CompiledName("x34")>]
            member __.x with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_844 =


    type FunScript.TypeScript.SVGPathSegMovetoRel with 

            [<FunScript.JSEmitInline("({0}.y)"); CompiledName("y35")>]
            member __.y with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x)"); CompiledName("x35")>]
            member __.x with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_845 =


    type FunScript.TypeScript.SVGPatternElement with 

            [<FunScript.JSEmitInline("({0}.patternUnits)"); CompiledName("patternUnits")>]
            member __.patternUnits with get() : FunScript.TypeScript.SVGAnimatedEnumeration = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedEnumeration) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.y)"); CompiledName("y36")>]
            member __.y with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.width)"); CompiledName("width27")>]
            member __.width with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x)"); CompiledName("x36")>]
            member __.x with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.patternContentUnits)"); CompiledName("patternContentUnits")>]
            member __.patternContentUnits with get() : FunScript.TypeScript.SVGAnimatedEnumeration = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedEnumeration) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.patternTransform)"); CompiledName("patternTransform")>]
            member __.patternTransform with get() : FunScript.TypeScript.SVGAnimatedTransformList = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedTransformList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.height)"); CompiledName("height24")>]
            member __.height with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_846 =


    type FunScript.TypeScript.SVGPoint with 

            [<FunScript.JSEmitInline("({0}.y)"); CompiledName("y37")>]
            member __.y with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x)"); CompiledName("x37")>]
            member __.x with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.matrixTransform({1}))"); CompiledName("matrixTransform")>]
            member __.matrixTransform(matrix : FunScript.TypeScript.SVGMatrix) : FunScript.TypeScript.SVGPoint = failwith "never"
            [<FunScript.JSEmitInline("({0}.matrixTransform = {1})"); CompiledName("matrixTransformAux")>]
            member __.``matrixTransform <-``(func : System.Func<FunScript.TypeScript.SVGMatrix, FunScript.TypeScript.SVGPoint>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_847 =


    type FunScript.TypeScript.SVGPointList with 

            [<FunScript.JSEmitInline("({0}.numberOfItems)"); CompiledName("numberOfItems3")>]
            member __.numberOfItems with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.replaceItem({1}, {2}))"); CompiledName("replaceItem3")>]
            member __.replaceItem(newItem : FunScript.TypeScript.SVGPoint, index : float) : FunScript.TypeScript.SVGPoint = failwith "never"
            [<FunScript.JSEmitInline("({0}.replaceItem = {1})"); CompiledName("replaceItem3Aux")>]
            member __.``replaceItem <-``(func : System.Func<FunScript.TypeScript.SVGPoint, float, FunScript.TypeScript.SVGPoint>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getItem({1}))"); CompiledName("getItem3")>]
            member __.getItem(index : float) : FunScript.TypeScript.SVGPoint = failwith "never"
            [<FunScript.JSEmitInline("({0}.getItem = {1})"); CompiledName("getItem3Aux")>]
            member __.``getItem <-``(func : System.Func<float, FunScript.TypeScript.SVGPoint>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clear())"); CompiledName("clear11")>]
            member __.clear() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clear = {1})"); CompiledName("clear11Aux")>]
            member __.``clear <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.appendItem({1}))"); CompiledName("appendItem3")>]
            member __.appendItem(newItem : FunScript.TypeScript.SVGPoint) : FunScript.TypeScript.SVGPoint = failwith "never"
            [<FunScript.JSEmitInline("({0}.appendItem = {1})"); CompiledName("appendItem3Aux")>]
            member __.``appendItem <-``(func : System.Func<FunScript.TypeScript.SVGPoint, FunScript.TypeScript.SVGPoint>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initialize({1}))"); CompiledName("initialize3")>]
            member __.initialize(newItem : FunScript.TypeScript.SVGPoint) : FunScript.TypeScript.SVGPoint = failwith "never"
            [<FunScript.JSEmitInline("({0}.initialize = {1})"); CompiledName("initialize3Aux")>]
            member __.``initialize <-``(func : System.Func<FunScript.TypeScript.SVGPoint, FunScript.TypeScript.SVGPoint>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeItem({1}))"); CompiledName("removeItem3")>]
            member __.removeItem(index : float) : FunScript.TypeScript.SVGPoint = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeItem = {1})"); CompiledName("removeItem3Aux")>]
            member __.``removeItem <-``(func : System.Func<float, FunScript.TypeScript.SVGPoint>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.insertItemBefore({1}, {2}))"); CompiledName("insertItemBefore3")>]
            member __.insertItemBefore(newItem : FunScript.TypeScript.SVGPoint, index : float) : FunScript.TypeScript.SVGPoint = failwith "never"
            [<FunScript.JSEmitInline("({0}.insertItemBefore = {1})"); CompiledName("insertItemBefore3Aux")>]
            member __.``insertItemBefore <-``(func : System.Func<FunScript.TypeScript.SVGPoint, float, FunScript.TypeScript.SVGPoint>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_848 =


    type FunScript.TypeScript.SVGPreserveAspectRatio with 

            [<FunScript.JSEmitInline("({0}.align)"); CompiledName("align16")>]
            member __.align with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.meetOrSlice)"); CompiledName("meetOrSlice")>]
            member __.meetOrSlice with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_PRESERVEASPECTRATIO_NONE)"); CompiledName("SVG_PRESERVEASPECTRATIO_NONE1")>]
            member __.SVG_PRESERVEASPECTRATIO_NONE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_PRESERVEASPECTRATIO_XMINYMID)"); CompiledName("SVG_PRESERVEASPECTRATIO_XMINYMID1")>]
            member __.SVG_PRESERVEASPECTRATIO_XMINYMID with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_PRESERVEASPECTRATIO_XMAXYMIN)"); CompiledName("SVG_PRESERVEASPECTRATIO_XMAXYMIN1")>]
            member __.SVG_PRESERVEASPECTRATIO_XMAXYMIN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_PRESERVEASPECTRATIO_XMINYMAX)"); CompiledName("SVG_PRESERVEASPECTRATIO_XMINYMAX1")>]
            member __.SVG_PRESERVEASPECTRATIO_XMINYMAX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_PRESERVEASPECTRATIO_XMAXYMAX)"); CompiledName("SVG_PRESERVEASPECTRATIO_XMAXYMAX1")>]
            member __.SVG_PRESERVEASPECTRATIO_XMAXYMAX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_MEETORSLICE_UNKNOWN)"); CompiledName("SVG_MEETORSLICE_UNKNOWN1")>]
            member __.SVG_MEETORSLICE_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_PRESERVEASPECTRATIO_XMAXYMID)"); CompiledName("SVG_PRESERVEASPECTRATIO_XMAXYMID1")>]
            member __.SVG_PRESERVEASPECTRATIO_XMAXYMID with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_PRESERVEASPECTRATIO_XMIDYMAX)"); CompiledName("SVG_PRESERVEASPECTRATIO_XMIDYMAX1")>]
            member __.SVG_PRESERVEASPECTRATIO_XMIDYMAX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_PRESERVEASPECTRATIO_XMINYMIN)"); CompiledName("SVG_PRESERVEASPECTRATIO_XMINYMIN1")>]
            member __.SVG_PRESERVEASPECTRATIO_XMINYMIN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_MEETORSLICE_MEET)"); CompiledName("SVG_MEETORSLICE_MEET1")>]
            member __.SVG_MEETORSLICE_MEET with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_PRESERVEASPECTRATIO_XMIDYMID)"); CompiledName("SVG_PRESERVEASPECTRATIO_XMIDYMID1")>]
            member __.SVG_PRESERVEASPECTRATIO_XMIDYMID with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_PRESERVEASPECTRATIO_XMIDYMIN)"); CompiledName("SVG_PRESERVEASPECTRATIO_XMIDYMIN1")>]
            member __.SVG_PRESERVEASPECTRATIO_XMIDYMIN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_MEETORSLICE_SLICE)"); CompiledName("SVG_MEETORSLICE_SLICE1")>]
            member __.SVG_MEETORSLICE_SLICE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_PRESERVEASPECTRATIO_UNKNOWN)"); CompiledName("SVG_PRESERVEASPECTRATIO_UNKNOWN1")>]
            member __.SVG_PRESERVEASPECTRATIO_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_849 =


    type FunScript.TypeScript.SVGRadialGradientElement with 

            [<FunScript.JSEmitInline("({0}.cx)"); CompiledName("cx2")>]
            member __.cx with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.r)"); CompiledName("r3")>]
            member __.r with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.cy)"); CompiledName("cy2")>]
            member __.cy with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.fx)"); CompiledName("fx")>]
            member __.fx with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.fy)"); CompiledName("fy")>]
            member __.fy with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_850 =


    type FunScript.TypeScript.SVGRect with 

            [<FunScript.JSEmitInline("({0}.y)"); CompiledName("y38")>]
            member __.y with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.width)"); CompiledName("width28")>]
            member __.width with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x)"); CompiledName("x38")>]
            member __.x with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.height)"); CompiledName("height25")>]
            member __.height with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_851 =


    type FunScript.TypeScript.SVGRectElement with 

            [<FunScript.JSEmitInline("({0}.y)"); CompiledName("y39")>]
            member __.y with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.width)"); CompiledName("width29")>]
            member __.width with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ry)"); CompiledName("ry1")>]
            member __.ry with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.rx)"); CompiledName("rx1")>]
            member __.rx with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x)"); CompiledName("x39")>]
            member __.x with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.height)"); CompiledName("height26")>]
            member __.height with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_852 =


    type FunScript.TypeScript.SVGSVGElement with 

            [<FunScript.JSEmitInline("({0}.width)"); CompiledName("width30")>]
            member __.width with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x)"); CompiledName("x40")>]
            member __.x with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.contentStyleType)"); CompiledName("contentStyleType")>]
            member __.contentStyleType with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onzoom)"); CompiledName("onzoom")>]
            member __.onzoom with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.y)"); CompiledName("y40")>]
            member __.y with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.viewport)"); CompiledName("viewport")>]
            member __.viewport with get() : FunScript.TypeScript.SVGRect = failwith "never" and set (v : FunScript.TypeScript.SVGRect) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onerror)"); CompiledName("onerror14")>]
            member __.onerror with get() : System.Func<FunScript.TypeScript.ErrorEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.ErrorEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pixelUnitToMillimeterY)"); CompiledName("pixelUnitToMillimeterY")>]
            member __.pixelUnitToMillimeterY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onresize)"); CompiledName("onresize4")>]
            member __.onresize with get() : System.Func<FunScript.TypeScript.UIEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.UIEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.screenPixelToMillimeterY)"); CompiledName("screenPixelToMillimeterY")>]
            member __.screenPixelToMillimeterY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.height)"); CompiledName("height27")>]
            member __.height with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onabort)"); CompiledName("onabort7")>]
            member __.onabort with get() : System.Func<FunScript.TypeScript.UIEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.UIEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.contentScriptType)"); CompiledName("contentScriptType")>]
            member __.contentScriptType with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pixelUnitToMillimeterX)"); CompiledName("pixelUnitToMillimeterX")>]
            member __.pixelUnitToMillimeterX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.currentTranslate)"); CompiledName("currentTranslate")>]
            member __.currentTranslate with get() : FunScript.TypeScript.SVGPoint = failwith "never" and set (v : FunScript.TypeScript.SVGPoint) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onunload)"); CompiledName("onunload3")>]
            member __.onunload with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.currentScale)"); CompiledName("currentScale")>]
            member __.currentScale with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onscroll)"); CompiledName("onscroll3")>]
            member __.onscroll with get() : System.Func<FunScript.TypeScript.UIEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.UIEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.screenPixelToMillimeterX)"); CompiledName("screenPixelToMillimeterX")>]
            member __.screenPixelToMillimeterX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setCurrentTime({1}))"); CompiledName("setCurrentTime")>]
            member __.setCurrentTime(seconds : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setCurrentTime = {1})"); CompiledName("setCurrentTimeAux")>]
            member __.``setCurrentTime <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGLength())"); CompiledName("createSVGLength")>]
            member __.createSVGLength() : FunScript.TypeScript.SVGLength = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGLength = {1})"); CompiledName("createSVGLengthAux")>]
            member __.``createSVGLength <-``(func : System.Func<FunScript.TypeScript.SVGLength>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getIntersectionList({1}, {2}))"); CompiledName("getIntersectionList")>]
            member __.getIntersectionList(rect : FunScript.TypeScript.SVGRect, referenceElement : FunScript.TypeScript.SVGElement) : FunScript.TypeScript.NodeList = failwith "never"
            [<FunScript.JSEmitInline("({0}.getIntersectionList = {1})"); CompiledName("getIntersectionListAux")>]
            member __.``getIntersectionList <-``(func : System.Func<FunScript.TypeScript.SVGRect, FunScript.TypeScript.SVGElement, FunScript.TypeScript.NodeList>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.unpauseAnimations())"); CompiledName("unpauseAnimations")>]
            member __.unpauseAnimations() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.unpauseAnimations = {1})"); CompiledName("unpauseAnimationsAux")>]
            member __.``unpauseAnimations <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGRect())"); CompiledName("createSVGRect")>]
            member __.createSVGRect() : FunScript.TypeScript.SVGRect = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGRect = {1})"); CompiledName("createSVGRectAux")>]
            member __.``createSVGRect <-``(func : System.Func<FunScript.TypeScript.SVGRect>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.checkIntersection({1}, {2}))"); CompiledName("checkIntersection")>]
            member __.checkIntersection(element : FunScript.TypeScript.SVGElement, rect : FunScript.TypeScript.SVGRect) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.checkIntersection = {1})"); CompiledName("checkIntersectionAux")>]
            member __.``checkIntersection <-``(func : System.Func<FunScript.TypeScript.SVGElement, FunScript.TypeScript.SVGRect, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.unsuspendRedrawAll())"); CompiledName("unsuspendRedrawAll")>]
            member __.unsuspendRedrawAll() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.unsuspendRedrawAll = {1})"); CompiledName("unsuspendRedrawAllAux")>]
            member __.``unsuspendRedrawAll <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pauseAnimations())"); CompiledName("pauseAnimations")>]
            member __.pauseAnimations() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pauseAnimations = {1})"); CompiledName("pauseAnimationsAux")>]
            member __.``pauseAnimations <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.suspendRedraw({1}))"); CompiledName("suspendRedraw")>]
            member __.suspendRedraw(maxWaitMilliseconds : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.suspendRedraw = {1})"); CompiledName("suspendRedrawAux")>]
            member __.``suspendRedraw <-``(func : System.Func<float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deselectAll())"); CompiledName("deselectAll")>]
            member __.deselectAll() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deselectAll = {1})"); CompiledName("deselectAllAux")>]
            member __.``deselectAll <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGAngle())"); CompiledName("createSVGAngle")>]
            member __.createSVGAngle() : FunScript.TypeScript.SVGAngle = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGAngle = {1})"); CompiledName("createSVGAngleAux")>]
            member __.``createSVGAngle <-``(func : System.Func<FunScript.TypeScript.SVGAngle>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getEnclosureList({1}, {2}))"); CompiledName("getEnclosureList")>]
            member __.getEnclosureList(rect : FunScript.TypeScript.SVGRect, referenceElement : FunScript.TypeScript.SVGElement) : FunScript.TypeScript.NodeList = failwith "never"
            [<FunScript.JSEmitInline("({0}.getEnclosureList = {1})"); CompiledName("getEnclosureListAux")>]
            member __.``getEnclosureList <-``(func : System.Func<FunScript.TypeScript.SVGRect, FunScript.TypeScript.SVGElement, FunScript.TypeScript.NodeList>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGTransform())"); CompiledName("createSVGTransform")>]
            member __.createSVGTransform() : FunScript.TypeScript.SVGTransform = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGTransform = {1})"); CompiledName("createSVGTransformAux")>]
            member __.``createSVGTransform <-``(func : System.Func<FunScript.TypeScript.SVGTransform>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.unsuspendRedraw({1}))"); CompiledName("unsuspendRedraw")>]
            member __.unsuspendRedraw(suspendHandleID : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.unsuspendRedraw = {1})"); CompiledName("unsuspendRedrawAux")>]
            member __.``unsuspendRedraw <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.forceRedraw())"); CompiledName("forceRedraw")>]
            member __.forceRedraw() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.forceRedraw = {1})"); CompiledName("forceRedrawAux")>]
            member __.``forceRedraw <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getCurrentTime())"); CompiledName("getCurrentTime")>]
            member __.getCurrentTime() : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.getCurrentTime = {1})"); CompiledName("getCurrentTimeAux")>]
            member __.``getCurrentTime <-``(func : System.Func<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.checkEnclosure({1}, {2}))"); CompiledName("checkEnclosure")>]
            member __.checkEnclosure(element : FunScript.TypeScript.SVGElement, rect : FunScript.TypeScript.SVGRect) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.checkEnclosure = {1})"); CompiledName("checkEnclosureAux")>]
            member __.``checkEnclosure <-``(func : System.Func<FunScript.TypeScript.SVGElement, FunScript.TypeScript.SVGRect, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGMatrix())"); CompiledName("createSVGMatrix")>]
            member __.createSVGMatrix() : FunScript.TypeScript.SVGMatrix = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGMatrix = {1})"); CompiledName("createSVGMatrixAux")>]
            member __.``createSVGMatrix <-``(func : System.Func<FunScript.TypeScript.SVGMatrix>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGPoint())"); CompiledName("createSVGPoint")>]
            member __.createSVGPoint() : FunScript.TypeScript.SVGPoint = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGPoint = {1})"); CompiledName("createSVGPointAux")>]
            member __.``createSVGPoint <-``(func : System.Func<FunScript.TypeScript.SVGPoint>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGNumber())"); CompiledName("createSVGNumber")>]
            member __.createSVGNumber() : FunScript.TypeScript.SVGNumber = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGNumber = {1})"); CompiledName("createSVGNumberAux")>]
            member __.``createSVGNumber <-``(func : System.Func<FunScript.TypeScript.SVGNumber>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGTransformFromMatrix({1}))"); CompiledName("createSVGTransformFromMatrix")>]
            member __.createSVGTransformFromMatrix(matrix : FunScript.TypeScript.SVGMatrix) : FunScript.TypeScript.SVGTransform = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGTransformFromMatrix = {1})"); CompiledName("createSVGTransformFromMatrixAux")>]
            member __.``createSVGTransformFromMatrix <-``(func : System.Func<FunScript.TypeScript.SVGMatrix, FunScript.TypeScript.SVGTransform>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getComputedStyle({1}, {?2}))"); CompiledName("getComputedStyle1")>]
            member __.getComputedStyle(elt : FunScript.TypeScript.Element, ?pseudoElt : string) : FunScript.TypeScript.CSSStyleDeclaration = failwith "never"
            [<FunScript.JSEmitInline("({0}.getComputedStyle = {1})"); CompiledName("getComputedStyle1Aux")>]
            member __.``getComputedStyle <-``(func : System.Func<FunScript.TypeScript.Element, string, FunScript.TypeScript.CSSStyleDeclaration>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementById({1}))"); CompiledName("getElementById1")>]
            member __.getElementById(elementId : string) : FunScript.TypeScript.Element = failwith "never"
            [<FunScript.JSEmitInline("({0}.getElementById = {1})"); CompiledName("getElementById1Aux")>]
            member __.``getElementById <-``(func : System.Func<string, FunScript.TypeScript.Element>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerenter\", {1}, {?2}))"); CompiledName("addEventListener1350")>]
            member __.addEventListener_pointerenter(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerout\", {1}, {?2}))"); CompiledName("addEventListener1351")>]
            member __.addEventListener_pointerout(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerdown\", {1}, {?2}))"); CompiledName("addEventListener1352")>]
            member __.addEventListener_pointerdown(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerup\", {1}, {?2}))"); CompiledName("addEventListener1353")>]
            member __.addEventListener_pointerup(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointercancel\", {1}, {?2}))"); CompiledName("addEventListener1354")>]
            member __.addEventListener_pointercancel(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerover\", {1}, {?2}))"); CompiledName("addEventListener1355")>]
            member __.addEventListener_pointerover(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointermove\", {1}, {?2}))"); CompiledName("addEventListener1356")>]
            member __.addEventListener_pointermove(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerleave\", {1}, {?2}))"); CompiledName("addEventListener1357")>]
            member __.addEventListener_pointerleave(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerdown\", {1}, {?2}))"); CompiledName("addEventListener1358")>]
            member __.addEventListener_mspointerdown(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgotpointercapture\", {1}, {?2}))"); CompiledName("addEventListener1359")>]
            member __.addEventListener_msgotpointercapture(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturedoubletap\", {1}, {?2}))"); CompiledName("addEventListener1360")>]
            member __.addEventListener_msgesturedoubletap(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerhover\", {1}, {?2}))"); CompiledName("addEventListener1361")>]
            member __.addEventListener_mspointerhover(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturehold\", {1}, {?2}))"); CompiledName("addEventListener1362")>]
            member __.addEventListener_msgesturehold(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointermove\", {1}, {?2}))"); CompiledName("addEventListener1363")>]
            member __.addEventListener_mspointermove(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturechange\", {1}, {?2}))"); CompiledName("addEventListener1364")>]
            member __.addEventListener_msgesturechange(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturestart\", {1}, {?2}))"); CompiledName("addEventListener1365")>]
            member __.addEventListener_msgesturestart(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointercancel\", {1}, {?2}))"); CompiledName("addEventListener1366")>]
            member __.addEventListener_mspointercancel(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgestureend\", {1}, {?2}))"); CompiledName("addEventListener1367")>]
            member __.addEventListener_msgestureend(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturetap\", {1}, {?2}))"); CompiledName("addEventListener1368")>]
            member __.addEventListener_msgesturetap(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerout\", {1}, {?2}))"); CompiledName("addEventListener1369")>]
            member __.addEventListener_mspointerout(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msinertiastart\", {1}, {?2}))"); CompiledName("addEventListener1370")>]
            member __.addEventListener_msinertiastart(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mslostpointercapture\", {1}, {?2}))"); CompiledName("addEventListener1371")>]
            member __.addEventListener_mslostpointercapture(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerover\", {1}, {?2}))"); CompiledName("addEventListener1372")>]
            member __.addEventListener_mspointerover(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerup\", {1}, {?2}))"); CompiledName("addEventListener1373")>]
            member __.addEventListener_mspointerup(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"lostpointercapture\", {1}, {?2}))"); CompiledName("addEventListener1374")>]
            member __.addEventListener_lostpointercapture(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerenter\", {1}, {?2}))"); CompiledName("addEventListener1375")>]
            member __.addEventListener_mspointerenter(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"gotpointercapture\", {1}, {?2}))"); CompiledName("addEventListener1376")>]
            member __.addEventListener_gotpointercapture(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerleave\", {1}, {?2}))"); CompiledName("addEventListener1377")>]
            member __.addEventListener_mspointerleave(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseover\", {1}, {?2}))"); CompiledName("addEventListener1378")>]
            member __.addEventListener_mouseover(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mousemove\", {1}, {?2}))"); CompiledName("addEventListener1379")>]
            member __.addEventListener_mousemove(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseout\", {1}, {?2}))"); CompiledName("addEventListener1380")>]
            member __.addEventListener_mouseout(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dblclick\", {1}, {?2}))"); CompiledName("addEventListener1381")>]
            member __.addEventListener_dblclick(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"focusout\", {1}, {?2}))"); CompiledName("addEventListener1382")>]
            member __.addEventListener_focusout(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"focusin\", {1}, {?2}))"); CompiledName("addEventListener1383")>]
            member __.addEventListener_focusin(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mousedown\", {1}, {?2}))"); CompiledName("addEventListener1384")>]
            member __.addEventListener_mousedown(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"load\", {1}, {?2}))"); CompiledName("addEventListener1385")>]
            member __.addEventListener_load(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseup\", {1}, {?2}))"); CompiledName("addEventListener1386")>]
            member __.addEventListener_mouseup(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"click\", {1}, {?2}))"); CompiledName("addEventListener1387")>]
            member __.addEventListener_click(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"zoom\", {1}, {?2}))"); CompiledName("addEventListener1388")>]
            member __.addEventListener_zoom(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"error\", {1}, {?2}))"); CompiledName("addEventListener1389")>]
            member __.addEventListener_error(listener : System.Func<FunScript.TypeScript.ErrorEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"resize\", {1}, {?2}))"); CompiledName("addEventListener1390")>]
            member __.addEventListener_resize(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"abort\", {1}, {?2}))"); CompiledName("addEventListener1391")>]
            member __.addEventListener_abort(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"unload\", {1}, {?2}))"); CompiledName("addEventListener1392")>]
            member __.addEventListener_unload(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"scroll\", {1}, {?2}))"); CompiledName("addEventListener1393")>]
            member __.addEventListener_scroll(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener({1}, {2}, {?3}))"); CompiledName("addEventListener1394")>]
            member __.addEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener = {1})"); CompiledName("addEventListener1394Aux")>]
            member __.``addEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_853 =


    type FunScript.TypeScript.SVGScriptElement with 

            [<FunScript.JSEmitInline("({0}.type)"); CompiledName("_type30")>]
            member __._type with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_854 =


    type FunScript.TypeScript.SVGStopElement with 

            [<FunScript.JSEmitInline("({0}.offset)"); CompiledName("offset1")>]
            member __.offset with get() : FunScript.TypeScript.SVGAnimatedNumber = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumber) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_855 =


    type FunScript.TypeScript.SVGStringList with 

            [<FunScript.JSEmitInline("({0}.numberOfItems)"); CompiledName("numberOfItems4")>]
            member __.numberOfItems with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.replaceItem({1}, {2}))"); CompiledName("replaceItem4")>]
            member __.replaceItem(newItem : string, index : float) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.replaceItem = {1})"); CompiledName("replaceItem4Aux")>]
            member __.``replaceItem <-``(func : System.Func<string, float, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getItem({1}))"); CompiledName("getItem4")>]
            member __.getItem(index : float) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.getItem = {1})"); CompiledName("getItem4Aux")>]
            member __.``getItem <-``(func : System.Func<float, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clear())"); CompiledName("clear12")>]
            member __.clear() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clear = {1})"); CompiledName("clear12Aux")>]
            member __.``clear <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.appendItem({1}))"); CompiledName("appendItem4")>]
            member __.appendItem(newItem : string) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.appendItem = {1})"); CompiledName("appendItem4Aux")>]
            member __.``appendItem <-``(func : System.Func<string, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initialize({1}))"); CompiledName("initialize4")>]
            member __.initialize(newItem : string) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.initialize = {1})"); CompiledName("initialize4Aux")>]
            member __.``initialize <-``(func : System.Func<string, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeItem({1}))"); CompiledName("removeItem4")>]
            member __.removeItem(index : float) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeItem = {1})"); CompiledName("removeItem4Aux")>]
            member __.``removeItem <-``(func : System.Func<float, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.insertItemBefore({1}, {2}))"); CompiledName("insertItemBefore4")>]
            member __.insertItemBefore(newItem : string, index : float) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.insertItemBefore = {1})"); CompiledName("insertItemBefore4Aux")>]
            member __.``insertItemBefore <-``(func : System.Func<string, float, string>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_856 =


    type FunScript.TypeScript.SVGStylable with 

            [<FunScript.JSEmitInline("({0}.className)"); CompiledName("className1")>]
            member __.className with get() : FunScript.TypeScript.SVGAnimatedString = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedString) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.style)"); CompiledName("style7")>]
            member __.style with get() : FunScript.TypeScript.CSSStyleDeclaration = failwith "never" and set (v : FunScript.TypeScript.CSSStyleDeclaration) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_857 =


    type FunScript.TypeScript.SVGStyleElement with 

            [<FunScript.JSEmitInline("({0}.media)"); CompiledName("media7")>]
            member __.media with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.type)"); CompiledName("_type31")>]
            member __._type with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.title)"); CompiledName("title2")>]
            member __.title with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_858 =


    type FunScript.TypeScript.SVGTests with 

            [<FunScript.JSEmitInline("({0}.requiredFeatures)"); CompiledName("requiredFeatures")>]
            member __.requiredFeatures with get() : FunScript.TypeScript.SVGStringList = failwith "never" and set (v : FunScript.TypeScript.SVGStringList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.requiredExtensions)"); CompiledName("requiredExtensions")>]
            member __.requiredExtensions with get() : FunScript.TypeScript.SVGStringList = failwith "never" and set (v : FunScript.TypeScript.SVGStringList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.systemLanguage)"); CompiledName("systemLanguage1")>]
            member __.systemLanguage with get() : FunScript.TypeScript.SVGStringList = failwith "never" and set (v : FunScript.TypeScript.SVGStringList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.hasExtension({1}))"); CompiledName("hasExtension")>]
            member __.hasExtension(extension : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.hasExtension = {1})"); CompiledName("hasExtensionAux")>]
            member __.``hasExtension <-``(func : System.Func<string, bool>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_859 =


    type FunScript.TypeScript.SVGTextContentElement with 

            [<FunScript.JSEmitInline("({0}.textLength)"); CompiledName("textLength")>]
            member __.textLength with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.lengthAdjust)"); CompiledName("lengthAdjust")>]
            member __.lengthAdjust with get() : FunScript.TypeScript.SVGAnimatedEnumeration = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedEnumeration) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getCharNumAtPosition({1}))"); CompiledName("getCharNumAtPosition")>]
            member __.getCharNumAtPosition(point : FunScript.TypeScript.SVGPoint) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.getCharNumAtPosition = {1})"); CompiledName("getCharNumAtPositionAux")>]
            member __.``getCharNumAtPosition <-``(func : System.Func<FunScript.TypeScript.SVGPoint, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getStartPositionOfChar({1}))"); CompiledName("getStartPositionOfChar")>]
            member __.getStartPositionOfChar(charnum : float) : FunScript.TypeScript.SVGPoint = failwith "never"
            [<FunScript.JSEmitInline("({0}.getStartPositionOfChar = {1})"); CompiledName("getStartPositionOfCharAux")>]
            member __.``getStartPositionOfChar <-``(func : System.Func<float, FunScript.TypeScript.SVGPoint>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getExtentOfChar({1}))"); CompiledName("getExtentOfChar")>]
            member __.getExtentOfChar(charnum : float) : FunScript.TypeScript.SVGRect = failwith "never"
            [<FunScript.JSEmitInline("({0}.getExtentOfChar = {1})"); CompiledName("getExtentOfCharAux")>]
            member __.``getExtentOfChar <-``(func : System.Func<float, FunScript.TypeScript.SVGRect>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getComputedTextLength())"); CompiledName("getComputedTextLength")>]
            member __.getComputedTextLength() : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.getComputedTextLength = {1})"); CompiledName("getComputedTextLengthAux")>]
            member __.``getComputedTextLength <-``(func : System.Func<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getSubStringLength({1}, {2}))"); CompiledName("getSubStringLength")>]
            member __.getSubStringLength(charnum : float, nchars : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.getSubStringLength = {1})"); CompiledName("getSubStringLengthAux")>]
            member __.``getSubStringLength <-``(func : System.Func<float, float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.selectSubString({1}, {2}))"); CompiledName("selectSubString")>]
            member __.selectSubString(charnum : float, nchars : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.selectSubString = {1})"); CompiledName("selectSubStringAux")>]
            member __.``selectSubString <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getNumberOfChars())"); CompiledName("getNumberOfChars")>]
            member __.getNumberOfChars() : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.getNumberOfChars = {1})"); CompiledName("getNumberOfCharsAux")>]
            member __.``getNumberOfChars <-``(func : System.Func<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getRotationOfChar({1}))"); CompiledName("getRotationOfChar")>]
            member __.getRotationOfChar(charnum : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.getRotationOfChar = {1})"); CompiledName("getRotationOfCharAux")>]
            member __.``getRotationOfChar <-``(func : System.Func<float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getEndPositionOfChar({1}))"); CompiledName("getEndPositionOfChar")>]
            member __.getEndPositionOfChar(charnum : float) : FunScript.TypeScript.SVGPoint = failwith "never"
            [<FunScript.JSEmitInline("({0}.getEndPositionOfChar = {1})"); CompiledName("getEndPositionOfCharAux")>]
            member __.``getEndPositionOfChar <-``(func : System.Func<float, FunScript.TypeScript.SVGPoint>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LENGTHADJUST_SPACING)"); CompiledName("LENGTHADJUST_SPACING1")>]
            member __.LENGTHADJUST_SPACING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LENGTHADJUST_SPACINGANDGLYPHS)"); CompiledName("LENGTHADJUST_SPACINGANDGLYPHS1")>]
            member __.LENGTHADJUST_SPACINGANDGLYPHS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LENGTHADJUST_UNKNOWN)"); CompiledName("LENGTHADJUST_UNKNOWN1")>]
            member __.LENGTHADJUST_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_860 =


    type FunScript.TypeScript.SVGTextPathElement with 

            [<FunScript.JSEmitInline("({0}.startOffset)"); CompiledName("startOffset1")>]
            member __.startOffset with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.method)"); CompiledName("_method1")>]
            member __._method with get() : FunScript.TypeScript.SVGAnimatedEnumeration = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedEnumeration) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.spacing)"); CompiledName("spacing")>]
            member __.spacing with get() : FunScript.TypeScript.SVGAnimatedEnumeration = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedEnumeration) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTPATH_SPACINGTYPE_EXACT)"); CompiledName("TEXTPATH_SPACINGTYPE_EXACT1")>]
            member __.TEXTPATH_SPACINGTYPE_EXACT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTPATH_METHODTYPE_STRETCH)"); CompiledName("TEXTPATH_METHODTYPE_STRETCH1")>]
            member __.TEXTPATH_METHODTYPE_STRETCH with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTPATH_SPACINGTYPE_AUTO)"); CompiledName("TEXTPATH_SPACINGTYPE_AUTO1")>]
            member __.TEXTPATH_SPACINGTYPE_AUTO with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTPATH_SPACINGTYPE_UNKNOWN)"); CompiledName("TEXTPATH_SPACINGTYPE_UNKNOWN1")>]
            member __.TEXTPATH_SPACINGTYPE_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTPATH_METHODTYPE_UNKNOWN)"); CompiledName("TEXTPATH_METHODTYPE_UNKNOWN1")>]
            member __.TEXTPATH_METHODTYPE_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTPATH_METHODTYPE_ALIGN)"); CompiledName("TEXTPATH_METHODTYPE_ALIGN1")>]
            member __.TEXTPATH_METHODTYPE_ALIGN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_861 =


    type FunScript.TypeScript.SVGTextPositioningElement with 

            [<FunScript.JSEmitInline("({0}.y)"); CompiledName("y41")>]
            member __.y with get() : FunScript.TypeScript.SVGAnimatedLengthList = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLengthList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.rotate)"); CompiledName("rotate3")>]
            member __.rotate with get() : FunScript.TypeScript.SVGAnimatedNumberList = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedNumberList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.dy)"); CompiledName("dy1")>]
            member __.dy with get() : FunScript.TypeScript.SVGAnimatedLengthList = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLengthList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x)"); CompiledName("x41")>]
            member __.x with get() : FunScript.TypeScript.SVGAnimatedLengthList = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLengthList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.dx)"); CompiledName("dx1")>]
            member __.dx with get() : FunScript.TypeScript.SVGAnimatedLengthList = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLengthList) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_862 =


    type FunScript.TypeScript.SVGTransform with 

            [<FunScript.JSEmitInline("({0}.type)"); CompiledName("_type32")>]
            member __._type with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.angle)"); CompiledName("angle2")>]
            member __.angle with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.matrix)"); CompiledName("matrix")>]
            member __.matrix with get() : FunScript.TypeScript.SVGMatrix = failwith "never" and set (v : FunScript.TypeScript.SVGMatrix) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setTranslate({1}, {2}))"); CompiledName("setTranslate")>]
            member __.setTranslate(tx : float, ty : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setTranslate = {1})"); CompiledName("setTranslateAux")>]
            member __.``setTranslate <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setScale({1}, {2}))"); CompiledName("setScale")>]
            member __.setScale(sx : float, sy : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setScale = {1})"); CompiledName("setScaleAux")>]
            member __.``setScale <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setMatrix({1}))"); CompiledName("setMatrix")>]
            member __.setMatrix(matrix : FunScript.TypeScript.SVGMatrix) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setMatrix = {1})"); CompiledName("setMatrixAux")>]
            member __.``setMatrix <-``(func : System.Func<FunScript.TypeScript.SVGMatrix, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setSkewY({1}))"); CompiledName("setSkewY")>]
            member __.setSkewY(angle : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setSkewY = {1})"); CompiledName("setSkewYAux")>]
            member __.``setSkewY <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setRotate({1}, {2}, {3}))"); CompiledName("setRotate")>]
            member __.setRotate(angle : float, cx : float, cy : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setRotate = {1})"); CompiledName("setRotateAux")>]
            member __.``setRotate <-``(func : System.Func<float, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setSkewX({1}))"); CompiledName("setSkewX")>]
            member __.setSkewX(angle : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setSkewX = {1})"); CompiledName("setSkewXAux")>]
            member __.``setSkewX <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_TRANSFORM_SKEWX)"); CompiledName("SVG_TRANSFORM_SKEWX1")>]
            member __.SVG_TRANSFORM_SKEWX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_TRANSFORM_UNKNOWN)"); CompiledName("SVG_TRANSFORM_UNKNOWN1")>]
            member __.SVG_TRANSFORM_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_TRANSFORM_SCALE)"); CompiledName("SVG_TRANSFORM_SCALE1")>]
            member __.SVG_TRANSFORM_SCALE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_TRANSFORM_TRANSLATE)"); CompiledName("SVG_TRANSFORM_TRANSLATE1")>]
            member __.SVG_TRANSFORM_TRANSLATE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_TRANSFORM_MATRIX)"); CompiledName("SVG_TRANSFORM_MATRIX1")>]
            member __.SVG_TRANSFORM_MATRIX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_TRANSFORM_ROTATE)"); CompiledName("SVG_TRANSFORM_ROTATE1")>]
            member __.SVG_TRANSFORM_ROTATE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_TRANSFORM_SKEWY)"); CompiledName("SVG_TRANSFORM_SKEWY1")>]
            member __.SVG_TRANSFORM_SKEWY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_863 =


    type FunScript.TypeScript.SVGTransformList with 

            [<FunScript.JSEmitInline("({0}.numberOfItems)"); CompiledName("numberOfItems5")>]
            member __.numberOfItems with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getItem({1}))"); CompiledName("getItem5")>]
            member __.getItem(index : float) : FunScript.TypeScript.SVGTransform = failwith "never"
            [<FunScript.JSEmitInline("({0}.getItem = {1})"); CompiledName("getItem5Aux")>]
            member __.``getItem <-``(func : System.Func<float, FunScript.TypeScript.SVGTransform>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.consolidate())"); CompiledName("consolidate")>]
            member __.consolidate() : FunScript.TypeScript.SVGTransform = failwith "never"
            [<FunScript.JSEmitInline("({0}.consolidate = {1})"); CompiledName("consolidateAux")>]
            member __.``consolidate <-``(func : System.Func<FunScript.TypeScript.SVGTransform>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clear())"); CompiledName("clear13")>]
            member __.clear() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clear = {1})"); CompiledName("clear13Aux")>]
            member __.``clear <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.appendItem({1}))"); CompiledName("appendItem5")>]
            member __.appendItem(newItem : FunScript.TypeScript.SVGTransform) : FunScript.TypeScript.SVGTransform = failwith "never"
            [<FunScript.JSEmitInline("({0}.appendItem = {1})"); CompiledName("appendItem5Aux")>]
            member __.``appendItem <-``(func : System.Func<FunScript.TypeScript.SVGTransform, FunScript.TypeScript.SVGTransform>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initialize({1}))"); CompiledName("initialize5")>]
            member __.initialize(newItem : FunScript.TypeScript.SVGTransform) : FunScript.TypeScript.SVGTransform = failwith "never"
            [<FunScript.JSEmitInline("({0}.initialize = {1})"); CompiledName("initialize5Aux")>]
            member __.``initialize <-``(func : System.Func<FunScript.TypeScript.SVGTransform, FunScript.TypeScript.SVGTransform>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeItem({1}))"); CompiledName("removeItem5")>]
            member __.removeItem(index : float) : FunScript.TypeScript.SVGTransform = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeItem = {1})"); CompiledName("removeItem5Aux")>]
            member __.``removeItem <-``(func : System.Func<float, FunScript.TypeScript.SVGTransform>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.insertItemBefore({1}, {2}))"); CompiledName("insertItemBefore5")>]
            member __.insertItemBefore(newItem : FunScript.TypeScript.SVGTransform, index : float) : FunScript.TypeScript.SVGTransform = failwith "never"
            [<FunScript.JSEmitInline("({0}.insertItemBefore = {1})"); CompiledName("insertItemBefore5Aux")>]
            member __.``insertItemBefore <-``(func : System.Func<FunScript.TypeScript.SVGTransform, float, FunScript.TypeScript.SVGTransform>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.replaceItem({1}, {2}))"); CompiledName("replaceItem5")>]
            member __.replaceItem(newItem : FunScript.TypeScript.SVGTransform, index : float) : FunScript.TypeScript.SVGTransform = failwith "never"
            [<FunScript.JSEmitInline("({0}.replaceItem = {1})"); CompiledName("replaceItem5Aux")>]
            member __.``replaceItem <-``(func : System.Func<FunScript.TypeScript.SVGTransform, float, FunScript.TypeScript.SVGTransform>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGTransformFromMatrix({1}))"); CompiledName("createSVGTransformFromMatrix1")>]
            member __.createSVGTransformFromMatrix(matrix : FunScript.TypeScript.SVGMatrix) : FunScript.TypeScript.SVGTransform = failwith "never"
            [<FunScript.JSEmitInline("({0}.createSVGTransformFromMatrix = {1})"); CompiledName("createSVGTransformFromMatrix1Aux")>]
            member __.``createSVGTransformFromMatrix <-``(func : System.Func<FunScript.TypeScript.SVGMatrix, FunScript.TypeScript.SVGTransform>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_864 =


    type FunScript.TypeScript.SVGTransformable with 

            [<FunScript.JSEmitInline("({0}.transform)"); CompiledName("transform2")>]
            member __.transform with get() : FunScript.TypeScript.SVGAnimatedTransformList = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedTransformList) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_865 =


    type FunScript.TypeScript.SVGURIReference with 

            [<FunScript.JSEmitInline("({0}.href)"); CompiledName("href8")>]
            member __.href with get() : FunScript.TypeScript.SVGAnimatedString = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedString) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_866 =


    type FunScript.TypeScript.SVGUnitTypes with 

            [<FunScript.JSEmitInline("({0}.SVG_UNIT_TYPE_UNKNOWN)"); CompiledName("SVG_UNIT_TYPE_UNKNOWN")>]
            member __.SVG_UNIT_TYPE_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_UNIT_TYPE_OBJECTBOUNDINGBOX)"); CompiledName("SVG_UNIT_TYPE_OBJECTBOUNDINGBOX")>]
            member __.SVG_UNIT_TYPE_OBJECTBOUNDINGBOX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_UNIT_TYPE_USERSPACEONUSE)"); CompiledName("SVG_UNIT_TYPE_USERSPACEONUSE")>]
            member __.SVG_UNIT_TYPE_USERSPACEONUSE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_867 =


    type FunScript.TypeScript.SVGUseElement with 

            [<FunScript.JSEmitInline("({0}.y)"); CompiledName("y42")>]
            member __.y with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.width)"); CompiledName("width31")>]
            member __.width with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.animatedInstanceRoot)"); CompiledName("animatedInstanceRoot")>]
            member __.animatedInstanceRoot with get() : FunScript.TypeScript.SVGElementInstance = failwith "never" and set (v : FunScript.TypeScript.SVGElementInstance) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.instanceRoot)"); CompiledName("instanceRoot")>]
            member __.instanceRoot with get() : FunScript.TypeScript.SVGElementInstance = failwith "never" and set (v : FunScript.TypeScript.SVGElementInstance) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.x)"); CompiledName("x42")>]
            member __.x with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.height)"); CompiledName("height28")>]
            member __.height with get() : FunScript.TypeScript.SVGAnimatedLength = failwith "never" and set (v : FunScript.TypeScript.SVGAnimatedLength) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_868 =


    type FunScript.TypeScript.SVGViewElement with 

            [<FunScript.JSEmitInline("({0}.viewTarget)"); CompiledName("viewTarget")>]
            member __.viewTarget with get() : FunScript.TypeScript.SVGStringList = failwith "never" and set (v : FunScript.TypeScript.SVGStringList) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_869 =


    type FunScript.TypeScript.SVGZoomAndPan with 

            [<FunScript.JSEmitInline("({0}.zoomAndPan)"); CompiledName("zoomAndPan")>]
            member __.zoomAndPan with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_ZOOMANDPAN_MAGNIFY)"); CompiledName("SVG_ZOOMANDPAN_MAGNIFY")>]
            member __.SVG_ZOOMANDPAN_MAGNIFY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_ZOOMANDPAN_UNKNOWN)"); CompiledName("SVG_ZOOMANDPAN_UNKNOWN")>]
            member __.SVG_ZOOMANDPAN_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SVG_ZOOMANDPAN_DISABLE)"); CompiledName("SVG_ZOOMANDPAN_DISABLE")>]
            member __.SVG_ZOOMANDPAN_DISABLE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_870 =


    type FunScript.TypeScript.SVGZoomEvent with 

            [<FunScript.JSEmitInline("({0}.zoomRectScreen)"); CompiledName("zoomRectScreen")>]
            member __.zoomRectScreen with get() : FunScript.TypeScript.SVGRect = failwith "never" and set (v : FunScript.TypeScript.SVGRect) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.previousScale)"); CompiledName("previousScale")>]
            member __.previousScale with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.newScale)"); CompiledName("newScale")>]
            member __.newScale with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.previousTranslate)"); CompiledName("previousTranslate")>]
            member __.previousTranslate with get() : FunScript.TypeScript.SVGPoint = failwith "never" and set (v : FunScript.TypeScript.SVGPoint) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.newTranslate)"); CompiledName("newTranslate")>]
            member __.newTranslate with get() : FunScript.TypeScript.SVGPoint = failwith "never" and set (v : FunScript.TypeScript.SVGPoint) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_871 =


    type FunScript.TypeScript.Screen with 

            [<FunScript.JSEmitInline("({0}.width)"); CompiledName("width32")>]
            member __.width with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deviceXDPI)"); CompiledName("deviceXDPI")>]
            member __.deviceXDPI with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.fontSmoothingEnabled)"); CompiledName("fontSmoothingEnabled")>]
            member __.fontSmoothingEnabled with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.bufferDepth)"); CompiledName("bufferDepth")>]
            member __.bufferDepth with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.logicalXDPI)"); CompiledName("logicalXDPI")>]
            member __.logicalXDPI with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.systemXDPI)"); CompiledName("systemXDPI")>]
            member __.systemXDPI with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.availHeight)"); CompiledName("availHeight")>]
            member __.availHeight with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.height)"); CompiledName("height29")>]
            member __.height with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.logicalYDPI)"); CompiledName("logicalYDPI")>]
            member __.logicalYDPI with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.systemYDPI)"); CompiledName("systemYDPI")>]
            member __.systemYDPI with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.updateInterval)"); CompiledName("updateInterval")>]
            member __.updateInterval with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.colorDepth)"); CompiledName("colorDepth")>]
            member __.colorDepth with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.availWidth)"); CompiledName("availWidth")>]
            member __.availWidth with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deviceYDPI)"); CompiledName("deviceYDPI")>]
            member __.deviceYDPI with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pixelDepth)"); CompiledName("pixelDepth")>]
            member __.pixelDepth with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msOrientation)"); CompiledName("msOrientation")>]
            member __.msOrientation with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmsorientationchange)"); CompiledName("onmsorientationchange")>]
            member __.onmsorientationchange with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msLockOrientation({1}))"); CompiledName("msLockOrientation")>]
            member __.msLockOrientation(orientation : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.msLockOrientation = {1})"); CompiledName("msLockOrientationAux")>]
            member __.``msLockOrientation <-``(func : System.Func<string, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msLockOrientation({1}))"); CompiledName("msLockOrientation1")>]
            member __.msLockOrientation(orientations : array<string>) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.msLockOrientation = {1})"); CompiledName("msLockOrientation1Aux")>]
            member __.``msLockOrientation <-``(func : System.Func<array<string>, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msUnlockOrientation())"); CompiledName("msUnlockOrientation")>]
            member __.msUnlockOrientation() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msUnlockOrientation = {1})"); CompiledName("msUnlockOrientationAux")>]
            member __.``msUnlockOrientation <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msorientationchange\", {1}, {?2}))"); CompiledName("addEventListener1395")>]
            member __.addEventListener_msorientationchange(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener({1}, {2}, {?3}))"); CompiledName("addEventListener1396")>]
            member __.addEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener = {1})"); CompiledName("addEventListener1396Aux")>]
            member __.``addEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_872 =


    type FunScript.TypeScript.ScriptNotifyEvent with 

            [<FunScript.JSEmitInline("({0}.value)"); CompiledName("value16")>]
            member __.value with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.callingUri)"); CompiledName("callingUri")>]
            member __.callingUri with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_873 =


    type FunScript.TypeScript.Selection with 

            [<FunScript.JSEmitInline("({0}.isCollapsed)"); CompiledName("isCollapsed")>]
            member __.isCollapsed with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.anchorNode)"); CompiledName("anchorNode")>]
            member __.anchorNode with get() : FunScript.TypeScript.Node = failwith "never" and set (v : FunScript.TypeScript.Node) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.focusNode)"); CompiledName("focusNode")>]
            member __.focusNode with get() : FunScript.TypeScript.Node = failwith "never" and set (v : FunScript.TypeScript.Node) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.anchorOffset)"); CompiledName("anchorOffset")>]
            member __.anchorOffset with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.focusOffset)"); CompiledName("focusOffset")>]
            member __.focusOffset with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.rangeCount)"); CompiledName("rangeCount")>]
            member __.rangeCount with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addRange({1}))"); CompiledName("addRange")>]
            member __.addRange(range : FunScript.TypeScript.Range) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addRange = {1})"); CompiledName("addRangeAux")>]
            member __.``addRange <-``(func : System.Func<FunScript.TypeScript.Range, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.collapseToEnd())"); CompiledName("collapseToEnd")>]
            member __.collapseToEnd() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.collapseToEnd = {1})"); CompiledName("collapseToEndAux")>]
            member __.``collapseToEnd <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toString())"); CompiledName("toString18")>]
            member __.toString() : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toString = {1})"); CompiledName("toString18Aux")>]
            member __.``toString <-``(func : System.Func<string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.selectAllChildren({1}))"); CompiledName("selectAllChildren")>]
            member __.selectAllChildren(parentNode : FunScript.TypeScript.Node) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.selectAllChildren = {1})"); CompiledName("selectAllChildrenAux")>]
            member __.``selectAllChildren <-``(func : System.Func<FunScript.TypeScript.Node, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getRangeAt({1}))"); CompiledName("getRangeAt")>]
            member __.getRangeAt(index : float) : FunScript.TypeScript.Range = failwith "never"
            [<FunScript.JSEmitInline("({0}.getRangeAt = {1})"); CompiledName("getRangeAtAux")>]
            member __.``getRangeAt <-``(func : System.Func<float, FunScript.TypeScript.Range>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.collapse({1}, {2}))"); CompiledName("collapse1")>]
            member __.collapse(parentNode : FunScript.TypeScript.Node, offset : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.collapse = {1})"); CompiledName("collapse1Aux")>]
            member __.``collapse <-``(func : System.Func<FunScript.TypeScript.Node, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeAllRanges())"); CompiledName("removeAllRanges")>]
            member __.removeAllRanges() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeAllRanges = {1})"); CompiledName("removeAllRangesAux")>]
            member __.``removeAllRanges <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.collapseToStart())"); CompiledName("collapseToStart")>]
            member __.collapseToStart() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.collapseToStart = {1})"); CompiledName("collapseToStartAux")>]
            member __.``collapseToStart <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteFromDocument())"); CompiledName("deleteFromDocument")>]
            member __.deleteFromDocument() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteFromDocument = {1})"); CompiledName("deleteFromDocumentAux")>]
            member __.``deleteFromDocument <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeRange({1}))"); CompiledName("removeRange")>]
            member __.removeRange(range : FunScript.TypeScript.Range) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeRange = {1})"); CompiledName("removeRangeAux")>]
            member __.``removeRange <-``(func : System.Func<FunScript.TypeScript.Range, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_874 =


    type FunScript.TypeScript.Set<'T> with 

            [<FunScript.JSEmitInline("({0}.add({1}))"); CompiledName("add6")>]
            member __.add(value : 'T) : FunScript.TypeScript.Set<'T> = failwith "never"
            [<FunScript.JSEmitInline("({0}.add = {1})"); CompiledName("add6Aux")>]
            member __.``add <-``(func : System.Func<'T, FunScript.TypeScript.Set<'T>>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clear())"); CompiledName("clear14")>]
            member __.clear() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clear = {1})"); CompiledName("clear14Aux")>]
            member __.``clear <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.delete({1}))"); CompiledName("delete3")>]
            member __.delete(value : 'T) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.delete = {1})"); CompiledName("delete3Aux")>]
            member __.``delete <-``(func : System.Func<'T, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.forEach({1}, {?2}))"); CompiledName("forEach2")>]
            member __.forEach(callbackfn : System.Func<'T, 'T, FunScript.TypeScript.Set<'T>, unit>, ?thisArg : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.forEach = {1})"); CompiledName("forEach2Aux")>]
            member __.``forEach <-``(func : System.Func<System.Func<'T, 'T, FunScript.TypeScript.Set<'T>, unit>, obj, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.has({1}))"); CompiledName("has1")>]
            member __.has(value : 'T) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.has = {1})"); CompiledName("has1Aux")>]
            member __.``has <-``(func : System.Func<'T, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.size)"); CompiledName("size6")>]
            member __.size with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_875 =


    type FunScript.TypeScript.SourceBuffer with 

            [<FunScript.JSEmitInline("({0}.updating)"); CompiledName("updating")>]
            member __.updating with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.appendWindowStart)"); CompiledName("appendWindowStart")>]
            member __.appendWindowStart with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.appendWindowEnd)"); CompiledName("appendWindowEnd")>]
            member __.appendWindowEnd with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.buffered)"); CompiledName("buffered1")>]
            member __.buffered with get() : FunScript.TypeScript.TimeRanges = failwith "never" and set (v : FunScript.TypeScript.TimeRanges) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.timestampOffset)"); CompiledName("timestampOffset")>]
            member __.timestampOffset with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.audioTracks)"); CompiledName("audioTracks1")>]
            member __.audioTracks with get() : FunScript.TypeScript.AudioTrackList = failwith "never" and set (v : FunScript.TypeScript.AudioTrackList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.appendBuffer({1}))"); CompiledName("appendBuffer")>]
            member __.appendBuffer(data : FunScript.TypeScript.ArrayBuffer) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.appendBuffer = {1})"); CompiledName("appendBufferAux")>]
            member __.``appendBuffer <-``(func : System.Func<FunScript.TypeScript.ArrayBuffer, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.remove({1}, {2}))"); CompiledName("remove4")>]
            member __.remove(start : float, _end : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.remove = {1})"); CompiledName("remove4Aux")>]
            member __.``remove <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.abort())"); CompiledName("abort4")>]
            member __.abort() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.abort = {1})"); CompiledName("abort4Aux")>]
            member __.``abort <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.appendStream({1}, {?2}))"); CompiledName("appendStream")>]
            member __.appendStream(stream : FunScript.TypeScript.MSStream, ?maxSize : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.appendStream = {1})"); CompiledName("appendStreamAux")>]
            member __.``appendStream <-``(func : System.Func<FunScript.TypeScript.MSStream, float, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_876 =


    type FunScript.TypeScript.SourceBufferList with 

            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length39")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.item({1}))"); CompiledName("item27")>]
            member __.item(index : float) : FunScript.TypeScript.SourceBuffer = failwith "never"
            [<FunScript.JSEmitInline("({0}.item = {1})"); CompiledName("item27Aux")>]
            member __.``item <-``(func : System.Func<float, FunScript.TypeScript.SourceBuffer>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}[{1}])"); CompiledName("Item30")>]
            member __.Item with get(i : int) : FunScript.TypeScript.SourceBuffer = failwith "never" and set (i : int) (v : FunScript.TypeScript.SourceBuffer) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_877 =


    type FunScript.TypeScript.Storage with 

            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length40")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getItem({1}))"); CompiledName("getItem6")>]
            member __.getItem(key : string) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.getItem = {1})"); CompiledName("getItem6Aux")>]
            member __.``getItem <-``(func : System.Func<string, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}[{1}])"); CompiledName("Item31")>]
            member __.Item with get(i : string) : obj = failwith "never" and set (i : string) (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setItem({1}, {2}))"); CompiledName("setItem")>]
            member __.setItem(key : string, data : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setItem = {1})"); CompiledName("setItemAux")>]
            member __.``setItem <-``(func : System.Func<string, string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clear())"); CompiledName("clear15")>]
            member __.clear() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clear = {1})"); CompiledName("clear15Aux")>]
            member __.``clear <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeItem({1}))"); CompiledName("removeItem6")>]
            member __.removeItem(key : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeItem = {1})"); CompiledName("removeItem6Aux")>]
            member __.``removeItem <-``(func : System.Func<string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.key({1}))"); CompiledName("key3")>]
            member __.key(index : float) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.key = {1})"); CompiledName("key3Aux")>]
            member __.``key <-``(func : System.Func<float, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}[{1}])"); CompiledName("Item32")>]
            member __.Item with get(i : int) : string = failwith "never" and set (i : int) (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_878 =


    type FunScript.TypeScript.StorageEvent with 

            [<FunScript.JSEmitInline("({0}.oldValue)"); CompiledName("oldValue1")>]
            member __.oldValue with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.newValue)"); CompiledName("newValue1")>]
            member __.newValue with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.url)"); CompiledName("url2")>]
            member __.url with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.storageArea)"); CompiledName("storageArea")>]
            member __.storageArea with get() : FunScript.TypeScript.Storage = failwith "never" and set (v : FunScript.TypeScript.Storage) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.key)"); CompiledName("key4")>]
            member __.key with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initStorageEvent({1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}))"); CompiledName("initStorageEvent")>]
            member __.initStorageEvent(typeArg : string, canBubbleArg : bool, cancelableArg : bool, keyArg : string, oldValueArg : obj, newValueArg : obj, urlArg : string, storageAreaArg : FunScript.TypeScript.Storage) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initStorageEvent = {1})"); CompiledName("initStorageEventAux")>]
            member __.``initStorageEvent <-``(func : System.Func<string, bool, bool, string, obj, obj, string, FunScript.TypeScript.Storage, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_879 =


    type FunScript.TypeScript.StoreExceptionsInformation with 

            [<FunScript.JSEmitInline("({0}.siteName)"); CompiledName("siteName")>]
            member __.siteName with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.explanationString)"); CompiledName("explanationString")>]
            member __.explanationString with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.detailURI)"); CompiledName("detailURI")>]
            member __.detailURI with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_880 =


    type FunScript.TypeScript.StoreSiteSpecificExceptionsInformation with 

            [<FunScript.JSEmitInline("({0}.arrayOfDomainStrings)"); CompiledName("arrayOfDomainStrings1")>]
            member __.arrayOfDomainStrings with get() : array<string> = failwith "never" and set (v : array<string>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_881 =


    type FunScript.TypeScript.String with 

            [<FunScript.JSEmitInline("({0}.toString())"); CompiledName("toString19")>]
            member __.toString() : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toString = {1})"); CompiledName("toString19Aux")>]
            member __.``toString <-``(func : System.Func<string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.charAt({1}))"); CompiledName("charAt")>]
            member __.charAt(pos : float) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.charAt = {1})"); CompiledName("charAtAux")>]
            member __.``charAt <-``(func : System.Func<float, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.charCodeAt({1}))"); CompiledName("charCodeAt")>]
            member __.charCodeAt(index : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.charCodeAt = {1})"); CompiledName("charCodeAtAux")>]
            member __.``charCodeAt <-``(func : System.Func<float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.concat())"); CompiledName("concat4")>]
            member __.concat() : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.concat = {1})"); CompiledName("concat4Aux")>]
            member __.``concat <-``(func : System.Func<string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.concat({1...}))"); CompiledName("concat5")>]
            member __.concatOverload2([<System.ParamArray>] strings : array<string>) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.indexOf({1}, {?2}))"); CompiledName("indexOf1")>]
            member __.indexOf(searchString : string, ?position : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.indexOf = {1})"); CompiledName("indexOf1Aux")>]
            member __.``indexOf <-``(func : System.Func<string, float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.lastIndexOf({1}, {?2}))"); CompiledName("lastIndexOf1")>]
            member __.lastIndexOf(searchString : string, ?position : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.lastIndexOf = {1})"); CompiledName("lastIndexOf1Aux")>]
            member __.``lastIndexOf <-``(func : System.Func<string, float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.localeCompare({1}))"); CompiledName("localeCompare")>]
            member __.localeCompare(that : string) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.localeCompare = {1})"); CompiledName("localeCompareAux")>]
            member __.``localeCompare <-``(func : System.Func<string, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.match({1}))"); CompiledName("_match")>]
            member __._match(regexp : string) : FunScript.TypeScript.RegExpMatchArray = failwith "never"
            [<FunScript.JSEmitInline("({0}.match = {1})"); CompiledName("_matchAux")>]
            member __.``_match <-``(func : System.Func<string, FunScript.TypeScript.RegExpMatchArray>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.match({1}))"); CompiledName("_match1")>]
            member __._match(regexp : FunScript.TypeScript.RegExp) : FunScript.TypeScript.RegExpMatchArray = failwith "never"
            [<FunScript.JSEmitInline("({0}.match = {1})"); CompiledName("_match1Aux")>]
            member __.``_match <-``(func : System.Func<FunScript.TypeScript.RegExp, FunScript.TypeScript.RegExpMatchArray>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.replace({1}, {2}))"); CompiledName("replace1")>]
            member __.replace(searchValue : string, replaceValue : string) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.replace = {1})"); CompiledName("replace1Aux")>]
            member __.``replace <-``(func : System.Func<string, string, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.replace({1}, {2}))"); CompiledName("replace2")>]
            member __.replace(searchValue : string, replaceValue : System.Func<string, array<obj>, string>) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.replace = {1})"); CompiledName("replace2Aux")>]
            member __.``replace <-``(func : System.Func<string, System.Func<string, array<obj>, string>, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.replace({1}, {2}))"); CompiledName("replace3")>]
            member __.replace(searchValue : FunScript.TypeScript.RegExp, replaceValue : string) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.replace = {1})"); CompiledName("replace3Aux")>]
            member __.``replace <-``(func : System.Func<FunScript.TypeScript.RegExp, string, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.replace({1}, {2}))"); CompiledName("replace4")>]
            member __.replace(searchValue : FunScript.TypeScript.RegExp, replaceValue : System.Func<string, array<obj>, string>) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.replace = {1})"); CompiledName("replace4Aux")>]
            member __.``replace <-``(func : System.Func<FunScript.TypeScript.RegExp, System.Func<string, array<obj>, string>, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.search({1}))"); CompiledName("search3")>]
            member __.search(regexp : string) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.search = {1})"); CompiledName("search3Aux")>]
            member __.``search <-``(func : System.Func<string, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.search({1}))"); CompiledName("search4")>]
            member __.search(regexp : FunScript.TypeScript.RegExp) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.search = {1})"); CompiledName("search4Aux")>]
            member __.``search <-``(func : System.Func<FunScript.TypeScript.RegExp, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.slice({?1}, {?2}))"); CompiledName("slice3")>]
            member __.slice(?start : float, ?_end : float) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.slice = {1})"); CompiledName("slice3Aux")>]
            member __.``slice <-``(func : System.Func<float, float, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.split({1}, {?2}))"); CompiledName("split")>]
            member __.split(separator : string, ?limit : float) : array<string> = failwith "never"
            [<FunScript.JSEmitInline("({0}.split = {1})"); CompiledName("splitAux")>]
            member __.``split <-``(func : System.Func<string, float, array<string>>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.split({1}, {?2}))"); CompiledName("split1")>]
            member __.split(separator : FunScript.TypeScript.RegExp, ?limit : float) : array<string> = failwith "never"
            [<FunScript.JSEmitInline("({0}.split = {1})"); CompiledName("split1Aux")>]
            member __.``split <-``(func : System.Func<FunScript.TypeScript.RegExp, float, array<string>>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.substring({1}, {?2}))"); CompiledName("substring")>]
            member __.substring(start : float, ?_end : float) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.substring = {1})"); CompiledName("substringAux")>]
            member __.``substring <-``(func : System.Func<float, float, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toLowerCase())"); CompiledName("toLowerCase")>]
            member __.toLowerCase() : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toLowerCase = {1})"); CompiledName("toLowerCaseAux")>]
            member __.``toLowerCase <-``(func : System.Func<string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toLocaleLowerCase())"); CompiledName("toLocaleLowerCase")>]
            member __.toLocaleLowerCase() : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toLocaleLowerCase = {1})"); CompiledName("toLocaleLowerCaseAux")>]
            member __.``toLocaleLowerCase <-``(func : System.Func<string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toUpperCase())"); CompiledName("toUpperCase")>]
            member __.toUpperCase() : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toUpperCase = {1})"); CompiledName("toUpperCaseAux")>]
            member __.``toUpperCase <-``(func : System.Func<string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toLocaleUpperCase())"); CompiledName("toLocaleUpperCase")>]
            member __.toLocaleUpperCase() : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toLocaleUpperCase = {1})"); CompiledName("toLocaleUpperCaseAux")>]
            member __.``toLocaleUpperCase <-``(func : System.Func<string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.trim())"); CompiledName("trim")>]
            member __.trim() : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.trim = {1})"); CompiledName("trimAux")>]
            member __.``trim <-``(func : System.Func<string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length41")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.substr({1}, {?2}))"); CompiledName("substr")>]
            member __.substr(from : float, ?length : float) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.substr = {1})"); CompiledName("substrAux")>]
            member __.``substr <-``(func : System.Func<float, float, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}[{1}])"); CompiledName("Item33")>]
            member __.Item with get(i : int) : string = failwith "never" and set (i : int) (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.localeCompare({1}, {2}, {?3}))"); CompiledName("localeCompare1")>]
            member __.localeCompare(that : string, locales : array<string>, ?options : FunScript.TypeScript.Intl.CollatorOptions) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.localeCompare = {1})"); CompiledName("localeCompare1Aux")>]
            member __.``localeCompare <-``(func : System.Func<string, array<string>, FunScript.TypeScript.Intl.CollatorOptions, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.localeCompare({1}, {2}, {?3}))"); CompiledName("localeCompare2")>]
            member __.localeCompare(that : string, locale : string, ?options : FunScript.TypeScript.Intl.CollatorOptions) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.localeCompare = {1})"); CompiledName("localeCompare2Aux")>]
            member __.``localeCompare <-``(func : System.Func<string, string, FunScript.TypeScript.Intl.CollatorOptions, float>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_882 =


    type FunScript.TypeScript.StyleMedia with 

            [<FunScript.JSEmitInline("({0}.type)"); CompiledName("_type33")>]
            member __._type with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.matchMedium({1}))"); CompiledName("matchMedium")>]
            member __.matchMedium(mediaquery : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.matchMedium = {1})"); CompiledName("matchMediumAux")>]
            member __.``matchMedium <-``(func : System.Func<string, bool>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_883 =


    type FunScript.TypeScript.StyleSheet with 

            [<FunScript.JSEmitInline("({0}.disabled)"); CompiledName("disabled1")>]
            member __.disabled with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ownerNode)"); CompiledName("ownerNode")>]
            member __.ownerNode with get() : FunScript.TypeScript.Node = failwith "never" and set (v : FunScript.TypeScript.Node) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.parentStyleSheet)"); CompiledName("parentStyleSheet1")>]
            member __.parentStyleSheet with get() : FunScript.TypeScript.StyleSheet = failwith "never" and set (v : FunScript.TypeScript.StyleSheet) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.href)"); CompiledName("href9")>]
            member __.href with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.media)"); CompiledName("media8")>]
            member __.media with get() : FunScript.TypeScript.MediaList = failwith "never" and set (v : FunScript.TypeScript.MediaList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.type)"); CompiledName("_type34")>]
            member __._type with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.title)"); CompiledName("title3")>]
            member __.title with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_884 =


    type FunScript.TypeScript.StyleSheetList with 

            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length42")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.item({?1}))"); CompiledName("item28")>]
            member __.item(?index : float) : FunScript.TypeScript.StyleSheet = failwith "never"
            [<FunScript.JSEmitInline("({0}.item = {1})"); CompiledName("item28Aux")>]
            member __.``item <-``(func : System.Func<float, FunScript.TypeScript.StyleSheet>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}[{1}])"); CompiledName("Item34")>]
            member __.Item with get(i : int) : FunScript.TypeScript.StyleSheet = failwith "never" and set (i : int) (v : FunScript.TypeScript.StyleSheet) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_885 =


    type FunScript.TypeScript.StyleSheetPageList with 

            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length43")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.item({1}))"); CompiledName("item29")>]
            member __.item(index : float) : FunScript.TypeScript.CSSPageRule = failwith "never"
            [<FunScript.JSEmitInline("({0}.item = {1})"); CompiledName("item29Aux")>]
            member __.``item <-``(func : System.Func<float, FunScript.TypeScript.CSSPageRule>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}[{1}])"); CompiledName("Item35")>]
            member __.Item with get(i : int) : FunScript.TypeScript.CSSPageRule = failwith "never" and set (i : int) (v : FunScript.TypeScript.CSSPageRule) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_886 =


    type FunScript.TypeScript.SubtleCrypto with 

            [<FunScript.JSEmitInline("({0}.unwrapKey({1}, {2}, {3}, {?4}, {?5}))"); CompiledName("unwrapKey")>]
            member __.unwrapKey(wrappedKey : FunScript.TypeScript.ArrayBufferView, keyAlgorithm : obj, keyEncryptionKey : FunScript.TypeScript.Key, ?extractable : bool, ?keyUsages : array<string>) : FunScript.TypeScript.KeyOperation = failwith "never"
            [<FunScript.JSEmitInline("({0}.unwrapKey = {1})"); CompiledName("unwrapKeyAux")>]
            member __.``unwrapKey <-``(func : System.Func<FunScript.TypeScript.ArrayBufferView, obj, FunScript.TypeScript.Key, bool, array<string>, FunScript.TypeScript.KeyOperation>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.encrypt({1}, {2}, {?3}))"); CompiledName("encrypt")>]
            member __.encrypt(algorithm : obj, key : FunScript.TypeScript.Key, ?buffer : FunScript.TypeScript.ArrayBufferView) : FunScript.TypeScript.CryptoOperation = failwith "never"
            [<FunScript.JSEmitInline("({0}.encrypt = {1})"); CompiledName("encryptAux")>]
            member __.``encrypt <-``(func : System.Func<obj, FunScript.TypeScript.Key, FunScript.TypeScript.ArrayBufferView, FunScript.TypeScript.CryptoOperation>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.importKey({1}, {2}, {3}, {?4}, {?5}))"); CompiledName("importKey")>]
            member __.importKey(format : string, keyData : FunScript.TypeScript.ArrayBufferView, algorithm : obj, ?extractable : bool, ?keyUsages : array<string>) : FunScript.TypeScript.KeyOperation = failwith "never"
            [<FunScript.JSEmitInline("({0}.importKey = {1})"); CompiledName("importKeyAux")>]
            member __.``importKey <-``(func : System.Func<string, FunScript.TypeScript.ArrayBufferView, obj, bool, array<string>, FunScript.TypeScript.KeyOperation>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.wrapKey({1}, {2}, {3}))"); CompiledName("wrapKey")>]
            member __.wrapKey(key : FunScript.TypeScript.Key, keyEncryptionKey : FunScript.TypeScript.Key, keyWrappingAlgorithm : obj) : FunScript.TypeScript.KeyOperation = failwith "never"
            [<FunScript.JSEmitInline("({0}.wrapKey = {1})"); CompiledName("wrapKeyAux")>]
            member __.``wrapKey <-``(func : System.Func<FunScript.TypeScript.Key, FunScript.TypeScript.Key, obj, FunScript.TypeScript.KeyOperation>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.verify({1}, {2}, {3}, {?4}))"); CompiledName("verify")>]
            member __.verify(algorithm : obj, key : FunScript.TypeScript.Key, signature : FunScript.TypeScript.ArrayBufferView, ?buffer : FunScript.TypeScript.ArrayBufferView) : FunScript.TypeScript.CryptoOperation = failwith "never"
            [<FunScript.JSEmitInline("({0}.verify = {1})"); CompiledName("verifyAux")>]
            member __.``verify <-``(func : System.Func<obj, FunScript.TypeScript.Key, FunScript.TypeScript.ArrayBufferView, FunScript.TypeScript.ArrayBufferView, FunScript.TypeScript.CryptoOperation>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deriveKey({1}, {2}, {3}, {?4}, {?5}))"); CompiledName("deriveKey")>]
            member __.deriveKey(algorithm : obj, baseKey : FunScript.TypeScript.Key, derivedKeyType : obj, ?extractable : bool, ?keyUsages : array<string>) : FunScript.TypeScript.KeyOperation = failwith "never"
            [<FunScript.JSEmitInline("({0}.deriveKey = {1})"); CompiledName("deriveKeyAux")>]
            member __.``deriveKey <-``(func : System.Func<obj, FunScript.TypeScript.Key, obj, bool, array<string>, FunScript.TypeScript.KeyOperation>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.digest({1}, {?2}))"); CompiledName("digest")>]
            member __.digest(algorithm : obj, ?buffer : FunScript.TypeScript.ArrayBufferView) : FunScript.TypeScript.CryptoOperation = failwith "never"
            [<FunScript.JSEmitInline("({0}.digest = {1})"); CompiledName("digestAux")>]
            member __.``digest <-``(func : System.Func<obj, FunScript.TypeScript.ArrayBufferView, FunScript.TypeScript.CryptoOperation>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.exportKey({1}, {2}))"); CompiledName("exportKey")>]
            member __.exportKey(format : string, key : FunScript.TypeScript.Key) : FunScript.TypeScript.KeyOperation = failwith "never"
            [<FunScript.JSEmitInline("({0}.exportKey = {1})"); CompiledName("exportKeyAux")>]
            member __.``exportKey <-``(func : System.Func<string, FunScript.TypeScript.Key, FunScript.TypeScript.KeyOperation>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.generateKey({1}, {?2}, {?3}))"); CompiledName("generateKey")>]
            member __.generateKey(algorithm : obj, ?extractable : bool, ?keyUsages : array<string>) : FunScript.TypeScript.KeyOperation = failwith "never"
            [<FunScript.JSEmitInline("({0}.generateKey = {1})"); CompiledName("generateKeyAux")>]
            member __.``generateKey <-``(func : System.Func<obj, bool, array<string>, FunScript.TypeScript.KeyOperation>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.sign({1}, {2}, {?3}))"); CompiledName("sign")>]
            member __.sign(algorithm : obj, key : FunScript.TypeScript.Key, ?buffer : FunScript.TypeScript.ArrayBufferView) : FunScript.TypeScript.CryptoOperation = failwith "never"
            [<FunScript.JSEmitInline("({0}.sign = {1})"); CompiledName("signAux")>]
            member __.``sign <-``(func : System.Func<obj, FunScript.TypeScript.Key, FunScript.TypeScript.ArrayBufferView, FunScript.TypeScript.CryptoOperation>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.decrypt({1}, {2}, {?3}))"); CompiledName("decrypt")>]
            member __.decrypt(algorithm : obj, key : FunScript.TypeScript.Key, ?buffer : FunScript.TypeScript.ArrayBufferView) : FunScript.TypeScript.CryptoOperation = failwith "never"
            [<FunScript.JSEmitInline("({0}.decrypt = {1})"); CompiledName("decryptAux")>]
            member __.``decrypt <-``(func : System.Func<obj, FunScript.TypeScript.Key, FunScript.TypeScript.ArrayBufferView, FunScript.TypeScript.CryptoOperation>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_887 =


    type FunScript.TypeScript.Text with 

            [<FunScript.JSEmitInline("({0}.wholeText)"); CompiledName("wholeText")>]
            member __.wholeText with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.splitText({1}))"); CompiledName("splitText")>]
            member __.splitText(offset : float) : FunScript.TypeScript.Text = failwith "never"
            [<FunScript.JSEmitInline("({0}.splitText = {1})"); CompiledName("splitTextAux")>]
            member __.``splitText <-``(func : System.Func<float, FunScript.TypeScript.Text>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.replaceWholeText({1}))"); CompiledName("replaceWholeText")>]
            member __.replaceWholeText(content : string) : FunScript.TypeScript.Text = failwith "never"
            [<FunScript.JSEmitInline("({0}.replaceWholeText = {1})"); CompiledName("replaceWholeTextAux")>]
            member __.``replaceWholeText <-``(func : System.Func<string, FunScript.TypeScript.Text>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_888 =


    type FunScript.TypeScript.TextEvent with 

            [<FunScript.JSEmitInline("({0}.inputMethod)"); CompiledName("inputMethod")>]
            member __.inputMethod with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.data)"); CompiledName("data8")>]
            member __.data with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.locale)"); CompiledName("locale5")>]
            member __.locale with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initTextEvent({1}, {2}, {3}, {4}, {5}, {6}, {7}))"); CompiledName("initTextEvent")>]
            member __.initTextEvent(typeArg : string, canBubbleArg : bool, cancelableArg : bool, viewArg : FunScript.TypeScript.Window, dataArg : string, inputMethod : float, locale : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initTextEvent = {1})"); CompiledName("initTextEventAux")>]
            member __.``initTextEvent <-``(func : System.Func<string, bool, bool, FunScript.TypeScript.Window, string, float, string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOM_INPUT_METHOD_KEYBOARD)"); CompiledName("DOM_INPUT_METHOD_KEYBOARD1")>]
            member __.DOM_INPUT_METHOD_KEYBOARD with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOM_INPUT_METHOD_DROP)"); CompiledName("DOM_INPUT_METHOD_DROP1")>]
            member __.DOM_INPUT_METHOD_DROP with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOM_INPUT_METHOD_IME)"); CompiledName("DOM_INPUT_METHOD_IME1")>]
            member __.DOM_INPUT_METHOD_IME with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOM_INPUT_METHOD_SCRIPT)"); CompiledName("DOM_INPUT_METHOD_SCRIPT1")>]
            member __.DOM_INPUT_METHOD_SCRIPT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOM_INPUT_METHOD_VOICE)"); CompiledName("DOM_INPUT_METHOD_VOICE1")>]
            member __.DOM_INPUT_METHOD_VOICE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOM_INPUT_METHOD_UNKNOWN)"); CompiledName("DOM_INPUT_METHOD_UNKNOWN1")>]
            member __.DOM_INPUT_METHOD_UNKNOWN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOM_INPUT_METHOD_PASTE)"); CompiledName("DOM_INPUT_METHOD_PASTE1")>]
            member __.DOM_INPUT_METHOD_PASTE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOM_INPUT_METHOD_HANDWRITING)"); CompiledName("DOM_INPUT_METHOD_HANDWRITING1")>]
            member __.DOM_INPUT_METHOD_HANDWRITING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOM_INPUT_METHOD_OPTION)"); CompiledName("DOM_INPUT_METHOD_OPTION1")>]
            member __.DOM_INPUT_METHOD_OPTION with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOM_INPUT_METHOD_MULTIMODAL)"); CompiledName("DOM_INPUT_METHOD_MULTIMODAL1")>]
            member __.DOM_INPUT_METHOD_MULTIMODAL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_889 =


    type FunScript.TypeScript.TextMetrics with 

            [<FunScript.JSEmitInline("({0}.width)"); CompiledName("width33")>]
            member __.width with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_890 =


    type FunScript.TypeScript.TextRange with 

            [<FunScript.JSEmitInline("({0}.boundingLeft)"); CompiledName("boundingLeft")>]
            member __.boundingLeft with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.htmlText)"); CompiledName("htmlText")>]
            member __.htmlText with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.offsetLeft)"); CompiledName("offsetLeft1")>]
            member __.offsetLeft with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.boundingWidth)"); CompiledName("boundingWidth")>]
            member __.boundingWidth with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.boundingHeight)"); CompiledName("boundingHeight")>]
            member __.boundingHeight with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.boundingTop)"); CompiledName("boundingTop")>]
            member __.boundingTop with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.text)"); CompiledName("text7")>]
            member __.text with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.offsetTop)"); CompiledName("offsetTop1")>]
            member __.offsetTop with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.moveToPoint({1}, {2}))"); CompiledName("moveToPoint")>]
            member __.moveToPoint(x : float, y : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.moveToPoint = {1})"); CompiledName("moveToPointAux")>]
            member __.``moveToPoint <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.queryCommandValue({1}))"); CompiledName("queryCommandValue2")>]
            member __.queryCommandValue(cmdID : string) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.queryCommandValue = {1})"); CompiledName("queryCommandValue2Aux")>]
            member __.``queryCommandValue <-``(func : System.Func<string, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getBookmark())"); CompiledName("getBookmark")>]
            member __.getBookmark() : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.getBookmark = {1})"); CompiledName("getBookmarkAux")>]
            member __.``getBookmark <-``(func : System.Func<string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.move({1}, {?2}))"); CompiledName("move")>]
            member __.move(_unit : string, ?count : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.move = {1})"); CompiledName("moveAux")>]
            member __.``move <-``(func : System.Func<string, float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.queryCommandIndeterm({1}))"); CompiledName("queryCommandIndeterm2")>]
            member __.queryCommandIndeterm(cmdID : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.queryCommandIndeterm = {1})"); CompiledName("queryCommandIndeterm2Aux")>]
            member __.``queryCommandIndeterm <-``(func : System.Func<string, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.scrollIntoView({?1}))"); CompiledName("scrollIntoView2")>]
            member __.scrollIntoView(?fStart : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.scrollIntoView = {1})"); CompiledName("scrollIntoView2Aux")>]
            member __.``scrollIntoView <-``(func : System.Func<bool, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.findText({1}, {?2}, {?3}))"); CompiledName("findText")>]
            member __.findText(_string : string, ?count : float, ?flags : float) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.findText = {1})"); CompiledName("findTextAux")>]
            member __.``findText <-``(func : System.Func<string, float, float, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.execCommand({1}, {?2}, {?3}))"); CompiledName("execCommand2")>]
            member __.execCommand(cmdID : string, ?showUI : bool, ?value : obj) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.execCommand = {1})"); CompiledName("execCommand2Aux")>]
            member __.``execCommand <-``(func : System.Func<string, bool, obj, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getBoundingClientRect())"); CompiledName("getBoundingClientRect2")>]
            member __.getBoundingClientRect() : FunScript.TypeScript.ClientRect = failwith "never"
            [<FunScript.JSEmitInline("({0}.getBoundingClientRect = {1})"); CompiledName("getBoundingClientRect2Aux")>]
            member __.``getBoundingClientRect <-``(func : System.Func<FunScript.TypeScript.ClientRect>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.moveToBookmark({1}))"); CompiledName("moveToBookmark")>]
            member __.moveToBookmark(bookmark : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.moveToBookmark = {1})"); CompiledName("moveToBookmarkAux")>]
            member __.``moveToBookmark <-``(func : System.Func<string, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.isEqual({1}))"); CompiledName("isEqual")>]
            member __.isEqual(range : FunScript.TypeScript.TextRange) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.isEqual = {1})"); CompiledName("isEqualAux")>]
            member __.``isEqual <-``(func : System.Func<FunScript.TypeScript.TextRange, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.duplicate())"); CompiledName("duplicate")>]
            member __.duplicate() : FunScript.TypeScript.TextRange = failwith "never"
            [<FunScript.JSEmitInline("({0}.duplicate = {1})"); CompiledName("duplicateAux")>]
            member __.``duplicate <-``(func : System.Func<FunScript.TypeScript.TextRange>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.collapse({?1}))"); CompiledName("collapse2")>]
            member __.collapse(?start : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.collapse = {1})"); CompiledName("collapse2Aux")>]
            member __.``collapse <-``(func : System.Func<bool, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.queryCommandText({1}))"); CompiledName("queryCommandText2")>]
            member __.queryCommandText(cmdID : string) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.queryCommandText = {1})"); CompiledName("queryCommandText2Aux")>]
            member __.``queryCommandText <-``(func : System.Func<string, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.select())"); CompiledName("select4")>]
            member __.select() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.select = {1})"); CompiledName("select4Aux")>]
            member __.``select <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pasteHTML({1}))"); CompiledName("pasteHTML")>]
            member __.pasteHTML(html : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pasteHTML = {1})"); CompiledName("pasteHTMLAux")>]
            member __.``pasteHTML <-``(func : System.Func<string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.inRange({1}))"); CompiledName("inRange")>]
            member __.inRange(range : FunScript.TypeScript.TextRange) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.inRange = {1})"); CompiledName("inRangeAux")>]
            member __.``inRange <-``(func : System.Func<FunScript.TypeScript.TextRange, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.moveEnd({1}, {?2}))"); CompiledName("moveEnd")>]
            member __.moveEnd(_unit : string, ?count : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.moveEnd = {1})"); CompiledName("moveEndAux")>]
            member __.``moveEnd <-``(func : System.Func<string, float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getClientRects())"); CompiledName("getClientRects2")>]
            member __.getClientRects() : FunScript.TypeScript.ClientRectList = failwith "never"
            [<FunScript.JSEmitInline("({0}.getClientRects = {1})"); CompiledName("getClientRects2Aux")>]
            member __.``getClientRects <-``(func : System.Func<FunScript.TypeScript.ClientRectList>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.moveStart({1}, {?2}))"); CompiledName("moveStart")>]
            member __.moveStart(_unit : string, ?count : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.moveStart = {1})"); CompiledName("moveStartAux")>]
            member __.``moveStart <-``(func : System.Func<string, float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.parentElement())"); CompiledName("parentElement1")>]
            member __.parentElement() : FunScript.TypeScript.Element = failwith "never"
            [<FunScript.JSEmitInline("({0}.parentElement = {1})"); CompiledName("parentElement1Aux")>]
            member __.``parentElement <-``(func : System.Func<FunScript.TypeScript.Element>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.queryCommandState({1}))"); CompiledName("queryCommandState2")>]
            member __.queryCommandState(cmdID : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.queryCommandState = {1})"); CompiledName("queryCommandState2Aux")>]
            member __.``queryCommandState <-``(func : System.Func<string, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.compareEndPoints({1}, {2}))"); CompiledName("compareEndPoints")>]
            member __.compareEndPoints(how : string, sourceRange : FunScript.TypeScript.TextRange) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.compareEndPoints = {1})"); CompiledName("compareEndPointsAux")>]
            member __.``compareEndPoints <-``(func : System.Func<string, FunScript.TypeScript.TextRange, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.execCommandShowHelp({1}))"); CompiledName("execCommandShowHelp1")>]
            member __.execCommandShowHelp(cmdID : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.execCommandShowHelp = {1})"); CompiledName("execCommandShowHelp1Aux")>]
            member __.``execCommandShowHelp <-``(func : System.Func<string, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.moveToElementText({1}))"); CompiledName("moveToElementText")>]
            member __.moveToElementText(element : FunScript.TypeScript.Element) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.moveToElementText = {1})"); CompiledName("moveToElementTextAux")>]
            member __.``moveToElementText <-``(func : System.Func<FunScript.TypeScript.Element, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.expand({1}))"); CompiledName("expand")>]
            member __.expand(_unit : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.expand = {1})"); CompiledName("expandAux")>]
            member __.``expand <-``(func : System.Func<string, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.queryCommandSupported({1}))"); CompiledName("queryCommandSupported2")>]
            member __.queryCommandSupported(cmdID : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.queryCommandSupported = {1})"); CompiledName("queryCommandSupported2Aux")>]
            member __.``queryCommandSupported <-``(func : System.Func<string, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setEndPoint({1}, {2}))"); CompiledName("setEndPoint")>]
            member __.setEndPoint(how : string, sourceRange : FunScript.TypeScript.TextRange) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setEndPoint = {1})"); CompiledName("setEndPointAux")>]
            member __.``setEndPoint <-``(func : System.Func<string, FunScript.TypeScript.TextRange, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.queryCommandEnabled({1}))"); CompiledName("queryCommandEnabled2")>]
            member __.queryCommandEnabled(cmdID : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.queryCommandEnabled = {1})"); CompiledName("queryCommandEnabled2Aux")>]
            member __.``queryCommandEnabled <-``(func : System.Func<string, bool>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_891 =


    type FunScript.TypeScript.TextRangeCollection with 

            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length44")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.item({1}))"); CompiledName("item30")>]
            member __.item(index : float) : FunScript.TypeScript.TextRange = failwith "never"
            [<FunScript.JSEmitInline("({0}.item = {1})"); CompiledName("item30Aux")>]
            member __.``item <-``(func : System.Func<float, FunScript.TypeScript.TextRange>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}[{1}])"); CompiledName("Item36")>]
            member __.Item with get(i : int) : FunScript.TypeScript.TextRange = failwith "never" and set (i : int) (v : FunScript.TypeScript.TextRange) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_892 =


    type FunScript.TypeScript.TextTrack with 

            [<FunScript.JSEmitInline("({0}.language)"); CompiledName("language3")>]
            member __.language with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.mode)"); CompiledName("mode2")>]
            member __.mode with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.readyState)"); CompiledName("readyState11")>]
            member __.readyState with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.activeCues)"); CompiledName("activeCues")>]
            member __.activeCues with get() : FunScript.TypeScript.TextTrackCueList = failwith "never" and set (v : FunScript.TypeScript.TextTrackCueList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.cues)"); CompiledName("cues")>]
            member __.cues with get() : FunScript.TypeScript.TextTrackCueList = failwith "never" and set (v : FunScript.TypeScript.TextTrackCueList) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.oncuechange)"); CompiledName("oncuechange1")>]
            member __.oncuechange with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.kind)"); CompiledName("kind2")>]
            member __.kind with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onload)"); CompiledName("onload9")>]
            member __.onload with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onerror)"); CompiledName("onerror15")>]
            member __.onerror with get() : System.Func<FunScript.TypeScript.ErrorEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.ErrorEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.label)"); CompiledName("label4")>]
            member __.label with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addCue({1}))"); CompiledName("addCue")>]
            member __.addCue(cue : FunScript.TypeScript.TextTrackCue) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addCue = {1})"); CompiledName("addCueAux")>]
            member __.``addCue <-``(func : System.Func<FunScript.TypeScript.TextTrackCue, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeCue({1}))"); CompiledName("removeCue")>]
            member __.removeCue(cue : FunScript.TypeScript.TextTrackCue) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.removeCue = {1})"); CompiledName("removeCueAux")>]
            member __.``removeCue <-``(func : System.Func<FunScript.TypeScript.TextTrackCue, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ERROR)"); CompiledName("ERROR5")>]
            member __.ERROR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SHOWING)"); CompiledName("SHOWING1")>]
            member __.SHOWING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LOADING)"); CompiledName("LOADING5")>]
            member __.LOADING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LOADED)"); CompiledName("LOADED3")>]
            member __.LOADED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NONE)"); CompiledName("NONE4")>]
            member __.NONE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.HIDDEN)"); CompiledName("HIDDEN1")>]
            member __.HIDDEN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DISABLED)"); CompiledName("DISABLED1")>]
            member __.DISABLED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"cuechange\", {1}, {?2}))"); CompiledName("addEventListener1397")>]
            member __.addEventListener_cuechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"load\", {1}, {?2}))"); CompiledName("addEventListener1398")>]
            member __.addEventListener_load(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"error\", {1}, {?2}))"); CompiledName("addEventListener1399")>]
            member __.addEventListener_error(listener : System.Func<FunScript.TypeScript.ErrorEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener({1}, {2}, {?3}))"); CompiledName("addEventListener1400")>]
            member __.addEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener = {1})"); CompiledName("addEventListener1400Aux")>]
            member __.``addEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_893 =


    type FunScript.TypeScript.TextTrackCue with 

            [<FunScript.JSEmitInline("({0}.onenter)"); CompiledName("onenter")>]
            member __.onenter with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.track)"); CompiledName("track1")>]
            member __.track with get() : FunScript.TypeScript.TextTrack = failwith "never" and set (v : FunScript.TypeScript.TextTrack) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.endTime)"); CompiledName("endTime")>]
            member __.endTime with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.text)"); CompiledName("text8")>]
            member __.text with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pauseOnExit)"); CompiledName("pauseOnExit")>]
            member __.pauseOnExit with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.id)"); CompiledName("id4")>]
            member __.id with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.startTime)"); CompiledName("startTime1")>]
            member __.startTime with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onexit)"); CompiledName("onexit")>]
            member __.onexit with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getCueAsHTML())"); CompiledName("getCueAsHTML")>]
            member __.getCueAsHTML() : FunScript.TypeScript.DocumentFragment = failwith "never"
            [<FunScript.JSEmitInline("({0}.getCueAsHTML = {1})"); CompiledName("getCueAsHTMLAux")>]
            member __.``getCueAsHTML <-``(func : System.Func<FunScript.TypeScript.DocumentFragment>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"enter\", {1}, {?2}))"); CompiledName("addEventListener1401")>]
            member __.addEventListener_enter(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"exit\", {1}, {?2}))"); CompiledName("addEventListener1402")>]
            member __.addEventListener_exit(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener({1}, {2}, {?3}))"); CompiledName("addEventListener1403")>]
            member __.addEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener = {1})"); CompiledName("addEventListener1403Aux")>]
            member __.``addEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_894 =


    type FunScript.TypeScript.TextTrackCueList with 

            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length45")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.item({1}))"); CompiledName("item31")>]
            member __.item(index : float) : FunScript.TypeScript.TextTrackCue = failwith "never"
            [<FunScript.JSEmitInline("({0}.item = {1})"); CompiledName("item31Aux")>]
            member __.``item <-``(func : System.Func<float, FunScript.TypeScript.TextTrackCue>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}[{1}])"); CompiledName("Item37")>]
            member __.Item with get(i : int) : FunScript.TypeScript.TextTrackCue = failwith "never" and set (i : int) (v : FunScript.TypeScript.TextTrackCue) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getCueById({1}))"); CompiledName("getCueById")>]
            member __.getCueById(id : string) : FunScript.TypeScript.TextTrackCue = failwith "never"
            [<FunScript.JSEmitInline("({0}.getCueById = {1})"); CompiledName("getCueByIdAux")>]
            member __.``getCueById <-``(func : System.Func<string, FunScript.TypeScript.TextTrackCue>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_895 =


    type FunScript.TypeScript.TextTrackList with 

            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length46")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onaddtrack)"); CompiledName("onaddtrack1")>]
            member __.onaddtrack with get() : System.Func<FunScript.TypeScript.TrackEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.TrackEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.item({1}))"); CompiledName("item32")>]
            member __.item(index : float) : FunScript.TypeScript.TextTrack = failwith "never"
            [<FunScript.JSEmitInline("({0}.item = {1})"); CompiledName("item32Aux")>]
            member __.``item <-``(func : System.Func<float, FunScript.TypeScript.TextTrack>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}[{1}])"); CompiledName("Item38")>]
            member __.Item with get(i : int) : FunScript.TypeScript.TextTrack = failwith "never" and set (i : int) (v : FunScript.TypeScript.TextTrack) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"addtrack\", {1}, {?2}))"); CompiledName("addEventListener1404")>]
            member __.addEventListener_addtrack(listener : System.Func<FunScript.TypeScript.TrackEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener({1}, {2}, {?3}))"); CompiledName("addEventListener1405")>]
            member __.addEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener = {1})"); CompiledName("addEventListener1405Aux")>]
            member __.``addEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_896 =


    type FunScript.TypeScript.TimeRanges with 

            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length47")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.start({1}))"); CompiledName("start6")>]
            member __.start(index : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.start = {1})"); CompiledName("start6Aux")>]
            member __.``start <-``(func : System.Func<float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.end({1}))"); CompiledName("_end")>]
            member __._end(index : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.end = {1})"); CompiledName("_endAux")>]
            member __.``_end <-``(func : System.Func<float, float>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_897 =


    type FunScript.TypeScript.TrackEvent with 

            [<FunScript.JSEmitInline("({0}.track)"); CompiledName("track2")>]
            member __.track with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_898 =


    type FunScript.TypeScript.TransitionEvent with 

            [<FunScript.JSEmitInline("({0}.propertyName)"); CompiledName("propertyName1")>]
            member __.propertyName with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.elapsedTime)"); CompiledName("elapsedTime1")>]
            member __.elapsedTime with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initTransitionEvent({1}, {2}, {3}, {4}, {5}))"); CompiledName("initTransitionEvent")>]
            member __.initTransitionEvent(typeArg : string, canBubbleArg : bool, cancelableArg : bool, propertyNameArg : string, elapsedTimeArg : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initTransitionEvent = {1})"); CompiledName("initTransitionEventAux")>]
            member __.``initTransitionEvent <-``(func : System.Func<string, bool, bool, string, float, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_899 =


    type FunScript.TypeScript.TreeWalker with 

            [<FunScript.JSEmitInline("({0}.whatToShow)"); CompiledName("whatToShow1")>]
            member __.whatToShow with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.filter)"); CompiledName("filter4")>]
            member __.filter with get() : FunScript.TypeScript.NodeFilter = failwith "never" and set (v : FunScript.TypeScript.NodeFilter) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.root)"); CompiledName("root1")>]
            member __.root with get() : FunScript.TypeScript.Node = failwith "never" and set (v : FunScript.TypeScript.Node) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.currentNode)"); CompiledName("currentNode")>]
            member __.currentNode with get() : FunScript.TypeScript.Node = failwith "never" and set (v : FunScript.TypeScript.Node) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.expandEntityReferences)"); CompiledName("expandEntityReferences1")>]
            member __.expandEntityReferences with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.previousSibling())"); CompiledName("previousSibling3")>]
            member __.previousSibling() : FunScript.TypeScript.Node = failwith "never"
            [<FunScript.JSEmitInline("({0}.previousSibling = {1})"); CompiledName("previousSibling3Aux")>]
            member __.``previousSibling <-``(func : System.Func<FunScript.TypeScript.Node>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.lastChild())"); CompiledName("lastChild2")>]
            member __.lastChild() : FunScript.TypeScript.Node = failwith "never"
            [<FunScript.JSEmitInline("({0}.lastChild = {1})"); CompiledName("lastChild2Aux")>]
            member __.``lastChild <-``(func : System.Func<FunScript.TypeScript.Node>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.nextSibling())"); CompiledName("nextSibling3")>]
            member __.nextSibling() : FunScript.TypeScript.Node = failwith "never"
            [<FunScript.JSEmitInline("({0}.nextSibling = {1})"); CompiledName("nextSibling3Aux")>]
            member __.``nextSibling <-``(func : System.Func<FunScript.TypeScript.Node>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.nextNode())"); CompiledName("nextNode1")>]
            member __.nextNode() : FunScript.TypeScript.Node = failwith "never"
            [<FunScript.JSEmitInline("({0}.nextNode = {1})"); CompiledName("nextNode1Aux")>]
            member __.``nextNode <-``(func : System.Func<FunScript.TypeScript.Node>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.parentNode())"); CompiledName("parentNode2")>]
            member __.parentNode() : FunScript.TypeScript.Node = failwith "never"
            [<FunScript.JSEmitInline("({0}.parentNode = {1})"); CompiledName("parentNode2Aux")>]
            member __.``parentNode <-``(func : System.Func<FunScript.TypeScript.Node>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.firstChild())"); CompiledName("firstChild2")>]
            member __.firstChild() : FunScript.TypeScript.Node = failwith "never"
            [<FunScript.JSEmitInline("({0}.firstChild = {1})"); CompiledName("firstChild2Aux")>]
            member __.``firstChild <-``(func : System.Func<FunScript.TypeScript.Node>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.previousNode())"); CompiledName("previousNode1")>]
            member __.previousNode() : FunScript.TypeScript.Node = failwith "never"
            [<FunScript.JSEmitInline("({0}.previousNode = {1})"); CompiledName("previousNode1Aux")>]
            member __.``previousNode <-``(func : System.Func<FunScript.TypeScript.Node>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_900 =


    type FunScript.TypeScript.UIEvent with 

            [<FunScript.JSEmitInline("({0}.detail)"); CompiledName("detail2")>]
            member __.detail with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.view)"); CompiledName("view1")>]
            member __.view with get() : FunScript.TypeScript.Window = failwith "never" and set (v : FunScript.TypeScript.Window) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initUIEvent({1}, {2}, {3}, {4}, {5}))"); CompiledName("initUIEvent")>]
            member __.initUIEvent(typeArg : string, canBubbleArg : bool, cancelableArg : bool, viewArg : FunScript.TypeScript.Window, detailArg : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initUIEvent = {1})"); CompiledName("initUIEventAux")>]
            member __.``initUIEvent <-``(func : System.Func<string, bool, bool, FunScript.TypeScript.Window, float, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_901 =


    type FunScript.TypeScript.URL with 

            [<FunScript.JSEmitInline("({0}.revokeObjectURL({1}))"); CompiledName("revokeObjectURL")>]
            member __.revokeObjectURL(url : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.revokeObjectURL = {1})"); CompiledName("revokeObjectURLAux")>]
            member __.``revokeObjectURL <-``(func : System.Func<string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createObjectURL({1}, {?2}))"); CompiledName("createObjectURL")>]
            member __.createObjectURL(_object : obj, ?options : FunScript.TypeScript.ObjectURLOptions) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.createObjectURL = {1})"); CompiledName("createObjectURLAux")>]
            member __.``createObjectURL <-``(func : System.Func<obj, FunScript.TypeScript.ObjectURLOptions, string>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_902 =


    type FunScript.TypeScript.Uint16Array with 

            [<FunScript.JSEmitInline("({0}.BYTES_PER_ELEMENT)"); CompiledName("BYTES_PER_ELEMENT13")>]
            member __.BYTES_PER_ELEMENT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length48")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}[{1}])"); CompiledName("Item39")>]
            member __.Item with get(i : int) : float = failwith "never" and set (i : int) (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.get({1}))"); CompiledName("get9")>]
            member __.get(index : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.get = {1})"); CompiledName("get9Aux")>]
            member __.``get <-``(func : System.Func<float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set({1}, {2}))"); CompiledName("set17")>]
            member __.set(index : float, value : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set = {1})"); CompiledName("set17Aux")>]
            member __.``set <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set({1}, {?2}))"); CompiledName("set18")>]
            member __.set(array : FunScript.TypeScript.Uint16Array, ?offset : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set = {1})"); CompiledName("set18Aux")>]
            member __.``set <-``(func : System.Func<FunScript.TypeScript.Uint16Array, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set({1}, {?2}))"); CompiledName("set19")>]
            member __.set(array : array<float>, ?offset : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set = {1})"); CompiledName("set19Aux")>]
            member __.``set <-``(func : System.Func<array<float>, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.subarray({1}, {?2}))"); CompiledName("subarray5")>]
            member __.subarray(_begin : float, ?_end : float) : FunScript.TypeScript.Uint16Array = failwith "never"
            [<FunScript.JSEmitInline("({0}.subarray = {1})"); CompiledName("subarray5Aux")>]
            member __.``subarray <-``(func : System.Func<float, float, FunScript.TypeScript.Uint16Array>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_903 =


    type FunScript.TypeScript.Uint32Array with 

            [<FunScript.JSEmitInline("({0}.BYTES_PER_ELEMENT)"); CompiledName("BYTES_PER_ELEMENT14")>]
            member __.BYTES_PER_ELEMENT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length49")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}[{1}])"); CompiledName("Item40")>]
            member __.Item with get(i : int) : float = failwith "never" and set (i : int) (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.get({1}))"); CompiledName("get10")>]
            member __.get(index : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.get = {1})"); CompiledName("get10Aux")>]
            member __.``get <-``(func : System.Func<float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set({1}, {2}))"); CompiledName("set20")>]
            member __.set(index : float, value : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set = {1})"); CompiledName("set20Aux")>]
            member __.``set <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set({1}, {?2}))"); CompiledName("set21")>]
            member __.set(array : FunScript.TypeScript.Uint32Array, ?offset : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set = {1})"); CompiledName("set21Aux")>]
            member __.``set <-``(func : System.Func<FunScript.TypeScript.Uint32Array, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set({1}, {?2}))"); CompiledName("set22")>]
            member __.set(array : array<float>, ?offset : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set = {1})"); CompiledName("set22Aux")>]
            member __.``set <-``(func : System.Func<array<float>, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.subarray({1}, {?2}))"); CompiledName("subarray6")>]
            member __.subarray(_begin : float, ?_end : float) : FunScript.TypeScript.Uint32Array = failwith "never"
            [<FunScript.JSEmitInline("({0}.subarray = {1})"); CompiledName("subarray6Aux")>]
            member __.``subarray <-``(func : System.Func<float, float, FunScript.TypeScript.Uint32Array>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_904 =


    type FunScript.TypeScript.Uint8Array with 

            [<FunScript.JSEmitInline("({0}.BYTES_PER_ELEMENT)"); CompiledName("BYTES_PER_ELEMENT15")>]
            member __.BYTES_PER_ELEMENT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length50")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}[{1}])"); CompiledName("Item41")>]
            member __.Item with get(i : int) : float = failwith "never" and set (i : int) (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.get({1}))"); CompiledName("get11")>]
            member __.get(index : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.get = {1})"); CompiledName("get11Aux")>]
            member __.``get <-``(func : System.Func<float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set({1}, {2}))"); CompiledName("set23")>]
            member __.set(index : float, value : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set = {1})"); CompiledName("set23Aux")>]
            member __.``set <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set({1}, {?2}))"); CompiledName("set24")>]
            member __.set(array : FunScript.TypeScript.Uint8Array, ?offset : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set = {1})"); CompiledName("set24Aux")>]
            member __.``set <-``(func : System.Func<FunScript.TypeScript.Uint8Array, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set({1}, {?2}))"); CompiledName("set25")>]
            member __.set(array : array<float>, ?offset : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set = {1})"); CompiledName("set25Aux")>]
            member __.``set <-``(func : System.Func<array<float>, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.subarray({1}, {?2}))"); CompiledName("subarray7")>]
            member __.subarray(_begin : float, ?_end : float) : FunScript.TypeScript.Uint8Array = failwith "never"
            [<FunScript.JSEmitInline("({0}.subarray = {1})"); CompiledName("subarray7Aux")>]
            member __.``subarray <-``(func : System.Func<float, float, FunScript.TypeScript.Uint8Array>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_905 =


    type FunScript.TypeScript.UnviewableContentIdentifiedEvent with 

            [<FunScript.JSEmitInline("({0}.referrer)"); CompiledName("referrer1")>]
            member __.referrer with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_906 =


    type FunScript.TypeScript.ValidityState with 

            [<FunScript.JSEmitInline("({0}.customError)"); CompiledName("customError")>]
            member __.customError with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.valueMissing)"); CompiledName("valueMissing")>]
            member __.valueMissing with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.stepMismatch)"); CompiledName("stepMismatch")>]
            member __.stepMismatch with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.rangeUnderflow)"); CompiledName("rangeUnderflow")>]
            member __.rangeUnderflow with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.rangeOverflow)"); CompiledName("rangeOverflow")>]
            member __.rangeOverflow with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.typeMismatch)"); CompiledName("typeMismatch")>]
            member __.typeMismatch with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.patternMismatch)"); CompiledName("patternMismatch")>]
            member __.patternMismatch with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.tooLong)"); CompiledName("tooLong")>]
            member __.tooLong with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.valid)"); CompiledName("valid")>]
            member __.valid with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_907 =


    type FunScript.TypeScript.VideoPlaybackQuality with 

            [<FunScript.JSEmitInline("({0}.totalFrameDelay)"); CompiledName("totalFrameDelay")>]
            member __.totalFrameDelay with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.creationTime)"); CompiledName("creationTime")>]
            member __.creationTime with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.totalVideoFrames)"); CompiledName("totalVideoFrames")>]
            member __.totalVideoFrames with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.droppedVideoFrames)"); CompiledName("droppedVideoFrames")>]
            member __.droppedVideoFrames with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_908 =


    type FunScript.TypeScript.WEBGL_compressed_texture_s3tc with 

            [<FunScript.JSEmitInline("({0}.COMPRESSED_RGBA_S3TC_DXT1_EXT)"); CompiledName("COMPRESSED_RGBA_S3TC_DXT1_EXT1")>]
            member __.COMPRESSED_RGBA_S3TC_DXT1_EXT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.COMPRESSED_RGBA_S3TC_DXT5_EXT)"); CompiledName("COMPRESSED_RGBA_S3TC_DXT5_EXT1")>]
            member __.COMPRESSED_RGBA_S3TC_DXT5_EXT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.COMPRESSED_RGBA_S3TC_DXT3_EXT)"); CompiledName("COMPRESSED_RGBA_S3TC_DXT3_EXT1")>]
            member __.COMPRESSED_RGBA_S3TC_DXT3_EXT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.COMPRESSED_RGB_S3TC_DXT1_EXT)"); CompiledName("COMPRESSED_RGB_S3TC_DXT1_EXT1")>]
            member __.COMPRESSED_RGB_S3TC_DXT1_EXT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_909 =


    type FunScript.TypeScript.WeakMap<'K, 'V> with 

            [<FunScript.JSEmitInline("({0}.clear())"); CompiledName("clear16")>]
            member __.clear() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clear = {1})"); CompiledName("clear16Aux")>]
            member __.``clear <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.delete({1}))"); CompiledName("delete4")>]
            member __.delete(key : 'K) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.delete = {1})"); CompiledName("delete4Aux")>]
            member __.``delete <-``(func : System.Func<'K, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.get({1}))"); CompiledName("get12")>]
            member __.get(key : 'K) : 'V = failwith "never"
            [<FunScript.JSEmitInline("({0}.get = {1})"); CompiledName("get12Aux")>]
            member __.``get <-``(func : System.Func<'K, 'V>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.has({1}))"); CompiledName("has2")>]
            member __.has(key : 'K) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.has = {1})"); CompiledName("has2Aux")>]
            member __.``has <-``(func : System.Func<'K, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.set({1}, {2}))"); CompiledName("set26")>]
            member __.set(key : 'K, value : 'V) : FunScript.TypeScript.WeakMap<'K, 'V> = failwith "never"
            [<FunScript.JSEmitInline("({0}.set = {1})"); CompiledName("set26Aux")>]
            member __.``set <-``(func : System.Func<'K, 'V, FunScript.TypeScript.WeakMap<'K, 'V>>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_910 =


    type FunScript.TypeScript.WebGLActiveInfo with 

            [<FunScript.JSEmitInline("({0}.name)"); CompiledName("name34")>]
            member __.name with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.type)"); CompiledName("_type35")>]
            member __._type with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.size)"); CompiledName("size7")>]
            member __.size with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_911 =


    type FunScript.TypeScript.WebGLContextAttributes with 

            [<FunScript.JSEmitInline("({0}.alpha)"); CompiledName("alpha3")>]
            member __.alpha with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.depth)"); CompiledName("depth")>]
            member __.depth with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.stencil)"); CompiledName("stencil")>]
            member __.stencil with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.antialias)"); CompiledName("antialias")>]
            member __.antialias with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.premultipliedAlpha)"); CompiledName("premultipliedAlpha")>]
            member __.premultipliedAlpha with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.preserveDrawingBuffer)"); CompiledName("preserveDrawingBuffer")>]
            member __.preserveDrawingBuffer with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_912 =


    type FunScript.TypeScript.WebGLContextEvent with 

            [<FunScript.JSEmitInline("({0}.statusMessage)"); CompiledName("statusMessage")>]
            member __.statusMessage with get() : string = failwith "never" and set (v : string) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_913 =


    type FunScript.TypeScript.WebGLRenderingContext with 

            [<FunScript.JSEmitInline("({0}.drawingBufferWidth)"); CompiledName("drawingBufferWidth")>]
            member __.drawingBufferWidth with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.drawingBufferHeight)"); CompiledName("drawingBufferHeight")>]
            member __.drawingBufferHeight with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.canvas)"); CompiledName("canvas1")>]
            member __.canvas with get() : FunScript.TypeScript.HTMLCanvasElement = failwith "never" and set (v : FunScript.TypeScript.HTMLCanvasElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getUniformLocation({1}, {2}))"); CompiledName("getUniformLocation")>]
            member __.getUniformLocation(program : FunScript.TypeScript.WebGLProgram, name : string) : FunScript.TypeScript.WebGLUniformLocation = failwith "never"
            [<FunScript.JSEmitInline("({0}.getUniformLocation = {1})"); CompiledName("getUniformLocationAux")>]
            member __.``getUniformLocation <-``(func : System.Func<FunScript.TypeScript.WebGLProgram, string, FunScript.TypeScript.WebGLUniformLocation>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.bindTexture({1}, {2}))"); CompiledName("bindTexture")>]
            member __.bindTexture(target : float, texture : FunScript.TypeScript.WebGLTexture) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.bindTexture = {1})"); CompiledName("bindTextureAux")>]
            member __.``bindTexture <-``(func : System.Func<float, FunScript.TypeScript.WebGLTexture, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.bufferData({1}, {2}, {3}))"); CompiledName("bufferData")>]
            member __.bufferData(target : float, data : FunScript.TypeScript.ArrayBufferView, usage : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.bufferData = {1})"); CompiledName("bufferDataAux")>]
            member __.``bufferData <-``(func : System.Func<float, FunScript.TypeScript.ArrayBufferView, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.bufferData({1}, {2}, {3}))"); CompiledName("bufferData1")>]
            member __.bufferData(target : float, data : FunScript.TypeScript.ArrayBuffer, usage : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.bufferData = {1})"); CompiledName("bufferData1Aux")>]
            member __.``bufferData <-``(func : System.Func<float, FunScript.TypeScript.ArrayBuffer, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.bufferData({1}, {2}, {3}))"); CompiledName("bufferData2")>]
            member __.bufferData(target : float, size : float, usage : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.bufferData = {1})"); CompiledName("bufferData2Aux")>]
            member __.``bufferData <-``(func : System.Func<float, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.depthMask({1}))"); CompiledName("depthMask")>]
            member __.depthMask(flag : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.depthMask = {1})"); CompiledName("depthMaskAux")>]
            member __.``depthMask <-``(func : System.Func<bool, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getUniform({1}, {2}))"); CompiledName("getUniform")>]
            member __.getUniform(program : FunScript.TypeScript.WebGLProgram, location : FunScript.TypeScript.WebGLUniformLocation) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.getUniform = {1})"); CompiledName("getUniformAux")>]
            member __.``getUniform <-``(func : System.Func<FunScript.TypeScript.WebGLProgram, FunScript.TypeScript.WebGLUniformLocation, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.vertexAttrib3fv({1}, {2}))"); CompiledName("vertexAttrib3fv")>]
            member __.vertexAttrib3fv(indx : float, values : array<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.vertexAttrib3fv = {1})"); CompiledName("vertexAttrib3fvAux")>]
            member __.``vertexAttrib3fv <-``(func : System.Func<float, array<float>, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.vertexAttrib3fv({1}, {2}))"); CompiledName("vertexAttrib3fv1")>]
            member __.vertexAttrib3fv(indx : float, values : FunScript.TypeScript.Float32Array) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.vertexAttrib3fv = {1})"); CompiledName("vertexAttrib3fv1Aux")>]
            member __.``vertexAttrib3fv <-``(func : System.Func<float, FunScript.TypeScript.Float32Array, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.linkProgram({1}))"); CompiledName("linkProgram")>]
            member __.linkProgram(program : FunScript.TypeScript.WebGLProgram) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.linkProgram = {1})"); CompiledName("linkProgramAux")>]
            member __.``linkProgram <-``(func : System.Func<FunScript.TypeScript.WebGLProgram, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getSupportedExtensions())"); CompiledName("getSupportedExtensions")>]
            member __.getSupportedExtensions() : array<string> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getSupportedExtensions = {1})"); CompiledName("getSupportedExtensionsAux")>]
            member __.``getSupportedExtensions <-``(func : System.Func<array<string>>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.bufferSubData({1}, {2}, {3}))"); CompiledName("bufferSubData")>]
            member __.bufferSubData(target : float, offset : float, data : FunScript.TypeScript.ArrayBuffer) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.bufferSubData = {1})"); CompiledName("bufferSubDataAux")>]
            member __.``bufferSubData <-``(func : System.Func<float, float, FunScript.TypeScript.ArrayBuffer, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.bufferSubData({1}, {2}, {3}))"); CompiledName("bufferSubData1")>]
            member __.bufferSubData(target : float, offset : float, data : FunScript.TypeScript.ArrayBufferView) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.bufferSubData = {1})"); CompiledName("bufferSubData1Aux")>]
            member __.``bufferSubData <-``(func : System.Func<float, float, FunScript.TypeScript.ArrayBufferView, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.vertexAttribPointer({1}, {2}, {3}, {4}, {5}, {6}))"); CompiledName("vertexAttribPointer")>]
            member __.vertexAttribPointer(indx : float, size : float, _type : float, normalized : bool, stride : float, offset : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.vertexAttribPointer = {1})"); CompiledName("vertexAttribPointerAux")>]
            member __.``vertexAttribPointer <-``(func : System.Func<float, float, float, bool, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.polygonOffset({1}, {2}))"); CompiledName("polygonOffset")>]
            member __.polygonOffset(factor : float, units : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.polygonOffset = {1})"); CompiledName("polygonOffsetAux")>]
            member __.``polygonOffset <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.blendColor({1}, {2}, {3}, {4}))"); CompiledName("blendColor")>]
            member __.blendColor(red : float, green : float, blue : float, alpha : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.blendColor = {1})"); CompiledName("blendColorAux")>]
            member __.``blendColor <-``(func : System.Func<float, float, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createTexture())"); CompiledName("createTexture")>]
            member __.createTexture() : FunScript.TypeScript.WebGLTexture = failwith "never"
            [<FunScript.JSEmitInline("({0}.createTexture = {1})"); CompiledName("createTextureAux")>]
            member __.``createTexture <-``(func : System.Func<FunScript.TypeScript.WebGLTexture>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.hint({1}, {2}))"); CompiledName("hint")>]
            member __.hint(target : float, mode : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.hint = {1})"); CompiledName("hintAux")>]
            member __.``hint <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getVertexAttrib({1}, {2}))"); CompiledName("getVertexAttrib")>]
            member __.getVertexAttrib(index : float, pname : float) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.getVertexAttrib = {1})"); CompiledName("getVertexAttribAux")>]
            member __.``getVertexAttrib <-``(func : System.Func<float, float, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.enableVertexAttribArray({1}))"); CompiledName("enableVertexAttribArray")>]
            member __.enableVertexAttribArray(index : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.enableVertexAttribArray = {1})"); CompiledName("enableVertexAttribArrayAux")>]
            member __.``enableVertexAttribArray <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.depthRange({1}, {2}))"); CompiledName("depthRange")>]
            member __.depthRange(zNear : float, zFar : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.depthRange = {1})"); CompiledName("depthRangeAux")>]
            member __.``depthRange <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.cullFace({1}))"); CompiledName("cullFace")>]
            member __.cullFace(mode : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.cullFace = {1})"); CompiledName("cullFaceAux")>]
            member __.``cullFace <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createFramebuffer())"); CompiledName("createFramebuffer")>]
            member __.createFramebuffer() : FunScript.TypeScript.WebGLFramebuffer = failwith "never"
            [<FunScript.JSEmitInline("({0}.createFramebuffer = {1})"); CompiledName("createFramebufferAux")>]
            member __.``createFramebuffer <-``(func : System.Func<FunScript.TypeScript.WebGLFramebuffer>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniformMatrix4fv({1}, {2}, {3}))"); CompiledName("uniformMatrix4fv")>]
            member __.uniformMatrix4fv(location : FunScript.TypeScript.WebGLUniformLocation, transpose : bool, value : array<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniformMatrix4fv = {1})"); CompiledName("uniformMatrix4fvAux")>]
            member __.``uniformMatrix4fv <-``(func : System.Func<FunScript.TypeScript.WebGLUniformLocation, bool, array<float>, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniformMatrix4fv({1}, {2}, {3}))"); CompiledName("uniformMatrix4fv1")>]
            member __.uniformMatrix4fv(location : FunScript.TypeScript.WebGLUniformLocation, transpose : bool, value : FunScript.TypeScript.Float32Array) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniformMatrix4fv = {1})"); CompiledName("uniformMatrix4fv1Aux")>]
            member __.``uniformMatrix4fv <-``(func : System.Func<FunScript.TypeScript.WebGLUniformLocation, bool, FunScript.TypeScript.Float32Array, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.framebufferTexture2D({1}, {2}, {3}, {4}, {5}))"); CompiledName("framebufferTexture2D")>]
            member __.framebufferTexture2D(target : float, attachment : float, textarget : float, texture : FunScript.TypeScript.WebGLTexture, level : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.framebufferTexture2D = {1})"); CompiledName("framebufferTexture2DAux")>]
            member __.``framebufferTexture2D <-``(func : System.Func<float, float, float, FunScript.TypeScript.WebGLTexture, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteFramebuffer({1}))"); CompiledName("deleteFramebuffer")>]
            member __.deleteFramebuffer(framebuffer : FunScript.TypeScript.WebGLFramebuffer) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteFramebuffer = {1})"); CompiledName("deleteFramebufferAux")>]
            member __.``deleteFramebuffer <-``(func : System.Func<FunScript.TypeScript.WebGLFramebuffer, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.colorMask({1}, {2}, {3}, {4}))"); CompiledName("colorMask")>]
            member __.colorMask(red : bool, green : bool, blue : bool, alpha : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.colorMask = {1})"); CompiledName("colorMaskAux")>]
            member __.``colorMask <-``(func : System.Func<bool, bool, bool, bool, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.compressedTexImage2D({1}, {2}, {3}, {4}, {5}, {6}, {7}))"); CompiledName("compressedTexImage2D")>]
            member __.compressedTexImage2D(target : float, level : float, internalformat : float, width : float, height : float, border : float, data : FunScript.TypeScript.ArrayBufferView) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.compressedTexImage2D = {1})"); CompiledName("compressedTexImage2DAux")>]
            member __.``compressedTexImage2D <-``(func : System.Func<float, float, float, float, float, float, FunScript.TypeScript.ArrayBufferView, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniformMatrix2fv({1}, {2}, {3}))"); CompiledName("uniformMatrix2fv")>]
            member __.uniformMatrix2fv(location : FunScript.TypeScript.WebGLUniformLocation, transpose : bool, value : array<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniformMatrix2fv = {1})"); CompiledName("uniformMatrix2fvAux")>]
            member __.``uniformMatrix2fv <-``(func : System.Func<FunScript.TypeScript.WebGLUniformLocation, bool, array<float>, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniformMatrix2fv({1}, {2}, {3}))"); CompiledName("uniformMatrix2fv1")>]
            member __.uniformMatrix2fv(location : FunScript.TypeScript.WebGLUniformLocation, transpose : bool, value : FunScript.TypeScript.Float32Array) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniformMatrix2fv = {1})"); CompiledName("uniformMatrix2fv1Aux")>]
            member __.``uniformMatrix2fv <-``(func : System.Func<FunScript.TypeScript.WebGLUniformLocation, bool, FunScript.TypeScript.Float32Array, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getExtension({1}))"); CompiledName("getExtension")>]
            member __.getExtension(name : string) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.getExtension = {1})"); CompiledName("getExtensionAux")>]
            member __.``getExtension <-``(func : System.Func<string, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createProgram())"); CompiledName("createProgram")>]
            member __.createProgram() : FunScript.TypeScript.WebGLProgram = failwith "never"
            [<FunScript.JSEmitInline("({0}.createProgram = {1})"); CompiledName("createProgramAux")>]
            member __.``createProgram <-``(func : System.Func<FunScript.TypeScript.WebGLProgram>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteShader({1}))"); CompiledName("deleteShader")>]
            member __.deleteShader(shader : FunScript.TypeScript.WebGLShader) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteShader = {1})"); CompiledName("deleteShaderAux")>]
            member __.``deleteShader <-``(func : System.Func<FunScript.TypeScript.WebGLShader, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getAttachedShaders({1}))"); CompiledName("getAttachedShaders")>]
            member __.getAttachedShaders(program : FunScript.TypeScript.WebGLProgram) : array<FunScript.TypeScript.WebGLShader> = failwith "never"
            [<FunScript.JSEmitInline("({0}.getAttachedShaders = {1})"); CompiledName("getAttachedShadersAux")>]
            member __.``getAttachedShaders <-``(func : System.Func<FunScript.TypeScript.WebGLProgram, array<FunScript.TypeScript.WebGLShader>>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.enable({1}))"); CompiledName("enable")>]
            member __.enable(cap : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.enable = {1})"); CompiledName("enableAux")>]
            member __.``enable <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.blendEquation({1}))"); CompiledName("blendEquation")>]
            member __.blendEquation(mode : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.blendEquation = {1})"); CompiledName("blendEquationAux")>]
            member __.``blendEquation <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.texImage2D({1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}))"); CompiledName("texImage2D")>]
            member __.texImage2D(target : float, level : float, internalformat : float, width : float, height : float, border : float, format : float, _type : float, pixels : FunScript.TypeScript.ArrayBufferView) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.texImage2D({1}, {2}, {3}, {4}, {5}, {6}))"); CompiledName("texImage2D1")>]
            member __.texImage2D(target : float, level : float, internalformat : float, format : float, _type : float, image : FunScript.TypeScript.HTMLImageElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.texImage2D = {1})"); CompiledName("texImage2D1Aux")>]
            member __.``texImage2D <-``(func : System.Func<float, float, float, float, float, FunScript.TypeScript.HTMLImageElement, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.texImage2D({1}, {2}, {3}, {4}, {5}, {6}))"); CompiledName("texImage2D2")>]
            member __.texImage2D(target : float, level : float, internalformat : float, format : float, _type : float, canvas : FunScript.TypeScript.HTMLCanvasElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.texImage2D = {1})"); CompiledName("texImage2D2Aux")>]
            member __.``texImage2D <-``(func : System.Func<float, float, float, float, float, FunScript.TypeScript.HTMLCanvasElement, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.texImage2D({1}, {2}, {3}, {4}, {5}, {6}))"); CompiledName("texImage2D3")>]
            member __.texImage2D(target : float, level : float, internalformat : float, format : float, _type : float, video : FunScript.TypeScript.HTMLVideoElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.texImage2D = {1})"); CompiledName("texImage2D3Aux")>]
            member __.``texImage2D <-``(func : System.Func<float, float, float, float, float, FunScript.TypeScript.HTMLVideoElement, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.texImage2D({1}, {2}, {3}, {4}, {5}, {6}))"); CompiledName("texImage2D4")>]
            member __.texImage2D(target : float, level : float, internalformat : float, format : float, _type : float, pixels : FunScript.TypeScript.ImageData) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.texImage2D = {1})"); CompiledName("texImage2D4Aux")>]
            member __.``texImage2D <-``(func : System.Func<float, float, float, float, float, FunScript.TypeScript.ImageData, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createBuffer())"); CompiledName("createBuffer")>]
            member __.createBuffer() : FunScript.TypeScript.WebGLBuffer = failwith "never"
            [<FunScript.JSEmitInline("({0}.createBuffer = {1})"); CompiledName("createBufferAux")>]
            member __.``createBuffer <-``(func : System.Func<FunScript.TypeScript.WebGLBuffer>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteTexture({1}))"); CompiledName("deleteTexture")>]
            member __.deleteTexture(texture : FunScript.TypeScript.WebGLTexture) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteTexture = {1})"); CompiledName("deleteTextureAux")>]
            member __.``deleteTexture <-``(func : System.Func<FunScript.TypeScript.WebGLTexture, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.useProgram({1}))"); CompiledName("useProgram")>]
            member __.useProgram(program : FunScript.TypeScript.WebGLProgram) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.useProgram = {1})"); CompiledName("useProgramAux")>]
            member __.``useProgram <-``(func : System.Func<FunScript.TypeScript.WebGLProgram, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.vertexAttrib2fv({1}, {2}))"); CompiledName("vertexAttrib2fv")>]
            member __.vertexAttrib2fv(indx : float, values : array<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.vertexAttrib2fv = {1})"); CompiledName("vertexAttrib2fvAux")>]
            member __.``vertexAttrib2fv <-``(func : System.Func<float, array<float>, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.vertexAttrib2fv({1}, {2}))"); CompiledName("vertexAttrib2fv1")>]
            member __.vertexAttrib2fv(indx : float, values : FunScript.TypeScript.Float32Array) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.vertexAttrib2fv = {1})"); CompiledName("vertexAttrib2fv1Aux")>]
            member __.``vertexAttrib2fv <-``(func : System.Func<float, FunScript.TypeScript.Float32Array, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.checkFramebufferStatus({1}))"); CompiledName("checkFramebufferStatus")>]
            member __.checkFramebufferStatus(target : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.checkFramebufferStatus = {1})"); CompiledName("checkFramebufferStatusAux")>]
            member __.``checkFramebufferStatus <-``(func : System.Func<float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.frontFace({1}))"); CompiledName("frontFace")>]
            member __.frontFace(mode : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.frontFace = {1})"); CompiledName("frontFaceAux")>]
            member __.``frontFace <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getBufferParameter({1}, {2}))"); CompiledName("getBufferParameter")>]
            member __.getBufferParameter(target : float, pname : float) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.getBufferParameter = {1})"); CompiledName("getBufferParameterAux")>]
            member __.``getBufferParameter <-``(func : System.Func<float, float, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.texSubImage2D({1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}))"); CompiledName("texSubImage2D")>]
            member __.texSubImage2D(target : float, level : float, xoffset : float, yoffset : float, width : float, height : float, format : float, _type : float, pixels : FunScript.TypeScript.ArrayBufferView) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.texSubImage2D({1}, {2}, {3}, {4}, {5}, {6}, {7}))"); CompiledName("texSubImage2D1")>]
            member __.texSubImage2D(target : float, level : float, xoffset : float, yoffset : float, format : float, _type : float, image : FunScript.TypeScript.HTMLImageElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.texSubImage2D = {1})"); CompiledName("texSubImage2D1Aux")>]
            member __.``texSubImage2D <-``(func : System.Func<float, float, float, float, float, float, FunScript.TypeScript.HTMLImageElement, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.texSubImage2D({1}, {2}, {3}, {4}, {5}, {6}, {7}))"); CompiledName("texSubImage2D2")>]
            member __.texSubImage2D(target : float, level : float, xoffset : float, yoffset : float, format : float, _type : float, canvas : FunScript.TypeScript.HTMLCanvasElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.texSubImage2D = {1})"); CompiledName("texSubImage2D2Aux")>]
            member __.``texSubImage2D <-``(func : System.Func<float, float, float, float, float, float, FunScript.TypeScript.HTMLCanvasElement, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.texSubImage2D({1}, {2}, {3}, {4}, {5}, {6}, {7}))"); CompiledName("texSubImage2D3")>]
            member __.texSubImage2D(target : float, level : float, xoffset : float, yoffset : float, format : float, _type : float, video : FunScript.TypeScript.HTMLVideoElement) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.texSubImage2D = {1})"); CompiledName("texSubImage2D3Aux")>]
            member __.``texSubImage2D <-``(func : System.Func<float, float, float, float, float, float, FunScript.TypeScript.HTMLVideoElement, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.texSubImage2D({1}, {2}, {3}, {4}, {5}, {6}, {7}))"); CompiledName("texSubImage2D4")>]
            member __.texSubImage2D(target : float, level : float, xoffset : float, yoffset : float, format : float, _type : float, pixels : FunScript.TypeScript.ImageData) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.texSubImage2D = {1})"); CompiledName("texSubImage2D4Aux")>]
            member __.``texSubImage2D <-``(func : System.Func<float, float, float, float, float, float, FunScript.TypeScript.ImageData, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.copyTexImage2D({1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}))"); CompiledName("copyTexImage2D")>]
            member __.copyTexImage2D(target : float, level : float, internalformat : float, x : float, y : float, width : float, height : float, border : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.copyTexImage2D = {1})"); CompiledName("copyTexImage2DAux")>]
            member __.``copyTexImage2D <-``(func : System.Func<float, float, float, float, float, float, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getVertexAttribOffset({1}, {2}))"); CompiledName("getVertexAttribOffset")>]
            member __.getVertexAttribOffset(index : float, pname : float) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.getVertexAttribOffset = {1})"); CompiledName("getVertexAttribOffsetAux")>]
            member __.``getVertexAttribOffset <-``(func : System.Func<float, float, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.disableVertexAttribArray({1}))"); CompiledName("disableVertexAttribArray")>]
            member __.disableVertexAttribArray(index : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.disableVertexAttribArray = {1})"); CompiledName("disableVertexAttribArrayAux")>]
            member __.``disableVertexAttribArray <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.blendFunc({1}, {2}))"); CompiledName("blendFunc")>]
            member __.blendFunc(sfactor : float, dfactor : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.blendFunc = {1})"); CompiledName("blendFuncAux")>]
            member __.``blendFunc <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.drawElements({1}, {2}, {3}, {4}))"); CompiledName("drawElements")>]
            member __.drawElements(mode : float, count : float, _type : float, offset : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.drawElements = {1})"); CompiledName("drawElementsAux")>]
            member __.``drawElements <-``(func : System.Func<float, float, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.isFramebuffer({1}))"); CompiledName("isFramebuffer")>]
            member __.isFramebuffer(framebuffer : FunScript.TypeScript.WebGLFramebuffer) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.isFramebuffer = {1})"); CompiledName("isFramebufferAux")>]
            member __.``isFramebuffer <-``(func : System.Func<FunScript.TypeScript.WebGLFramebuffer, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform3iv({1}, {2}))"); CompiledName("uniform3iv")>]
            member __.uniform3iv(location : FunScript.TypeScript.WebGLUniformLocation, v : array<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform3iv = {1})"); CompiledName("uniform3ivAux")>]
            member __.``uniform3iv <-``(func : System.Func<FunScript.TypeScript.WebGLUniformLocation, array<float>, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform3iv({1}, {2}))"); CompiledName("uniform3iv1")>]
            member __.uniform3iv(location : FunScript.TypeScript.WebGLUniformLocation, v : FunScript.TypeScript.Int32Array) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform3iv = {1})"); CompiledName("uniform3iv1Aux")>]
            member __.``uniform3iv <-``(func : System.Func<FunScript.TypeScript.WebGLUniformLocation, FunScript.TypeScript.Int32Array, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.lineWidth({1}))"); CompiledName("lineWidth1")>]
            member __.lineWidth(width : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.lineWidth = {1})"); CompiledName("lineWidth1Aux")>]
            member __.``lineWidth <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getShaderInfoLog({1}))"); CompiledName("getShaderInfoLog")>]
            member __.getShaderInfoLog(shader : FunScript.TypeScript.WebGLShader) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.getShaderInfoLog = {1})"); CompiledName("getShaderInfoLogAux")>]
            member __.``getShaderInfoLog <-``(func : System.Func<FunScript.TypeScript.WebGLShader, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getTexParameter({1}, {2}))"); CompiledName("getTexParameter")>]
            member __.getTexParameter(target : float, pname : float) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.getTexParameter = {1})"); CompiledName("getTexParameterAux")>]
            member __.``getTexParameter <-``(func : System.Func<float, float, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getParameter({1}))"); CompiledName("getParameter")>]
            member __.getParameter(pname : float) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.getParameter = {1})"); CompiledName("getParameterAux")>]
            member __.``getParameter <-``(func : System.Func<float, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getShaderPrecisionFormat({1}, {2}))"); CompiledName("getShaderPrecisionFormat")>]
            member __.getShaderPrecisionFormat(shadertype : float, precisiontype : float) : FunScript.TypeScript.WebGLShaderPrecisionFormat = failwith "never"
            [<FunScript.JSEmitInline("({0}.getShaderPrecisionFormat = {1})"); CompiledName("getShaderPrecisionFormatAux")>]
            member __.``getShaderPrecisionFormat <-``(func : System.Func<float, float, FunScript.TypeScript.WebGLShaderPrecisionFormat>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getContextAttributes())"); CompiledName("getContextAttributes")>]
            member __.getContextAttributes() : FunScript.TypeScript.WebGLContextAttributes = failwith "never"
            [<FunScript.JSEmitInline("({0}.getContextAttributes = {1})"); CompiledName("getContextAttributesAux")>]
            member __.``getContextAttributes <-``(func : System.Func<FunScript.TypeScript.WebGLContextAttributes>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.vertexAttrib1f({1}, {2}))"); CompiledName("vertexAttrib1f")>]
            member __.vertexAttrib1f(indx : float, x : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.vertexAttrib1f = {1})"); CompiledName("vertexAttrib1fAux")>]
            member __.``vertexAttrib1f <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.bindFramebuffer({1}, {2}))"); CompiledName("bindFramebuffer")>]
            member __.bindFramebuffer(target : float, framebuffer : FunScript.TypeScript.WebGLFramebuffer) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.bindFramebuffer = {1})"); CompiledName("bindFramebufferAux")>]
            member __.``bindFramebuffer <-``(func : System.Func<float, FunScript.TypeScript.WebGLFramebuffer, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.compressedTexSubImage2D({1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}))"); CompiledName("compressedTexSubImage2D")>]
            member __.compressedTexSubImage2D(target : float, level : float, xoffset : float, yoffset : float, width : float, height : float, format : float, data : FunScript.TypeScript.ArrayBufferView) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.compressedTexSubImage2D = {1})"); CompiledName("compressedTexSubImage2DAux")>]
            member __.``compressedTexSubImage2D <-``(func : System.Func<float, float, float, float, float, float, float, FunScript.TypeScript.ArrayBufferView, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.isContextLost())"); CompiledName("isContextLost")>]
            member __.isContextLost() : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.isContextLost = {1})"); CompiledName("isContextLostAux")>]
            member __.``isContextLost <-``(func : System.Func<bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform1iv({1}, {2}))"); CompiledName("uniform1iv")>]
            member __.uniform1iv(location : FunScript.TypeScript.WebGLUniformLocation, v : array<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform1iv = {1})"); CompiledName("uniform1ivAux")>]
            member __.``uniform1iv <-``(func : System.Func<FunScript.TypeScript.WebGLUniformLocation, array<float>, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform1iv({1}, {2}))"); CompiledName("uniform1iv1")>]
            member __.uniform1iv(location : FunScript.TypeScript.WebGLUniformLocation, v : FunScript.TypeScript.Int32Array) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform1iv = {1})"); CompiledName("uniform1iv1Aux")>]
            member __.``uniform1iv <-``(func : System.Func<FunScript.TypeScript.WebGLUniformLocation, FunScript.TypeScript.Int32Array, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getRenderbufferParameter({1}, {2}))"); CompiledName("getRenderbufferParameter")>]
            member __.getRenderbufferParameter(target : float, pname : float) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.getRenderbufferParameter = {1})"); CompiledName("getRenderbufferParameterAux")>]
            member __.``getRenderbufferParameter <-``(func : System.Func<float, float, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform2fv({1}, {2}))"); CompiledName("uniform2fv")>]
            member __.uniform2fv(location : FunScript.TypeScript.WebGLUniformLocation, v : array<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform2fv = {1})"); CompiledName("uniform2fvAux")>]
            member __.``uniform2fv <-``(func : System.Func<FunScript.TypeScript.WebGLUniformLocation, array<float>, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform2fv({1}, {2}))"); CompiledName("uniform2fv1")>]
            member __.uniform2fv(location : FunScript.TypeScript.WebGLUniformLocation, v : FunScript.TypeScript.Float32Array) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform2fv = {1})"); CompiledName("uniform2fv1Aux")>]
            member __.``uniform2fv <-``(func : System.Func<FunScript.TypeScript.WebGLUniformLocation, FunScript.TypeScript.Float32Array, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.isTexture({1}))"); CompiledName("isTexture")>]
            member __.isTexture(texture : FunScript.TypeScript.WebGLTexture) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.isTexture = {1})"); CompiledName("isTextureAux")>]
            member __.``isTexture <-``(func : System.Func<FunScript.TypeScript.WebGLTexture, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getError())"); CompiledName("getError")>]
            member __.getError() : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.getError = {1})"); CompiledName("getErrorAux")>]
            member __.``getError <-``(func : System.Func<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.shaderSource({1}, {2}))"); CompiledName("shaderSource")>]
            member __.shaderSource(shader : FunScript.TypeScript.WebGLShader, source : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.shaderSource = {1})"); CompiledName("shaderSourceAux")>]
            member __.``shaderSource <-``(func : System.Func<FunScript.TypeScript.WebGLShader, string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteRenderbuffer({1}))"); CompiledName("deleteRenderbuffer")>]
            member __.deleteRenderbuffer(renderbuffer : FunScript.TypeScript.WebGLRenderbuffer) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteRenderbuffer = {1})"); CompiledName("deleteRenderbufferAux")>]
            member __.``deleteRenderbuffer <-``(func : System.Func<FunScript.TypeScript.WebGLRenderbuffer, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.stencilMask({1}))"); CompiledName("stencilMask")>]
            member __.stencilMask(mask : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.stencilMask = {1})"); CompiledName("stencilMaskAux")>]
            member __.``stencilMask <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.bindBuffer({1}, {2}))"); CompiledName("bindBuffer")>]
            member __.bindBuffer(target : float, buffer : FunScript.TypeScript.WebGLBuffer) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.bindBuffer = {1})"); CompiledName("bindBufferAux")>]
            member __.``bindBuffer <-``(func : System.Func<float, FunScript.TypeScript.WebGLBuffer, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getAttribLocation({1}, {2}))"); CompiledName("getAttribLocation")>]
            member __.getAttribLocation(program : FunScript.TypeScript.WebGLProgram, name : string) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.getAttribLocation = {1})"); CompiledName("getAttribLocationAux")>]
            member __.``getAttribLocation <-``(func : System.Func<FunScript.TypeScript.WebGLProgram, string, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform3i({1}, {2}, {3}, {4}))"); CompiledName("uniform3i")>]
            member __.uniform3i(location : FunScript.TypeScript.WebGLUniformLocation, x : float, y : float, z : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform3i = {1})"); CompiledName("uniform3iAux")>]
            member __.``uniform3i <-``(func : System.Func<FunScript.TypeScript.WebGLUniformLocation, float, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.blendEquationSeparate({1}, {2}))"); CompiledName("blendEquationSeparate")>]
            member __.blendEquationSeparate(modeRGB : float, modeAlpha : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.blendEquationSeparate = {1})"); CompiledName("blendEquationSeparateAux")>]
            member __.``blendEquationSeparate <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clear({1}))"); CompiledName("clear17")>]
            member __.clear(mask : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clear = {1})"); CompiledName("clear17Aux")>]
            member __.``clear <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.blendFuncSeparate({1}, {2}, {3}, {4}))"); CompiledName("blendFuncSeparate")>]
            member __.blendFuncSeparate(srcRGB : float, dstRGB : float, srcAlpha : float, dstAlpha : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.blendFuncSeparate = {1})"); CompiledName("blendFuncSeparateAux")>]
            member __.``blendFuncSeparate <-``(func : System.Func<float, float, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.stencilFuncSeparate({1}, {2}, {3}, {4}))"); CompiledName("stencilFuncSeparate")>]
            member __.stencilFuncSeparate(face : float, func : float, _ref : float, mask : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.stencilFuncSeparate = {1})"); CompiledName("stencilFuncSeparateAux")>]
            member __.``stencilFuncSeparate <-``(func : System.Func<float, float, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.readPixels({1}, {2}, {3}, {4}, {5}, {6}, {7}))"); CompiledName("readPixels")>]
            member __.readPixels(x : float, y : float, width : float, height : float, format : float, _type : float, pixels : FunScript.TypeScript.ArrayBufferView) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.readPixels = {1})"); CompiledName("readPixelsAux")>]
            member __.``readPixels <-``(func : System.Func<float, float, float, float, float, float, FunScript.TypeScript.ArrayBufferView, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.scissor({1}, {2}, {3}, {4}))"); CompiledName("scissor")>]
            member __.scissor(x : float, y : float, width : float, height : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.scissor = {1})"); CompiledName("scissorAux")>]
            member __.``scissor <-``(func : System.Func<float, float, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform2i({1}, {2}, {3}))"); CompiledName("uniform2i")>]
            member __.uniform2i(location : FunScript.TypeScript.WebGLUniformLocation, x : float, y : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform2i = {1})"); CompiledName("uniform2iAux")>]
            member __.``uniform2i <-``(func : System.Func<FunScript.TypeScript.WebGLUniformLocation, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getActiveAttrib({1}, {2}))"); CompiledName("getActiveAttrib")>]
            member __.getActiveAttrib(program : FunScript.TypeScript.WebGLProgram, index : float) : FunScript.TypeScript.WebGLActiveInfo = failwith "never"
            [<FunScript.JSEmitInline("({0}.getActiveAttrib = {1})"); CompiledName("getActiveAttribAux")>]
            member __.``getActiveAttrib <-``(func : System.Func<FunScript.TypeScript.WebGLProgram, float, FunScript.TypeScript.WebGLActiveInfo>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getShaderSource({1}))"); CompiledName("getShaderSource")>]
            member __.getShaderSource(shader : FunScript.TypeScript.WebGLShader) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.getShaderSource = {1})"); CompiledName("getShaderSourceAux")>]
            member __.``getShaderSource <-``(func : System.Func<FunScript.TypeScript.WebGLShader, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.generateMipmap({1}))"); CompiledName("generateMipmap")>]
            member __.generateMipmap(target : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.generateMipmap = {1})"); CompiledName("generateMipmapAux")>]
            member __.``generateMipmap <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.bindAttribLocation({1}, {2}, {3}))"); CompiledName("bindAttribLocation")>]
            member __.bindAttribLocation(program : FunScript.TypeScript.WebGLProgram, index : float, name : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.bindAttribLocation = {1})"); CompiledName("bindAttribLocationAux")>]
            member __.``bindAttribLocation <-``(func : System.Func<FunScript.TypeScript.WebGLProgram, float, string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform1fv({1}, {2}))"); CompiledName("uniform1fv")>]
            member __.uniform1fv(location : FunScript.TypeScript.WebGLUniformLocation, v : array<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform1fv = {1})"); CompiledName("uniform1fvAux")>]
            member __.``uniform1fv <-``(func : System.Func<FunScript.TypeScript.WebGLUniformLocation, array<float>, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform1fv({1}, {2}))"); CompiledName("uniform1fv1")>]
            member __.uniform1fv(location : FunScript.TypeScript.WebGLUniformLocation, v : FunScript.TypeScript.Float32Array) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform1fv = {1})"); CompiledName("uniform1fv1Aux")>]
            member __.``uniform1fv <-``(func : System.Func<FunScript.TypeScript.WebGLUniformLocation, FunScript.TypeScript.Float32Array, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform2iv({1}, {2}))"); CompiledName("uniform2iv")>]
            member __.uniform2iv(location : FunScript.TypeScript.WebGLUniformLocation, v : array<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform2iv = {1})"); CompiledName("uniform2ivAux")>]
            member __.``uniform2iv <-``(func : System.Func<FunScript.TypeScript.WebGLUniformLocation, array<float>, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform2iv({1}, {2}))"); CompiledName("uniform2iv1")>]
            member __.uniform2iv(location : FunScript.TypeScript.WebGLUniformLocation, v : FunScript.TypeScript.Int32Array) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform2iv = {1})"); CompiledName("uniform2iv1Aux")>]
            member __.``uniform2iv <-``(func : System.Func<FunScript.TypeScript.WebGLUniformLocation, FunScript.TypeScript.Int32Array, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.stencilOp({1}, {2}, {3}))"); CompiledName("stencilOp")>]
            member __.stencilOp(fail : float, zfail : float, zpass : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.stencilOp = {1})"); CompiledName("stencilOpAux")>]
            member __.``stencilOp <-``(func : System.Func<float, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform4fv({1}, {2}))"); CompiledName("uniform4fv")>]
            member __.uniform4fv(location : FunScript.TypeScript.WebGLUniformLocation, v : array<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform4fv = {1})"); CompiledName("uniform4fvAux")>]
            member __.``uniform4fv <-``(func : System.Func<FunScript.TypeScript.WebGLUniformLocation, array<float>, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform4fv({1}, {2}))"); CompiledName("uniform4fv1")>]
            member __.uniform4fv(location : FunScript.TypeScript.WebGLUniformLocation, v : FunScript.TypeScript.Float32Array) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform4fv = {1})"); CompiledName("uniform4fv1Aux")>]
            member __.``uniform4fv <-``(func : System.Func<FunScript.TypeScript.WebGLUniformLocation, FunScript.TypeScript.Float32Array, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.vertexAttrib1fv({1}, {2}))"); CompiledName("vertexAttrib1fv")>]
            member __.vertexAttrib1fv(indx : float, values : array<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.vertexAttrib1fv = {1})"); CompiledName("vertexAttrib1fvAux")>]
            member __.``vertexAttrib1fv <-``(func : System.Func<float, array<float>, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.vertexAttrib1fv({1}, {2}))"); CompiledName("vertexAttrib1fv1")>]
            member __.vertexAttrib1fv(indx : float, values : FunScript.TypeScript.Float32Array) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.vertexAttrib1fv = {1})"); CompiledName("vertexAttrib1fv1Aux")>]
            member __.``vertexAttrib1fv <-``(func : System.Func<float, FunScript.TypeScript.Float32Array, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.flush())"); CompiledName("flush")>]
            member __.flush() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.flush = {1})"); CompiledName("flushAux")>]
            member __.``flush <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform4f({1}, {2}, {3}, {4}, {5}))"); CompiledName("uniform4f")>]
            member __.uniform4f(location : FunScript.TypeScript.WebGLUniformLocation, x : float, y : float, z : float, w : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform4f = {1})"); CompiledName("uniform4fAux")>]
            member __.``uniform4f <-``(func : System.Func<FunScript.TypeScript.WebGLUniformLocation, float, float, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteProgram({1}))"); CompiledName("deleteProgram")>]
            member __.deleteProgram(program : FunScript.TypeScript.WebGLProgram) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteProgram = {1})"); CompiledName("deleteProgramAux")>]
            member __.``deleteProgram <-``(func : System.Func<FunScript.TypeScript.WebGLProgram, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.isRenderbuffer({1}))"); CompiledName("isRenderbuffer")>]
            member __.isRenderbuffer(renderbuffer : FunScript.TypeScript.WebGLRenderbuffer) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.isRenderbuffer = {1})"); CompiledName("isRenderbufferAux")>]
            member __.``isRenderbuffer <-``(func : System.Func<FunScript.TypeScript.WebGLRenderbuffer, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform1i({1}, {2}))"); CompiledName("uniform1i")>]
            member __.uniform1i(location : FunScript.TypeScript.WebGLUniformLocation, x : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform1i = {1})"); CompiledName("uniform1iAux")>]
            member __.``uniform1i <-``(func : System.Func<FunScript.TypeScript.WebGLUniformLocation, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getProgramParameter({1}, {2}))"); CompiledName("getProgramParameter")>]
            member __.getProgramParameter(program : FunScript.TypeScript.WebGLProgram, pname : float) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.getProgramParameter = {1})"); CompiledName("getProgramParameterAux")>]
            member __.``getProgramParameter <-``(func : System.Func<FunScript.TypeScript.WebGLProgram, float, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getActiveUniform({1}, {2}))"); CompiledName("getActiveUniform")>]
            member __.getActiveUniform(program : FunScript.TypeScript.WebGLProgram, index : float) : FunScript.TypeScript.WebGLActiveInfo = failwith "never"
            [<FunScript.JSEmitInline("({0}.getActiveUniform = {1})"); CompiledName("getActiveUniformAux")>]
            member __.``getActiveUniform <-``(func : System.Func<FunScript.TypeScript.WebGLProgram, float, FunScript.TypeScript.WebGLActiveInfo>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.stencilFunc({1}, {2}, {3}))"); CompiledName("stencilFunc")>]
            member __.stencilFunc(func : float, _ref : float, mask : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.stencilFunc = {1})"); CompiledName("stencilFuncAux")>]
            member __.``stencilFunc <-``(func : System.Func<float, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pixelStorei({1}, {2}))"); CompiledName("pixelStorei")>]
            member __.pixelStorei(pname : float, param : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pixelStorei = {1})"); CompiledName("pixelStoreiAux")>]
            member __.``pixelStorei <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.disable({1}))"); CompiledName("disable")>]
            member __.disable(cap : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.disable = {1})"); CompiledName("disableAux")>]
            member __.``disable <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.vertexAttrib4fv({1}, {2}))"); CompiledName("vertexAttrib4fv")>]
            member __.vertexAttrib4fv(indx : float, values : array<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.vertexAttrib4fv = {1})"); CompiledName("vertexAttrib4fvAux")>]
            member __.``vertexAttrib4fv <-``(func : System.Func<float, array<float>, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.vertexAttrib4fv({1}, {2}))"); CompiledName("vertexAttrib4fv1")>]
            member __.vertexAttrib4fv(indx : float, values : FunScript.TypeScript.Float32Array) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.vertexAttrib4fv = {1})"); CompiledName("vertexAttrib4fv1Aux")>]
            member __.``vertexAttrib4fv <-``(func : System.Func<float, FunScript.TypeScript.Float32Array, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createRenderbuffer())"); CompiledName("createRenderbuffer")>]
            member __.createRenderbuffer() : FunScript.TypeScript.WebGLRenderbuffer = failwith "never"
            [<FunScript.JSEmitInline("({0}.createRenderbuffer = {1})"); CompiledName("createRenderbufferAux")>]
            member __.``createRenderbuffer <-``(func : System.Func<FunScript.TypeScript.WebGLRenderbuffer>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.isBuffer({1}))"); CompiledName("isBuffer")>]
            member __.isBuffer(buffer : FunScript.TypeScript.WebGLBuffer) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.isBuffer = {1})"); CompiledName("isBufferAux")>]
            member __.``isBuffer <-``(func : System.Func<FunScript.TypeScript.WebGLBuffer, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.stencilOpSeparate({1}, {2}, {3}, {4}))"); CompiledName("stencilOpSeparate")>]
            member __.stencilOpSeparate(face : float, fail : float, zfail : float, zpass : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.stencilOpSeparate = {1})"); CompiledName("stencilOpSeparateAux")>]
            member __.``stencilOpSeparate <-``(func : System.Func<float, float, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getFramebufferAttachmentParameter({1}, {2}, {3}))"); CompiledName("getFramebufferAttachmentParameter")>]
            member __.getFramebufferAttachmentParameter(target : float, attachment : float, pname : float) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.getFramebufferAttachmentParameter = {1})"); CompiledName("getFramebufferAttachmentParameterAux")>]
            member __.``getFramebufferAttachmentParameter <-``(func : System.Func<float, float, float, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform4i({1}, {2}, {3}, {4}, {5}))"); CompiledName("uniform4i")>]
            member __.uniform4i(location : FunScript.TypeScript.WebGLUniformLocation, x : float, y : float, z : float, w : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform4i = {1})"); CompiledName("uniform4iAux")>]
            member __.``uniform4i <-``(func : System.Func<FunScript.TypeScript.WebGLUniformLocation, float, float, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.sampleCoverage({1}, {2}))"); CompiledName("sampleCoverage")>]
            member __.sampleCoverage(value : float, invert : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.sampleCoverage = {1})"); CompiledName("sampleCoverageAux")>]
            member __.``sampleCoverage <-``(func : System.Func<float, bool, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.depthFunc({1}))"); CompiledName("depthFunc")>]
            member __.depthFunc(func : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.depthFunc = {1})"); CompiledName("depthFuncAux")>]
            member __.``depthFunc <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.texParameterf({1}, {2}, {3}))"); CompiledName("texParameterf")>]
            member __.texParameterf(target : float, pname : float, param : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.texParameterf = {1})"); CompiledName("texParameterfAux")>]
            member __.``texParameterf <-``(func : System.Func<float, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.vertexAttrib3f({1}, {2}, {3}, {4}))"); CompiledName("vertexAttrib3f")>]
            member __.vertexAttrib3f(indx : float, x : float, y : float, z : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.vertexAttrib3f = {1})"); CompiledName("vertexAttrib3fAux")>]
            member __.``vertexAttrib3f <-``(func : System.Func<float, float, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.drawArrays({1}, {2}, {3}))"); CompiledName("drawArrays")>]
            member __.drawArrays(mode : float, first : float, count : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.drawArrays = {1})"); CompiledName("drawArraysAux")>]
            member __.``drawArrays <-``(func : System.Func<float, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.texParameteri({1}, {2}, {3}))"); CompiledName("texParameteri")>]
            member __.texParameteri(target : float, pname : float, param : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.texParameteri = {1})"); CompiledName("texParameteriAux")>]
            member __.``texParameteri <-``(func : System.Func<float, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.vertexAttrib4f({1}, {2}, {3}, {4}, {5}))"); CompiledName("vertexAttrib4f")>]
            member __.vertexAttrib4f(indx : float, x : float, y : float, z : float, w : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.vertexAttrib4f = {1})"); CompiledName("vertexAttrib4fAux")>]
            member __.``vertexAttrib4f <-``(func : System.Func<float, float, float, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getShaderParameter({1}, {2}))"); CompiledName("getShaderParameter")>]
            member __.getShaderParameter(shader : FunScript.TypeScript.WebGLShader, pname : float) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.getShaderParameter = {1})"); CompiledName("getShaderParameterAux")>]
            member __.``getShaderParameter <-``(func : System.Func<FunScript.TypeScript.WebGLShader, float, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clearDepth({1}))"); CompiledName("clearDepth")>]
            member __.clearDepth(depth : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clearDepth = {1})"); CompiledName("clearDepthAux")>]
            member __.``clearDepth <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.activeTexture({1}))"); CompiledName("activeTexture")>]
            member __.activeTexture(texture : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.activeTexture = {1})"); CompiledName("activeTextureAux")>]
            member __.``activeTexture <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.viewport({1}, {2}, {3}, {4}))"); CompiledName("viewport1")>]
            member __.viewport(x : float, y : float, width : float, height : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.viewport = {1})"); CompiledName("viewport1Aux")>]
            member __.``viewport <-``(func : System.Func<float, float, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.detachShader({1}, {2}))"); CompiledName("detachShader")>]
            member __.detachShader(program : FunScript.TypeScript.WebGLProgram, shader : FunScript.TypeScript.WebGLShader) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.detachShader = {1})"); CompiledName("detachShaderAux")>]
            member __.``detachShader <-``(func : System.Func<FunScript.TypeScript.WebGLProgram, FunScript.TypeScript.WebGLShader, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform1f({1}, {2}))"); CompiledName("uniform1f")>]
            member __.uniform1f(location : FunScript.TypeScript.WebGLUniformLocation, x : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform1f = {1})"); CompiledName("uniform1fAux")>]
            member __.``uniform1f <-``(func : System.Func<FunScript.TypeScript.WebGLUniformLocation, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniformMatrix3fv({1}, {2}, {3}))"); CompiledName("uniformMatrix3fv")>]
            member __.uniformMatrix3fv(location : FunScript.TypeScript.WebGLUniformLocation, transpose : bool, value : array<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniformMatrix3fv = {1})"); CompiledName("uniformMatrix3fvAux")>]
            member __.``uniformMatrix3fv <-``(func : System.Func<FunScript.TypeScript.WebGLUniformLocation, bool, array<float>, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniformMatrix3fv({1}, {2}, {3}))"); CompiledName("uniformMatrix3fv1")>]
            member __.uniformMatrix3fv(location : FunScript.TypeScript.WebGLUniformLocation, transpose : bool, value : FunScript.TypeScript.Float32Array) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniformMatrix3fv = {1})"); CompiledName("uniformMatrix3fv1Aux")>]
            member __.``uniformMatrix3fv <-``(func : System.Func<FunScript.TypeScript.WebGLUniformLocation, bool, FunScript.TypeScript.Float32Array, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteBuffer({1}))"); CompiledName("deleteBuffer")>]
            member __.deleteBuffer(buffer : FunScript.TypeScript.WebGLBuffer) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deleteBuffer = {1})"); CompiledName("deleteBufferAux")>]
            member __.``deleteBuffer <-``(func : System.Func<FunScript.TypeScript.WebGLBuffer, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.copyTexSubImage2D({1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}))"); CompiledName("copyTexSubImage2D")>]
            member __.copyTexSubImage2D(target : float, level : float, xoffset : float, yoffset : float, x : float, y : float, width : float, height : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.copyTexSubImage2D = {1})"); CompiledName("copyTexSubImage2DAux")>]
            member __.``copyTexSubImage2D <-``(func : System.Func<float, float, float, float, float, float, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform3fv({1}, {2}))"); CompiledName("uniform3fv")>]
            member __.uniform3fv(location : FunScript.TypeScript.WebGLUniformLocation, v : array<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform3fv = {1})"); CompiledName("uniform3fvAux")>]
            member __.``uniform3fv <-``(func : System.Func<FunScript.TypeScript.WebGLUniformLocation, array<float>, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform3fv({1}, {2}))"); CompiledName("uniform3fv1")>]
            member __.uniform3fv(location : FunScript.TypeScript.WebGLUniformLocation, v : FunScript.TypeScript.Float32Array) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform3fv = {1})"); CompiledName("uniform3fv1Aux")>]
            member __.``uniform3fv <-``(func : System.Func<FunScript.TypeScript.WebGLUniformLocation, FunScript.TypeScript.Float32Array, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.stencilMaskSeparate({1}, {2}))"); CompiledName("stencilMaskSeparate")>]
            member __.stencilMaskSeparate(face : float, mask : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.stencilMaskSeparate = {1})"); CompiledName("stencilMaskSeparateAux")>]
            member __.``stencilMaskSeparate <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.attachShader({1}, {2}))"); CompiledName("attachShader")>]
            member __.attachShader(program : FunScript.TypeScript.WebGLProgram, shader : FunScript.TypeScript.WebGLShader) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.attachShader = {1})"); CompiledName("attachShaderAux")>]
            member __.``attachShader <-``(func : System.Func<FunScript.TypeScript.WebGLProgram, FunScript.TypeScript.WebGLShader, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.compileShader({1}))"); CompiledName("compileShader")>]
            member __.compileShader(shader : FunScript.TypeScript.WebGLShader) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.compileShader = {1})"); CompiledName("compileShaderAux")>]
            member __.``compileShader <-``(func : System.Func<FunScript.TypeScript.WebGLShader, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clearColor({1}, {2}, {3}, {4}))"); CompiledName("clearColor")>]
            member __.clearColor(red : float, green : float, blue : float, alpha : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clearColor = {1})"); CompiledName("clearColorAux")>]
            member __.``clearColor <-``(func : System.Func<float, float, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.isShader({1}))"); CompiledName("isShader")>]
            member __.isShader(shader : FunScript.TypeScript.WebGLShader) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.isShader = {1})"); CompiledName("isShaderAux")>]
            member __.``isShader <-``(func : System.Func<FunScript.TypeScript.WebGLShader, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clearStencil({1}))"); CompiledName("clearStencil")>]
            member __.clearStencil(s : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clearStencil = {1})"); CompiledName("clearStencilAux")>]
            member __.``clearStencil <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.framebufferRenderbuffer({1}, {2}, {3}, {4}))"); CompiledName("framebufferRenderbuffer")>]
            member __.framebufferRenderbuffer(target : float, attachment : float, renderbuffertarget : float, renderbuffer : FunScript.TypeScript.WebGLRenderbuffer) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.framebufferRenderbuffer = {1})"); CompiledName("framebufferRenderbufferAux")>]
            member __.``framebufferRenderbuffer <-``(func : System.Func<float, float, float, FunScript.TypeScript.WebGLRenderbuffer, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.finish())"); CompiledName("finish1")>]
            member __.finish() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.finish = {1})"); CompiledName("finish1Aux")>]
            member __.``finish <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform2f({1}, {2}, {3}))"); CompiledName("uniform2f")>]
            member __.uniform2f(location : FunScript.TypeScript.WebGLUniformLocation, x : float, y : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform2f = {1})"); CompiledName("uniform2fAux")>]
            member __.``uniform2f <-``(func : System.Func<FunScript.TypeScript.WebGLUniformLocation, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.renderbufferStorage({1}, {2}, {3}, {4}))"); CompiledName("renderbufferStorage")>]
            member __.renderbufferStorage(target : float, internalformat : float, width : float, height : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.renderbufferStorage = {1})"); CompiledName("renderbufferStorageAux")>]
            member __.``renderbufferStorage <-``(func : System.Func<float, float, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform3f({1}, {2}, {3}, {4}))"); CompiledName("uniform3f")>]
            member __.uniform3f(location : FunScript.TypeScript.WebGLUniformLocation, x : float, y : float, z : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform3f = {1})"); CompiledName("uniform3fAux")>]
            member __.``uniform3f <-``(func : System.Func<FunScript.TypeScript.WebGLUniformLocation, float, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getProgramInfoLog({1}))"); CompiledName("getProgramInfoLog")>]
            member __.getProgramInfoLog(program : FunScript.TypeScript.WebGLProgram) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.getProgramInfoLog = {1})"); CompiledName("getProgramInfoLogAux")>]
            member __.``getProgramInfoLog <-``(func : System.Func<FunScript.TypeScript.WebGLProgram, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.validateProgram({1}))"); CompiledName("validateProgram")>]
            member __.validateProgram(program : FunScript.TypeScript.WebGLProgram) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.validateProgram = {1})"); CompiledName("validateProgramAux")>]
            member __.``validateProgram <-``(func : System.Func<FunScript.TypeScript.WebGLProgram, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.isEnabled({1}))"); CompiledName("isEnabled")>]
            member __.isEnabled(cap : float) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.isEnabled = {1})"); CompiledName("isEnabledAux")>]
            member __.``isEnabled <-``(func : System.Func<float, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.vertexAttrib2f({1}, {2}, {3}))"); CompiledName("vertexAttrib2f")>]
            member __.vertexAttrib2f(indx : float, x : float, y : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.vertexAttrib2f = {1})"); CompiledName("vertexAttrib2fAux")>]
            member __.``vertexAttrib2f <-``(func : System.Func<float, float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.isProgram({1}))"); CompiledName("isProgram")>]
            member __.isProgram(program : FunScript.TypeScript.WebGLProgram) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.isProgram = {1})"); CompiledName("isProgramAux")>]
            member __.``isProgram <-``(func : System.Func<FunScript.TypeScript.WebGLProgram, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.createShader({1}))"); CompiledName("createShader")>]
            member __.createShader(_type : float) : FunScript.TypeScript.WebGLShader = failwith "never"
            [<FunScript.JSEmitInline("({0}.createShader = {1})"); CompiledName("createShaderAux")>]
            member __.``createShader <-``(func : System.Func<float, FunScript.TypeScript.WebGLShader>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.bindRenderbuffer({1}, {2}))"); CompiledName("bindRenderbuffer")>]
            member __.bindRenderbuffer(target : float, renderbuffer : FunScript.TypeScript.WebGLRenderbuffer) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.bindRenderbuffer = {1})"); CompiledName("bindRenderbufferAux")>]
            member __.``bindRenderbuffer <-``(func : System.Func<float, FunScript.TypeScript.WebGLRenderbuffer, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform4iv({1}, {2}))"); CompiledName("uniform4iv")>]
            member __.uniform4iv(location : FunScript.TypeScript.WebGLUniformLocation, v : array<float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform4iv = {1})"); CompiledName("uniform4ivAux")>]
            member __.``uniform4iv <-``(func : System.Func<FunScript.TypeScript.WebGLUniformLocation, array<float>, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform4iv({1}, {2}))"); CompiledName("uniform4iv1")>]
            member __.uniform4iv(location : FunScript.TypeScript.WebGLUniformLocation, v : FunScript.TypeScript.Int32Array) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.uniform4iv = {1})"); CompiledName("uniform4iv1Aux")>]
            member __.``uniform4iv <-``(func : System.Func<FunScript.TypeScript.WebGLUniformLocation, FunScript.TypeScript.Int32Array, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DEPTH_FUNC)"); CompiledName("DEPTH_FUNC1")>]
            member __.DEPTH_FUNC with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DEPTH_COMPONENT16)"); CompiledName("DEPTH_COMPONENT161")>]
            member __.DEPTH_COMPONENT16 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.REPLACE)"); CompiledName("REPLACE1")>]
            member __.REPLACE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.REPEAT)"); CompiledName("REPEAT1")>]
            member __.REPEAT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.VERTEX_ATTRIB_ARRAY_ENABLED)"); CompiledName("VERTEX_ATTRIB_ARRAY_ENABLED1")>]
            member __.VERTEX_ATTRIB_ARRAY_ENABLED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FRAMEBUFFER_INCOMPLETE_DIMENSIONS)"); CompiledName("FRAMEBUFFER_INCOMPLETE_DIMENSIONS1")>]
            member __.FRAMEBUFFER_INCOMPLETE_DIMENSIONS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_BUFFER_BIT)"); CompiledName("STENCIL_BUFFER_BIT1")>]
            member __.STENCIL_BUFFER_BIT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.RENDERER)"); CompiledName("RENDERER1")>]
            member __.RENDERER with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_BACK_REF)"); CompiledName("STENCIL_BACK_REF1")>]
            member __.STENCIL_BACK_REF with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE26)"); CompiledName("TEXTURE261")>]
            member __.TEXTURE26 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.RGB565)"); CompiledName("RGB5651")>]
            member __.RGB565 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DITHER)"); CompiledName("DITHER1")>]
            member __.DITHER with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.CONSTANT_COLOR)"); CompiledName("CONSTANT_COLOR1")>]
            member __.CONSTANT_COLOR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.GENERATE_MIPMAP_HINT)"); CompiledName("GENERATE_MIPMAP_HINT1")>]
            member __.GENERATE_MIPMAP_HINT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.POINTS)"); CompiledName("POINTS1")>]
            member __.POINTS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DECR)"); CompiledName("DECR1")>]
            member __.DECR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.INT_VEC3)"); CompiledName("INT_VEC31")>]
            member __.INT_VEC3 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE28)"); CompiledName("TEXTURE281")>]
            member __.TEXTURE28 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ONE_MINUS_CONSTANT_ALPHA)"); CompiledName("ONE_MINUS_CONSTANT_ALPHA1")>]
            member __.ONE_MINUS_CONSTANT_ALPHA with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BACK)"); CompiledName("BACK1")>]
            member __.BACK with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.RENDERBUFFER_STENCIL_SIZE)"); CompiledName("RENDERBUFFER_STENCIL_SIZE1")>]
            member __.RENDERBUFFER_STENCIL_SIZE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.UNPACK_FLIP_Y_WEBGL)"); CompiledName("UNPACK_FLIP_Y_WEBGL1")>]
            member __.UNPACK_FLIP_Y_WEBGL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BLEND)"); CompiledName("BLEND1")>]
            member __.BLEND with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE9)"); CompiledName("TEXTURE91")>]
            member __.TEXTURE9 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ARRAY_BUFFER_BINDING)"); CompiledName("ARRAY_BUFFER_BINDING1")>]
            member __.ARRAY_BUFFER_BINDING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MAX_VIEWPORT_DIMS)"); CompiledName("MAX_VIEWPORT_DIMS1")>]
            member __.MAX_VIEWPORT_DIMS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.INVALID_FRAMEBUFFER_OPERATION)"); CompiledName("INVALID_FRAMEBUFFER_OPERATION1")>]
            member __.INVALID_FRAMEBUFFER_OPERATION with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE)"); CompiledName("TEXTURE32")>]
            member __.TEXTURE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE0)"); CompiledName("TEXTURE01")>]
            member __.TEXTURE0 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE31)"); CompiledName("TEXTURE311")>]
            member __.TEXTURE31 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE24)"); CompiledName("TEXTURE241")>]
            member __.TEXTURE24 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.HIGH_INT)"); CompiledName("HIGH_INT1")>]
            member __.HIGH_INT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.RENDERBUFFER_BINDING)"); CompiledName("RENDERBUFFER_BINDING1")>]
            member __.RENDERBUFFER_BINDING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BLEND_COLOR)"); CompiledName("BLEND_COLOR1")>]
            member __.BLEND_COLOR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FASTEST)"); CompiledName("FASTEST1")>]
            member __.FASTEST with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_WRITEMASK)"); CompiledName("STENCIL_WRITEMASK1")>]
            member __.STENCIL_WRITEMASK with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ALIASED_POINT_SIZE_RANGE)"); CompiledName("ALIASED_POINT_SIZE_RANGE1")>]
            member __.ALIASED_POINT_SIZE_RANGE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE12)"); CompiledName("TEXTURE121")>]
            member __.TEXTURE12 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DST_ALPHA)"); CompiledName("DST_ALPHA1")>]
            member __.DST_ALPHA with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BLEND_EQUATION_RGB)"); CompiledName("BLEND_EQUATION_RGB1")>]
            member __.BLEND_EQUATION_RGB with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FRAMEBUFFER_COMPLETE)"); CompiledName("FRAMEBUFFER_COMPLETE1")>]
            member __.FRAMEBUFFER_COMPLETE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NEAREST_MIPMAP_NEAREST)"); CompiledName("NEAREST_MIPMAP_NEAREST1")>]
            member __.NEAREST_MIPMAP_NEAREST with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.VERTEX_ATTRIB_ARRAY_SIZE)"); CompiledName("VERTEX_ATTRIB_ARRAY_SIZE1")>]
            member __.VERTEX_ATTRIB_ARRAY_SIZE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE3)"); CompiledName("TEXTURE33")>]
            member __.TEXTURE3 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DEPTH_WRITEMASK)"); CompiledName("DEPTH_WRITEMASK1")>]
            member __.DEPTH_WRITEMASK with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.CONTEXT_LOST_WEBGL)"); CompiledName("CONTEXT_LOST_WEBGL1")>]
            member __.CONTEXT_LOST_WEBGL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.INVALID_VALUE)"); CompiledName("INVALID_VALUE1")>]
            member __.INVALID_VALUE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE_MAG_FILTER)"); CompiledName("TEXTURE_MAG_FILTER1")>]
            member __.TEXTURE_MAG_FILTER with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ONE_MINUS_CONSTANT_COLOR)"); CompiledName("ONE_MINUS_CONSTANT_COLOR1")>]
            member __.ONE_MINUS_CONSTANT_COLOR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ONE_MINUS_SRC_ALPHA)"); CompiledName("ONE_MINUS_SRC_ALPHA1")>]
            member __.ONE_MINUS_SRC_ALPHA with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE_CUBE_MAP_POSITIVE_Z)"); CompiledName("TEXTURE_CUBE_MAP_POSITIVE_Z1")>]
            member __.TEXTURE_CUBE_MAP_POSITIVE_Z with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NOTEQUAL)"); CompiledName("NOTEQUAL1")>]
            member __.NOTEQUAL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ALPHA)"); CompiledName("ALPHA1")>]
            member __.ALPHA with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DEPTH_STENCIL)"); CompiledName("DEPTH_STENCIL1")>]
            member __.DEPTH_STENCIL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MAX_VERTEX_UNIFORM_VECTORS)"); CompiledName("MAX_VERTEX_UNIFORM_VECTORS1")>]
            member __.MAX_VERTEX_UNIFORM_VECTORS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DEPTH_COMPONENT)"); CompiledName("DEPTH_COMPONENT1")>]
            member __.DEPTH_COMPONENT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.RENDERBUFFER_RED_SIZE)"); CompiledName("RENDERBUFFER_RED_SIZE1")>]
            member __.RENDERBUFFER_RED_SIZE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE20)"); CompiledName("TEXTURE201")>]
            member __.TEXTURE20 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.RED_BITS)"); CompiledName("RED_BITS1")>]
            member __.RED_BITS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.RENDERBUFFER_BLUE_SIZE)"); CompiledName("RENDERBUFFER_BLUE_SIZE1")>]
            member __.RENDERBUFFER_BLUE_SIZE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SCISSOR_BOX)"); CompiledName("SCISSOR_BOX1")>]
            member __.SCISSOR_BOX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.VENDOR)"); CompiledName("VENDOR1")>]
            member __.VENDOR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FRONT_AND_BACK)"); CompiledName("FRONT_AND_BACK1")>]
            member __.FRONT_AND_BACK with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.CONSTANT_ALPHA)"); CompiledName("CONSTANT_ALPHA1")>]
            member __.CONSTANT_ALPHA with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING)"); CompiledName("VERTEX_ATTRIB_ARRAY_BUFFER_BINDING1")>]
            member __.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NEAREST)"); CompiledName("NEAREST1")>]
            member __.NEAREST with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.CULL_FACE)"); CompiledName("CULL_FACE1")>]
            member __.CULL_FACE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ALIASED_LINE_WIDTH_RANGE)"); CompiledName("ALIASED_LINE_WIDTH_RANGE1")>]
            member __.ALIASED_LINE_WIDTH_RANGE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE19)"); CompiledName("TEXTURE191")>]
            member __.TEXTURE19 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FRONT)"); CompiledName("FRONT1")>]
            member __.FRONT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DEPTH_CLEAR_VALUE)"); CompiledName("DEPTH_CLEAR_VALUE1")>]
            member __.DEPTH_CLEAR_VALUE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.GREEN_BITS)"); CompiledName("GREEN_BITS1")>]
            member __.GREEN_BITS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE29)"); CompiledName("TEXTURE291")>]
            member __.TEXTURE29 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE23)"); CompiledName("TEXTURE231")>]
            member __.TEXTURE23 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MAX_RENDERBUFFER_SIZE)"); CompiledName("MAX_RENDERBUFFER_SIZE1")>]
            member __.MAX_RENDERBUFFER_SIZE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_ATTACHMENT)"); CompiledName("STENCIL_ATTACHMENT1")>]
            member __.STENCIL_ATTACHMENT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE27)"); CompiledName("TEXTURE271")>]
            member __.TEXTURE27 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BOOL_VEC2)"); CompiledName("BOOL_VEC21")>]
            member __.BOOL_VEC2 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.OUT_OF_MEMORY)"); CompiledName("OUT_OF_MEMORY1")>]
            member __.OUT_OF_MEMORY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MIRRORED_REPEAT)"); CompiledName("MIRRORED_REPEAT1")>]
            member __.MIRRORED_REPEAT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.POLYGON_OFFSET_UNITS)"); CompiledName("POLYGON_OFFSET_UNITS1")>]
            member __.POLYGON_OFFSET_UNITS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE_MIN_FILTER)"); CompiledName("TEXTURE_MIN_FILTER1")>]
            member __.TEXTURE_MIN_FILTER with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_BACK_PASS_DEPTH_PASS)"); CompiledName("STENCIL_BACK_PASS_DEPTH_PASS1")>]
            member __.STENCIL_BACK_PASS_DEPTH_PASS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LINE_LOOP)"); CompiledName("LINE_LOOP1")>]
            member __.LINE_LOOP with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FLOAT_MAT3)"); CompiledName("FLOAT_MAT31")>]
            member __.FLOAT_MAT3 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE14)"); CompiledName("TEXTURE141")>]
            member __.TEXTURE14 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LINEAR)"); CompiledName("LINEAR1")>]
            member __.LINEAR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.RGB5_A1)"); CompiledName("RGB5_A11")>]
            member __.RGB5_A1 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ONE_MINUS_SRC_COLOR)"); CompiledName("ONE_MINUS_SRC_COLOR1")>]
            member __.ONE_MINUS_SRC_COLOR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SAMPLE_COVERAGE_INVERT)"); CompiledName("SAMPLE_COVERAGE_INVERT1")>]
            member __.SAMPLE_COVERAGE_INVERT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DONT_CARE)"); CompiledName("DONT_CARE1")>]
            member __.DONT_CARE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FRAMEBUFFER_BINDING)"); CompiledName("FRAMEBUFFER_BINDING1")>]
            member __.FRAMEBUFFER_BINDING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.RENDERBUFFER_ALPHA_SIZE)"); CompiledName("RENDERBUFFER_ALPHA_SIZE1")>]
            member __.RENDERBUFFER_ALPHA_SIZE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_REF)"); CompiledName("STENCIL_REF1")>]
            member __.STENCIL_REF with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ZERO)"); CompiledName("ZERO1")>]
            member __.ZERO with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DECR_WRAP)"); CompiledName("DECR_WRAP1")>]
            member __.DECR_WRAP with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SAMPLE_COVERAGE)"); CompiledName("SAMPLE_COVERAGE1")>]
            member __.SAMPLE_COVERAGE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_BACK_FUNC)"); CompiledName("STENCIL_BACK_FUNC1")>]
            member __.STENCIL_BACK_FUNC with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE30)"); CompiledName("TEXTURE301")>]
            member __.TEXTURE30 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.VIEWPORT)"); CompiledName("VIEWPORT1")>]
            member __.VIEWPORT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_BITS)"); CompiledName("STENCIL_BITS1")>]
            member __.STENCIL_BITS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FLOAT)"); CompiledName("FLOAT1")>]
            member __.FLOAT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.COLOR_WRITEMASK)"); CompiledName("COLOR_WRITEMASK1")>]
            member __.COLOR_WRITEMASK with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SAMPLE_COVERAGE_VALUE)"); CompiledName("SAMPLE_COVERAGE_VALUE1")>]
            member __.SAMPLE_COVERAGE_VALUE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE_CUBE_MAP_NEGATIVE_Y)"); CompiledName("TEXTURE_CUBE_MAP_NEGATIVE_Y1")>]
            member __.TEXTURE_CUBE_MAP_NEGATIVE_Y with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_BACK_FAIL)"); CompiledName("STENCIL_BACK_FAIL1")>]
            member __.STENCIL_BACK_FAIL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FLOAT_MAT4)"); CompiledName("FLOAT_MAT41")>]
            member __.FLOAT_MAT4 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.UNSIGNED_SHORT_4_4_4_4)"); CompiledName("UNSIGNED_SHORT_4_4_4_41")>]
            member __.UNSIGNED_SHORT_4_4_4_4 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE6)"); CompiledName("TEXTURE61")>]
            member __.TEXTURE6 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.RENDERBUFFER_WIDTH)"); CompiledName("RENDERBUFFER_WIDTH1")>]
            member __.RENDERBUFFER_WIDTH with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.RGBA4)"); CompiledName("RGBA41")>]
            member __.RGBA4 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ALWAYS)"); CompiledName("ALWAYS1")>]
            member __.ALWAYS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BLEND_EQUATION_ALPHA)"); CompiledName("BLEND_EQUATION_ALPHA1")>]
            member __.BLEND_EQUATION_ALPHA with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.COLOR_BUFFER_BIT)"); CompiledName("COLOR_BUFFER_BIT1")>]
            member __.COLOR_BUFFER_BIT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE_CUBE_MAP)"); CompiledName("TEXTURE_CUBE_MAP1")>]
            member __.TEXTURE_CUBE_MAP with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DEPTH_BUFFER_BIT)"); CompiledName("DEPTH_BUFFER_BIT1")>]
            member __.DEPTH_BUFFER_BIT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_CLEAR_VALUE)"); CompiledName("STENCIL_CLEAR_VALUE1")>]
            member __.STENCIL_CLEAR_VALUE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BLEND_EQUATION)"); CompiledName("BLEND_EQUATION1")>]
            member __.BLEND_EQUATION with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.RENDERBUFFER_GREEN_SIZE)"); CompiledName("RENDERBUFFER_GREEN_SIZE1")>]
            member __.RENDERBUFFER_GREEN_SIZE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NEAREST_MIPMAP_LINEAR)"); CompiledName("NEAREST_MIPMAP_LINEAR1")>]
            member __.NEAREST_MIPMAP_LINEAR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.VERTEX_ATTRIB_ARRAY_TYPE)"); CompiledName("VERTEX_ATTRIB_ARRAY_TYPE1")>]
            member __.VERTEX_ATTRIB_ARRAY_TYPE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.INCR_WRAP)"); CompiledName("INCR_WRAP1")>]
            member __.INCR_WRAP with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ONE_MINUS_DST_COLOR)"); CompiledName("ONE_MINUS_DST_COLOR1")>]
            member __.ONE_MINUS_DST_COLOR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.HIGH_FLOAT)"); CompiledName("HIGH_FLOAT1")>]
            member __.HIGH_FLOAT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BYTE)"); CompiledName("BYTE1")>]
            member __.BYTE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FRONT_FACE)"); CompiledName("FRONT_FACE1")>]
            member __.FRONT_FACE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SAMPLE_ALPHA_TO_COVERAGE)"); CompiledName("SAMPLE_ALPHA_TO_COVERAGE1")>]
            member __.SAMPLE_ALPHA_TO_COVERAGE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.CCW)"); CompiledName("CCW1")>]
            member __.CCW with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE13)"); CompiledName("TEXTURE131")>]
            member __.TEXTURE13 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MAX_VERTEX_ATTRIBS)"); CompiledName("MAX_VERTEX_ATTRIBS1")>]
            member __.MAX_VERTEX_ATTRIBS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MAX_VERTEX_TEXTURE_IMAGE_UNITS)"); CompiledName("MAX_VERTEX_TEXTURE_IMAGE_UNITS1")>]
            member __.MAX_VERTEX_TEXTURE_IMAGE_UNITS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE_WRAP_T)"); CompiledName("TEXTURE_WRAP_T1")>]
            member __.TEXTURE_WRAP_T with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.UNPACK_PREMULTIPLY_ALPHA_WEBGL)"); CompiledName("UNPACK_PREMULTIPLY_ALPHA_WEBGL1")>]
            member __.UNPACK_PREMULTIPLY_ALPHA_WEBGL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FLOAT_VEC2)"); CompiledName("FLOAT_VEC21")>]
            member __.FLOAT_VEC2 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LUMINANCE)"); CompiledName("LUMINANCE1")>]
            member __.LUMINANCE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.GREATER)"); CompiledName("GREATER1")>]
            member __.GREATER with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.INT_VEC2)"); CompiledName("INT_VEC21")>]
            member __.INT_VEC2 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.VALIDATE_STATUS)"); CompiledName("VALIDATE_STATUS1")>]
            member __.VALIDATE_STATUS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FRAMEBUFFER)"); CompiledName("FRAMEBUFFER1")>]
            member __.FRAMEBUFFER with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FRAMEBUFFER_UNSUPPORTED)"); CompiledName("FRAMEBUFFER_UNSUPPORTED1")>]
            member __.FRAMEBUFFER_UNSUPPORTED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE5)"); CompiledName("TEXTURE51")>]
            member __.TEXTURE5 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FUNC_SUBTRACT)"); CompiledName("FUNC_SUBTRACT1")>]
            member __.FUNC_SUBTRACT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BLEND_DST_ALPHA)"); CompiledName("BLEND_DST_ALPHA1")>]
            member __.BLEND_DST_ALPHA with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SAMPLER_CUBE)"); CompiledName("SAMPLER_CUBE1")>]
            member __.SAMPLER_CUBE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ONE_MINUS_DST_ALPHA)"); CompiledName("ONE_MINUS_DST_ALPHA1")>]
            member __.ONE_MINUS_DST_ALPHA with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LESS)"); CompiledName("LESS1")>]
            member __.LESS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE_CUBE_MAP_POSITIVE_X)"); CompiledName("TEXTURE_CUBE_MAP_POSITIVE_X1")>]
            member __.TEXTURE_CUBE_MAP_POSITIVE_X with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BLUE_BITS)"); CompiledName("BLUE_BITS1")>]
            member __.BLUE_BITS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DEPTH_TEST)"); CompiledName("DEPTH_TEST1")>]
            member __.DEPTH_TEST with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.VERTEX_ATTRIB_ARRAY_STRIDE)"); CompiledName("VERTEX_ATTRIB_ARRAY_STRIDE1")>]
            member __.VERTEX_ATTRIB_ARRAY_STRIDE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DELETE_STATUS)"); CompiledName("DELETE_STATUS1")>]
            member __.DELETE_STATUS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE18)"); CompiledName("TEXTURE181")>]
            member __.TEXTURE18 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.POLYGON_OFFSET_FACTOR)"); CompiledName("POLYGON_OFFSET_FACTOR1")>]
            member __.POLYGON_OFFSET_FACTOR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.UNSIGNED_INT)"); CompiledName("UNSIGNED_INT1")>]
            member __.UNSIGNED_INT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE_2D)"); CompiledName("TEXTURE_2D1")>]
            member __.TEXTURE_2D with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DST_COLOR)"); CompiledName("DST_COLOR1")>]
            member __.DST_COLOR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FLOAT_MAT2)"); CompiledName("FLOAT_MAT21")>]
            member __.FLOAT_MAT2 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.COMPRESSED_TEXTURE_FORMATS)"); CompiledName("COMPRESSED_TEXTURE_FORMATS1")>]
            member __.COMPRESSED_TEXTURE_FORMATS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MAX_FRAGMENT_UNIFORM_VECTORS)"); CompiledName("MAX_FRAGMENT_UNIFORM_VECTORS1")>]
            member __.MAX_FRAGMENT_UNIFORM_VECTORS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DEPTH_STENCIL_ATTACHMENT)"); CompiledName("DEPTH_STENCIL_ATTACHMENT1")>]
            member __.DEPTH_STENCIL_ATTACHMENT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LUMINANCE_ALPHA)"); CompiledName("LUMINANCE_ALPHA1")>]
            member __.LUMINANCE_ALPHA with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.CW)"); CompiledName("CW1")>]
            member __.CW with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.VERTEX_ATTRIB_ARRAY_NORMALIZED)"); CompiledName("VERTEX_ATTRIB_ARRAY_NORMALIZED1")>]
            member __.VERTEX_ATTRIB_ARRAY_NORMALIZED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE_CUBE_MAP_NEGATIVE_Z)"); CompiledName("TEXTURE_CUBE_MAP_NEGATIVE_Z1")>]
            member __.TEXTURE_CUBE_MAP_NEGATIVE_Z with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LINEAR_MIPMAP_LINEAR)"); CompiledName("LINEAR_MIPMAP_LINEAR1")>]
            member __.LINEAR_MIPMAP_LINEAR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BUFFER_SIZE)"); CompiledName("BUFFER_SIZE1")>]
            member __.BUFFER_SIZE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SAMPLE_BUFFERS)"); CompiledName("SAMPLE_BUFFERS1")>]
            member __.SAMPLE_BUFFERS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE15)"); CompiledName("TEXTURE151")>]
            member __.TEXTURE15 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ACTIVE_TEXTURE)"); CompiledName("ACTIVE_TEXTURE1")>]
            member __.ACTIVE_TEXTURE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.VERTEX_SHADER)"); CompiledName("VERTEX_SHADER1")>]
            member __.VERTEX_SHADER with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE22)"); CompiledName("TEXTURE221")>]
            member __.TEXTURE22 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.VERTEX_ATTRIB_ARRAY_POINTER)"); CompiledName("VERTEX_ATTRIB_ARRAY_POINTER1")>]
            member __.VERTEX_ATTRIB_ARRAY_POINTER with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.INCR)"); CompiledName("INCR1")>]
            member __.INCR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.COMPILE_STATUS)"); CompiledName("COMPILE_STATUS1")>]
            member __.COMPILE_STATUS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MAX_COMBINED_TEXTURE_IMAGE_UNITS)"); CompiledName("MAX_COMBINED_TEXTURE_IMAGE_UNITS1")>]
            member __.MAX_COMBINED_TEXTURE_IMAGE_UNITS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE7)"); CompiledName("TEXTURE71")>]
            member __.TEXTURE7 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.UNSIGNED_SHORT_5_5_5_1)"); CompiledName("UNSIGNED_SHORT_5_5_5_11")>]
            member __.UNSIGNED_SHORT_5_5_5_1 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DEPTH_BITS)"); CompiledName("DEPTH_BITS1")>]
            member __.DEPTH_BITS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.RGBA)"); CompiledName("RGBA1")>]
            member __.RGBA with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TRIANGLE_STRIP)"); CompiledName("TRIANGLE_STRIP1")>]
            member __.TRIANGLE_STRIP with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.COLOR_CLEAR_VALUE)"); CompiledName("COLOR_CLEAR_VALUE1")>]
            member __.COLOR_CLEAR_VALUE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BROWSER_DEFAULT_WEBGL)"); CompiledName("BROWSER_DEFAULT_WEBGL1")>]
            member __.BROWSER_DEFAULT_WEBGL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.INVALID_ENUM)"); CompiledName("INVALID_ENUM1")>]
            member __.INVALID_ENUM with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SCISSOR_TEST)"); CompiledName("SCISSOR_TEST1")>]
            member __.SCISSOR_TEST with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LINE_STRIP)"); CompiledName("LINE_STRIP1")>]
            member __.LINE_STRIP with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FRAMEBUFFER_INCOMPLETE_ATTACHMENT)"); CompiledName("FRAMEBUFFER_INCOMPLETE_ATTACHMENT1")>]
            member __.FRAMEBUFFER_INCOMPLETE_ATTACHMENT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_FUNC)"); CompiledName("STENCIL_FUNC1")>]
            member __.STENCIL_FUNC with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME)"); CompiledName("FRAMEBUFFER_ATTACHMENT_OBJECT_NAME1")>]
            member __.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.RENDERBUFFER_HEIGHT)"); CompiledName("RENDERBUFFER_HEIGHT1")>]
            member __.RENDERBUFFER_HEIGHT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE8)"); CompiledName("TEXTURE81")>]
            member __.TEXTURE8 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TRIANGLES)"); CompiledName("TRIANGLES1")>]
            member __.TRIANGLES with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE)"); CompiledName("FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE1")>]
            member __.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_BACK_VALUE_MASK)"); CompiledName("STENCIL_BACK_VALUE_MASK1")>]
            member __.STENCIL_BACK_VALUE_MASK with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE25)"); CompiledName("TEXTURE251")>]
            member __.TEXTURE25 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.RENDERBUFFER)"); CompiledName("RENDERBUFFER1")>]
            member __.RENDERBUFFER with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LEQUAL)"); CompiledName("LEQUAL1")>]
            member __.LEQUAL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE1)"); CompiledName("TEXTURE110")>]
            member __.TEXTURE1 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_INDEX8)"); CompiledName("STENCIL_INDEX81")>]
            member __.STENCIL_INDEX8 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FUNC_ADD)"); CompiledName("FUNC_ADD1")>]
            member __.FUNC_ADD with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_FAIL)"); CompiledName("STENCIL_FAIL1")>]
            member __.STENCIL_FAIL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BLEND_SRC_ALPHA)"); CompiledName("BLEND_SRC_ALPHA1")>]
            member __.BLEND_SRC_ALPHA with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BOOL)"); CompiledName("BOOL1")>]
            member __.BOOL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ALPHA_BITS)"); CompiledName("ALPHA_BITS1")>]
            member __.ALPHA_BITS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LOW_INT)"); CompiledName("LOW_INT1")>]
            member __.LOW_INT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE10)"); CompiledName("TEXTURE101")>]
            member __.TEXTURE10 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SRC_COLOR)"); CompiledName("SRC_COLOR1")>]
            member __.SRC_COLOR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MAX_VARYING_VECTORS)"); CompiledName("MAX_VARYING_VECTORS1")>]
            member __.MAX_VARYING_VECTORS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BLEND_DST_RGB)"); CompiledName("BLEND_DST_RGB1")>]
            member __.BLEND_DST_RGB with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE_BINDING_CUBE_MAP)"); CompiledName("TEXTURE_BINDING_CUBE_MAP1")>]
            member __.TEXTURE_BINDING_CUBE_MAP with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_INDEX)"); CompiledName("STENCIL_INDEX1")>]
            member __.STENCIL_INDEX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE_BINDING_2D)"); CompiledName("TEXTURE_BINDING_2D1")>]
            member __.TEXTURE_BINDING_2D with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MEDIUM_INT)"); CompiledName("MEDIUM_INT1")>]
            member __.MEDIUM_INT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SHADER_TYPE)"); CompiledName("SHADER_TYPE1")>]
            member __.SHADER_TYPE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.POLYGON_OFFSET_FILL)"); CompiledName("POLYGON_OFFSET_FILL1")>]
            member __.POLYGON_OFFSET_FILL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DYNAMIC_DRAW)"); CompiledName("DYNAMIC_DRAW1")>]
            member __.DYNAMIC_DRAW with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE4)"); CompiledName("TEXTURE41")>]
            member __.TEXTURE4 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_BACK_PASS_DEPTH_FAIL)"); CompiledName("STENCIL_BACK_PASS_DEPTH_FAIL1")>]
            member __.STENCIL_BACK_PASS_DEPTH_FAIL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STREAM_DRAW)"); CompiledName("STREAM_DRAW1")>]
            member __.STREAM_DRAW with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MAX_CUBE_MAP_TEXTURE_SIZE)"); CompiledName("MAX_CUBE_MAP_TEXTURE_SIZE1")>]
            member __.MAX_CUBE_MAP_TEXTURE_SIZE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE17)"); CompiledName("TEXTURE171")>]
            member __.TEXTURE17 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TRIANGLE_FAN)"); CompiledName("TRIANGLE_FAN1")>]
            member __.TRIANGLE_FAN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.UNPACK_ALIGNMENT)"); CompiledName("UNPACK_ALIGNMENT1")>]
            member __.UNPACK_ALIGNMENT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.CURRENT_PROGRAM)"); CompiledName("CURRENT_PROGRAM1")>]
            member __.CURRENT_PROGRAM with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LINES)"); CompiledName("LINES1")>]
            member __.LINES with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.INVALID_OPERATION)"); CompiledName("INVALID_OPERATION1")>]
            member __.INVALID_OPERATION with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT)"); CompiledName("FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT1")>]
            member __.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LINEAR_MIPMAP_NEAREST)"); CompiledName("LINEAR_MIPMAP_NEAREST1")>]
            member __.LINEAR_MIPMAP_NEAREST with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.CLAMP_TO_EDGE)"); CompiledName("CLAMP_TO_EDGE1")>]
            member __.CLAMP_TO_EDGE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.RENDERBUFFER_DEPTH_SIZE)"); CompiledName("RENDERBUFFER_DEPTH_SIZE1")>]
            member __.RENDERBUFFER_DEPTH_SIZE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE_WRAP_S)"); CompiledName("TEXTURE_WRAP_S1")>]
            member __.TEXTURE_WRAP_S with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ELEMENT_ARRAY_BUFFER)"); CompiledName("ELEMENT_ARRAY_BUFFER1")>]
            member __.ELEMENT_ARRAY_BUFFER with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.UNSIGNED_SHORT_5_6_5)"); CompiledName("UNSIGNED_SHORT_5_6_51")>]
            member __.UNSIGNED_SHORT_5_6_5 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ACTIVE_UNIFORMS)"); CompiledName("ACTIVE_UNIFORMS1")>]
            member __.ACTIVE_UNIFORMS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FLOAT_VEC3)"); CompiledName("FLOAT_VEC31")>]
            member __.FLOAT_VEC3 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NO_ERROR)"); CompiledName("NO_ERROR1")>]
            member __.NO_ERROR with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ATTACHED_SHADERS)"); CompiledName("ATTACHED_SHADERS1")>]
            member __.ATTACHED_SHADERS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DEPTH_ATTACHMENT)"); CompiledName("DEPTH_ATTACHMENT1")>]
            member __.DEPTH_ATTACHMENT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE11)"); CompiledName("TEXTURE111")>]
            member __.TEXTURE11 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_TEST)"); CompiledName("STENCIL_TEST1")>]
            member __.STENCIL_TEST with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ONE)"); CompiledName("ONE1")>]
            member __.ONE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE)"); CompiledName("FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE1")>]
            member __.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STATIC_DRAW)"); CompiledName("STATIC_DRAW1")>]
            member __.STATIC_DRAW with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.GEQUAL)"); CompiledName("GEQUAL1")>]
            member __.GEQUAL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BOOL_VEC4)"); CompiledName("BOOL_VEC41")>]
            member __.BOOL_VEC4 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.COLOR_ATTACHMENT0)"); CompiledName("COLOR_ATTACHMENT01")>]
            member __.COLOR_ATTACHMENT0 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.PACK_ALIGNMENT)"); CompiledName("PACK_ALIGNMENT1")>]
            member __.PACK_ALIGNMENT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MAX_TEXTURE_SIZE)"); CompiledName("MAX_TEXTURE_SIZE1")>]
            member __.MAX_TEXTURE_SIZE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_PASS_DEPTH_FAIL)"); CompiledName("STENCIL_PASS_DEPTH_FAIL1")>]
            member __.STENCIL_PASS_DEPTH_FAIL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.CULL_FACE_MODE)"); CompiledName("CULL_FACE_MODE1")>]
            member __.CULL_FACE_MODE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE16)"); CompiledName("TEXTURE161")>]
            member __.TEXTURE16 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_BACK_WRITEMASK)"); CompiledName("STENCIL_BACK_WRITEMASK1")>]
            member __.STENCIL_BACK_WRITEMASK with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SRC_ALPHA)"); CompiledName("SRC_ALPHA1")>]
            member __.SRC_ALPHA with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.UNSIGNED_SHORT)"); CompiledName("UNSIGNED_SHORT1")>]
            member __.UNSIGNED_SHORT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE21)"); CompiledName("TEXTURE211")>]
            member __.TEXTURE21 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FUNC_REVERSE_SUBTRACT)"); CompiledName("FUNC_REVERSE_SUBTRACT1")>]
            member __.FUNC_REVERSE_SUBTRACT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SHADING_LANGUAGE_VERSION)"); CompiledName("SHADING_LANGUAGE_VERSION1")>]
            member __.SHADING_LANGUAGE_VERSION with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.EQUAL)"); CompiledName("EQUAL1")>]
            member __.EQUAL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL)"); CompiledName("FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL1")>]
            member __.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BOOL_VEC3)"); CompiledName("BOOL_VEC31")>]
            member __.BOOL_VEC3 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SAMPLER_2D)"); CompiledName("SAMPLER_2D1")>]
            member __.SAMPLER_2D with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE_CUBE_MAP_NEGATIVE_X)"); CompiledName("TEXTURE_CUBE_MAP_NEGATIVE_X1")>]
            member __.TEXTURE_CUBE_MAP_NEGATIVE_X with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MAX_TEXTURE_IMAGE_UNITS)"); CompiledName("MAX_TEXTURE_IMAGE_UNITS1")>]
            member __.MAX_TEXTURE_IMAGE_UNITS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE_CUBE_MAP_POSITIVE_Y)"); CompiledName("TEXTURE_CUBE_MAP_POSITIVE_Y1")>]
            member __.TEXTURE_CUBE_MAP_POSITIVE_Y with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.RENDERBUFFER_INTERNAL_FORMAT)"); CompiledName("RENDERBUFFER_INTERNAL_FORMAT1")>]
            member __.RENDERBUFFER_INTERNAL_FORMAT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_VALUE_MASK)"); CompiledName("STENCIL_VALUE_MASK1")>]
            member __.STENCIL_VALUE_MASK with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ELEMENT_ARRAY_BUFFER_BINDING)"); CompiledName("ELEMENT_ARRAY_BUFFER_BINDING1")>]
            member __.ELEMENT_ARRAY_BUFFER_BINDING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ARRAY_BUFFER)"); CompiledName("ARRAY_BUFFER1")>]
            member __.ARRAY_BUFFER with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DEPTH_RANGE)"); CompiledName("DEPTH_RANGE1")>]
            member __.DEPTH_RANGE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NICEST)"); CompiledName("NICEST1")>]
            member __.NICEST with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ACTIVE_ATTRIBUTES)"); CompiledName("ACTIVE_ATTRIBUTES1")>]
            member __.ACTIVE_ATTRIBUTES with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NEVER)"); CompiledName("NEVER1")>]
            member __.NEVER with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FLOAT_VEC4)"); CompiledName("FLOAT_VEC41")>]
            member __.FLOAT_VEC4 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.CURRENT_VERTEX_ATTRIB)"); CompiledName("CURRENT_VERTEX_ATTRIB1")>]
            member __.CURRENT_VERTEX_ATTRIB with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.STENCIL_PASS_DEPTH_PASS)"); CompiledName("STENCIL_PASS_DEPTH_PASS1")>]
            member __.STENCIL_PASS_DEPTH_PASS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.INVERT)"); CompiledName("INVERT1")>]
            member __.INVERT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LINK_STATUS)"); CompiledName("LINK_STATUS1")>]
            member __.LINK_STATUS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.RGB)"); CompiledName("RGB1")>]
            member __.RGB with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.INT_VEC4)"); CompiledName("INT_VEC41")>]
            member __.INT_VEC4 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.TEXTURE2)"); CompiledName("TEXTURE210")>]
            member __.TEXTURE2 with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.UNPACK_COLORSPACE_CONVERSION_WEBGL)"); CompiledName("UNPACK_COLORSPACE_CONVERSION_WEBGL1")>]
            member __.UNPACK_COLORSPACE_CONVERSION_WEBGL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.MEDIUM_FLOAT)"); CompiledName("MEDIUM_FLOAT1")>]
            member __.MEDIUM_FLOAT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SRC_ALPHA_SATURATE)"); CompiledName("SRC_ALPHA_SATURATE1")>]
            member __.SRC_ALPHA_SATURATE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BUFFER_USAGE)"); CompiledName("BUFFER_USAGE1")>]
            member __.BUFFER_USAGE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SHORT)"); CompiledName("SHORT1")>]
            member __.SHORT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.NONE)"); CompiledName("NONE5")>]
            member __.NONE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.UNSIGNED_BYTE)"); CompiledName("UNSIGNED_BYTE1")>]
            member __.UNSIGNED_BYTE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.INT)"); CompiledName("INT1")>]
            member __.INT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SUBPIXEL_BITS)"); CompiledName("SUBPIXEL_BITS1")>]
            member __.SUBPIXEL_BITS with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.KEEP)"); CompiledName("KEEP1")>]
            member __.KEEP with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.SAMPLES)"); CompiledName("SAMPLES1")>]
            member __.SAMPLES with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.FRAGMENT_SHADER)"); CompiledName("FRAGMENT_SHADER1")>]
            member __.FRAGMENT_SHADER with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LINE_WIDTH)"); CompiledName("LINE_WIDTH1")>]
            member __.LINE_WIDTH with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.BLEND_SRC_RGB)"); CompiledName("BLEND_SRC_RGB1")>]
            member __.BLEND_SRC_RGB with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LOW_FLOAT)"); CompiledName("LOW_FLOAT1")>]
            member __.LOW_FLOAT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.VERSION)"); CompiledName("VERSION1")>]
            member __.VERSION with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_914 =


    type FunScript.TypeScript.WebGLShaderPrecisionFormat with 

            [<FunScript.JSEmitInline("({0}.rangeMin)"); CompiledName("rangeMin")>]
            member __.rangeMin with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.rangeMax)"); CompiledName("rangeMax")>]
            member __.rangeMax with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.precision)"); CompiledName("precision")>]
            member __.precision with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_915 =


    type FunScript.TypeScript.WebSocket with 

            [<FunScript.JSEmitInline("({0}.protocol)"); CompiledName("protocol4")>]
            member __.protocol with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.readyState)"); CompiledName("readyState12")>]
            member __.readyState with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.bufferedAmount)"); CompiledName("bufferedAmount")>]
            member __.bufferedAmount with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onopen)"); CompiledName("onopen")>]
            member __.onopen with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.extensions)"); CompiledName("extensions")>]
            member __.extensions with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmessage)"); CompiledName("onmessage4")>]
            member __.onmessage with get() : System.Func<FunScript.TypeScript.MessageEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MessageEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onclose)"); CompiledName("onclose")>]
            member __.onclose with get() : System.Func<FunScript.TypeScript.CloseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.CloseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onerror)"); CompiledName("onerror16")>]
            member __.onerror with get() : System.Func<FunScript.TypeScript.ErrorEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.ErrorEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.binaryType)"); CompiledName("binaryType")>]
            member __.binaryType with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.url)"); CompiledName("url3")>]
            member __.url with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.close({?1}, {?2}))"); CompiledName("close6")>]
            member __.close(?code : float, ?reason : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.close = {1})"); CompiledName("close6Aux")>]
            member __.``close <-``(func : System.Func<float, string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.send({1}))"); CompiledName("send")>]
            member __.send(data : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.send = {1})"); CompiledName("sendAux")>]
            member __.``send <-``(func : System.Func<obj, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.OPEN)"); CompiledName("OPEN1")>]
            member __.OPEN with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.CLOSING)"); CompiledName("CLOSING1")>]
            member __.CLOSING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.CONNECTING)"); CompiledName("CONNECTING1")>]
            member __.CONNECTING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.CLOSED)"); CompiledName("CLOSED1")>]
            member __.CLOSED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"open\", {1}, {?2}))"); CompiledName("addEventListener1406")>]
            member __.addEventListener_open(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"message\", {1}, {?2}))"); CompiledName("addEventListener1407")>]
            member __.addEventListener_message(listener : System.Func<FunScript.TypeScript.MessageEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"close\", {1}, {?2}))"); CompiledName("addEventListener1408")>]
            member __.addEventListener_close(listener : System.Func<FunScript.TypeScript.CloseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"error\", {1}, {?2}))"); CompiledName("addEventListener1409")>]
            member __.addEventListener_error(listener : System.Func<FunScript.TypeScript.ErrorEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener({1}, {2}, {?3}))"); CompiledName("addEventListener1410")>]
            member __.addEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener = {1})"); CompiledName("addEventListener1410Aux")>]
            member __.``addEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_916 =


    type FunScript.TypeScript.WheelEvent with 

            [<FunScript.JSEmitInline("({0}.deltaZ)"); CompiledName("deltaZ")>]
            member __.deltaZ with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deltaX)"); CompiledName("deltaX")>]
            member __.deltaX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deltaMode)"); CompiledName("deltaMode")>]
            member __.deltaMode with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.deltaY)"); CompiledName("deltaY")>]
            member __.deltaY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.initWheelEvent({1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16}))"); CompiledName("initWheelEvent")>]
            member __.initWheelEvent(typeArg : string, canBubbleArg : bool, cancelableArg : bool, viewArg : FunScript.TypeScript.Window, detailArg : float, screenXArg : float, screenYArg : float, clientXArg : float, clientYArg : float, buttonArg : float, relatedTargetArg : FunScript.TypeScript.EventTarget, modifiersListArg : string, deltaXArg : float, deltaYArg : float, deltaZArg : float, deltaMode : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getCurrentPoint({1}))"); CompiledName("getCurrentPoint2")>]
            member __.getCurrentPoint(element : FunScript.TypeScript.Element) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getCurrentPoint = {1})"); CompiledName("getCurrentPoint2Aux")>]
            member __.``getCurrentPoint <-``(func : System.Func<FunScript.TypeScript.Element, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOM_DELTA_PIXEL)"); CompiledName("DOM_DELTA_PIXEL1")>]
            member __.DOM_DELTA_PIXEL with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOM_DELTA_LINE)"); CompiledName("DOM_DELTA_LINE1")>]
            member __.DOM_DELTA_LINE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DOM_DELTA_PAGE)"); CompiledName("DOM_DELTA_PAGE1")>]
            member __.DOM_DELTA_PAGE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_917 =


    type FunScript.TypeScript.Window with 

            [<FunScript.JSEmitInline("({0}.ondragend)"); CompiledName("ondragend3")>]
            member __.ondragend with get() : System.Func<FunScript.TypeScript.DragEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.DragEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onkeydown)"); CompiledName("onkeydown3")>]
            member __.onkeydown with get() : System.Func<FunScript.TypeScript.KeyboardEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.KeyboardEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ondragover)"); CompiledName("ondragover3")>]
            member __.ondragover with get() : System.Func<FunScript.TypeScript.DragEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.DragEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onkeyup)"); CompiledName("onkeyup3")>]
            member __.onkeyup with get() : System.Func<FunScript.TypeScript.KeyboardEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.KeyboardEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onreset)"); CompiledName("onreset3")>]
            member __.onreset with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmouseup)"); CompiledName("onmouseup4")>]
            member __.onmouseup with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ondragstart)"); CompiledName("ondragstart3")>]
            member __.ondragstart with get() : System.Func<FunScript.TypeScript.DragEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.DragEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ondrag)"); CompiledName("ondrag3")>]
            member __.ondrag with get() : System.Func<FunScript.TypeScript.DragEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.DragEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.screenX)"); CompiledName("screenX5")>]
            member __.screenX with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmouseover)"); CompiledName("onmouseover4")>]
            member __.onmouseover with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ondragleave)"); CompiledName("ondragleave3")>]
            member __.ondragleave with get() : System.Func<FunScript.TypeScript.DragEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.DragEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.history)"); CompiledName("history1")>]
            member __.history with get() : FunScript.TypeScript.History = failwith "never" and set (v : FunScript.TypeScript.History) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pageXOffset)"); CompiledName("pageXOffset1")>]
            member __.pageXOffset with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.name)"); CompiledName("name35")>]
            member __.name with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onafterprint)"); CompiledName("onafterprint3")>]
            member __.onafterprint with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onpause)"); CompiledName("onpause3")>]
            member __.onpause with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onbeforeprint)"); CompiledName("onbeforeprint3")>]
            member __.onbeforeprint with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.top)"); CompiledName("top3")>]
            member __.top with get() : FunScript.TypeScript.Window = failwith "never" and set (v : FunScript.TypeScript.Window) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmousedown)"); CompiledName("onmousedown4")>]
            member __.onmousedown with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onseeked)"); CompiledName("onseeked3")>]
            member __.onseeked with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.opener)"); CompiledName("opener1")>]
            member __.opener with get() : FunScript.TypeScript.Window = failwith "never" and set (v : FunScript.TypeScript.Window) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onclick)"); CompiledName("onclick4")>]
            member __.onclick with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.innerHeight)"); CompiledName("innerHeight1")>]
            member __.innerHeight with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onwaiting)"); CompiledName("onwaiting3")>]
            member __.onwaiting with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ononline)"); CompiledName("ononline3")>]
            member __.ononline with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ondurationchange)"); CompiledName("ondurationchange3")>]
            member __.ondurationchange with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.frames)"); CompiledName("frames2")>]
            member __.frames with get() : FunScript.TypeScript.Window = failwith "never" and set (v : FunScript.TypeScript.Window) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onblur)"); CompiledName("onblur5")>]
            member __.onblur with get() : System.Func<FunScript.TypeScript.FocusEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.FocusEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onemptied)"); CompiledName("onemptied3")>]
            member __.onemptied with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onseeking)"); CompiledName("onseeking3")>]
            member __.onseeking with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.oncanplay)"); CompiledName("oncanplay3")>]
            member __.oncanplay with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.outerWidth)"); CompiledName("outerWidth1")>]
            member __.outerWidth with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onstalled)"); CompiledName("onstalled3")>]
            member __.onstalled with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmousemove)"); CompiledName("onmousemove4")>]
            member __.onmousemove with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.innerWidth)"); CompiledName("innerWidth1")>]
            member __.innerWidth with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onoffline)"); CompiledName("onoffline3")>]
            member __.onoffline with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.length)"); CompiledName("length51")>]
            member __.length with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.screen)"); CompiledName("screen1")>]
            member __.screen with get() : FunScript.TypeScript.Screen = failwith "never" and set (v : FunScript.TypeScript.Screen) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onbeforeunload)"); CompiledName("onbeforeunload3")>]
            member __.onbeforeunload with get() : System.Func<FunScript.TypeScript.BeforeUnloadEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.BeforeUnloadEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onratechange)"); CompiledName("onratechange3")>]
            member __.onratechange with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onstorage)"); CompiledName("onstorage3")>]
            member __.onstorage with get() : System.Func<FunScript.TypeScript.StorageEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.StorageEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onloadstart)"); CompiledName("onloadstart4")>]
            member __.onloadstart with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ondragenter)"); CompiledName("ondragenter3")>]
            member __.ondragenter with get() : System.Func<FunScript.TypeScript.DragEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.DragEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onsubmit)"); CompiledName("onsubmit3")>]
            member __.onsubmit with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.self)"); CompiledName("self1")>]
            member __.self with get() : FunScript.TypeScript.Window = failwith "never" and set (v : FunScript.TypeScript.Window) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.document)"); CompiledName("document3")>]
            member __.document with get() : FunScript.TypeScript.Document = failwith "never" and set (v : FunScript.TypeScript.Document) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onprogress)"); CompiledName("onprogress6")>]
            member __.onprogress with get() : System.Func<FunScript.TypeScript.ProgressEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.ProgressEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ondblclick)"); CompiledName("ondblclick4")>]
            member __.ondblclick with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.pageYOffset)"); CompiledName("pageYOffset1")>]
            member __.pageYOffset with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.oncontextmenu)"); CompiledName("oncontextmenu3")>]
            member __.oncontextmenu with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onchange)"); CompiledName("onchange4")>]
            member __.onchange with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onloadedmetadata)"); CompiledName("onloadedmetadata3")>]
            member __.onloadedmetadata with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onplay)"); CompiledName("onplay3")>]
            member __.onplay with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onerror)"); CompiledName("onerror17")>]
            member __.onerror with get() : FunScript.TypeScript.ErrorEventHandlerDelegate = failwith "never" and set (v : FunScript.TypeScript.ErrorEventHandlerDelegate) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onplaying)"); CompiledName("onplaying3")>]
            member __.onplaying with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.parent)"); CompiledName("parent1")>]
            member __.parent with get() : FunScript.TypeScript.Window = failwith "never" and set (v : FunScript.TypeScript.Window) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.location)"); CompiledName("location3")>]
            member __.location with get() : FunScript.TypeScript.Location = failwith "never" and set (v : FunScript.TypeScript.Location) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.oncanplaythrough)"); CompiledName("oncanplaythrough3")>]
            member __.oncanplaythrough with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onabort)"); CompiledName("onabort8")>]
            member __.onabort with get() : System.Func<FunScript.TypeScript.UIEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.UIEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onreadystatechange)"); CompiledName("onreadystatechange4")>]
            member __.onreadystatechange with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.outerHeight)"); CompiledName("outerHeight1")>]
            member __.outerHeight with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onkeypress)"); CompiledName("onkeypress3")>]
            member __.onkeypress with get() : System.Func<FunScript.TypeScript.KeyboardEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.KeyboardEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.frameElement)"); CompiledName("frameElement1")>]
            member __.frameElement with get() : FunScript.TypeScript.Element = failwith "never" and set (v : FunScript.TypeScript.Element) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onloadeddata)"); CompiledName("onloadeddata3")>]
            member __.onloadeddata with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onsuspend)"); CompiledName("onsuspend3")>]
            member __.onsuspend with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.window)"); CompiledName("window1")>]
            member __.window with get() : FunScript.TypeScript.Window = failwith "never" and set (v : FunScript.TypeScript.Window) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onfocus)"); CompiledName("onfocus5")>]
            member __.onfocus with get() : System.Func<FunScript.TypeScript.FocusEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.FocusEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmessage)"); CompiledName("onmessage5")>]
            member __.onmessage with get() : System.Func<FunScript.TypeScript.MessageEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MessageEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ontimeupdate)"); CompiledName("ontimeupdate3")>]
            member __.ontimeupdate with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onresize)"); CompiledName("onresize5")>]
            member __.onresize with get() : System.Func<FunScript.TypeScript.UIEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.UIEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onselect)"); CompiledName("onselect3")>]
            member __.onselect with get() : System.Func<FunScript.TypeScript.UIEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.UIEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.navigator)"); CompiledName("navigator1")>]
            member __.navigator with get() : FunScript.TypeScript.Navigator = failwith "never" and set (v : FunScript.TypeScript.Navigator) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.styleMedia)"); CompiledName("styleMedia1")>]
            member __.styleMedia with get() : FunScript.TypeScript.StyleMedia = failwith "never" and set (v : FunScript.TypeScript.StyleMedia) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ondrop)"); CompiledName("ondrop3")>]
            member __.ondrop with get() : System.Func<FunScript.TypeScript.DragEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.DragEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmouseout)"); CompiledName("onmouseout4")>]
            member __.onmouseout with get() : System.Func<FunScript.TypeScript.MouseEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onended)"); CompiledName("onended3")>]
            member __.onended with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onhashchange)"); CompiledName("onhashchange3")>]
            member __.onhashchange with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onunload)"); CompiledName("onunload4")>]
            member __.onunload with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onscroll)"); CompiledName("onscroll4")>]
            member __.onscroll with get() : System.Func<FunScript.TypeScript.UIEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.UIEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.screenY)"); CompiledName("screenY5")>]
            member __.screenY with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmousewheel)"); CompiledName("onmousewheel3")>]
            member __.onmousewheel with get() : System.Func<FunScript.TypeScript.MouseWheelEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MouseWheelEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onload)"); CompiledName("onload10")>]
            member __.onload with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onvolumechange)"); CompiledName("onvolumechange3")>]
            member __.onvolumechange with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.oninput)"); CompiledName("oninput3")>]
            member __.oninput with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.performance)"); CompiledName("performance1")>]
            member __.performance with get() : FunScript.TypeScript.Performance = failwith "never" and set (v : FunScript.TypeScript.Performance) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmspointerdown)"); CompiledName("onmspointerdown3")>]
            member __.onmspointerdown with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.animationStartTime)"); CompiledName("animationStartTime1")>]
            member __.animationStartTime with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmsgesturedoubletap)"); CompiledName("onmsgesturedoubletap3")>]
            member __.onmsgesturedoubletap with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmspointerhover)"); CompiledName("onmspointerhover3")>]
            member __.onmspointerhover with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmsgesturehold)"); CompiledName("onmsgesturehold3")>]
            member __.onmsgesturehold with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmspointermove)"); CompiledName("onmspointermove3")>]
            member __.onmspointermove with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmsgesturechange)"); CompiledName("onmsgesturechange3")>]
            member __.onmsgesturechange with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmsgesturestart)"); CompiledName("onmsgesturestart3")>]
            member __.onmsgesturestart with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmspointercancel)"); CompiledName("onmspointercancel3")>]
            member __.onmspointercancel with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmsgestureend)"); CompiledName("onmsgestureend3")>]
            member __.onmsgestureend with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmsgesturetap)"); CompiledName("onmsgesturetap3")>]
            member __.onmsgesturetap with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmspointerout)"); CompiledName("onmspointerout3")>]
            member __.onmspointerout with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msAnimationStartTime)"); CompiledName("msAnimationStartTime1")>]
            member __.msAnimationStartTime with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.applicationCache)"); CompiledName("applicationCache1")>]
            member __.applicationCache with get() : FunScript.TypeScript.ApplicationCache = failwith "never" and set (v : FunScript.TypeScript.ApplicationCache) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmsinertiastart)"); CompiledName("onmsinertiastart3")>]
            member __.onmsinertiastart with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmspointerover)"); CompiledName("onmspointerover3")>]
            member __.onmspointerover with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onpopstate)"); CompiledName("onpopstate2")>]
            member __.onpopstate with get() : System.Func<FunScript.TypeScript.PopStateEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.PopStateEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmspointerup)"); CompiledName("onmspointerup3")>]
            member __.onmspointerup with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onpageshow)"); CompiledName("onpageshow3")>]
            member __.onpageshow with get() : System.Func<FunScript.TypeScript.PageTransitionEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.PageTransitionEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ondevicemotion)"); CompiledName("ondevicemotion1")>]
            member __.ondevicemotion with get() : System.Func<FunScript.TypeScript.DeviceMotionEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.DeviceMotionEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.devicePixelRatio)"); CompiledName("devicePixelRatio1")>]
            member __.devicePixelRatio with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msCrypto)"); CompiledName("msCrypto1")>]
            member __.msCrypto with get() : FunScript.TypeScript.Crypto = failwith "never" and set (v : FunScript.TypeScript.Crypto) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ondeviceorientation)"); CompiledName("ondeviceorientation1")>]
            member __.ondeviceorientation with get() : System.Func<FunScript.TypeScript.DeviceOrientationEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.DeviceOrientationEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.doNotTrack)"); CompiledName("doNotTrack1")>]
            member __.doNotTrack with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmspointerenter)"); CompiledName("onmspointerenter3")>]
            member __.onmspointerenter with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onpagehide)"); CompiledName("onpagehide3")>]
            member __.onpagehide with get() : System.Func<FunScript.TypeScript.PageTransitionEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.PageTransitionEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onmspointerleave)"); CompiledName("onmspointerleave3")>]
            member __.onmspointerleave with get() : System.Func<obj, obj> = failwith "never" and set (v : System.Func<obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.alert({?1}))"); CompiledName("alert1")>]
            member __.alert(?message : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.alert = {1})"); CompiledName("alert1Aux")>]
            member __.``alert <-``(func : System.Func<obj, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.scroll({?1}, {?2}))"); CompiledName("scroll2")>]
            member __.scroll(?x : float, ?y : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.scroll = {1})"); CompiledName("scroll2Aux")>]
            member __.``scroll <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.focus())"); CompiledName("focus3")>]
            member __.focus() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.focus = {1})"); CompiledName("focus3Aux")>]
            member __.``focus <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.scrollTo({?1}, {?2}))"); CompiledName("scrollTo1")>]
            member __.scrollTo(?x : float, ?y : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.scrollTo = {1})"); CompiledName("scrollTo1Aux")>]
            member __.``scrollTo <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.print())"); CompiledName("print1")>]
            member __.print() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.print = {1})"); CompiledName("print1Aux")>]
            member __.``print <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.prompt({?1}, {?2}))"); CompiledName("prompt2")>]
            member __.prompt(?message : string, ?_default : string) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.prompt = {1})"); CompiledName("prompt2Aux")>]
            member __.``prompt <-``(func : System.Func<string, string, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.toString())"); CompiledName("toString20")>]
            member __.toString() : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.toString = {1})"); CompiledName("toString20Aux")>]
            member __.``toString <-``(func : System.Func<string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.open({?1}, {?2}, {?3}, {?4}))"); CompiledName("_open3")>]
            member __._open(?url : string, ?target : string, ?features : string, ?replace : bool) : FunScript.TypeScript.Window = failwith "never"
            [<FunScript.JSEmitInline("({0}.open = {1})"); CompiledName("_open3Aux")>]
            member __.``_open <-``(func : System.Func<string, string, string, bool, FunScript.TypeScript.Window>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.scrollBy({?1}, {?2}))"); CompiledName("scrollBy1")>]
            member __.scrollBy(?x : float, ?y : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.scrollBy = {1})"); CompiledName("scrollBy1Aux")>]
            member __.``scrollBy <-``(func : System.Func<float, float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.confirm({?1}))"); CompiledName("confirm1")>]
            member __.confirm(?message : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.confirm = {1})"); CompiledName("confirm1Aux")>]
            member __.``confirm <-``(func : System.Func<string, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.close())"); CompiledName("close7")>]
            member __.close() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.close = {1})"); CompiledName("close7Aux")>]
            member __.``close <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.postMessage({1}, {2}, {?3}))"); CompiledName("postMessage3")>]
            member __.postMessage(message : obj, targetOrigin : string, ?ports : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.postMessage = {1})"); CompiledName("postMessage3Aux")>]
            member __.``postMessage <-``(func : System.Func<obj, string, obj, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.showModalDialog({?1}, {?2}, {?3}))"); CompiledName("showModalDialog1")>]
            member __.showModalDialog(?url : string, ?argument : obj, ?options : obj) : obj = failwith "never"
            [<FunScript.JSEmitInline("({0}.showModalDialog = {1})"); CompiledName("showModalDialog1Aux")>]
            member __.``showModalDialog <-``(func : System.Func<string, obj, obj, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.blur())"); CompiledName("blur2")>]
            member __.blur() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.blur = {1})"); CompiledName("blur2Aux")>]
            member __.``blur <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getSelection())"); CompiledName("getSelection2")>]
            member __.getSelection() : FunScript.TypeScript.Selection = failwith "never"
            [<FunScript.JSEmitInline("({0}.getSelection = {1})"); CompiledName("getSelection2Aux")>]
            member __.``getSelection <-``(func : System.Func<FunScript.TypeScript.Selection>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getComputedStyle({1}, {?2}))"); CompiledName("getComputedStyle2")>]
            member __.getComputedStyle(elt : FunScript.TypeScript.Element, ?pseudoElt : string) : FunScript.TypeScript.CSSStyleDeclaration = failwith "never"
            [<FunScript.JSEmitInline("({0}.getComputedStyle = {1})"); CompiledName("getComputedStyle2Aux")>]
            member __.``getComputedStyle <-``(func : System.Func<FunScript.TypeScript.Element, string, FunScript.TypeScript.CSSStyleDeclaration>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msCancelRequestAnimationFrame({1}))"); CompiledName("msCancelRequestAnimationFrame1")>]
            member __.msCancelRequestAnimationFrame(handle : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msCancelRequestAnimationFrame = {1})"); CompiledName("msCancelRequestAnimationFrame1Aux")>]
            member __.``msCancelRequestAnimationFrame <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.matchMedia({1}))"); CompiledName("matchMedia1")>]
            member __.matchMedia(mediaQuery : string) : FunScript.TypeScript.MediaQueryList = failwith "never"
            [<FunScript.JSEmitInline("({0}.matchMedia = {1})"); CompiledName("matchMedia1Aux")>]
            member __.``matchMedia <-``(func : System.Func<string, FunScript.TypeScript.MediaQueryList>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.cancelAnimationFrame({1}))"); CompiledName("cancelAnimationFrame1")>]
            member __.cancelAnimationFrame(handle : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.cancelAnimationFrame = {1})"); CompiledName("cancelAnimationFrame1Aux")>]
            member __.``cancelAnimationFrame <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msIsStaticHTML({1}))"); CompiledName("msIsStaticHTML1")>]
            member __.msIsStaticHTML(html : string) : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.msIsStaticHTML = {1})"); CompiledName("msIsStaticHTML1Aux")>]
            member __.``msIsStaticHTML <-``(func : System.Func<string, bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msMatchMedia({1}))"); CompiledName("msMatchMedia1")>]
            member __.msMatchMedia(mediaQuery : string) : FunScript.TypeScript.MediaQueryList = failwith "never"
            [<FunScript.JSEmitInline("({0}.msMatchMedia = {1})"); CompiledName("msMatchMedia1Aux")>]
            member __.``msMatchMedia <-``(func : System.Func<string, FunScript.TypeScript.MediaQueryList>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.requestAnimationFrame({1}))"); CompiledName("requestAnimationFrame1")>]
            member __.requestAnimationFrame(callback : FunScript.TypeScript.FrameRequestCallbackDelegate) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.requestAnimationFrame = {1})"); CompiledName("requestAnimationFrame1Aux")>]
            member __.``requestAnimationFrame <-``(func : System.Func<FunScript.TypeScript.FrameRequestCallbackDelegate, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msRequestAnimationFrame({1}))"); CompiledName("msRequestAnimationFrame1")>]
            member __.msRequestAnimationFrame(callback : FunScript.TypeScript.FrameRequestCallbackDelegate) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.msRequestAnimationFrame = {1})"); CompiledName("msRequestAnimationFrame1Aux")>]
            member __.``msRequestAnimationFrame <-``(func : System.Func<FunScript.TypeScript.FrameRequestCallbackDelegate, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseleave\", {1}, {?2}))"); CompiledName("addEventListener1411")>]
            member __.addEventListener_mouseleave(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseenter\", {1}, {?2}))"); CompiledName("addEventListener1412")>]
            member __.addEventListener_mouseenter(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"help\", {1}, {?2}))"); CompiledName("addEventListener1413")>]
            member __.addEventListener_help(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"focusout\", {1}, {?2}))"); CompiledName("addEventListener1414")>]
            member __.addEventListener_focusout(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"focusin\", {1}, {?2}))"); CompiledName("addEventListener1415")>]
            member __.addEventListener_focusin(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerenter\", {1}, {?2}))"); CompiledName("addEventListener1416")>]
            member __.addEventListener_pointerenter(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerout\", {1}, {?2}))"); CompiledName("addEventListener1417")>]
            member __.addEventListener_pointerout(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerdown\", {1}, {?2}))"); CompiledName("addEventListener1418")>]
            member __.addEventListener_pointerdown(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerup\", {1}, {?2}))"); CompiledName("addEventListener1419")>]
            member __.addEventListener_pointerup(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointercancel\", {1}, {?2}))"); CompiledName("addEventListener1420")>]
            member __.addEventListener_pointercancel(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerover\", {1}, {?2}))"); CompiledName("addEventListener1421")>]
            member __.addEventListener_pointerover(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointermove\", {1}, {?2}))"); CompiledName("addEventListener1422")>]
            member __.addEventListener_pointermove(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pointerleave\", {1}, {?2}))"); CompiledName("addEventListener1423")>]
            member __.addEventListener_pointerleave(listener : System.Func<FunScript.TypeScript.PointerEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragend\", {1}, {?2}))"); CompiledName("addEventListener1424")>]
            member __.addEventListener_dragend(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"keydown\", {1}, {?2}))"); CompiledName("addEventListener1425")>]
            member __.addEventListener_keydown(listener : System.Func<FunScript.TypeScript.KeyboardEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragover\", {1}, {?2}))"); CompiledName("addEventListener1426")>]
            member __.addEventListener_dragover(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"keyup\", {1}, {?2}))"); CompiledName("addEventListener1427")>]
            member __.addEventListener_keyup(listener : System.Func<FunScript.TypeScript.KeyboardEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"reset\", {1}, {?2}))"); CompiledName("addEventListener1428")>]
            member __.addEventListener_reset(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseup\", {1}, {?2}))"); CompiledName("addEventListener1429")>]
            member __.addEventListener_mouseup(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragstart\", {1}, {?2}))"); CompiledName("addEventListener1430")>]
            member __.addEventListener_dragstart(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"drag\", {1}, {?2}))"); CompiledName("addEventListener1431")>]
            member __.addEventListener_drag(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseover\", {1}, {?2}))"); CompiledName("addEventListener1432")>]
            member __.addEventListener_mouseover(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragleave\", {1}, {?2}))"); CompiledName("addEventListener1433")>]
            member __.addEventListener_dragleave(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"afterprint\", {1}, {?2}))"); CompiledName("addEventListener1434")>]
            member __.addEventListener_afterprint(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pause\", {1}, {?2}))"); CompiledName("addEventListener1435")>]
            member __.addEventListener_pause(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforeprint\", {1}, {?2}))"); CompiledName("addEventListener1436")>]
            member __.addEventListener_beforeprint(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mousedown\", {1}, {?2}))"); CompiledName("addEventListener1437")>]
            member __.addEventListener_mousedown(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"seeked\", {1}, {?2}))"); CompiledName("addEventListener1438")>]
            member __.addEventListener_seeked(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"click\", {1}, {?2}))"); CompiledName("addEventListener1439")>]
            member __.addEventListener_click(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"waiting\", {1}, {?2}))"); CompiledName("addEventListener1440")>]
            member __.addEventListener_waiting(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"online\", {1}, {?2}))"); CompiledName("addEventListener1441")>]
            member __.addEventListener_online(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"durationchange\", {1}, {?2}))"); CompiledName("addEventListener1442")>]
            member __.addEventListener_durationchange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"blur\", {1}, {?2}))"); CompiledName("addEventListener1443")>]
            member __.addEventListener_blur(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"emptied\", {1}, {?2}))"); CompiledName("addEventListener1444")>]
            member __.addEventListener_emptied(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"seeking\", {1}, {?2}))"); CompiledName("addEventListener1445")>]
            member __.addEventListener_seeking(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"canplay\", {1}, {?2}))"); CompiledName("addEventListener1446")>]
            member __.addEventListener_canplay(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"stalled\", {1}, {?2}))"); CompiledName("addEventListener1447")>]
            member __.addEventListener_stalled(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mousemove\", {1}, {?2}))"); CompiledName("addEventListener1448")>]
            member __.addEventListener_mousemove(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"offline\", {1}, {?2}))"); CompiledName("addEventListener1449")>]
            member __.addEventListener_offline(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"beforeunload\", {1}, {?2}))"); CompiledName("addEventListener1450")>]
            member __.addEventListener_beforeunload(listener : System.Func<FunScript.TypeScript.BeforeUnloadEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"ratechange\", {1}, {?2}))"); CompiledName("addEventListener1451")>]
            member __.addEventListener_ratechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"storage\", {1}, {?2}))"); CompiledName("addEventListener1452")>]
            member __.addEventListener_storage(listener : System.Func<FunScript.TypeScript.StorageEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"loadstart\", {1}, {?2}))"); CompiledName("addEventListener1453")>]
            member __.addEventListener_loadstart(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dragenter\", {1}, {?2}))"); CompiledName("addEventListener1454")>]
            member __.addEventListener_dragenter(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"submit\", {1}, {?2}))"); CompiledName("addEventListener1455")>]
            member __.addEventListener_submit(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"progress\", {1}, {?2}))"); CompiledName("addEventListener1456")>]
            member __.addEventListener_progress(listener : System.Func<FunScript.TypeScript.ProgressEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"dblclick\", {1}, {?2}))"); CompiledName("addEventListener1457")>]
            member __.addEventListener_dblclick(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"contextmenu\", {1}, {?2}))"); CompiledName("addEventListener1458")>]
            member __.addEventListener_contextmenu(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"change\", {1}, {?2}))"); CompiledName("addEventListener1459")>]
            member __.addEventListener_change(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"loadedmetadata\", {1}, {?2}))"); CompiledName("addEventListener1460")>]
            member __.addEventListener_loadedmetadata(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"play\", {1}, {?2}))"); CompiledName("addEventListener1461")>]
            member __.addEventListener_play(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"playing\", {1}, {?2}))"); CompiledName("addEventListener1462")>]
            member __.addEventListener_playing(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"canplaythrough\", {1}, {?2}))"); CompiledName("addEventListener1463")>]
            member __.addEventListener_canplaythrough(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"abort\", {1}, {?2}))"); CompiledName("addEventListener1464")>]
            member __.addEventListener_abort(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"readystatechange\", {1}, {?2}))"); CompiledName("addEventListener1465")>]
            member __.addEventListener_readystatechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"keypress\", {1}, {?2}))"); CompiledName("addEventListener1466")>]
            member __.addEventListener_keypress(listener : System.Func<FunScript.TypeScript.KeyboardEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"loadeddata\", {1}, {?2}))"); CompiledName("addEventListener1467")>]
            member __.addEventListener_loadeddata(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"suspend\", {1}, {?2}))"); CompiledName("addEventListener1468")>]
            member __.addEventListener_suspend(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"focus\", {1}, {?2}))"); CompiledName("addEventListener1469")>]
            member __.addEventListener_focus(listener : System.Func<FunScript.TypeScript.FocusEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"message\", {1}, {?2}))"); CompiledName("addEventListener1470")>]
            member __.addEventListener_message(listener : System.Func<FunScript.TypeScript.MessageEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"timeupdate\", {1}, {?2}))"); CompiledName("addEventListener1471")>]
            member __.addEventListener_timeupdate(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"resize\", {1}, {?2}))"); CompiledName("addEventListener1472")>]
            member __.addEventListener_resize(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"select\", {1}, {?2}))"); CompiledName("addEventListener1473")>]
            member __.addEventListener_select(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"drop\", {1}, {?2}))"); CompiledName("addEventListener1474")>]
            member __.addEventListener_drop(listener : System.Func<FunScript.TypeScript.DragEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mouseout\", {1}, {?2}))"); CompiledName("addEventListener1475")>]
            member __.addEventListener_mouseout(listener : System.Func<FunScript.TypeScript.MouseEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"ended\", {1}, {?2}))"); CompiledName("addEventListener1476")>]
            member __.addEventListener_ended(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"hashchange\", {1}, {?2}))"); CompiledName("addEventListener1477")>]
            member __.addEventListener_hashchange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"unload\", {1}, {?2}))"); CompiledName("addEventListener1478")>]
            member __.addEventListener_unload(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"scroll\", {1}, {?2}))"); CompiledName("addEventListener1479")>]
            member __.addEventListener_scroll(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mousewheel\", {1}, {?2}))"); CompiledName("addEventListener1480")>]
            member __.addEventListener_mousewheel(listener : System.Func<FunScript.TypeScript.MouseWheelEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"load\", {1}, {?2}))"); CompiledName("addEventListener1481")>]
            member __.addEventListener_load(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"volumechange\", {1}, {?2}))"); CompiledName("addEventListener1482")>]
            member __.addEventListener_volumechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"input\", {1}, {?2}))"); CompiledName("addEventListener1483")>]
            member __.addEventListener_input(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerdown\", {1}, {?2}))"); CompiledName("addEventListener1484")>]
            member __.addEventListener_mspointerdown(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturedoubletap\", {1}, {?2}))"); CompiledName("addEventListener1485")>]
            member __.addEventListener_msgesturedoubletap(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerhover\", {1}, {?2}))"); CompiledName("addEventListener1486")>]
            member __.addEventListener_mspointerhover(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturehold\", {1}, {?2}))"); CompiledName("addEventListener1487")>]
            member __.addEventListener_msgesturehold(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointermove\", {1}, {?2}))"); CompiledName("addEventListener1488")>]
            member __.addEventListener_mspointermove(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturechange\", {1}, {?2}))"); CompiledName("addEventListener1489")>]
            member __.addEventListener_msgesturechange(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturestart\", {1}, {?2}))"); CompiledName("addEventListener1490")>]
            member __.addEventListener_msgesturestart(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointercancel\", {1}, {?2}))"); CompiledName("addEventListener1491")>]
            member __.addEventListener_mspointercancel(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgestureend\", {1}, {?2}))"); CompiledName("addEventListener1492")>]
            member __.addEventListener_msgestureend(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msgesturetap\", {1}, {?2}))"); CompiledName("addEventListener1493")>]
            member __.addEventListener_msgesturetap(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerout\", {1}, {?2}))"); CompiledName("addEventListener1494")>]
            member __.addEventListener_mspointerout(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"msinertiastart\", {1}, {?2}))"); CompiledName("addEventListener1495")>]
            member __.addEventListener_msinertiastart(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerover\", {1}, {?2}))"); CompiledName("addEventListener1496")>]
            member __.addEventListener_mspointerover(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"popstate\", {1}, {?2}))"); CompiledName("addEventListener1497")>]
            member __.addEventListener_popstate(listener : System.Func<FunScript.TypeScript.PopStateEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerup\", {1}, {?2}))"); CompiledName("addEventListener1498")>]
            member __.addEventListener_mspointerup(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pageshow\", {1}, {?2}))"); CompiledName("addEventListener1499")>]
            member __.addEventListener_pageshow(listener : System.Func<FunScript.TypeScript.PageTransitionEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"devicemotion\", {1}, {?2}))"); CompiledName("addEventListener1500")>]
            member __.addEventListener_devicemotion(listener : System.Func<FunScript.TypeScript.DeviceMotionEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"deviceorientation\", {1}, {?2}))"); CompiledName("addEventListener1501")>]
            member __.addEventListener_deviceorientation(listener : System.Func<FunScript.TypeScript.DeviceOrientationEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerenter\", {1}, {?2}))"); CompiledName("addEventListener1502")>]
            member __.addEventListener_mspointerenter(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"pagehide\", {1}, {?2}))"); CompiledName("addEventListener1503")>]
            member __.addEventListener_pagehide(listener : System.Func<FunScript.TypeScript.PageTransitionEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"mspointerleave\", {1}, {?2}))"); CompiledName("addEventListener1504")>]
            member __.addEventListener_mspointerleave(listener : System.Func<obj, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener({1}, {2}, {?3}))"); CompiledName("addEventListener1505")>]
            member __.addEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener = {1})"); CompiledName("addEventListener1505Aux")>]
            member __.``addEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_918 =


    type FunScript.TypeScript.WindowBase64 with 

            [<FunScript.JSEmitInline("({0}.btoa({1}))"); CompiledName("btoa1")>]
            member __.btoa(rawString : string) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.btoa = {1})"); CompiledName("btoa1Aux")>]
            member __.``btoa <-``(func : System.Func<string, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.atob({1}))"); CompiledName("atob1")>]
            member __.atob(encodedString : string) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.atob = {1})"); CompiledName("atob1Aux")>]
            member __.``atob <-``(func : System.Func<string, string>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_919 =


    type FunScript.TypeScript.WindowConsole with 

            [<FunScript.JSEmitInline("({0}.console)"); CompiledName("console1")>]
            member __.console with get() : FunScript.TypeScript.Console = failwith "never" and set (v : FunScript.TypeScript.Console) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_920 =


    type FunScript.TypeScript.WindowLocalStorage with 

            [<FunScript.JSEmitInline("({0}.localStorage)"); CompiledName("localStorage1")>]
            member __.localStorage with get() : FunScript.TypeScript.Storage = failwith "never" and set (v : FunScript.TypeScript.Storage) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_921 =


    type FunScript.TypeScript.WindowModal with 

            [<FunScript.JSEmitInline("({0}.dialogArguments)"); CompiledName("dialogArguments")>]
            member __.dialogArguments with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.returnValue)"); CompiledName("returnValue2")>]
            member __.returnValue with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_922 =


    type FunScript.TypeScript.WindowSessionStorage with 

            [<FunScript.JSEmitInline("({0}.sessionStorage)"); CompiledName("sessionStorage1")>]
            member __.sessionStorage with get() : FunScript.TypeScript.Storage = failwith "never" and set (v : FunScript.TypeScript.Storage) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_923 =


    type FunScript.TypeScript.WindowTimers with 

            [<FunScript.JSEmitInline("({0}.clearTimeout({1}))"); CompiledName("clearTimeout1")>]
            member __.clearTimeout(handle : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clearTimeout = {1})"); CompiledName("clearTimeout1Aux")>]
            member __.``clearTimeout <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setTimeout({1}, {?2}))"); CompiledName("setTimeout2")>]
            member __.setTimeout(handler : obj, ?timeout : obj) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.setTimeout = {1})"); CompiledName("setTimeout2Aux")>]
            member __.``setTimeout <-``(func : System.Func<obj, obj, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setTimeout({1}, {2}, {3...}))"); CompiledName("setTimeout3")>]
            member __.setTimeout(handler : obj, timeout : obj, [<System.ParamArray>] args : array<obj>) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.clearInterval({1}))"); CompiledName("clearInterval1")>]
            member __.clearInterval(handle : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clearInterval = {1})"); CompiledName("clearInterval1Aux")>]
            member __.``clearInterval <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setInterval({1}, {?2}))"); CompiledName("setInterval2")>]
            member __.setInterval(handler : obj, ?timeout : obj) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.setInterval = {1})"); CompiledName("setInterval2Aux")>]
            member __.``setInterval <-``(func : System.Func<obj, obj, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setInterval({1}, {2}, {3...}))"); CompiledName("setInterval3")>]
            member __.setInterval(handler : obj, timeout : obj, [<System.ParamArray>] args : array<obj>) : float = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_924 =


    type FunScript.TypeScript.WindowTimersExtension with 

            [<FunScript.JSEmitInline("({0}.msSetImmediate({1}))"); CompiledName("msSetImmediate2")>]
            member __.msSetImmediate(expression : obj) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.msSetImmediate = {1})"); CompiledName("msSetImmediate2Aux")>]
            member __.``msSetImmediate <-``(func : System.Func<obj, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msSetImmediate({1}, {2...}))"); CompiledName("msSetImmediate3")>]
            member __.msSetImmediateOverload2(expression : obj, [<System.ParamArray>] args : array<obj>) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.clearImmediate({1}))"); CompiledName("clearImmediate1")>]
            member __.clearImmediate(handle : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.clearImmediate = {1})"); CompiledName("clearImmediate1Aux")>]
            member __.``clearImmediate <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msClearImmediate({1}))"); CompiledName("msClearImmediate1")>]
            member __.msClearImmediate(handle : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msClearImmediate = {1})"); CompiledName("msClearImmediate1Aux")>]
            member __.``msClearImmediate <-``(func : System.Func<float, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setImmediate({1}))"); CompiledName("setImmediate2")>]
            member __.setImmediate(expression : obj) : float = failwith "never"
            [<FunScript.JSEmitInline("({0}.setImmediate = {1})"); CompiledName("setImmediate2Aux")>]
            member __.``setImmediate <-``(func : System.Func<obj, float>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setImmediate({1}, {2...}))"); CompiledName("setImmediate3")>]
            member __.setImmediateOverload2(expression : obj, [<System.ParamArray>] args : array<obj>) : float = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_925 =


    type FunScript.TypeScript.Worker with 

            [<FunScript.JSEmitInline("({0}.onmessage)"); CompiledName("onmessage6")>]
            member __.onmessage with get() : System.Func<FunScript.TypeScript.MessageEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.MessageEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.postMessage({1}, {?2}))"); CompiledName("postMessage4")>]
            member __.postMessage(message : obj, ?ports : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.postMessage = {1})"); CompiledName("postMessage4Aux")>]
            member __.``postMessage <-``(func : System.Func<obj, obj, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.terminate())"); CompiledName("terminate")>]
            member __.terminate() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.terminate = {1})"); CompiledName("terminateAux")>]
            member __.``terminate <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"error\", {1}, {?2}))"); CompiledName("addEventListener1506")>]
            member __.addEventListener_error(listener : System.Func<FunScript.TypeScript.ErrorEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"message\", {1}, {?2}))"); CompiledName("addEventListener1507")>]
            member __.addEventListener_message(listener : System.Func<FunScript.TypeScript.MessageEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener({1}, {2}, {?3}))"); CompiledName("addEventListener1508")>]
            member __.addEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener = {1})"); CompiledName("addEventListener1508Aux")>]
            member __.``addEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_926 =


    type FunScript.TypeScript.XDomainRequest with 

            [<FunScript.JSEmitInline("({0}.timeout)"); CompiledName("timeout1")>]
            member __.timeout with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onerror)"); CompiledName("onerror18")>]
            member __.onerror with get() : System.Func<FunScript.TypeScript.ErrorEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.ErrorEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onload)"); CompiledName("onload11")>]
            member __.onload with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onprogress)"); CompiledName("onprogress7")>]
            member __.onprogress with get() : System.Func<FunScript.TypeScript.ProgressEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.ProgressEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ontimeout)"); CompiledName("ontimeout")>]
            member __.ontimeout with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.responseText)"); CompiledName("responseText")>]
            member __.responseText with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.contentType)"); CompiledName("contentType")>]
            member __.contentType with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.open({1}, {2}))"); CompiledName("_open4")>]
            member __._open(_method : string, url : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.open = {1})"); CompiledName("_open4Aux")>]
            member __.``_open <-``(func : System.Func<string, string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.abort())"); CompiledName("abort5")>]
            member __.abort() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.abort = {1})"); CompiledName("abort5Aux")>]
            member __.``abort <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.send({?1}))"); CompiledName("send1")>]
            member __.send(?data : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.send = {1})"); CompiledName("send1Aux")>]
            member __.``send <-``(func : System.Func<obj, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"error\", {1}, {?2}))"); CompiledName("addEventListener1509")>]
            member __.addEventListener_error(listener : System.Func<FunScript.TypeScript.ErrorEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"load\", {1}, {?2}))"); CompiledName("addEventListener1510")>]
            member __.addEventListener_load(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"progress\", {1}, {?2}))"); CompiledName("addEventListener1511")>]
            member __.addEventListener_progress(listener : System.Func<FunScript.TypeScript.ProgressEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"timeout\", {1}, {?2}))"); CompiledName("addEventListener1512")>]
            member __.addEventListener_timeout(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener({1}, {2}, {?3}))"); CompiledName("addEventListener1513")>]
            member __.addEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener = {1})"); CompiledName("addEventListener1513Aux")>]
            member __.``addEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_927 =


    type FunScript.TypeScript.XMLHttpRequest with 

            [<FunScript.JSEmitInline("({0}.responseBody)"); CompiledName("responseBody")>]
            member __.responseBody with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.status)"); CompiledName("status7")>]
            member __.status with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.readyState)"); CompiledName("readyState13")>]
            member __.readyState with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.responseText)"); CompiledName("responseText1")>]
            member __.responseText with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.responseXML)"); CompiledName("responseXML")>]
            member __.responseXML with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ontimeout)"); CompiledName("ontimeout1")>]
            member __.ontimeout with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.statusText)"); CompiledName("statusText")>]
            member __.statusText with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onreadystatechange)"); CompiledName("onreadystatechange5")>]
            member __.onreadystatechange with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.timeout)"); CompiledName("timeout2")>]
            member __.timeout with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onload)"); CompiledName("onload12")>]
            member __.onload with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.response)"); CompiledName("response")>]
            member __.response with get() : obj = failwith "never" and set (v : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.withCredentials)"); CompiledName("withCredentials")>]
            member __.withCredentials with get() : bool = failwith "never" and set (v : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onprogress)"); CompiledName("onprogress8")>]
            member __.onprogress with get() : System.Func<FunScript.TypeScript.ProgressEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.ProgressEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onabort)"); CompiledName("onabort9")>]
            member __.onabort with get() : System.Func<FunScript.TypeScript.UIEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.UIEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.responseType)"); CompiledName("responseType")>]
            member __.responseType with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onloadend)"); CompiledName("onloadend1")>]
            member __.onloadend with get() : System.Func<FunScript.TypeScript.ProgressEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.ProgressEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.upload)"); CompiledName("upload")>]
            member __.upload with get() : FunScript.TypeScript.XMLHttpRequestEventTarget = failwith "never" and set (v : FunScript.TypeScript.XMLHttpRequestEventTarget) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onerror)"); CompiledName("onerror19")>]
            member __.onerror with get() : System.Func<FunScript.TypeScript.ErrorEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.ErrorEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onloadstart)"); CompiledName("onloadstart5")>]
            member __.onloadstart with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msCaching)"); CompiledName("msCaching")>]
            member __.msCaching with get() : string = failwith "never" and set (v : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.open({1}, {2}, {?3}, {?4}, {?5}))"); CompiledName("_open5")>]
            member __._open(_method : string, url : string, ?_async : bool, ?user : string, ?password : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.open = {1})"); CompiledName("_open5Aux")>]
            member __.``_open <-``(func : System.Func<string, string, bool, string, string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.send({?1}))"); CompiledName("send2")>]
            member __.send(?data : obj) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.send = {1})"); CompiledName("send2Aux")>]
            member __.``send <-``(func : System.Func<obj, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.abort())"); CompiledName("abort6")>]
            member __.abort() : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.abort = {1})"); CompiledName("abort6Aux")>]
            member __.``abort <-``(func : System.Func<unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getAllResponseHeaders())"); CompiledName("getAllResponseHeaders")>]
            member __.getAllResponseHeaders() : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.getAllResponseHeaders = {1})"); CompiledName("getAllResponseHeadersAux")>]
            member __.``getAllResponseHeaders <-``(func : System.Func<string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setRequestHeader({1}, {2}))"); CompiledName("setRequestHeader")>]
            member __.setRequestHeader(header : string, value : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.setRequestHeader = {1})"); CompiledName("setRequestHeaderAux")>]
            member __.``setRequestHeader <-``(func : System.Func<string, string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.getResponseHeader({1}))"); CompiledName("getResponseHeader")>]
            member __.getResponseHeader(header : string) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.getResponseHeader = {1})"); CompiledName("getResponseHeaderAux")>]
            member __.``getResponseHeader <-``(func : System.Func<string, string>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.msCachingEnabled())"); CompiledName("msCachingEnabled")>]
            member __.msCachingEnabled() : bool = failwith "never"
            [<FunScript.JSEmitInline("({0}.msCachingEnabled = {1})"); CompiledName("msCachingEnabledAux")>]
            member __.``msCachingEnabled <-``(func : System.Func<bool>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.overrideMimeType({1}))"); CompiledName("overrideMimeType")>]
            member __.overrideMimeType(mime : string) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.overrideMimeType = {1})"); CompiledName("overrideMimeTypeAux")>]
            member __.``overrideMimeType <-``(func : System.Func<string, unit>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.LOADING)"); CompiledName("LOADING6")>]
            member __.LOADING with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.DONE)"); CompiledName("DONE2")>]
            member __.DONE with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.UNSENT)"); CompiledName("UNSENT1")>]
            member __.UNSENT with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.OPENED)"); CompiledName("OPENED1")>]
            member __.OPENED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.HEADERS_RECEIVED)"); CompiledName("HEADERS_RECEIVED1")>]
            member __.HEADERS_RECEIVED with get() : float = failwith "never" and set (v : float) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"timeout\", {1}, {?2}))"); CompiledName("addEventListener1514")>]
            member __.addEventListener_timeout(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"readystatechange\", {1}, {?2}))"); CompiledName("addEventListener1515")>]
            member __.addEventListener_readystatechange(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"load\", {1}, {?2}))"); CompiledName("addEventListener1516")>]
            member __.addEventListener_load(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"progress\", {1}, {?2}))"); CompiledName("addEventListener1517")>]
            member __.addEventListener_progress(listener : System.Func<FunScript.TypeScript.ProgressEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"abort\", {1}, {?2}))"); CompiledName("addEventListener1518")>]
            member __.addEventListener_abort(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"loadend\", {1}, {?2}))"); CompiledName("addEventListener1519")>]
            member __.addEventListener_loadend(listener : System.Func<FunScript.TypeScript.ProgressEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"error\", {1}, {?2}))"); CompiledName("addEventListener1520")>]
            member __.addEventListener_error(listener : System.Func<FunScript.TypeScript.ErrorEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"loadstart\", {1}, {?2}))"); CompiledName("addEventListener1521")>]
            member __.addEventListener_loadstart(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener({1}, {2}, {?3}))"); CompiledName("addEventListener1522")>]
            member __.addEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener = {1})"); CompiledName("addEventListener1522Aux")>]
            member __.``addEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_928 =


    type FunScript.TypeScript.XMLHttpRequestEventTarget with 

            [<FunScript.JSEmitInline("({0}.onprogress)"); CompiledName("onprogress9")>]
            member __.onprogress with get() : System.Func<FunScript.TypeScript.ProgressEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.ProgressEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onerror)"); CompiledName("onerror20")>]
            member __.onerror with get() : System.Func<FunScript.TypeScript.ErrorEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.ErrorEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onload)"); CompiledName("onload13")>]
            member __.onload with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.ontimeout)"); CompiledName("ontimeout2")>]
            member __.ontimeout with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onabort)"); CompiledName("onabort10")>]
            member __.onabort with get() : System.Func<FunScript.TypeScript.UIEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.UIEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onloadstart)"); CompiledName("onloadstart6")>]
            member __.onloadstart with get() : System.Func<FunScript.TypeScript.Event, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.Event, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.onloadend)"); CompiledName("onloadend2")>]
            member __.onloadend with get() : System.Func<FunScript.TypeScript.ProgressEvent, obj> = failwith "never" and set (v : System.Func<FunScript.TypeScript.ProgressEvent, obj>) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"progress\", {1}, {?2}))"); CompiledName("addEventListener1523")>]
            member __.addEventListener_progress(listener : System.Func<FunScript.TypeScript.ProgressEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"error\", {1}, {?2}))"); CompiledName("addEventListener1524")>]
            member __.addEventListener_error(listener : System.Func<FunScript.TypeScript.ErrorEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"load\", {1}, {?2}))"); CompiledName("addEventListener1525")>]
            member __.addEventListener_load(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"timeout\", {1}, {?2}))"); CompiledName("addEventListener1526")>]
            member __.addEventListener_timeout(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"abort\", {1}, {?2}))"); CompiledName("addEventListener1527")>]
            member __.addEventListener_abort(listener : System.Func<FunScript.TypeScript.UIEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"loadstart\", {1}, {?2}))"); CompiledName("addEventListener1528")>]
            member __.addEventListener_loadstart(listener : System.Func<FunScript.TypeScript.Event, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener(\"loadend\", {1}, {?2}))"); CompiledName("addEventListener1529")>]
            member __.addEventListener_loadend(listener : System.Func<FunScript.TypeScript.ProgressEvent, obj>, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener({1}, {2}, {?3}))"); CompiledName("addEventListener1530")>]
            member __.addEventListener(_type : string, listener : FunScript.TypeScript.EventListenerDelegate, ?useCapture : bool) : unit = failwith "never"
            [<FunScript.JSEmitInline("({0}.addEventListener = {1})"); CompiledName("addEventListener1530Aux")>]
            member __.``addEventListener <-``(func : System.Func<string, FunScript.TypeScript.EventListenerDelegate, bool, unit>) : unit = failwith "never"

namespace FunScript.TypeScript

[<AutoOpen>]
module TypeExtensions_lib_929 =


    type FunScript.TypeScript.XMLSerializer with 

            [<FunScript.JSEmitInline("({0}.serializeToString({1}))"); CompiledName("serializeToString")>]
            member __.serializeToString(target : FunScript.TypeScript.Node) : string = failwith "never"
            [<FunScript.JSEmitInline("({0}.serializeToString = {1})"); CompiledName("serializeToStringAux")>]
            member __.``serializeToString <-``(func : System.Func<FunScript.TypeScript.Node, string>) : unit = failwith "never"
